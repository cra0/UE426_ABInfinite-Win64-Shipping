#pragma once
#include "common.h"
namespace SDK
{


    struct FAKWaapiJsonObject //ScriptStruct AkAudio.AKWaapiJsonObject
    {
    public:


    };

    struct FDefault__ScriptStruct //ScriptStruct CoreUObject.Default__ScriptStruct
    {
    public:


    };

    struct FAkWaapiSubscriptionId //ScriptStruct AkAudio.AkWaapiSubscriptionId
    {
    public:


    };

    struct FJoinabilitySettings //ScriptStruct CoreUObject.JoinabilitySettings
    {
    //Children Prop Count (Fields): 7
    public:

        struct FName SessionName; // 0x0
        bool bPublicSearchable; // 0x8
        bool bAllowInvites; // 0x9
        bool bJoinViaPresence; // 0xa
        bool bJoinViaPresenceFriendsOnly; // 0xb
        int32_t MaxPlayers; // 0xc
        int32_t MaxPartySize; // 0x10

    };

    struct FUniqueNetIdWrapper //ScriptStruct CoreUObject.UniqueNetIdWrapper
    {
    public:


    };

    struct FGuid //ScriptStruct CoreUObject.Guid
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t A; // 0x0
        int32_t B; // 0x4
        int32_t C; // 0x8
        int32_t D; // 0xc

    };

    struct FVector //ScriptStruct CoreUObject.Vector
    {
    //Children Prop Count (Fields): 3
    public:

        float X; // 0x0
        float Y; // 0x4
        float Z; // 0x8

    };

    struct FVector4 //ScriptStruct CoreUObject.Vector4
    {
    //Children Prop Count (Fields): 4
    public:

        float X; // 0x0
        float Y; // 0x4
        float Z; // 0x8
        float W; // 0xc

    };

    struct FVector2D //ScriptStruct CoreUObject.Vector2D
    {
    //Children Prop Count (Fields): 2
    public:

        float X; // 0x0
        float Y; // 0x4

    };

    struct FTwoVectors //ScriptStruct CoreUObject.TwoVectors
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector v1; // 0x0
        struct FVector v2; // 0xc

    };

    struct FPlane : FVector //ScriptStruct CoreUObject.Plane
    {
    //Children Prop Count (Fields): 1
    public:

        float W; // 0xc

    };

    struct FRotator //ScriptStruct CoreUObject.Rotator
    {
    //Children Prop Count (Fields): 3
    public:

        float Pitch; // 0x0
        float Yaw; // 0x4
        float Roll; // 0x8

    };

    struct FQuat //ScriptStruct CoreUObject.Quat
    {
    //Children Prop Count (Fields): 4
    public:

        float X; // 0x0
        float Y; // 0x4
        float Z; // 0x8
        float W; // 0xc

    };

    struct FPackedNormal //ScriptStruct CoreUObject.PackedNormal
    {
    //Children Prop Count (Fields): 4
    public:

        char X; // 0x0
        char Y; // 0x1
        char Z; // 0x2
        char W; // 0x3

    };

    struct FPackedRGB10A2N //ScriptStruct CoreUObject.PackedRGB10A2N
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t Packed; // 0x0

    };

    struct FPackedRGBA16N //ScriptStruct CoreUObject.PackedRGBA16N
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t XY; // 0x0
        int32_t ZW; // 0x4

    };

    struct FIntPoint //ScriptStruct CoreUObject.IntPoint
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t X; // 0x0
        int32_t Y; // 0x4

    };

    struct FIntVector //ScriptStruct CoreUObject.IntVector
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t X; // 0x0
        int32_t Y; // 0x4
        int32_t Z; // 0x8

    };

    struct FColor //ScriptStruct CoreUObject.Color
    {
    //Children Prop Count (Fields): 4
    public:

        char B; // 0x0
        char G; // 0x1
        char R; // 0x2
        char A; // 0x3

    };

    struct FLinearColor //ScriptStruct CoreUObject.LinearColor
    {
    //Children Prop Count (Fields): 4
    public:

        float R; // 0x0
        float G; // 0x4
        float B; // 0x8
        float A; // 0xc

    };

    struct FBox //ScriptStruct CoreUObject.Box
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Min; // 0x0
        struct FVector Max; // 0xc
        char IsValid; // 0x18

    };

    struct FBox2D //ScriptStruct CoreUObject.Box2D
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector2D Min; // 0x0
        struct FVector2D Max; // 0x8
        char bIsValid; // 0x10

    };

    struct FBoxSphereBounds //ScriptStruct CoreUObject.BoxSphereBounds
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Origin; // 0x0
        struct FVector BoxExtent; // 0xc
        float SphereRadius; // 0x18

    };

    struct FOrientedBox //ScriptStruct CoreUObject.OrientedBox
    {
    //Children Prop Count (Fields): 7
    public:

        struct FVector Center; // 0x0
        struct FVector AxisX; // 0xc
        struct FVector AxisY; // 0x18
        struct FVector AxisZ; // 0x24
        float ExtentX; // 0x30
        float ExtentY; // 0x34
        float ExtentZ; // 0x38

    };

    struct FMatrix //ScriptStruct CoreUObject.Matrix
    {
    //Children Prop Count (Fields): 4
    public:

        struct FPlane XPlane; // 0x0
        struct FPlane YPlane; // 0x10
        struct FPlane ZPlane; // 0x20
        struct FPlane WPlane; // 0x30

    };

    struct FInterpCurvePointFloat //ScriptStruct CoreUObject.InterpCurvePointFloat
    {
    //Children Prop Count (Fields): 5
    public:

        float InVal; // 0x0
        float OutVal; // 0x4
        float ArriveTangent; // 0x8
        float LeaveTangent; // 0xc
        enum class EInterpCurveMode InterpMode; // 0x10

    };

    struct FInterpCurveFloat //ScriptStruct CoreUObject.InterpCurveFloat
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FInterpCurvePointFloat> Points; // 0x0
        bool bIsLooped; // 0x10
        float LoopKeyOffset; // 0x14

    };

    struct FInterpCurvePointVector2D //ScriptStruct CoreUObject.InterpCurvePointVector2D
    {
    //Children Prop Count (Fields): 5
    public:

        float InVal; // 0x0
        struct FVector2D OutVal; // 0x4
        struct FVector2D ArriveTangent; // 0xc
        struct FVector2D LeaveTangent; // 0x14
        enum class EInterpCurveMode InterpMode; // 0x1c

    };

    struct FInterpCurveVector2D //ScriptStruct CoreUObject.InterpCurveVector2D
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FInterpCurvePointVector2D> Points; // 0x0
        bool bIsLooped; // 0x10
        float LoopKeyOffset; // 0x14

    };

    struct FInterpCurvePointVector //ScriptStruct CoreUObject.InterpCurvePointVector
    {
    //Children Prop Count (Fields): 5
    public:

        float InVal; // 0x0
        struct FVector OutVal; // 0x4
        struct FVector ArriveTangent; // 0x10
        struct FVector LeaveTangent; // 0x1c
        enum class EInterpCurveMode InterpMode; // 0x28

    };

    struct FInterpCurveVector //ScriptStruct CoreUObject.InterpCurveVector
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FInterpCurvePointVector> Points; // 0x0
        bool bIsLooped; // 0x10
        float LoopKeyOffset; // 0x14

    };

    struct FInterpCurvePointQuat //ScriptStruct CoreUObject.InterpCurvePointQuat
    {
    //Children Prop Count (Fields): 5
    public:

        float InVal; // 0x0
        struct FQuat OutVal; // 0x10
        struct FQuat ArriveTangent; // 0x20
        struct FQuat LeaveTangent; // 0x30
        enum class EInterpCurveMode InterpMode; // 0x40

    };

    struct FInterpCurveQuat //ScriptStruct CoreUObject.InterpCurveQuat
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FInterpCurvePointQuat> Points; // 0x0
        bool bIsLooped; // 0x10
        float LoopKeyOffset; // 0x14

    };

    struct FInterpCurvePointTwoVectors //ScriptStruct CoreUObject.InterpCurvePointTwoVectors
    {
    //Children Prop Count (Fields): 5
    public:

        float InVal; // 0x0
        struct FTwoVectors OutVal; // 0x4
        struct FTwoVectors ArriveTangent; // 0x1c
        struct FTwoVectors LeaveTangent; // 0x34
        enum class EInterpCurveMode InterpMode; // 0x4c

    };

    struct FInterpCurveTwoVectors //ScriptStruct CoreUObject.InterpCurveTwoVectors
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FInterpCurvePointTwoVectors> Points; // 0x0
        bool bIsLooped; // 0x10
        float LoopKeyOffset; // 0x14

    };

    struct FInterpCurvePointLinearColor //ScriptStruct CoreUObject.InterpCurvePointLinearColor
    {
    //Children Prop Count (Fields): 5
    public:

        float InVal; // 0x0
        struct FLinearColor OutVal; // 0x4
        struct FLinearColor ArriveTangent; // 0x14
        struct FLinearColor LeaveTangent; // 0x24
        enum class EInterpCurveMode InterpMode; // 0x34

    };

    struct FInterpCurveLinearColor //ScriptStruct CoreUObject.InterpCurveLinearColor
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FInterpCurvePointLinearColor> Points; // 0x0
        bool bIsLooped; // 0x10
        float LoopKeyOffset; // 0x14

    };

    struct FTransform //ScriptStruct CoreUObject.Transform
    {
    //Children Prop Count (Fields): 3
    public:

        struct FQuat Rotation; // 0x0
        struct FVector Translation; // 0x10
        struct FVector Scale3D; // 0x20

    };

    struct FRandomStream //ScriptStruct CoreUObject.RandomStream
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t InitialSeed; // 0x0
        int32_t Seed; // 0x4

    };

    struct FDateTime //ScriptStruct CoreUObject.DateTime
    {
    public:


    };

    struct FFrameNumber //ScriptStruct CoreUObject.FrameNumber
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t Value; // 0x0

    };

    struct FFrameRate //ScriptStruct CoreUObject.FrameRate
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t Numerator; // 0x0
        int32_t Denominator; // 0x4

    };

    struct FFrameTime //ScriptStruct CoreUObject.FrameTime
    {
    //Children Prop Count (Fields): 2
    public:

        struct FFrameNumber FrameNumber; // 0x0
        float SubFrame; // 0x4

    };

    struct FQualifiedFrameTime //ScriptStruct CoreUObject.QualifiedFrameTime
    {
    //Children Prop Count (Fields): 2
    public:

        struct FFrameTime Time; // 0x0
        struct FFrameRate Rate; // 0x8

    };

    struct FTimecode //ScriptStruct CoreUObject.Timecode
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t Hours; // 0x0
        int32_t Minutes; // 0x4
        int32_t Seconds; // 0x8
        int32_t Frames; // 0xc
        bool bDropFrameFormat; // 0x10

    };

    struct FTimespan //ScriptStruct CoreUObject.Timespan
    {
    public:


    };

    struct FSoftObjectPath //ScriptStruct CoreUObject.SoftObjectPath
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName AssetPathName; // 0x0
        struct FString SubPathString; // 0x8

    };

    struct FSoftClassPath : FSoftObjectPath //ScriptStruct CoreUObject.SoftClassPath
    {
    public:


    };

    struct FPrimaryAssetType //ScriptStruct CoreUObject.PrimaryAssetType
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName Name; // 0x0

    };

    struct FPrimaryAssetId //ScriptStruct CoreUObject.PrimaryAssetId
    {
    //Children Prop Count (Fields): 2
    public:

        struct FPrimaryAssetType PrimaryAssetType; // 0x0
        struct FName PrimaryAssetName; // 0x8

    };

    struct FFallbackStruct //ScriptStruct CoreUObject.FallbackStruct
    {
    public:


    };

    struct FFloatRangeBound //ScriptStruct CoreUObject.FloatRangeBound
    {
    //Children Prop Count (Fields): 2
    public:

        enum class ERangeBoundTypes Type; // 0x0
        float Value; // 0x4

    };

    struct FFloatRange //ScriptStruct CoreUObject.FloatRange
    {
    //Children Prop Count (Fields): 2
    public:

        struct FFloatRangeBound LowerBound; // 0x0
        struct FFloatRangeBound UpperBound; // 0x8

    };

    struct FInt32RangeBound //ScriptStruct CoreUObject.Int32RangeBound
    {
    //Children Prop Count (Fields): 2
    public:

        enum class ERangeBoundTypes Type; // 0x0
        int32_t Value; // 0x4

    };

    struct FInt32Range //ScriptStruct CoreUObject.Int32Range
    {
    //Children Prop Count (Fields): 2
    public:

        struct FInt32RangeBound LowerBound; // 0x0
        struct FInt32RangeBound UpperBound; // 0x8

    };

    struct FFrameNumberRangeBound //ScriptStruct CoreUObject.FrameNumberRangeBound
    {
    //Children Prop Count (Fields): 2
    public:

        enum class ERangeBoundTypes Type; // 0x0
        struct FFrameNumber Value; // 0x4

    };

    struct FFrameNumberRange //ScriptStruct CoreUObject.FrameNumberRange
    {
    //Children Prop Count (Fields): 2
    public:

        struct FFrameNumberRangeBound LowerBound; // 0x0
        struct FFrameNumberRangeBound UpperBound; // 0x8

    };

    struct FFloatInterval //ScriptStruct CoreUObject.FloatInterval
    {
    //Children Prop Count (Fields): 2
    public:

        float Min; // 0x0
        float Max; // 0x4

    };

    struct FInt32Interval //ScriptStruct CoreUObject.Int32Interval
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t Min; // 0x0
        int32_t Max; // 0x4

    };

    struct FPolyglotTextData //ScriptStruct CoreUObject.PolyglotTextData
    {
    //Children Prop Count (Fields): 8
    public:

        enum class ELocalizedTextSourceCategory Category; // 0x0
        struct FString NativeCulture; // 0x8
        struct FString Namespace; // 0x18
        struct FString Key; // 0x28
        struct FString NativeString; // 0x38
        struct TMap<struct FString, struct FString> LocalizedStrings; // 0x48
        bool bIsMinimalPatch; // 0x98
        struct FText CachedText; // 0xa0

    };

    struct FAutomationEvent //ScriptStruct CoreUObject.AutomationEvent
    {
    //Children Prop Count (Fields): 4
    public:

        enum class EAutomationEventType Type; // 0x0
        struct FString Message; // 0x8
        struct FString Context; // 0x18
        struct FGuid Artifact; // 0x28

    };

    struct FAutomationExecutionEntry //ScriptStruct CoreUObject.AutomationExecutionEntry
    {
    //Children Prop Count (Fields): 4
    public:

        struct FAutomationEvent Event; // 0x0
        struct FString Filename; // 0x38
        int32_t LineNumber; // 0x48
        struct FDateTime Timestamp; // 0x50

    };

    struct FARFilter //ScriptStruct CoreUObject.ARFilter
    {
    //Children Prop Count (Fields): 8
    public:

        struct TArray<struct FName> PackageNames; // 0x0
        struct TArray<struct FName> PackagePaths; // 0x10
        struct TArray<struct FName> ObjectPaths; // 0x20
        struct TArray<struct FName> ClassNames; // 0x30
        struct TSet<struct FName> RecursiveClassesExclusionSet; // 0x90
        bool bRecursivePaths; // 0xe0
        bool bRecursiveClasses; // 0xe1
        bool bIncludeOnlyOnDiskAssets; // 0xe2

    };

    struct FAssetBundleEntry //ScriptStruct CoreUObject.AssetBundleEntry
    {
    //Children Prop Count (Fields): 3
    public:

        struct FPrimaryAssetId BundleScope; // 0x0
        struct FName BundleName; // 0x10
        struct TArray<struct FSoftObjectPath> BundleAssets; // 0x18

    };

    struct FAssetBundleData //ScriptStruct CoreUObject.AssetBundleData
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FAssetBundleEntry> Bundles; // 0x0

    };

    struct FAssetData //ScriptStruct CoreUObject.AssetData
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName ObjectPath; // 0x0
        struct FName PackageName; // 0x8
        struct FName PackagePath; // 0x10
        struct FName AssetName; // 0x18
        struct FName AssetClass; // 0x20

    };

    struct FGameplayTag //ScriptStruct GameplayTags.GameplayTag
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName TagName; // 0x0

    };

    struct FDistributionLookupTable //ScriptStruct Engine.DistributionLookupTable
    {
    //Children Prop Count (Fields): 8
    public:

        float TimeScale; // 0x0
        float TimeBias; // 0x4
        struct TArray<float> Values; // 0x8
        char Op; // 0x18
        char EntryCount; // 0x19
        char EntryStride; // 0x1a
        char SubEntryStride; // 0x1b
        char LockFlag; // 0x1c

    };

    struct FRawDistribution //ScriptStruct Engine.RawDistribution
    {
    //Children Prop Count (Fields): 1
    public:

        struct FDistributionLookupTable Table; // 0x0

    };

    struct FFloatDistribution //ScriptStruct Engine.FloatDistribution
    {
    //Children Prop Count (Fields): 1
    public:

        struct FDistributionLookupTable Table; // 0x0

    };

    struct FVectorDistribution //ScriptStruct Engine.VectorDistribution
    {
    //Children Prop Count (Fields): 1
    public:

        struct FDistributionLookupTable Table; // 0x0

    };

    struct FVector4Distribution //ScriptStruct Engine.Vector4Distribution
    {
    //Children Prop Count (Fields): 1
    public:

        struct FDistributionLookupTable Table; // 0x0

    };

    struct FFloatRK4SpringInterpolator //ScriptStruct Engine.FloatRK4SpringInterpolator
    {
    //Children Prop Count (Fields): 2
    public:

        float StiffnessConstant; // 0x0
        float DampeningRatio; // 0x4

    };

    struct FVectorRK4SpringInterpolator //ScriptStruct Engine.VectorRK4SpringInterpolator
    {
    //Children Prop Count (Fields): 2
    public:

        float StiffnessConstant; // 0x0
        float DampeningRatio; // 0x4

    };

    struct FFormatArgumentData //ScriptStruct Engine.FormatArgumentData
    {
    //Children Prop Count (Fields): 6
    public:

        struct FString ArgumentName; // 0x0
        enum class EFormatArgumentType ArgumentValueType; // 0x10
        struct FText ArgumentValue; // 0x18
        int32_t ArgumentValueInt; // 0x30
        float ArgumentValueFloat; // 0x34
        enum class ETextGender ArgumentValueGender; // 0x38

    };

    struct FExpressionInput //ScriptStruct Engine.ExpressionInput
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t OutputIndex; // 0x0
        struct FName ExpressionName; // 0x4

    };

    struct FMaterialAttributesInput : FExpressionInput //ScriptStruct Engine.MaterialAttributesInput
    {
    //Children Prop Count (Fields): 1
    public:

        uint64_t PropertyConnectedBitmask; // 0x10

    };

    struct FExpressionOutput //ScriptStruct Engine.ExpressionOutput
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName OutputName; // 0x0

    };

    struct FMaterialInput //ScriptStruct Engine.MaterialInput
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t OutputIndex; // 0x0
        struct FName ExpressionName; // 0x4

    };

    struct FColorMaterialInput : FMaterialInput //ScriptStruct Engine.ColorMaterialInput
    {
    public:


    };

    struct FScalarMaterialInput : FMaterialInput //ScriptStruct Engine.ScalarMaterialInput
    {
    public:


    };

    struct FShadingModelMaterialInput : FMaterialInput //ScriptStruct Engine.ShadingModelMaterialInput
    {
    public:


    };

    struct FVectorMaterialInput : FMaterialInput //ScriptStruct Engine.VectorMaterialInput
    {
    public:


    };

    struct FVector2MaterialInput : FMaterialInput //ScriptStruct Engine.Vector2MaterialInput
    {
    public:


    };

    struct FHitResult //ScriptStruct Engine.HitResult
    {
    //Children Prop Count (Fields): 19
    public:

        char bBlockingHit; // 0x0
        char bStartPenetrating; // 0x0
        int32_t FaceIndex; // 0x4
        float Time; // 0x8
        float Distance; // 0xc
        struct FVector_NetQuantize Location; // 0x10
        struct FVector_NetQuantize ImpactPoint; // 0x1c
        struct FVector_NetQuantizeNormal Normal; // 0x28
        struct FVector_NetQuantizeNormal ImpactNormal; // 0x34
        struct FVector_NetQuantize TraceStart; // 0x40
        struct FVector_NetQuantize TraceEnd; // 0x4c
        float PenetrationDepth; // 0x58
        int32_t item; // 0x5c
        char ElementIndex; // 0x60
        struct TWeakObjectPtr<struct UPhysicalMaterial> PhysMaterial; // 0x64
        struct TWeakObjectPtr<struct AActor> Actor; // 0x6c
        struct TWeakObjectPtr<struct UPrimitiveComponent> Component; // 0x74
        struct FName BoneName; // 0x7c
        struct FName MyBoneName; // 0x84

    };

    struct FVector_NetQuantize : FVector //ScriptStruct Engine.Vector_NetQuantize
    {
    public:


    };

    struct FVector_NetQuantizeNormal : FVector //ScriptStruct Engine.Vector_NetQuantizeNormal
    {
    public:


    };

    struct FKey //ScriptStruct InputCore.Key
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName KeyName; // 0x0

    };

    struct FBranchingPointNotifyPayload //ScriptStruct Engine.BranchingPointNotifyPayload
    {
    public:


    };

    struct FSimpleMemberReference //ScriptStruct Engine.SimpleMemberReference
    {
    //Children Prop Count (Fields): 3
    public:

        class UObject* MemberParent; // 0x0
        struct FName MemberName; // 0x8
        struct FGuid MemberGuid; // 0x10

    };

    struct FTickFunction //ScriptStruct Engine.TickFunction
    {
    //Children Prop Count (Fields): 9
    public:

        enum class ETickingGroup TickGroup; // 0x8
        enum class ETickingGroup EndTickGroup; // 0x9
        enum class ESkippableTickMode TickMode; // 0x14
        char bTickEvenWhenPaused; // 0x15
        char bCanEverTick; // 0x15
        char bEnableTickOpt; // 0x15
        char bStartWithTickEnabled; // 0x15
        char bAllowTickOnDedicatedServer; // 0x15
        float TickInterval; // 0x18

    };

    struct FActorComponentTickFunction : FTickFunction //ScriptStruct Engine.ActorComponentTickFunction
    {
    public:


    };

    struct FSubtitleCue //ScriptStruct Engine.SubtitleCue
    {
    //Children Prop Count (Fields): 2
    public:

        struct FText Text; // 0x0
        float Time; // 0x18

    };

    struct FInterpControlPoint //ScriptStruct Engine.InterpControlPoint
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector PositionControlPoint; // 0x0
        bool bPositionIsRelative; // 0xc

    };

    struct FPlatformInterfaceDelegateResult //ScriptStruct Engine.PlatformInterfaceDelegateResult
    {
    //Children Prop Count (Fields): 2
    public:

        bool bSuccessful; // 0x0
        struct FPlatformInterfaceData Data; // 0x8

    };

    struct FPlatformInterfaceData //ScriptStruct Engine.PlatformInterfaceData
    {
    //Children Prop Count (Fields): 6
    public:

        struct FName DataName; // 0x0
        enum class EPlatformInterfaceDataType Type; // 0x8
        int32_t IntValue; // 0xc
        float FloatValue; // 0x10
        struct FString StringValue; // 0x18
        class UObject* ObjectValue; // 0x28

    };

    struct FDebugFloatHistory //ScriptStruct Engine.DebugFloatHistory
    {
    //Children Prop Count (Fields): 5
    public:

        struct TArray<float> Samples; // 0x0
        float MaxSamples; // 0x10
        float MinValue; // 0x14
        float MaxValue; // 0x18
        bool bAutoAdjustMinMax; // 0x1c

    };

    struct FLatentActionInfo //ScriptStruct Engine.LatentActionInfo
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t Linkage; // 0x0
        int32_t UUID; // 0x4
        struct FName ExecutionFunction; // 0x8
        class UObject* CallbackTarget; // 0x10

    };

    struct FTimerHandle //ScriptStruct Engine.TimerHandle
    {
    //Children Prop Count (Fields): 1
    public:

        uint64_t Handle; // 0x0

    };

    struct FCollisionProfileName //ScriptStruct Engine.CollisionProfileName
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName Name; // 0x0

    };

    struct FGenericStruct //ScriptStruct Engine.GenericStruct
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t Data; // 0x0

    };

    struct FUserActivity //ScriptStruct Engine.UserActivity
    {
    //Children Prop Count (Fields): 1
    public:

        struct FString ActionName; // 0x0

    };

    struct FFastArraySerializerItem //ScriptStruct Engine.FastArraySerializerItem
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t ReplicationID; // 0x0
        int32_t ReplicationKey; // 0x4
        int32_t MostRecentArrayReplicationKey; // 0x8

    };

    struct FActiveGameplayEffect : FFastArraySerializerItem //ScriptStruct GameplayAbilities.ActiveGameplayEffect
    {
    //Children Prop Count (Fields): 6
    public:

        struct FGameplayEffectSpec Spec; // 0x18
        struct FPredictionKey PredictionKey; // 0x2b0
        float StartServerWorldTime; // 0x2c0
        float CachedStartServerWorldTime; // 0x2c4
        float StartWorldTime; // 0x2c8
        bool bIsInhibited; // 0x2cc

    };

    struct FPredictionKey //ScriptStruct GameplayAbilities.PredictionKey
    {
    //Children Prop Count (Fields): 5
    public:

        class UPackageMap* PredictiveConnection; // 0x0
        int16_t Current; // 0x8
        int16_t Base; // 0xa
        bool bIsStale; // 0xc
        bool bIsServerInitiated; // 0xd

    };

    struct FGameplayEffectSpec //ScriptStruct GameplayAbilities.GameplayEffectSpec
    {
    //Children Prop Count (Fields): 18
    public:

        class UGameplayEffect* Def; // 0x0
        struct TArray<struct FGameplayEffectModifiedAttribute> ModifiedAttributes; // 0x8
        struct FGameplayEffectAttributeCaptureSpecContainer CapturedRelevantAttributes; // 0x18
        float Duration; // 0x50
        float Period; // 0x54
        float ChanceToApplyToTarget; // 0x58
        struct FTagContainerAggregator CapturedSourceTags; // 0x60
        struct FTagContainerAggregator CapturedTargetTags; // 0xe8
        struct FGameplayTagContainer DynamicGrantedTags; // 0x170
        struct FGameplayTagContainer DynamicAssetTags; // 0x190
        struct TArray<struct FModifierSpec> Modifiers; // 0x1b0
        int32_t StackCount; // 0x1c0
        char bCompletedSourceAttributeCapture; // 0x1c4
        char bCompletedTargetAttributeCapture; // 0x1c4
        char bDurationLocked; // 0x1c4
        struct TArray<struct FGameplayAbilitySpecDef> GrantedAbilitySpecs; // 0x1c8
        struct FGameplayEffectContextHandle EffectContext; // 0x278
        float Level; // 0x290

    };

    struct FGameplayEffectContextHandle //ScriptStruct GameplayAbilities.GameplayEffectContextHandle
    {
    public:


    };

    struct FGameplayAbilitySpecDef //ScriptStruct GameplayAbilities.GameplayAbilitySpecDef
    {
    //Children Prop Count (Fields): 6
    public:

        class UGameplayAbility* Ability; // 0x0
        struct FScalableFloat LevelScalableFloat; // 0x8
        int32_t InputID; // 0x28
        enum class EGameplayEffectGrantedAbilityRemovePolicy RemovalPolicy; // 0x2c
        class UObject* SourceObject; // 0x30
        struct FGameplayAbilitySpecHandle AssignedHandle; // 0x88

    };

    struct FGameplayAbilitySpecHandle //ScriptStruct GameplayAbilities.GameplayAbilitySpecHandle
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t Handle; // 0x0

    };

    struct FScalableFloat //ScriptStruct GameplayAbilities.ScalableFloat
    {
    //Children Prop Count (Fields): 2
    public:

        float Value; // 0x0
        struct FCurveTableRowHandle Curve; // 0x8

    };

    struct FCurveTableRowHandle //ScriptStruct Engine.CurveTableRowHandle
    {
    //Children Prop Count (Fields): 2
    public:

        class UCurveTable* CurveTable; // 0x0
        struct FName RowName; // 0x8

    };

    struct FModifierSpec //ScriptStruct GameplayAbilities.ModifierSpec
    {
    //Children Prop Count (Fields): 3
    public:

        float EvaluatedMagnitude; // 0x0
        char Priority; // 0x4
        enum class EGameplayModsSelector ModsSelector; // 0x5

    };

    struct FGameplayTagContainer //ScriptStruct GameplayTags.GameplayTagContainer
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FGameplayTag> GameplayTags; // 0x0
        struct TArray<struct FGameplayTag> ParentTags; // 0x10

    };

    struct FTagContainerAggregator //ScriptStruct GameplayAbilities.TagContainerAggregator
    {
    //Children Prop Count (Fields): 3
    public:

        struct FGameplayTagContainer CapturedActorTags; // 0x0
        struct FGameplayTagContainer CapturedSpecTags; // 0x20
        struct FGameplayTagContainer ScopedTags; // 0x40

    };

    struct FGameplayEffectAttributeCaptureSpecContainer //ScriptStruct GameplayAbilities.GameplayEffectAttributeCaptureSpecContainer
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FGameplayEffectAttributeCaptureSpec> SourceAttributes; // 0x0
        struct TArray<struct FGameplayEffectAttributeCaptureSpec> TargetAttributes; // 0x10
        bool bHasNonSnapshottedAttributes; // 0x20

    };

    struct FGameplayEffectAttributeCaptureSpec //ScriptStruct GameplayAbilities.GameplayEffectAttributeCaptureSpec
    {
    //Children Prop Count (Fields): 1
    public:

        struct FGameplayEffectAttributeCaptureDefinition BackingDefinition; // 0x0

    };

    struct FGameplayEffectAttributeCaptureDefinition //ScriptStruct GameplayAbilities.GameplayEffectAttributeCaptureDefinition
    {
    //Children Prop Count (Fields): 3
    public:

        struct FGameplayAttribute AttributeToCapture; // 0x0
        enum class EGameplayEffectAttributeCaptureSource AttributeSource; // 0x38
        bool bSnapshot; // 0x39

    };

    struct FGameplayAttribute //ScriptStruct GameplayAbilities.GameplayAttribute
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString AttributeName; // 0x0
        struct TFieldPath<FProperty> Attribute; // 0x10
        class UStruct* AttributeOwner; // 0x30

    };

    struct FGameplayEffectModifiedAttribute //ScriptStruct GameplayAbilities.GameplayEffectModifiedAttribute
    {
    //Children Prop Count (Fields): 2
    public:

        struct FGameplayAttribute Attribute; // 0x0
        float TotalMagnitude; // 0x38

    };

    struct FActiveGameplayEffectHandle //ScriptStruct GameplayAbilities.ActiveGameplayEffectHandle
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t Handle; // 0x0
        bool bPassedFiltersAndWasExecuted; // 0x4

    };

    struct FGameplayEffectSpecHandle //ScriptStruct GameplayAbilities.GameplayEffectSpecHandle
    {
    public:


    };

    struct FGameplayEffectRemovalInfo //ScriptStruct GameplayAbilities.GameplayEffectRemovalInfo
    {
    //Children Prop Count (Fields): 3
    public:

        bool bPrematureRemoval; // 0x0
        int32_t StackCount; // 0x4
        struct FGameplayEffectContextHandle EffectContext; // 0x8

    };

    struct FGameplayEventData //ScriptStruct GameplayAbilities.GameplayEventData
    {
    //Children Prop Count (Fields): 10
    public:

        struct FGameplayTag EventTag; // 0x0
        class AActor* Instigator; // 0x8
        class AActor* Target; // 0x10
        class UObject* OptionalObject; // 0x18
        class UObject* OptionalObject2; // 0x20
        struct FGameplayEffectContextHandle ContextHandle; // 0x28
        struct FGameplayTagContainer InstigatorTags; // 0x40
        struct FGameplayTagContainer TargetTags; // 0x60
        float EventMagnitude; // 0x80
        struct FGameplayAbilityTargetDataHandle TargetData; // 0x88

    };

    struct FGameplayAbilityTargetDataHandle //ScriptStruct GameplayAbilities.GameplayAbilityTargetDataHandle
    {
    public:


    };

    struct FGameplayResourceSet //ScriptStruct GameplayTasks.GameplayResourceSet
    {
    public:


    };

    struct FGameplayAbilityActivationInfo //ScriptStruct GameplayAbilities.GameplayAbilityActivationInfo
    {
    //Children Prop Count (Fields): 3
    public:

        enum class EGameplayAbilityActivationMode ActivationMode; // 0x0
        char bCanBeEndedByOtherInstance; // 0x1
        struct FPredictionKey PredictionKeyWhenActivated; // 0x8

    };

    struct FGameplayEffectQuery //ScriptStruct GameplayAbilities.GameplayEffectQuery
    {
    //Children Prop Count (Fields): 7
    public:

        struct FDelegate CustomMatchDelegate_BP; // 0x10
        struct FGameplayTagQuery OwningTagQuery; // 0x20
        struct FGameplayTagQuery EffectTagQuery; // 0x68
        struct FGameplayTagQuery SourceTagQuery; // 0xb0
        struct FGameplayAttribute ModifyingAttribute; // 0xf8
        class UObject* EffectSource; // 0x130
        class UGameplayEffect* EffectDefinition; // 0x138

    };

    struct FGameplayTagQuery //ScriptStruct GameplayTags.GameplayTagQuery
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t TokenStreamVersion; // 0x0
        struct TArray<struct FGameplayTag> TagDictionary; // 0x8
        struct TArray<char> QueryTokenStream; // 0x18
        struct FString UserDescription; // 0x28
        struct FString AutoDescription; // 0x38

    };

    struct FGameplayCueParameters //ScriptStruct GameplayAbilities.GameplayCueParameters
    {
    //Children Prop Count (Fields): 16
    public:

        float NormalizedMagnitude; // 0x0
        float RawMagnitude; // 0x4
        struct FGameplayEffectContextHandle EffectContext; // 0x8
        struct FGameplayTag MatchedTagName; // 0x20
        struct FGameplayTag OriginalTag; // 0x28
        struct FGameplayTagContainer AggregatedSourceTags; // 0x30
        struct FGameplayTagContainer AggregatedTargetTags; // 0x50
        struct FVector_NetQuantize10 Location; // 0x70
        struct FVector_NetQuantizeNormal Normal; // 0x7c
        struct TWeakObjectPtr<struct AActor> Instigator; // 0x88
        struct TWeakObjectPtr<struct AActor> EffectCauser; // 0x90
        struct TWeakObjectPtr<struct UObject> SourceObject; // 0x98
        struct TWeakObjectPtr<struct UPhysicalMaterial> PhysicalMaterial; // 0xa0
        int32_t GameplayEffectLevel; // 0xa8
        int32_t AbilityLevel; // 0xac
        struct TWeakObjectPtr<struct USceneComponent> TargetAttachComponent; // 0xb0

    };

    struct FVector_NetQuantize10 : FVector //ScriptStruct Engine.Vector_NetQuantize10
    {
    public:


    };

    struct FGameplayEffectSpecForRPC //ScriptStruct GameplayAbilities.GameplayEffectSpecForRPC
    {
    //Children Prop Count (Fields): 7
    public:

        class UGameplayEffect* Def; // 0x0
        struct TArray<struct FGameplayEffectModifiedAttribute> ModifiedAttributes; // 0x8
        struct FGameplayEffectContextHandle EffectContext; // 0x18
        struct FGameplayTagContainer AggregatedSourceTags; // 0x30
        struct FGameplayTagContainer AggregatedTargetTags; // 0x50
        float Level; // 0x70
        float AbilityLevel; // 0x74

    };

    struct FServerAbilityRPCBatch //ScriptStruct GameplayAbilities.ServerAbilityRPCBatch
    {
    //Children Prop Count (Fields): 6
    public:

        struct FGameplayAbilitySpecHandle AbilitySpecHandle; // 0x0
        struct FPredictionKey PredictionKey; // 0x8
        struct FGameplayAbilityTargetDataHandle TargetData; // 0x18
        bool InputPressed; // 0x40
        bool Ended; // 0x41
        bool Started; // 0x42

    };

    struct FVector_NetQuantize100 : FVector //ScriptStruct Engine.Vector_NetQuantize100
    {
    public:


    };

    struct FFastArraySerializer //ScriptStruct Engine.FastArraySerializer
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t ArrayReplicationKey; // 0x5c
        enum class EFastArraySerializerDeltaFlags DeltaFlags; // 0x108

    };

    struct FReplicatedPredictionKeyMap : FFastArraySerializer //ScriptStruct GameplayAbilities.ReplicatedPredictionKeyMap
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FReplicatedPredictionKeyItem> PredictionKeys; // 0x118

    };

    struct FReplicatedPredictionKeyItem : FFastArraySerializerItem //ScriptStruct GameplayAbilities.ReplicatedPredictionKeyItem
    {
    //Children Prop Count (Fields): 1
    public:

        struct FPredictionKey PredictionKey; // 0x10

    };

    struct FMinimalReplicationTagCountMap //ScriptStruct GameplayAbilities.MinimalReplicationTagCountMap
    {
    //Children Prop Count (Fields): 1
    public:

        class UAbilitySystemComponent* Owner; // 0x50

    };

    struct FActiveGameplayCueContainer : FFastArraySerializer //ScriptStruct GameplayAbilities.ActiveGameplayCueContainer
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FActiveGameplayCue> GameplayCues; // 0x110
        class UAbilitySystemComponent* Owner; // 0x128

    };

    struct FActiveGameplayCue : FFastArraySerializerItem //ScriptStruct GameplayAbilities.ActiveGameplayCue
    {
    //Children Prop Count (Fields): 4
    public:

        struct FGameplayTag GameplayCueTag; // 0xc
        struct FPredictionKey PredictionKey; // 0x18
        struct FGameplayCueParameters Parameters; // 0x28
        bool bPredictivelyRemoved; // 0xe0

    };

    struct FActiveGameplayEffectsContainer : FFastArraySerializer //ScriptStruct GameplayAbilities.ActiveGameplayEffectsContainer
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FActiveGameplayEffect> GameplayEffects_Internal; // 0x138
        struct TArray<class UGameplayEffect*> ApplicationImmunityQueryEffects; // 0x4a8

    };

    struct FGameplayAbilityLocalAnimMontage //ScriptStruct GameplayAbilities.GameplayAbilityLocalAnimMontage
    {
    //Children Prop Count (Fields): 4
    public:

        class UAnimMontage* AnimMontage; // 0x0
        bool PlayBit; // 0x8
        struct FPredictionKey PredictionKey; // 0x10
        class UGameplayAbility* AnimatingAbility; // 0x20

    };

    struct FGameplayAbilityRepAnimMontage //ScriptStruct GameplayAbilities.GameplayAbilityRepAnimMontage
    {
    //Children Prop Count (Fields): 17
    public:

        class UAnimMontage* AnimMontage; // 0x0
        float PlayRate; // 0x8
        float position; // 0xc
        float BlendTime; // 0x10
        char NextSectionID; // 0x14
        char bRepPosition; // 0x15
        char IsStopped; // 0x15
        char ForcePlayBit; // 0x15
        char SkipPositionCorrection; // 0x15
        char bSkipPlayRate; // 0x15
        struct FPredictionKey PredictionKey; // 0x18
        char SectionIdToPlay; // 0x28
        char bStopAllMontages; // 0x29
        struct TArray<struct FName> SectionLoopCountKeys; // 0x30
        struct TArray<int32_t> SectionLoopCountValues; // 0x40
        char bRepStop; // 0x50
        char bRepPendingForWeapon; // 0x50

    };

    struct FGameplayAbilitySpecContainer : FFastArraySerializer //ScriptStruct GameplayAbilities.GameplayAbilitySpecContainer
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FGameplayAbilitySpec> Items; // 0x110
        class UAbilitySystemComponent* Owner; // 0x120

    };

    struct FGameplayAbilitySpec : FFastArraySerializerItem //ScriptStruct GameplayAbilities.GameplayAbilitySpec
    {
    //Children Prop Count (Fields): 17
    public:

        struct FGameplayAbilitySpecHandle Handle; // 0xc
        class UGameplayAbility* Ability; // 0x10
        int32_t Level; // 0x18
        int32_t InputID; // 0x1c
        class UObject* SourceObject; // 0x20
        char ActiveCount; // 0x28
        char InputPressed; // 0x29
        char RemoveAfterActivation; // 0x29
        char PendingRemove; // 0x29
        char bActivateOnce; // 0x29
        struct FGameplayAbilityActivationInfo ActivationInfo; // 0x30
        struct FGameplayTagContainer DynamicAbilityTags; // 0x48
        struct TArray<class UGameplayAbility*> NonReplicatedInstances; // 0x68
        struct TArray<class UGameplayAbility*> ReplicatedInstances; // 0x78
        struct FActiveGameplayEffectHandle GameplayEffectHandle; // 0x88
        char RequestCount; // 0xe0
        char MaxRequestCount; // 0xe1

    };

    struct FAttributeDefaults //ScriptStruct GameplayAbilities.AttributeDefaults
    {
    //Children Prop Count (Fields): 2
    public:

        class UAttributeSet* Attributes; // 0x0
        class UDataTable* DefaultStartingTable; // 0x8

    };

    struct FGeometry //ScriptStruct SlateCore.Geometry
    {
    public:


    };

    struct FSlateBrush //ScriptStruct SlateCore.SlateBrush
    {
    //Children Prop Count (Fields): 14
    public:

        struct FVector2D ImageSize; // 0x8
        struct FMargin Margin; // 0x10
        struct FSlateColor TintColor; // 0x20
        class UObject* ResourceObject; // 0x48
        struct FName ResourceName; // 0x50
        struct FBox2D UVRegion; // 0x58
        enum class ESlateBrushDrawType DrawAs; // 0x6c
        enum class ESlateBrushTileType Tiling; // 0x6d
        enum class ESlateBrushMirrorType Mirroring; // 0x6e
        enum class ESlateBrushImageType ImageType; // 0x6f
        char UseImageUV; // 0x70
        char IsDrawAsCircle; // 0x70
        char bIsDynamicallyLoaded; // 0x88
        char bHasUObject; // 0x88

    };

    struct FSlateColor //ScriptStruct SlateCore.SlateColor
    {
    //Children Prop Count (Fields): 2
    public:

        struct FLinearColor SpecifiedColor; // 0x0
        enum class ESlateColorStylingMode ColorUseRule; // 0x10

    };

    struct FMargin //ScriptStruct SlateCore.Margin
    {
    //Children Prop Count (Fields): 4
    public:

        float Left; // 0x0
        float Top; // 0x4
        float Right; // 0x8
        float Bottom; // 0xc

    };

    struct FEventReply //ScriptStruct UMG.EventReply
    {
    public:


    };

    struct FInputEvent //ScriptStruct SlateCore.InputEvent
    {
    public:


    };

    struct FPointerEvent : FInputEvent //ScriptStruct SlateCore.PointerEvent
    {
    public:


    };

    struct FWidgetTransform //ScriptStruct UMG.WidgetTransform
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector2D Translation; // 0x0
        struct FVector2D Scale; // 0x8
        struct FVector2D Shear; // 0x10
        float Angle; // 0x18

    };

    struct FPaintContext //ScriptStruct UMG.PaintContext
    {
    public:


    };

    struct FCharacterEvent : FInputEvent //ScriptStruct SlateCore.CharacterEvent
    {
    public:


    };

    struct FKeyEvent : FInputEvent //ScriptStruct SlateCore.KeyEvent
    {
    public:


    };

    struct FNavigationEvent : FInputEvent //ScriptStruct SlateCore.NavigationEvent
    {
    public:


    };

    struct FAnalogInputEvent : FKeyEvent //ScriptStruct SlateCore.AnalogInputEvent
    {
    public:


    };

    struct FSlateFontInfo //ScriptStruct SlateCore.SlateFontInfo
    {
    //Children Prop Count (Fields): 7
    public:

        class UObject* FontObject; // 0x0
        class UObject* FontMaterial; // 0x8
        struct FFontOutlineSettings OutlineSettings; // 0x10
        struct FName TypefaceFontName; // 0x40
        int32_t Size; // 0x48
        int32_t Size_Oversea; // 0x4c
        int32_t LetterSpacing; // 0x50

    };

    struct FFontOutlineSettings //ScriptStruct SlateCore.FontOutlineSettings
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t OutlineSize; // 0x0
        bool bSeparateFillAlpha; // 0x4
        bool bApplyOutlineToDropShadows; // 0x5
        class UObject* OutlineMaterial; // 0x8
        struct FLinearColor OutlineColor; // 0x10

    };

    struct FSlateWidgetStyle //ScriptStruct SlateCore.SlateWidgetStyle
    {
    public:


    };

    struct FTableRowStyle : FSlateWidgetStyle //ScriptStruct SlateCore.TableRowStyle
    {
    //Children Prop Count (Fields): 16
    public:

        struct FSlateBrush SelectorFocusedBrush; // 0x8
        struct FSlateBrush ActiveHoveredBrush; // 0x98
        struct FSlateBrush ActiveBrush; // 0x128
        struct FSlateBrush InactiveHoveredBrush; // 0x1b8
        struct FSlateBrush InactiveBrush; // 0x248
        struct FSlateBrush EvenRowBackgroundHoveredBrush; // 0x2d8
        struct FSlateBrush EvenRowBackgroundBrush; // 0x368
        struct FSlateBrush OddRowBackgroundHoveredBrush; // 0x3f8
        struct FSlateBrush OddRowBackgroundBrush; // 0x488
        struct FSlateColor TextColor; // 0x518
        struct FSlateColor SelectedTextColor; // 0x540
        struct FSlateBrush DropIndicator_Above; // 0x568
        struct FSlateBrush DropIndicator_Onto; // 0x5f8
        struct FSlateBrush DropIndicator_Below; // 0x688
        struct FSlateBrush ActiveHighlightedBrush; // 0x718
        struct FSlateBrush InactiveHighlightedBrush; // 0x7a8

    };

    struct FComboBoxStyle : FSlateWidgetStyle //ScriptStruct SlateCore.ComboBoxStyle
    {
    //Children Prop Count (Fields): 3
    public:

        struct FComboButtonStyle ComboButtonStyle; // 0x8
        struct FSlateSound PressedSlateSound; // 0x3f0
        struct FSlateSound SelectionChangeSlateSound; // 0x408

    };

    struct FSlateSound //ScriptStruct SlateCore.SlateSound
    {
    //Children Prop Count (Fields): 1
    public:

        class UObject* ResourceObject; // 0x0

    };

    struct FComboButtonStyle : FSlateWidgetStyle //ScriptStruct SlateCore.ComboButtonStyle
    {
    //Children Prop Count (Fields): 6
    public:

        struct FButtonStyle ButtonStyle; // 0x8
        struct FSlateBrush DownArrowImage; // 0x2a0
        struct FVector2D ShadowOffset; // 0x330
        struct FLinearColor ShadowColorAndOpacity; // 0x338
        struct FSlateBrush MenuBorderBrush; // 0x348
        struct FMargin MenuBorderPadding; // 0x3d8

    };

    struct FButtonStyle : FSlateWidgetStyle //ScriptStruct SlateCore.ButtonStyle
    {
    //Children Prop Count (Fields): 8
    public:

        struct FSlateBrush Normal; // 0x8
        struct FSlateBrush Hovered; // 0x98
        struct FSlateBrush Pressed; // 0x128
        struct FSlateBrush Disabled; // 0x1b8
        struct FMargin NormalPadding; // 0x248
        struct FMargin PressedPadding; // 0x258
        struct FSlateSound PressedSlateSound; // 0x268
        struct FSlateSound HoveredSlateSound; // 0x280

    };

    struct FShapedTextOptions //ScriptStruct UMG.ShapedTextOptions
    {
    //Children Prop Count (Fields): 4
    public:

        char bOverride_TextShapingMethod; // 0x0
        char bOverride_TextFlowDirection; // 0x0
        enum class ETextShapingMethod TextShapingMethod; // 0x1
        enum class ETextFlowDirection TextFlowDirection; // 0x2

    };

    struct FVirtualKeyboardOptions //ScriptStruct Slate.VirtualKeyboardOptions
    {
    //Children Prop Count (Fields): 1
    public:

        bool bEnableAutocorrect; // 0x0

    };

    struct FEditableTextStyle : FSlateWidgetStyle //ScriptStruct SlateCore.EditableTextStyle
    {
    //Children Prop Count (Fields): 5
    public:

        struct FSlateFontInfo Font; // 0x8
        struct FSlateColor ColorAndOpacity; // 0x60
        struct FSlateBrush BackgroundImageSelected; // 0x88
        struct FSlateBrush BackgroundImageComposing; // 0x118
        struct FSlateBrush CaretImage; // 0x1a8

    };

    struct FEditableTextBoxStyle : FSlateWidgetStyle //ScriptStruct SlateCore.EditableTextBoxStyle
    {
    //Children Prop Count (Fields): 12
    public:

        struct FSlateBrush BackgroundImageNormal; // 0x8
        struct FSlateBrush BackgroundImageHovered; // 0x98
        struct FSlateBrush BackgroundImageFocused; // 0x128
        struct FSlateBrush BackgroundImageReadOnly; // 0x1b8
        struct FMargin Padding; // 0x248
        struct FSlateFontInfo Font; // 0x258
        struct FSlateColor ForegroundColor; // 0x2b0
        struct FSlateColor BackgroundColor; // 0x2d8
        struct FSlateColor ReadOnlyForegroundColor; // 0x300
        struct FMargin HScrollBarPadding; // 0x328
        struct FMargin VScrollBarPadding; // 0x338
        struct FScrollBarStyle ScrollBarStyle; // 0x348

    };

    struct FScrollBarStyle : FSlateWidgetStyle //ScriptStruct SlateCore.ScrollBarStyle
    {
    //Children Prop Count (Fields): 9
    public:

        struct FSlateBrush HorizontalBackgroundImage; // 0x8
        struct FSlateBrush VerticalBackgroundImage; // 0x98
        struct FSlateBrush VerticalTopSlotImage; // 0x128
        struct FSlateBrush HorizontalTopSlotImage; // 0x1b8
        struct FSlateBrush VerticalBottomSlotImage; // 0x248
        struct FSlateBrush HorizontalBottomSlotImage; // 0x2d8
        struct FSlateBrush NormalThumbImage; // 0x368
        struct FSlateBrush HoveredThumbImage; // 0x3f8
        struct FSlateBrush DraggedThumbImage; // 0x488

    };

    struct FInputChord //ScriptStruct Slate.InputChord
    {
    //Children Prop Count (Fields): 5
    public:

        struct FKey Key; // 0x0
        char bShift; // 0x18
        char bCtrl; // 0x18
        char bAlt; // 0x18
        char bCmd; // 0x18

    };

    struct FTextBlockStyle : FSlateWidgetStyle //ScriptStruct SlateCore.TextBlockStyle
    {
    //Children Prop Count (Fields): 9
    public:

        struct FSlateFontInfo Font; // 0x8
        struct FSlateColor ColorAndOpacity; // 0x60
        struct FVector2D ShadowOffset; // 0x88
        struct FLinearColor ShadowColorAndOpacity; // 0x90
        struct FSlateColor SelectedBackgroundColor; // 0xa0
        struct FLinearColor HighlightColor; // 0xc8
        struct FSlateBrush HighlightShape; // 0xd8
        struct FSlateBrush StrikeBrush; // 0x168
        struct FSlateBrush UnderlineBrush; // 0x1f8

    };

    struct FSpinBoxStyle : FSlateWidgetStyle //ScriptStruct SlateCore.SpinBoxStyle
    {
    //Children Prop Count (Fields): 7
    public:

        struct FSlateBrush BackgroundBrush; // 0x8
        struct FSlateBrush HoveredBackgroundBrush; // 0x98
        struct FSlateBrush ActiveFillBrush; // 0x128
        struct FSlateBrush InactiveFillBrush; // 0x1b8
        struct FSlateBrush ArrowsImage; // 0x248
        struct FSlateColor ForegroundColor; // 0x2d8
        struct FMargin TextPadding; // 0x300

    };

    struct FAnchors //ScriptStruct Slate.Anchors
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector2D Minimum; // 0x0
        struct FVector2D Maximum; // 0x8

    };

    struct FFocusEvent //ScriptStruct SlateCore.FocusEvent
    {
    public:


    };

    struct FMotionEvent : FInputEvent //ScriptStruct SlateCore.MotionEvent
    {
    public:


    };

    struct FAnimationEventBinding //ScriptStruct UMG.AnimationEventBinding
    {
    //Children Prop Count (Fields): 4
    public:

        class UWidgetAnimation* Animation; // 0x0
        struct FDelegate Delegate; // 0x8
        enum class EWidgetAnimationEvent AnimationEvent; // 0x18
        struct FName UserTag; // 0x1c

    };

    struct FNamedSlotBinding //ScriptStruct UMG.NamedSlotBinding
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Name; // 0x0
        class UWidget* Content; // 0x8

    };

    struct FMSDKNoticeReturnData //ScriptStruct MFPluginWrapper.MSDKNoticeReturnData
    {
    //Children Prop Count (Fields): 8
    public:

        int32_t MethodNameID; // 0x0
        int32_t RetCode; // 0x4
        struct FString RetMsg; // 0x8
        int32_t ThirdCode; // 0x18
        struct FString ThirdMsg; // 0x20
        struct FString extraJson; // 0x30
        struct FString RequestID; // 0x40
        struct TArray<struct FMSDKNoticeInfo> NoticeInfoList; // 0x50

    };

    struct FMSDKNoticeInfo //ScriptStruct MFPluginWrapper.MSDKNoticeInfo
    {
    //Children Prop Count (Fields): 13
    public:

        int32_t NoticeID; // 0x0
        int32_t NoticeType; // 0x4
        struct FString NoticeGroup; // 0x8
        int32_t BeginTime; // 0x18
        int32_t EndTime; // 0x1c
        int32_t UpdateTime; // 0x20
        int32_t Order; // 0x24
        int32_t ContentType; // 0x28
        struct FString Language; // 0x30
        struct FMSDKNoticeTextInfo TextInfo; // 0x40
        struct TArray<struct FMSDKNoticePictureInfo> PicUrlList; // 0x70
        struct FString WebUrl; // 0x80
        struct FString extraJson; // 0x90

    };

    struct FMSDKNoticePictureInfo //ScriptStruct MFPluginWrapper.MSDKNoticePictureInfo
    {
    //Children Prop Count (Fields): 5
    public:

        struct FString NoticePicUrl; // 0x0
        struct FString NoticePicHashcode; // 0x10
        struct FString NoticePicTitle; // 0x20
        struct FString NoticePicSize; // 0x30
        int32_t ScreenDir; // 0x40

    };

    struct FMSDKNoticeTextInfo //ScriptStruct MFPluginWrapper.MSDKNoticeTextInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString NoticeTitle; // 0x0
        struct FString NoticeContent; // 0x10
        struct FString NoticeRedirectUrl; // 0x20

    };

    struct FMFClimateLightningEvent //ScriptStruct MFClimateRuntime.MFClimateLightningEvent
    {
    //Children Prop Count (Fields): 5
    public:

        bool bForceRejectPrevious; // 0x0
        struct FVector StartPosition; // 0x4
        struct FVector EndPosition; // 0x10
        float NormalizedReturnStrikeEnergy; // 0x1c
        int32_t ReStrikeCount; // 0x20

    };

    struct FMFEnvBurnBlockBound //ScriptStruct MFEnvironment.MFEnvBurnBlockBound
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector CenterPos; // 0x0
        int16_t RotYaw; // 0xc
        char Extent; // 0xe

    };

    struct FItemGridInfo //ScriptStruct SGFramework.ItemGridInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t Row; // 0x0
        int32_t Column; // 0x4

    };

    struct FInventoryAnimPoseInfo //ScriptStruct SGFramework.InventoryAnimPoseInfo
    {
    //Children Prop Count (Fields): 3
    public:

        bool bHasInitialized; // 0x0
        class UAnimMontage* AnimMontage; // 0x8
        float PositionToStay; // 0x10

    };

    struct FSGSwitchWeaponIntent //ScriptStruct SGFramework.SGSwitchWeaponIntent
    {
    //Children Prop Count (Fields): 6
    public:

        int32_t PredKey; // 0x0
        bool bConfirmedByServer; // 0x4
        bool bTakeUpWeapon; // 0x5
        class ASGWeapon* DestWeap; // 0x8
        float FinishTimeStamp; // 0x10
        enum class ESwitchWeaponIntentRejectReason RejectReason; // 0x14

    };

    struct FDamageEvent //ScriptStruct Engine.DamageEvent
    {
    //Children Prop Count (Fields): 1
    public:

        class UDamageType* DamageTypeClass; // 0x8

    };

    struct FPointDamageEvent : FDamageEvent //ScriptStruct Engine.PointDamageEvent
    {
    //Children Prop Count (Fields): 3
    public:

        float Damage; // 0x10
        struct FVector_NetQuantizeNormal ShotDirection; // 0x14
        struct FHitResult HitInfo; // 0x20

    };

    struct FSGPointDamageEvent : FPointDamageEvent //ScriptStruct SGFramework.SGPointDamageEvent
    {
    //Children Prop Count (Fields): 15
    public:

        enum class EDamageTypeEnum DamageTypeEnum; // 0xb8
        struct FSGBulletID BulletID; // 0xc0
        float Impulse; // 0xd0
        enum class EHitGroupType HitGroup; // 0xd4
        class AActor* AmmoClass; // 0xd8
        enum class EHeadHitSubGroupType HeadHitSubGroup; // 0xe0
        enum class ESGZoomType CaptureWeaponZoomType; // 0xe1
        char FireModeNum; // 0xe2
        char HitFlags; // 0xe3
        bool bIsBestHit; // 0xe4
        struct TArray<struct FVector> ImportantLocations; // 0xe8
        struct FBulletInfo BulletInfo; // 0xf8
        class ASGInventory* HitMovableArmor; // 0x118
        bool bTakerIsCrouch; // 0x120
        bool bTakerIsProne; // 0x121

    };

    struct FBulletInfo //ScriptStruct SGFramework.BulletInfo
    {
    //Children Prop Count (Fields): 6
    public:

        float CurSpeed; // 0x0
        float DropDistance; // 0x4
        struct FVector SpawnLocation; // 0x8
        float FlyDistance; // 0x14
        float FlyTime; // 0x18
        float DamageScale; // 0x1c

    };

    struct FSGBulletID //ScriptStruct SGFramework.SGBulletID
    {
    //Children Prop Count (Fields): 2
    public:

        int64_t FireID; // 0x0
        char ShotIndex; // 0x8

    };

    struct FTakeDamageInfo //ScriptStruct SGFramework.TakeDamageInfo
    {
    //Children Prop Count (Fields): 8
    public:

        class AController* CauserController; // 0x0
        class AController* VictimController; // 0x8
        class APawn* CauserPawn; // 0x10
        class APawn* VictimPawn; // 0x18
        class AActor* CauserWeapon; // 0x20
        float AttemptedDamage; // 0x28
        float ActuralDamage; // 0x2c
        class UDamageEventObject* DamageEventObject; // 0x30

    };

    struct FKillOtherStatis //ScriptStruct SGFramework.KillOtherStatis
    {
    //Children Prop Count (Fields): 4
    public:

        float AllDamage; // 0x0
        int32_t HitCount; // 0x4
        float AllArmorReduceDamage; // 0x8
        int64_t ArmorId; // 0x10

    };

    struct FKillInfo //ScriptStruct SGFramework.KillInfo
    {
    //Children Prop Count (Fields): 15
    public:

        class AController* KillerController; // 0x0
        class AController* KilledController; // 0x8
        class APawn* KillerPawn; // 0x10
        class APawn* KilledPawn; // 0x18
        class AActor* KillerWeapon; // 0x20
        class UDamageEventObject* DamageEventObject; // 0x28
        int64_t KillerWeaponId; // 0x30
        int64_t KilledWeaponId; // 0x38
        int32_t KillerBulletPenetrateFactor; // 0x40
        int32_t KilledBulletPenetrateFactor; // 0x44
        int32_t KillDistance; // 0x48
        bool bDBNO; // 0x4c
        bool bHitArmor; // 0x4d
        bool bPenetrateArmor; // 0x4e
        enum class ECharacterEnduranceType EnduranceType; // 0x4f

    };

    struct FCharacterDeathStatics //ScriptStruct SGFramework.CharacterDeathStatics
    {
    //Children Prop Count (Fields): 57
    public:

        int32_t DeathReason; // 0x0
        int64_t WeaponId; // 0x8
        float Distance; // 0x10
        int32_t EnduranceType; // 0x14
        int32_t SpreadEnduranceType; // 0x18
        int64_t DeathCauserId; // 0x20
        float Damage; // 0x28
        int32_t bPenetrateArmor; // 0x2c
        float PenetrateArmorProbability; // 0x30
        struct FString CauserName; // 0x38
        int64_t DeathTime; // 0x48
        struct FVector HitLocationDireciton; // 0x50
        int64_t HitArmorId; // 0x60
        int32_t TeamTypeId; // 0x68
        int32_t TeamID; // 0x6c
        enum class EFactionType FactionType; // 0x70
        int32_t KillerTeamTypeId; // 0x74
        enum class EFactionType KillerFactionType; // 0x78
        int8_t bHitFace; // 0x79
        int8_t bDiedFromDBNO; // 0x7a
        uint64_t DBNOGID; // 0x80
        int32_t CurrentArmorDurability; // 0x88
        int32_t CurrentArmorDurabilityMax; // 0x8c
        int32_t DetailBodyPart; // 0x90
        float LastHitDamage; // 0x94
        float LastHitArmorDamage; // 0x98
        float Endurance; // 0x9c
        int32_t MainWeapon; // 0xa0
        int32_t AssistWeapon; // 0xa4
        float AliveTime; // 0xa8
        struct FVector DeathPos; // 0xac
        struct FVector KillerPos; // 0xb8
        int32_t KillerLevel; // 0xc4
        int32_t KillerRankLevel; // 0xc8
        uint64_t KillerID; // 0xd0
        int32_t KillerTeamId; // 0xd8
        struct FString SightName; // 0xe0
        class ACharacter* Killer; // 0xf0
        int32_t HitGroup; // 0xf8
        int32_t HitSubHeadPart; // 0xfc
        int64_t LastAimEnemyGID; // 0x100
        int32_t LastAimEnemyCauseDamage; // 0x108
        int32_t LastAimEnemyCauseArmorReduceDamage; // 0x10c
        int64_t DeathVestID; // 0x110
        int64_t DeathHelmetID; // 0x118
        int64_t DeathFaceShieldID; // 0x120
        int64_t KillerVestID; // 0x128
        int64_t KillerHelmetID; // 0x130
        int64_t KillerFaceShieldID; // 0x138
        int32_t KillerWeaponValue; // 0x140
        int32_t CauseDBNOWeaponID; // 0x144
        class USGPlayerItemInfoBase* KillerWeaponItemInfo; // 0x148
        int32_t OnFlash; // 0x150
        int32_t ByHoldGrenade; // 0x154
        int32_t KillerNetGUIDForReplay; // 0x158
        int32_t OnInventoryFlash; // 0x15c
        int32_t OnTinnitus; // 0x160

    };

    struct FTableRowBase //ScriptStruct Engine.TableRowBase
    {
    public:


    };

    struct FContextMenuSlotType : FTableRowBase //ScriptStruct SGFramework.ContextMenuSlotType
    {
    //Children Prop Count (Fields): 1
    public:

        enum class ESlotEnum SlotType; // 0x8

    };

    struct FInventoryGridInfo //ScriptStruct SGFramework.InventoryGridInfo
    {
    //Children Prop Count (Fields): 9
    public:

        class AActor* OwnerActor; // 0x0
        class AActor* ParentActor; // 0x8
        enum class ESGInventoryParentType ParentType; // 0x10
        struct FItemGridInfo GridInfo; // 0x14
        struct FItemGridInfo StartGridPosition; // 0x1c
        int32_t ContainerIndex; // 0x2c
        enum class EAttachPosition AttachPosition; // 0x30
        bool IsRotated; // 0x31
        uint64_t ServerFrameCounter; // 0x38

    };

    struct FAutoAimAntiHackStatis //ScriptStruct SGFramework.AutoAimAntiHackStatis
    {
    //Children Prop Count (Fields): 2
    public:

        float MaxRange; // 0x0
        float MaxAngularSpeed; // 0x4

    };

    struct FSGFireRepInfo //ScriptStruct SGFramework.SGFireRepInfo
    {
    //Children Prop Count (Fields): 12
    public:

        int64_t FireID; // 0x0
        float Timestamp; // 0x8
        struct FSGFireShots Shots; // 0x10
        class AActor* AmmoClass; // 0x38
        char FireMode; // 0x40
        struct FVector AttackerPos; // 0x44
        float ExpiredTimeOnServer; // 0x50
        char CurFOV; // 0x54
        char FireIntervalShotNum; // 0x55
        bool bIsReadyForNextFire; // 0x56
        bool bIsWeaponCollapsed; // 0x57
        class ASGThrowableProjectile* ProjcetileClass; // 0x58

    };

    struct FSGFireShots //ScriptStruct SGFramework.SGFireShots
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector LaunchLocation; // 0x0
        struct FVector ShotLocation; // 0xc
        struct TArray<struct FSGBulletPath> BulletPaths; // 0x18

    };

    struct FSGBulletPath //ScriptStruct SGFramework.SGBulletPath
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector InitDirection; // 0x0
        struct TArray<struct FSGPointDamageEvent> PathPoints; // 0x10

    };

    struct FNavSkeletonGraphFindResult //ScriptStruct MFNPCAI.NavSkeletonGraphFindResult
    {
    //Children Prop Count (Fields): 4
    public:

        enum class EGraphAStarResult status; // 0x0
        struct TArray<struct FNavSkeletonGraphResultNode> Nodes; // 0x8
        struct TArray<int32_t> DesiredNodeIndices; // 0x18
        struct TArray<int32_t> DesiredPointIDs; // 0x28

    };

    struct FNavSkeletonGraphResultNode //ScriptStruct MFNPCAI.NavSkeletonGraphResultNode
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t PointID; // 0x0
        int32_t ParentID; // 0x4
        float PathLength; // 0x8

    };

    struct FNPCAIQueryRoundEnvironmentResult //ScriptStruct MFNPCAI.NPCAIQueryRoundEnvironmentResult
    {
    //Children Prop Count (Fields): 14
    public:

        struct FVector AILocation; // 0x0
        struct FVector EnemyLocation; // 0xc
        bool LCanMove; // 0x18
        struct FVector LMovePoint; // 0x1c
        bool RCanMove; // 0x28
        struct FVector RMovePoint; // 0x2c
        bool FCanMove; // 0x38
        struct FVector FMovePoint; // 0x3c
        bool BCanMove; // 0x48
        struct FVector BMovePoint; // 0x4c
        bool LCanDefense; // 0x58
        bool RCanDefense; // 0x59
        bool LCanAttack; // 0x5a
        bool RCanAttack; // 0x5b

    };

    struct FNPCAIFindAmbushAgainstPointResult //ScriptStruct MFNPCAI.NPCAIFindAmbushAgainstPointResult
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector AgainstPoint; // 0x0
        bool bCanFind; // 0xc

    };

    struct FNPCAIFindPathByKeyRouteResult //ScriptStruct MFNPCAI.NPCAIFindPathByKeyRouteResult
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FKeyRoutePointData> Path; // 0x0

    };

    struct FActionPointData //ScriptStruct AIActionPointGeneratorRuntime.ActionPointData
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t UniqueIndex; // 0x0
        struct FVector Location; // 0x4

    };

    struct FKeyRoutePointData : FActionPointData //ScriptStruct AIActionPointGeneratorRuntime.KeyRoutePointData
    {
    //Children Prop Count (Fields): 9
    public:

        int32_t PointID; // 0x10
        float Radius; // 0x14
        float MaxNavPathForMultipleOfRadius; // 0x18
        struct TArray<struct FKeyRoutePointLink> LinkPoints; // 0x20
        struct TArray<struct FActionPointRadianSafe> OrientSafetys; // 0x30
        float DangerValue; // 0x40
        float CalculateDangerTime; // 0x44
        int64_t PolyRef; // 0x48
        struct TArray<int64_t> NeighborPolyRefs; // 0x50

    };

    struct FActionPointRadianSafe //ScriptStruct AIActionPointGeneratorRuntime.ActionPointRadianSafe
    {
    //Children Prop Count (Fields): 2
    public:

        float Radian; // 0x0
        float CoverDistance; // 0x4

    };

    struct FKeyRoutePointLink //ScriptStruct AIActionPointGeneratorRuntime.KeyRoutePointLink
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t Index; // 0x0
        float NavPathLength; // 0x4

    };

    struct FNPCAIPeekPointResult //ScriptStruct MFNPCAI.NPCAIPeekPointResult
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector PeekPoint; // 0x0
        bool bWillExpose; // 0xc

    };

    struct FCompetitionOBGlobalDataInfo //ScriptStruct SGFramework.CompetitionOBGlobalDataInfo
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t LeftPMCNumber; // 0x0
        uint32_t LeftScavNumber; // 0x4
        struct TArray<struct FCompetitionTeamDataInfo> AllTeamInfoList; // 0x8

    };

    struct FCompetitionTeamDataInfo //ScriptStruct SGFramework.CompetitionTeamDataInfo
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t TeamID; // 0x0
        struct FText TeamName; // 0x8
        struct TArray<struct FCompetitionGamePlayerDataInfo> AllPlayerList; // 0x20

    };

    struct FCompetitionGamePlayerDataInfo //ScriptStruct SGFramework.CompetitionGamePlayerDataInfo
    {
    //Children Prop Count (Fields): 13
    public:

        class ASGPlayerController* PC; // 0x0
        class APlayerState* PS; // 0x8
        uint64_t GID; // 0x10
        struct FString PlayerName; // 0x18
        uint32_t PlayerKillNum; // 0x28
        float PlayerCurAllEndurance; // 0x2c
        float PlayerCurAllEnduranceMax; // 0x30
        int64_t PlayerTakeOutAllValue; // 0x38
        enum class ESGPlayerCondition PlayerResult; // 0x40
        struct FVector PlayerPosition; // 0x44
        uint32_t KillPlayerNum; // 0x50
        uint32_t KillScavNum; // 0x54
        uint32_t KillBossNum; // 0x58

    };

    struct FCompetitionPlayerFallReportData //ScriptStruct SGFramework.CompetitionPlayerFallReportData
    {
    //Children Prop Count (Fields): 10
    public:

        int32_t KillerTeamId; // 0x0
        int32_t KillerTeamIndex; // 0x4
        struct FString KillerPlayerName; // 0x8
        uint64_t KillerPlayerWeaponID; // 0x18
        int32_t KilledTeamId; // 0x20
        int32_t KilledTeamIndex; // 0x24
        struct FString KilledPlayerName; // 0x28
        bool BTeamAce; // 0x38
        enum class ECharacterType KilledCharacterType; // 0x39
        enum class ESGPlayerFailCondition FallResult; // 0x3a

    };

    struct FCompetitionEscapeReportData //ScriptStruct SGFramework.CompetitionEscapeReportData
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t EscapePlayerTeamId; // 0x0
        uint32_t EscapePlayerTeamIndex; // 0x4
        struct FString EscapePlayerName; // 0x8
        int32_t EscapePointID; // 0x18

    };

    struct FAPIPlayerStaticInfo //ScriptStruct SGFramework.APIPlayerStaticInfo
    {
    //Children Prop Count (Fields): 4
    public:

        uint64_t GID; // 0x0
        uint32_t TeamID; // 0x8
        uint32_t TeamIndex; // 0xc
        struct FString TeamName; // 0x10

    };

    struct FAPIReportInfo //ScriptStruct SGFramework.APIReportInfo
    {
    //Children Prop Count (Fields): 4
    public:

        uint64_t GID; // 0x0
        enum class EAPIReportTypes ReportType; // 0x8
        struct FCompetitionKillInfo KillInfo; // 0x10
        uint32_t ItemID; // 0x68

    };

    struct FCompetitionKillInfo //ScriptStruct SGFramework.CompetitionKillInfo
    {
    //Children Prop Count (Fields): 14
    public:

        uint64_t KilledGid; // 0x0
        struct FString KilledName; // 0x8
        enum class EPlayerTeamType KilledPlayerType; // 0x18
        uint32_t RankedLevel; // 0x1c
        uint32_t Score; // 0x20
        uint32_t Level; // 0x24
        uint32_t KilledTime; // 0x28
        uint64_t KillWeaponId; // 0x30
        enum class ECharacterEnduranceType KillPart; // 0x38
        int32_t KillAllDamage; // 0x3c
        int32_t KillAllArmorDamage; // 0x40
        int32_t HitNum; // 0x44
        int64_t ArmorId; // 0x48
        enum class ECharacterType PlayerTypeDetail; // 0x50

    };

    struct FInventoryContainerBase //ScriptStruct SGFramework.InventoryContainerBase
    {
    //Children Prop Count (Fields): 7
    public:

        int32_t RowNum; // 0x0
        int32_t ColumnNum; // 0x4
        int32_t RuleID; // 0x8
        struct TArray<struct FSGBagGridInfo> GridList; // 0x10
        int32_t ContainerIndex; // 0x20
        struct TArray<class AActor*> ChildActorList; // 0x28
        class ASGInventory* Inventory; // 0x38

    };

    struct FSGBagGridInfo //ScriptStruct SGFramework.SGBagGridInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t ItemID; // 0x0
        class AActor* Inventory; // 0x8

    };

    struct FMFMissionReplicateData //ScriptStruct MFMission.MFMissionReplicateData
    {
    //Children Prop Count (Fields): 14
    public:

        class AActor* Instigator; // 0x0
        struct FString MissionName; // 0x8
        struct FString MissionFlowName; // 0x18
        enum class EMissionStatus MissionStatus; // 0x28
        enum class EMissionStatus OldMissionStatus; // 0x29
        int32_t OldProgress; // 0x2c
        int32_t CurProgress; // 0x30
        float RemainTime; // 0x34
        float RemainTimeUpdateServerTime; // 0x38
        bool bFailWhenAchieved; // 0x3c
        bool bNeedReport; // 0x3d
        bool bNeedReportProgress; // 0x3e
        struct TArray<struct FString> AffiliateMissionList; // 0x40
        bool bValid; // 0x50

    };

    struct FMobileInputData //ScriptStruct SGFramework.MobileInputData
    {
    //Children Prop Count (Fields): 15
    public:

        enum class ETouchIndex FingerIndex; // 0x0
        enum class EMobileInputPhase Phase; // 0x1
        struct FVector2D BeginLocation; // 0x4
        struct FVector2D Location; // 0xc
        struct FVector2D LastLocation; // 0x14
        struct FVector2D LastFrameLocation; // 0x1c
        float BeginTime; // 0x24
        float UpdateTime; // 0x28
        float ForceValue; // 0x2c
        struct FVector2D DeltaLocation; // 0x30
        float DeltaLocationX; // 0x38
        float DeltaLocationY; // 0x3c
        int32_t SampleCount; // 0x40
        bool bIgnore; // 0x44
        bool bPendingDelete; // 0x45

    };

    struct FFootStepMakerTriggerEventTlog //ScriptStruct SGFramework.FootStepMakerTriggerEventTlog
    {
    //Children Prop Count (Fields): 7
    public:

        float PosX; // 0x0
        float PosY; // 0x4
        float PosZ; // 0x8
        uint64_t GID; // 0x10
        uint32_t RoleType; // 0x18
        int32_t VestLv; // 0x1c
        int32_t HelmetLv; // 0x20

    };

    struct FForceScoreInfo //ScriptStruct SGFramework.ForceScoreInfo
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t ForceIndex; // 0x0
        struct FString ForceName; // 0x8
        enum class EFactionType FactionType; // 0x18
        int32_t Score; // 0x1c
        struct FForceProgressInfo ProgressInfo; // 0x20

    };

    struct FForceProgressInfo //ScriptStruct SGFramework.ForceProgressInfo
    {
    //Children Prop Count (Fields): 4
    public:

        struct FDateTime ServerStartTimeStamp; // 0x0
        float InitProgress; // 0x8
        float MaxProgress; // 0xc
        float ProgressTime; // 0x10

    };

    struct FSGLoadingInfo //ScriptStruct SGFramework.SGLoadingInfo
    {
    //Children Prop Count (Fields): 5
    public:

        struct FString MapTag; // 0x0
        struct FString PreMapTag; // 0x10
        bool bUsePostLoading; // 0x20
        struct TArray<struct FString> LoadingPathArray; // 0x28
        int32_t CurrentMovieIndex; // 0x38

    };

    struct FURL //ScriptStruct Engine.URL
    {
    //Children Prop Count (Fields): 8
    public:

        struct FString Protocol; // 0x0
        struct FString Host; // 0x10
        int32_t Port; // 0x20
        int32_t Valid; // 0x24
        struct FString Map; // 0x28
        struct FString RedirectURL; // 0x38
        struct TArray<struct FString> Op; // 0x48
        struct FString Portal; // 0x58

    };

    struct FVehicleHitInfo //ScriptStruct SGFramework.VehicleHitInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString HitTypeName; // 0x0
        float HitVelocity; // 0x10
        float DamageValue; // 0x14

    };

    struct FCachedDeadCharacterInfo //ScriptStruct SGFramework.CachedDeadCharacterInfo
    {
    //Children Prop Count (Fields): 14
    public:

        int64_t DeadCharacterGID; // 0x0
        int32_t channelType; // 0x8
        int32_t PlatId; // 0xc
        int32_t PlayerLevel; // 0x10
        int32_t RankLevel; // 0x14
        int32_t CurSeason_ID; // 0x18
        enum class ECharacterType DeadCharacterType; // 0x1c
        int32_t DeadCharacterTeamID; // 0x20
        uint32_t Area_ID; // 0x24
        int32_t TeamType; // 0x28
        int64_t KillerCharacterGID; // 0x30
        enum class ECharacterType KillerCharacterType; // 0x38
        int32_t EnterDsZone; // 0x3c
        int32_t IdealDsZone; // 0x40

    };

    struct FStackableItemSourceInfo //ScriptStruct SGFramework.StackableItemSourceInfo
    {
    //Children Prop Count (Fields): 5
    public:

        int64_t FromPlayerGID; // 0x0
        int32_t FromTeamIndex; // 0x8
        int32_t Count; // 0xc
        enum class ECharacterType FromCharacterType; // 0x10
        enum class ESGInventorySpawnSourceType FromSpawnSourceType; // 0x11

    };

    struct FProgressAbilitySimulationInfo //ScriptStruct SGFramework.ProgressAbilitySimulationInfo
    {
    //Children Prop Count (Fields): 6
    public:

        enum class ESGSimulatedProgressAbilityType Type; // 0x0
        class ASGInventory* TargetInv; // 0x8
        class AActor* OptionalActor1; // 0x10
        float ProgressStartServerTimeStamp; // 0x18
        float Duration; // 0x1c
        float Magnitude; // 0x20

    };

    struct FCharacterLootBoxExternalData //ScriptStruct SGFramework.CharacterLootBoxExternalData
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t LootPointID; // 0x0

    };

    struct FCharacterLootBoxItemExternalData //ScriptStruct SGFramework.CharacterLootBoxItemExternalData
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t LootPointID; // 0x0
        int32_t LootItemID; // 0x4

    };

    struct FKillerStaticData //ScriptStruct SGFramework.KillerStaticData
    {
    //Children Prop Count (Fields): 23
    public:

        struct FString KillerName; // 0x0
        int64_t KillerWeaponId; // 0x10
        struct FSGPlayerIconInfo KillerIconInfo; // 0x18
        uint32_t KillerRankrd; // 0x60
        uint32_t KillerRankScore; // 0x64
        uint32_t KillerRank; // 0x68
        uint32_t KillerRanking; // 0x6c
        uint32_t KillerPranking; // 0x70
        uint64_t KillerGID; // 0x78
        int32_t KillerTeamTypeId; // 0x80
        int32_t KillerTeamId; // 0x84
        struct FVector KillerPos; // 0x88
        struct FString SightName; // 0x98
        int64_t KillerVestID; // 0xa8
        int64_t KillerHelmetID; // 0xb0
        int64_t KillerFaceShieldID; // 0xb8
        int32_t KillerWeaponValue; // 0xc0
        bool bIsAICharacter; // 0xc4
        struct TArray<struct FCharacterHealthStaticsWhenDead> AllHealthStatics; // 0xc8
        class USGPlayerItemInfoBase* PlayerItemInfo; // 0xd8
        struct TArray<struct FSGClientShowItemInfo> KillerWeapon; // 0xe0
        struct FSGPlayerShowInfo PlayerShowInfo; // 0xf0
        int32_t KillerNetGUIDForReplay; // 0x130

    };

    struct FSGPlayerShowInfo //ScriptStruct SGFramework.SGPlayerShowInfo
    {
    //Children Prop Count (Fields): 5
    public:

        struct TArray<struct FSGClientShowItemInfo> ClientShowItems; // 0x0
        enum class ECharacterSex AvatarGender; // 0x10
        struct TArray<struct FSGAvatarInfo> AvatarItems; // 0x18
        uint32_t bBodyStatus; // 0x28
        struct TArray<struct FSGBadgeInfo> BadgeItems; // 0x30

    };

    struct FSGBadgeInfo //ScriptStruct SGFramework.SGBadgeInfo
    {
    //Children Prop Count (Fields): 2
    public:

        uint64_t ItemID; // 0x0
        uint32_t Index; // 0x8

    };

    struct FSGAvatarInfo //ScriptStruct SGFramework.SGAvatarInfo
    {
    //Children Prop Count (Fields): 3
    public:

        uint64_t ItemID; // 0x0
        bool EnableState; // 0x8
        bool bIsHeadAvatar; // 0x9

    };

    struct FSGClientShowItemInfo //ScriptStruct SGFramework.SGClientShowItemInfo
    {
    //Children Prop Count (Fields): 13
    public:

        uint64_t GID; // 0x0
        uint64_t ItemID; // 0x8
        uint32_t ItemNum; // 0x10
        uint64_t ParentID; // 0x18
        uint32_t Index; // 0x20
        uint32_t PosX; // 0x24
        uint32_t PosY; // 0x28
        bool bRollUp; // 0x2c
        bool bDisable; // 0x2d
        uint32_t PendantID; // 0x30
        uint32_t SprayID; // 0x34
        uint32_t Durability; // 0x38
        uint32_t MaxDurability; // 0x3c

    };

    struct FCharacterHealthStaticsWhenDead //ScriptStruct SGFramework.CharacterHealthStaticsWhenDead
    {
    //Children Prop Count (Fields): 5
    public:

        int64_t PlayerId; // 0x0
        int32_t EnduranceType; // 0x8
        float Health; // 0xc
        float MaxHealth; // 0x10
        struct TArray<int32_t> BuffList; // 0x18

    };

    struct FSGPlayerIconInfo //ScriptStruct SGFramework.SGPlayerIconInfo
    {
    //Children Prop Count (Fields): 7
    public:

        struct FString Name; // 0x0
        int32_t Level; // 0x10
        int32_t Rank; // 0x14
        struct FSGPlayerTitleInfo TitleInfo; // 0x18
        struct FString AvatarUrl; // 0x30
        int32_t HeadBoxID; // 0x40
        int32_t NameCard; // 0x44

    };

    struct FSGPlayerTitleInfo //ScriptStruct SGFramework.SGPlayerTitleInfo
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t ItemID; // 0x0
        bool HasTitle; // 0x4
        uint32_t StarNum; // 0x8
        uint32_t Rank; // 0xc
        uint32_t ADCode; // 0x10
        uint32_t LBSRankLevel; // 0x14

    };

    struct FMFMissionFlowNodeInstanceData //ScriptStruct MFMission.MFMissionFlowNodeInstanceData
    {
    //Children Prop Count (Fields): 18
    public:

        class AActor* Instigator; // 0x0
        class UMFMissionFlowNode* MissionFlowNode; // 0x8
        enum class EMissionFlowNodeStatus NodeStatus; // 0x10
        class UMFMissionObjective* Objective; // 0x18
        enum class EMissionStatus MissionStatus; // 0x20
        int32_t InitialProgress; // 0x24
        int32_t OldProgress; // 0x28
        int32_t CurProgress; // 0x2c
        int32_t BeginProgress; // 0x30
        int32_t EndProgress; // 0x34
        int32_t CachedProgress; // 0x38
        int32_t OneBattleAddedProgress; // 0x3c
        float ActivationTime; // 0x40
        float FinishTime; // 0x44
        float RemainTime; // 0x48
        float RemainTimeUpdateServerTime; // 0x4c
        bool bHasTryInteract; // 0x50
        enum class EMissionFailedType FailedType; // 0x51

    };

    struct FMFMissionFlowReplicateData //ScriptStruct MFMission.MFMissionFlowReplicateData
    {
    //Children Prop Count (Fields): 6
    public:

        class AActor* Instigator; // 0x0
        struct FString MissionFlowName; // 0x8
        enum class EMissionStatus MissionFlowStatus; // 0x18
        enum class EMissionStatus OldMissionFlowStatus; // 0x19
        bool bBeforeState; // 0x1a
        float StatusChangeTime; // 0x1c

    };

    struct FChaseActivityStateChangeInfo //ScriptStruct SGFramework.ChaseActivityStateChangeInfo
    {
    //Children Prop Count (Fields): 3
    public:

        enum class EChaseActivityState PreviousState; // 0x0
        enum class EChaseActivityState CurrentState; // 0x1
        float ServerTime; // 0x4

    };

    struct FRepAttachment //ScriptStruct Engine.RepAttachment
    {
    //Children Prop Count (Fields): 6
    public:

        class AActor* AttachParent; // 0x0
        struct FVector_NetQuantize100 LocationOffset; // 0x8
        struct FVector_NetQuantize100 RelativeScale3D; // 0x14
        struct FRotator RotationOffset; // 0x20
        struct FName AttachSocket; // 0x2c
        class USceneComponent* AttachComponent; // 0x38

    };

    struct FRepMovement //ScriptStruct Engine.RepMovement
    {
    //Children Prop Count (Fields): 9
    public:

        struct FVector LinearVelocity; // 0x0
        struct FVector AngularVelocity; // 0xc
        struct FVector Location; // 0x18
        struct FRotator Rotation; // 0x24
        char bSimulatedPhysicSleep; // 0x30
        char bRepPhysics; // 0x30
        enum class EVectorQuantization LocationQuantizationLevel; // 0x31
        enum class EVectorQuantization VelocityQuantizationLevel; // 0x32
        enum class ERotatorQuantization RotationQuantizationLevel; // 0x33

    };

    struct FActorTickFunction : FTickFunction //ScriptStruct Engine.ActorTickFunction
    {
    public:


    };

    struct FUniqueNetIdRepl : FUniqueNetIdWrapper //ScriptStruct Engine.UniqueNetIdRepl
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<char> ReplicationBytes; // 0x18

    };

    struct FForceFeedbackParameters //ScriptStruct Engine.ForceFeedbackParameters
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName Tag; // 0x0
        bool bLooping; // 0x8
        bool bIgnoreTimeDilation; // 0x9
        bool bPlayWhilePaused; // 0xa

    };

    struct FViewTargetTransitionParams //ScriptStruct Engine.ViewTargetTransitionParams
    {
    //Children Prop Count (Fields): 4
    public:

        float BlendTime; // 0x0
        enum class EViewTargetBlendFunction BlendFunction; // 0x4
        float BlendExp; // 0x8
        char bLockOutgoing; // 0xc

    };

    struct FUpdateLevelStreamingLevelStatus //ScriptStruct Engine.UpdateLevelStreamingLevelStatus
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName PackageName; // 0x0
        int32_t LODIndex; // 0x8
        char bNewShouldBeLoaded; // 0xc
        char bNewShouldBeVisible; // 0xc
        char bNewShouldBlockOnLoad; // 0xc

    };

    struct FUpdateLevelVisibilityLevelInfo //ScriptStruct Engine.UpdateLevelVisibilityLevelInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName PackageName; // 0x0
        struct FName Filename; // 0x8
        char bIsVisible; // 0x10

    };

    struct FActiveForceFeedbackEffect //ScriptStruct Engine.ActiveForceFeedbackEffect
    {
    //Children Prop Count (Fields): 1
    public:

        class UForceFeedbackEffect* ForceFeedbackEffect; // 0x0

    };

    struct FAIRequestID //ScriptStruct AIModule.AIRequestID
    {
    //Children Prop Count (Fields): 1
    public:

        uint32_t RequestID; // 0x0

    };

    struct FAIStimulus //ScriptStruct AIModule.AIStimulus
    {
    //Children Prop Count (Fields): 7
    public:

        float Age; // 0x0
        float ExpirationAge; // 0x4
        float Strength; // 0x8
        struct FVector StimulusLocation; // 0xc
        struct FVector ReceiverLocation; // 0x18
        struct FName Tag; // 0x24
        char bSuccessfullySensed; // 0x38

    };

    struct FActorPerceptionUpdateInfo //ScriptStruct AIModule.ActorPerceptionUpdateInfo
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t TargetId; // 0x0
        struct TWeakObjectPtr<struct AActor> Target; // 0x4
        struct FAIStimulus Stimulus; // 0xc

    };

    struct FShootInputFlowData //ScriptStruct SGFramework.ShootInputFlowData
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString InputFlowDataSlice; // 0x0
        bool bComplete; // 0x10
        int32_t SequenceNum; // 0x14

    };

    struct FDSSwitchConfig //ScriptStruct SGFramework.DSSwitchConfig
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t nGetAttachLoopMaxNum; // 0x0
        float CheckLimitTime; // 0x4
        bool bTouchCheckSwitcher; // 0x8

    };

    struct FBlueprintSessionResult //ScriptStruct OnlineSubsystemUtils.BlueprintSessionResult
    {
    public:


    };

    struct FInAppPurchaseProductInfo //ScriptStruct OnlineSubsystem.InAppPurchaseProductInfo
    {
    //Children Prop Count (Fields): 11
    public:

        struct FString Identifier; // 0x0
        struct FString TransactionIdentifier; // 0x10
        struct FString DisplayName; // 0x20
        struct FString DisplayDescription; // 0x30
        struct FString DisplayPrice; // 0x40
        float RawPrice; // 0x50
        struct FString CurrencyCode; // 0x58
        struct FString CurrencySymbol; // 0x68
        struct FString DecimalSeparator; // 0x78
        struct FString GroupingSeparator; // 0x88
        struct FString ReceiptData; // 0x98

    };

    struct FInAppPurchaseReceiptInfo2 //ScriptStruct OnlineSubsystemUtils.InAppPurchaseReceiptInfo2
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString ItemName; // 0x0
        struct FString ItemID; // 0x10
        struct FString ValidationInfo; // 0x20

    };

    struct FOnlineProxyStoreOffer //ScriptStruct OnlineSubsystemUtils.OnlineProxyStoreOffer
    {
    //Children Prop Count (Fields): 13
    public:

        struct FString OfferId; // 0x0
        struct FText Title; // 0x10
        struct FText Description; // 0x28
        struct FText LongDescription; // 0x40
        struct FText RegularPriceText; // 0x58
        int32_t RegularPrice; // 0x70
        struct FText PriceText; // 0x78
        int32_t NumericPrice; // 0x90
        struct FString CurrencyCode; // 0x98
        struct FDateTime ReleaseDate; // 0xa8
        struct FDateTime ExpirationDate; // 0xb0
        enum class EOnlineProxyStoreOfferDiscountType DiscountType; // 0xb8
        struct TMap<struct FString, struct FString> DynamicFields; // 0xc0

    };

    struct FInAppPurchaseRestoreInfo //ScriptStruct OnlineSubsystem.InAppPurchaseRestoreInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString Identifier; // 0x0
        struct FString ReceiptData; // 0x10
        struct FString TransactionIdentifier; // 0x20

    };

    struct FInAppPurchaseRestoreInfo2 //ScriptStruct OnlineSubsystemUtils.InAppPurchaseRestoreInfo2
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString ItemName; // 0x0
        struct FString ItemID; // 0x10
        struct FString ValidationInfo; // 0x20

    };

    struct FQuestContextPair //ScriptStruct MFQuestSystem.QuestContextPair
    {
    //Children Prop Count (Fields): 2
    public:

        class UMFQuestContextSourceBase* ContextSource; // 0x0
        class UMFQuestContextBase* Context; // 0x8

    };

    struct FMagicLeapARPinState //ScriptStruct MagicLeapARPin.MagicLeapARPinState
    {
    //Children Prop Count (Fields): 5
    public:

        float Confidence; // 0x0
        float ValidRadius; // 0x4
        float RotationError; // 0x8
        float TranslationError; // 0xc
        enum class EMagicLeapARPinType PinType; // 0x10

    };

    struct FAreaDataInfo //ScriptStruct UAGame.AreaDataInfo
    {
    //Children Prop Count (Fields): 9
    public:

        int32_t Triggertype; // 0x0
        int32_t AreaID; // 0x4
        struct FName AreaName; // 0x8
        int64_t EnterTimeStamp; // 0x10
        float EnterInventoryValue; // 0x18
        int32_t EnterMainWeaponValue; // 0x1c
        int32_t EnterSecondWeaponValue; // 0x20
        int32_t EnterSafeBoxValue; // 0x24
        int32_t EnterArmorValue; // 0x28

    };

    struct FNewTraceableActorInfo //ScriptStruct UAGame.NewTraceableActorInfo
    {
    //Children Prop Count (Fields): 12
    public:

        struct TArray<enum class ENewTraceDisplayPlatform> NeedDisplayPlatforms; // 0x8
        struct TWeakObjectPtr<struct AActor> TraceActor; // 0x18
        bool bActorDestroyed; // 0x20
        struct FVector WorldLocation; // 0x24
        int32_t Handle; // 0x30
        int32_t ConfigID; // 0x34
        bool bNeedTrace; // 0x38
        int64_t CreateTimeStamp; // 0x40
        int32_t TaskId; // 0x48
        int32_t TargetId; // 0x4c
        struct FVector Extend; // 0x50
        int32_t ConditionEscapeId; // 0x5c

    };

    struct FChaosPhysicsCollisionInfo //ScriptStruct ChaosSolverEngine.ChaosPhysicsCollisionInfo
    {
    //Children Prop Count (Fields): 11
    public:

        class UPrimitiveComponent* Component; // 0x0
        class UPrimitiveComponent* OtherComponent; // 0x8
        struct FVector Location; // 0x10
        struct FVector Normal; // 0x1c
        struct FVector AccumulatedImpulse; // 0x28
        struct FVector Velocity; // 0x34
        struct FVector OtherVelocity; // 0x40
        struct FVector AngularVelocity; // 0x4c
        struct FVector OtherAngularVelocity; // 0x58
        float Mass; // 0x64
        float OtherMass; // 0x68

    };

    struct FChaosCollisionEventData //ScriptStruct GeometryCollectionEngine.ChaosCollisionEventData
    {
    //Children Prop Count (Fields): 7
    public:

        struct FVector Location; // 0x0
        struct FVector Normal; // 0xc
        struct FVector Velocity1; // 0x18
        struct FVector Velocity2; // 0x24
        float Mass1; // 0x30
        float Mass2; // 0x34
        struct FVector Impulse; // 0x38

    };

    struct FChaosBreakingEventData //ScriptStruct GeometryCollectionEngine.ChaosBreakingEventData
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Location; // 0x0
        struct FVector Velocity; // 0xc
        float Mass; // 0x18

    };

    struct FChaosTrailingEventData //ScriptStruct GeometryCollectionEngine.ChaosTrailingEventData
    {
    //Children Prop Count (Fields): 5
    public:

        struct FVector Location; // 0x0
        struct FVector Velocity; // 0xc
        struct FVector AngularVelocity; // 0x18
        float Mass; // 0x24
        int32_t ParticleIndex; // 0x28

    };

    struct FChaosBreakEvent //ScriptStruct ChaosSolverEngine.ChaosBreakEvent
    {
    //Children Prop Count (Fields): 5
    public:

        class UPrimitiveComponent* Component; // 0x0
        struct FVector Location; // 0x8
        struct FVector Velocity; // 0x14
        struct FVector AngularVelocity; // 0x20
        float Mass; // 0x2c

    };

    struct FWalkableSlopeOverride //ScriptStruct Engine.WalkableSlopeOverride
    {
    //Children Prop Count (Fields): 2
    public:

        enum class EWalkableSlopeBehavior WalkableSlopeBehavior; // 0x0
        float WalkableSlopeAngle; // 0x4

    };

    struct FBodyInstanceCore //ScriptStruct PhysicsCore.BodyInstanceCore
    {
    //Children Prop Count (Fields): 7
    public:

        char bSimulatePhysics; // 0x10
        char bOverrideMass; // 0x10
        char bEnableGravity; // 0x10
        char bAutoWeld; // 0x10
        char bStartAwake; // 0x10
        char bGenerateWakeEvents; // 0x10
        char bUpdateMassWhenScaleChanges; // 0x10

    };

    struct FBodyInstance : FBodyInstanceCore //ScriptStruct Engine.BodyInstance
    {
    //Children Prop Count (Fields): 37
    public:

        enum class ECollisionChannel ObjectType; // 0x1e
        enum class ECollisionEnabled CollisionEnabled; // 0x20
        enum class ESleepFamily SleepFamily; // 0x59
        enum class EDOFMode DOFMode; // 0x5a
        char bUseCCD; // 0x5b
        char bIgnoreAnalyticCollisions; // 0x5b
        char bNotifyRigidBodyCollision; // 0x5b
        char bLockTranslation; // 0x5b
        char bLockRotation; // 0x5b
        char bLockXTranslation; // 0x5b
        char bLockYTranslation; // 0x5b
        char bLockZTranslation; // 0x5c
        char bLockXRotation; // 0x5c
        char bLockYRotation; // 0x5c
        char bLockZRotation; // 0x5c
        char bOverrideMaxAngularVelocity; // 0x5c
        char bOverrideMaxDepenetrationVelocity; // 0x5c
        char bOverrideWalkableSlopeOnInstance; // 0x5d
        char bInterpolateWhenSubStepping; // 0x5d
        struct FName CollisionProfileName; // 0x6c
        char PositionSolverIterationCount; // 0x74
        char VelocitySolverIterationCount; // 0x75
        struct FCollisionResponse CollisionResponses; // 0x78
        float MaxDepenetrationVelocity; // 0xa8
        float MassInKgOverride; // 0xac
        float LinearDamping; // 0xb8
        float AngularDamping; // 0xbc
        struct FVector CustomDOFPlaneNormal; // 0xc0
        struct FVector COMNudge; // 0xcc
        float MassScale; // 0xd8
        struct FVector InertiaTensorScale; // 0xdc
        struct FWalkableSlopeOverride WalkableSlopeOverride; // 0xf8
        class UPhysicalMaterial* PhysMaterialOverride; // 0x108
        float MaxAngularVelocity; // 0x110
        float CustomSleepThresholdMultiplier; // 0x114
        float StabilizationThresholdMultiplier; // 0x118
        float PhysicsBlendWeight; // 0x11c

    };

    struct FCollisionResponse //ScriptStruct Engine.CollisionResponse
    {
    //Children Prop Count (Fields): 2
    public:

        struct FCollisionResponseContainer ResponseToChannels; // 0x0
        struct TArray<struct FResponseChannel> ResponseArray; // 0x20

    };

    struct FResponseChannel //ScriptStruct Engine.ResponseChannel
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Channel; // 0x0
        enum class ECollisionResponse Response; // 0x8

    };

    struct FCollisionResponseContainer //ScriptStruct Engine.CollisionResponseContainer
    {
    //Children Prop Count (Fields): 32
    public:

        enum class ECollisionResponse WorldStatic; // 0x0
        enum class ECollisionResponse WorldDynamic; // 0x1
        enum class ECollisionResponse Pawn; // 0x2
        enum class ECollisionResponse Visibility; // 0x3
        enum class ECollisionResponse Camera; // 0x4
        enum class ECollisionResponse PhysicsBody; // 0x5
        enum class ECollisionResponse Vehicle; // 0x6
        enum class ECollisionResponse Destructible; // 0x7
        enum class ECollisionResponse EngineTraceChannel1; // 0x8
        enum class ECollisionResponse EngineTraceChannel2; // 0x9
        enum class ECollisionResponse EngineTraceChannel3; // 0xa
        enum class ECollisionResponse EngineTraceChannel4; // 0xb
        enum class ECollisionResponse EngineTraceChannel5; // 0xc
        enum class ECollisionResponse EngineTraceChannel6; // 0xd
        enum class ECollisionResponse GameTraceChannel1; // 0xe
        enum class ECollisionResponse GameTraceChannel2; // 0xf
        enum class ECollisionResponse GameTraceChannel3; // 0x10
        enum class ECollisionResponse GameTraceChannel4; // 0x11
        enum class ECollisionResponse GameTraceChannel5; // 0x12
        enum class ECollisionResponse GameTraceChannel6; // 0x13
        enum class ECollisionResponse GameTraceChannel7; // 0x14
        enum class ECollisionResponse GameTraceChannel8; // 0x15
        enum class ECollisionResponse GameTraceChannel9; // 0x16
        enum class ECollisionResponse GameTraceChannel10; // 0x17
        enum class ECollisionResponse GameTraceChannel11; // 0x18
        enum class ECollisionResponse GameTraceChannel12; // 0x19
        enum class ECollisionResponse GameTraceChannel13; // 0x1a
        enum class ECollisionResponse GameTraceChannel14; // 0x1b
        enum class ECollisionResponse GameTraceChannel15; // 0x1c
        enum class ECollisionResponse GameTraceChannel16; // 0x1d
        enum class ECollisionResponse GameTraceChannel17; // 0x1e
        enum class ECollisionResponse GameTraceChannel18; // 0x1f

    };

    struct FCustomPrimitiveData //ScriptStruct Engine.CustomPrimitiveData
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<float> Data; // 0x0

    };

    struct FLightingChannels //ScriptStruct Engine.LightingChannels
    {
    //Children Prop Count (Fields): 3
    public:

        char bChannel0; // 0x0
        char bChannel1; // 0x0
        char bChannel2; // 0x0

    };

    struct FPrimitivePhysicsShapes //ScriptStruct Engine.PrimitivePhysicsShapes
    {
    //Children Prop Count (Fields): 2
    public:

        struct TMap<class UPrimitiveComponent*, struct FBodyInstancePhysicsShapes> BlockShapes; // 0x0
        struct TMap<class UPrimitiveComponent*, struct FBodyInstancePhysicsShapes> TouchShapes; // 0x50

    };

    struct FBodyInstancePhysicsShapes //ScriptStruct Engine.BodyInstancePhysicsShapes
    {
    public:


    };

    struct FGeometryCollectionRepData //ScriptStruct GeometryCollectionEngine.GeometryCollectionRepData
    {
    public:


    };

    struct FGeomComponentCacheParameters //ScriptStruct GeometryCollectionEngine.GeomComponentCacheParameters
    {
    //Children Prop Count (Fields): 20
    public:

        enum class EGeometryCollectionCacheType CacheMode; // 0x0
        class UGeometryCollectionCache* TargetCache; // 0x8
        float ReverseCacheBeginTime; // 0x10
        bool SaveCollisionData; // 0x14
        bool DoGenerateCollisionData; // 0x15
        int32_t CollisionDataSizeMax; // 0x18
        bool DoCollisionDataSpatialHash; // 0x1c
        float CollisionDataSpatialHashRadius; // 0x20
        int32_t MaxCollisionPerCell; // 0x24
        bool SaveBreakingData; // 0x28
        bool DoGenerateBreakingData; // 0x29
        int32_t BreakingDataSizeMax; // 0x2c
        bool DoBreakingDataSpatialHash; // 0x30
        float BreakingDataSpatialHashRadius; // 0x34
        int32_t MaxBreakingPerCell; // 0x38
        bool SaveTrailingData; // 0x3c
        bool DoGenerateTrailingData; // 0x3d
        int32_t TrailingDataSizeMax; // 0x40
        float TrailingMinSpeedThreshold; // 0x44
        float TrailingMinVolumeThreshold; // 0x48

    };

    struct FAkAdvancedInitializationSettings //ScriptStruct AkAudio.AkAdvancedInitializationSettings
    {
    //Children Prop Count (Fields): 11
    public:

        uint32_t IO_MemorySize; // 0x0
        uint32_t IO_Granularity; // 0x4
        float TargetAutoStreamBufferLength; // 0x8
        bool UseStreamCache; // 0xc
        uint32_t MaximumPinnedBytesInCache; // 0x10
        bool EnableGameSyncPreparation; // 0x14
        uint32_t ContinuousPlaybackLookAhead; // 0x18
        uint32_t MonitorQueuePoolSize; // 0x1c
        uint32_t MaximumHardwareTimeoutMs; // 0x20
        bool DebugOutOfRangeCheckEnabled; // 0x24
        float DebugOutOfRangeLimit; // 0x28

    };

    struct FAkAdvancedInitializationSettingsWithMultiCoreRendering : FAkAdvancedInitializationSettings //ScriptStruct AkAudio.AkAdvancedInitializationSettingsWithMultiCoreRendering
    {
    //Children Prop Count (Fields): 1
    public:

        bool EnableMultiCoreRendering; // 0x2c

    };

    struct FAkAndroidAdvancedInitializationSettings : FAkAdvancedInitializationSettingsWithMultiCoreRendering //ScriptStruct AkAudio.AkAndroidAdvancedInitializationSettings
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t AudioAPI; // 0x30
        bool RoundFrameSizeToHardwareSize; // 0x34

    };

    struct FAkAudioSession //ScriptStruct AkAudio.AkAudioSession
    {
    //Children Prop Count (Fields): 3
    public:

        enum class EAkAudioSessionCategory AudioSessionCategory; // 0x0
        uint32_t AudioSessionCategoryOptions; // 0x4
        enum class EAkAudioSessionMode AudioSessionMode; // 0x8

    };

    struct FVoicePlayingData //ScriptStruct AkAudio.VoicePlayingData
    {
    public:


    };

    struct FAkExternalSourceInfo //ScriptStruct AkAudio.AkExternalSourceInfo
    {
    //Children Prop Count (Fields): 5
    public:

        struct FString ExternalSrcName; // 0x0
        enum class AkCodecId CodecID; // 0x10
        struct FString Filename; // 0x18
        class UAkExternalMediaAsset* ExternalSourceAsset; // 0x28
        bool IsStreamed; // 0x30

    };

    struct FAkSegmentInfo //ScriptStruct AkAudio.AkSegmentInfo
    {
    //Children Prop Count (Fields): 9
    public:

        int32_t CurrentPosition; // 0x0
        int32_t PreEntryDuration; // 0x4
        int32_t ActiveDuration; // 0x8
        int32_t PostExitDuration; // 0xc
        int32_t RemainingLookAheadTime; // 0x10
        float BeatDuration; // 0x14
        float BarDuration; // 0x18
        float GridDuration; // 0x1c
        float GridOffset; // 0x20

    };

    struct FAkMidiEventBase //ScriptStruct AkAudio.AkMidiEventBase
    {
    //Children Prop Count (Fields): 2
    public:

        enum class EAkMidiEventType Type; // 0x0
        char Chan; // 0x1

    };

    struct FAkMidiProgramChange : FAkMidiEventBase //ScriptStruct AkAudio.AkMidiProgramChange
    {
    //Children Prop Count (Fields): 1
    public:

        char ProgramNum; // 0x2

    };

    struct FAkMidiChannelAftertouch : FAkMidiEventBase //ScriptStruct AkAudio.AkMidiChannelAftertouch
    {
    //Children Prop Count (Fields): 1
    public:

        char Value; // 0x2

    };

    struct FAkMidiNoteAftertouch : FAkMidiEventBase //ScriptStruct AkAudio.AkMidiNoteAftertouch
    {
    //Children Prop Count (Fields): 2
    public:

        char Note; // 0x2
        char Value; // 0x3

    };

    struct FAkMidiPitchBend : FAkMidiEventBase //ScriptStruct AkAudio.AkMidiPitchBend
    {
    //Children Prop Count (Fields): 3
    public:

        char ValueLsb; // 0x2
        char ValueMsb; // 0x3
        int32_t FullValue; // 0x4

    };

    struct FAkMidiCc : FAkMidiEventBase //ScriptStruct AkAudio.AkMidiCc
    {
    //Children Prop Count (Fields): 2
    public:

        enum class EAkMidiCcValues Cc; // 0x2
        char Value; // 0x3

    };

    struct FAkMidiNoteOnOff : FAkMidiEventBase //ScriptStruct AkAudio.AkMidiNoteOnOff
    {
    //Children Prop Count (Fields): 2
    public:

        char Note; // 0x2
        char Velocity; // 0x3

    };

    struct FAkMidiGeneric : FAkMidiEventBase //ScriptStruct AkAudio.AkMidiGeneric
    {
    //Children Prop Count (Fields): 2
    public:

        char Param1; // 0x2
        char Param2; // 0x3

    };

    struct FAkOutputSettings //ScriptStruct AkAudio.AkOutputSettings
    {
    //Children Prop Count (Fields): 4
    public:

        struct FString AudioDeviceSharesetName; // 0x0
        int32_t IdDevice; // 0x10
        enum class PanningRule PanRule; // 0x14
        enum class AkChannelConfiguration ChannelConfig; // 0x15

    };

    struct FAkChannelMask //ScriptStruct AkAudio.AkChannelMask
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t ChannelMask; // 0x0

    };

    struct FAkGeometrySurfaceOverride //ScriptStruct AkAudio.AkGeometrySurfaceOverride
    {
    //Children Prop Count (Fields): 4
    public:

        class UAkAcousticTexture* AcousticTexture; // 0x0
        bool bEnableOcclusionOverride; // 0x8
        float OcclusionValue; // 0xc
        float SurfaceArea; // 0x10

    };

    struct FAkGeometryData //ScriptStruct AkAudio.AkGeometryData
    {
    //Children Prop Count (Fields): 5
    public:

        struct TArray<struct FVector> Vertices; // 0x0
        struct TArray<struct FAkAcousticSurface> Surfaces; // 0x10
        struct TArray<struct FAkTriangle> Triangles; // 0x20
        struct TArray<class UPhysicalMaterial*> ToOverrideAcousticTexture; // 0x30
        struct TArray<class UPhysicalMaterial*> ToOverrideOcclusion; // 0x40

    };

    struct FAkTriangle //ScriptStruct AkAudio.AkTriangle
    {
    //Children Prop Count (Fields): 4
    public:

        uint16_t Point0; // 0x0
        uint16_t Point1; // 0x2
        uint16_t Point2; // 0x4
        uint16_t Surface; // 0x6

    };

    struct FAkAcousticSurface //ScriptStruct AkAudio.AkAcousticSurface
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t Texture; // 0x0
        float Occlusion; // 0x4
        struct FString Name; // 0x8

    };

    struct FAkPluginInfo //ScriptStruct AkAudio.AkPluginInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString Name; // 0x0
        uint32_t PluginID; // 0x10
        struct FString dll; // 0x18

    };

    struct FAkCommonInitializationSettings //ScriptStruct AkAudio.AkCommonInitializationSettings
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t MaximumNumberOfMemoryPools; // 0x0
        uint32_t MaximumNumberOfPositioningPaths; // 0x4
        uint32_t CommandQueueSize; // 0x8
        uint32_t SamplesPerFrame; // 0xc
        struct FAkMainOutputSettings MainOutputSettings; // 0x10
        float StreamingLookAheadRatio; // 0x38
        uint16_t NumberOfRefillsInVoice; // 0x3c
        struct FAkSpatialAudioSettings SpatialAudioSettings; // 0x40

    };

    struct FAkSpatialAudioSettings //ScriptStruct AkAudio.AkSpatialAudioSettings
    {
    //Children Prop Count (Fields): 11
    public:

        uint32_t MaxSoundPropagationDepth; // 0x0
        float MovementThreshold; // 0x4
        uint32_t NumberOfPrimaryRays; // 0x8
        uint32_t ReflectionOrder; // 0xc
        float MaximumPathLength; // 0x10
        float CPULimitPercentage; // 0x14
        bool EnableDiffractionOnReflections; // 0x18
        bool EnableGeometricDiffractionAndTransmission; // 0x19
        bool CalcEmitterVirtualPosition; // 0x1a
        bool UseObstruction; // 0x1b
        bool UseOcclusion; // 0x1c

    };

    struct FAkMainOutputSettings //ScriptStruct AkAudio.AkMainOutputSettings
    {
    //Children Prop Count (Fields): 6
    public:

        struct FString AudioDeviceShareset; // 0x0
        uint32_t DeviceID; // 0x10
        enum class EAkPanningRule PanningRule; // 0x14
        enum class EAkChannelConfigType ChannelConfigType; // 0x18
        uint32_t ChannelMask; // 0x1c
        uint32_t NumberOfChannels; // 0x20

    };

    struct FAkCommonInitializationSettingsWithSampleRate : FAkCommonInitializationSettings //ScriptStruct AkAudio.AkCommonInitializationSettingsWithSampleRate
    {
    //Children Prop Count (Fields): 1
    public:

        uint32_t SampleRate; // 0x60

    };

    struct FAkCommunicationSettings //ScriptStruct AkAudio.AkCommunicationSettings
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t PoolSize; // 0x0
        uint16_t DiscoveryBroadcastPort; // 0x4
        uint16_t CommandPort; // 0x6
        uint16_t NotificationPort; // 0x8
        struct FString NetworkName; // 0x10

    };

    struct FAkCommunicationSettingsWithCommSelection : FAkCommunicationSettings //ScriptStruct AkAudio.AkCommunicationSettingsWithCommSelection
    {
    //Children Prop Count (Fields): 1
    public:

        enum class EAkCommSystem CommunicationSystem; // 0x20

    };

    struct FAkCommunicationSettingsWithSystemInitialization : FAkCommunicationSettings //ScriptStruct AkAudio.AkCommunicationSettingsWithSystemInitialization
    {
    //Children Prop Count (Fields): 1
    public:

        bool InitializeSystemComms; // 0x20

    };

    struct FAkBoolPropertyToControl //ScriptStruct AkAudio.AkBoolPropertyToControl
    {
    //Children Prop Count (Fields): 1
    public:

        struct FString ItemProperty; // 0x0

    };

    struct FAkPropertyToControl //ScriptStruct AkAudio.AkPropertyToControl
    {
    //Children Prop Count (Fields): 1
    public:

        struct FString ItemProperty; // 0x0

    };

    struct FAkReverbDescriptor //ScriptStruct AkAudio.AkReverbDescriptor
    {
    public:


    };

    struct FAkAcousticTextureParams //ScriptStruct AkAudio.AkAcousticTextureParams
    {
    //Children Prop Count (Fields): 1
    public:

        struct FVector4 AbsorptionValues; // 0x0

    };

    struct FAkGeometrySurfacePropertiesToMap //ScriptStruct AkAudio.AkGeometrySurfacePropertiesToMap
    {
    //Children Prop Count (Fields): 2
    public:

        struct TSoftObjectPtr<UAkAcousticTexture> AcousticTexture; // 0x0
        float OcclusionValue; // 0x28

    };

    struct FAkWwiseItemToControl //ScriptStruct AkAudio.AkWwiseItemToControl
    {
    //Children Prop Count (Fields): 2
    public:

        struct FAkWwiseObjectDetails ItemPicked; // 0x0
        struct FString ItemPath; // 0x30

    };

    struct FAkWwiseObjectDetails //ScriptStruct AkAudio.AkWwiseObjectDetails
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString ItemName; // 0x0
        struct FString ItemPath; // 0x10
        struct FString ItemID; // 0x20

    };

    struct FAkSurfacePoly //ScriptStruct AkAudio.AkSurfacePoly
    {
    //Children Prop Count (Fields): 4
    public:

        class UAkAcousticTexture* Texture; // 0x0
        float Occlusion; // 0x8
        bool EnableSurface; // 0xc
        float SurfaceArea; // 0x10

    };

    struct FAkSurfaceEdgeInfo //ScriptStruct AkAudio.AkSurfaceEdgeInfo
    {
    public:


    };

    struct FAkSurfaceEdgeVerts //ScriptStruct AkAudio.AkSurfaceEdgeVerts
    {
    public:


    };

    struct FAkWaapiFieldNames //ScriptStruct AkAudio.AkWaapiFieldNames
    {
    //Children Prop Count (Fields): 1
    public:

        struct FString FieldName; // 0x0

    };

    struct FAkWaapiUri //ScriptStruct AkAudio.AkWaapiUri
    {
    //Children Prop Count (Fields): 1
    public:

        struct FString Uri; // 0x0

    };

    struct FAkWindowsAdvancedInitializationSettings : FAkAdvancedInitializationSettingsWithMultiCoreRendering //ScriptStruct AkAudio.AkWindowsAdvancedInitializationSettings
    {
    //Children Prop Count (Fields): 2
    public:

        bool UseHeadMountedDisplayAudioDevice; // 0x30
        uint32_t MaxSystemAudioObjects; // 0x34

    };

    struct FAudioConsoleMessage //ScriptStruct AkAudio.AudioConsoleMessage
    {
    //Children Prop Count (Fields): 8
    public:

        float TimeSeconds; // 0x0
        enum class AudioLogVerbosity Verbosity; // 0x4
        enum class AudioAction Action; // 0x5
        enum class AudioObjectType ObjectType; // 0x6
        struct FString ObjectName; // 0x8
        struct FString GameObject; // 0x18
        float Value; // 0x28
        struct FString Source; // 0x30

    };

    struct FAudioStudioProfileData //ScriptStruct AkAudio.AudioStudioProfileData
    {
    //Children Prop Count (Fields): 20
    public:

        double ak_totalCPU; // 0x0
        double ak_pluginCPU; // 0x8
        double ak_calCpuByRendertime; // 0x10
        uint32_t ak_physicalVoices; // 0x18
        uint32_t ak_virtualVoices; // 0x1c
        uint32_t ak_totalVoices; // 0x20
        uint32_t ak_nbActiveEvents; // 0x24
        float ak_memory; // 0x28
        float gameCPU; // 0x2c
        float FrameTime; // 0x30
        float gameThreadTime; // 0x34
        float gameMemory; // 0x38
        uint32_t ak_memory_Used; // 0x3c
        uint32_t ak_memory_DeviceUsed; // 0x40
        uint32_t ak_memory_Reserved; // 0x44
        uint32_t ak_memory_Max; // 0x48
        float ak_volume_bus_weapon; // 0x4c
        float ak_volume_bus_action; // 0x50
        float ak_volume_bus_ambience; // 0x54
        float ak_volume_bus_voice; // 0x58

    };

    struct FLevelAudioData //ScriptStruct AkAudio.LevelAudioData
    {
    //Children Prop Count (Fields): 9
    public:

        struct FString InheritedConfigName; // 0x0
        struct TArray<struct FString> Levels; // 0x10
        struct TArray<struct FString> Banks; // 0x20
        struct TArray<struct FString> States; // 0x30
        struct TArray<struct FString> Events; // 0x40
        bool UnloadBanksOnLevelUnload; // 0x50
        bool StopEventsOnLevelUnload; // 0x51
        bool StopAll2DSoundsOnLevelUnload; // 0x52
        bool LevelNameExactMatch; // 0x53

    };

    struct FAudioEventExtendData_HD : FTableRowBase //ScriptStruct AkAudio.AudioEventExtendData_HD
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName Category; // 0x8

    };

    struct FTArrUMultiSourceSoundComponent //ScriptStruct AkAudio.TArrUMultiSourceSoundComponent
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class UMultiSourceSoundComponent*> TArrUMultiSourceSoundComponent; // 0x0

    };

    struct FMovieSceneEvalTemplateBase //ScriptStruct MovieScene.MovieSceneEvalTemplateBase
    {
    public:


    };

    struct FMovieSceneEvalTemplate : FMovieSceneEvalTemplateBase //ScriptStruct MovieScene.MovieSceneEvalTemplate
    {
    //Children Prop Count (Fields): 2
    public:

        enum class EMovieSceneCompletionMode CompletionMode; // 0x10
        struct TWeakObjectPtr<struct UMovieSceneSection> SourceSectionPtr; // 0x14

    };

    struct FMovieSceneAkAudioEventTemplate : FMovieSceneEvalTemplate //ScriptStruct AkAudio.MovieSceneAkAudioEventTemplate
    {
    //Children Prop Count (Fields): 1
    public:

        class UMovieSceneAkAudioEventSection* Section; // 0x20

    };

    struct FMovieSceneAkAudioRTPCTemplate : FMovieSceneEvalTemplate //ScriptStruct AkAudio.MovieSceneAkAudioRTPCTemplate
    {
    //Children Prop Count (Fields): 1
    public:

        class UMovieSceneAkAudioRTPCSection* Section; // 0x20

    };

    struct FMovieSceneFloatChannelSerializationHelper //ScriptStruct AkAudio.MovieSceneFloatChannelSerializationHelper
    {
    //Children Prop Count (Fields): 6
    public:

        enum class ERichCurveExtrapolation PreInfinityExtrap; // 0x0
        enum class ERichCurveExtrapolation PostInfinityExtrap; // 0x1
        struct TArray<int32_t> Times; // 0x8
        struct TArray<struct FMovieSceneFloatValueSerializationHelper> Values; // 0x18
        float DefaultValue; // 0x28
        bool bHasDefaultValue; // 0x2c

    };

    struct FMovieSceneFloatValueSerializationHelper //ScriptStruct AkAudio.MovieSceneFloatValueSerializationHelper
    {
    //Children Prop Count (Fields): 4
    public:

        float Value; // 0x0
        enum class ERichCurveInterpMode InterpMode; // 0x4
        enum class ERichCurveTangentMode TangentMode; // 0x5
        struct FMovieSceneTangentDataSerializationHelper Tangent; // 0x8

    };

    struct FMovieSceneTangentDataSerializationHelper //ScriptStruct AkAudio.MovieSceneTangentDataSerializationHelper
    {
    //Children Prop Count (Fields): 5
    public:

        float ArriveTangent; // 0x0
        float LeaveTangent; // 0x4
        enum class ERichCurveTangentWeightMode TangentWeightMode; // 0x8
        float ArriveTangentWeight; // 0xc
        float LeaveTangentWeight; // 0x10

    };

    struct FParticleSoundData //ScriptStruct AkAudio.ParticleSoundData
    {
    //Children Prop Count (Fields): 3
    public:

        enum class EParticleEventType ParticleEventType; // 0x0
        struct FName ParticleEventName; // 0x4
        class UAkAudioEvent* AudioEvent; // 0x10

    };

    struct FMFFoliageBillboardInstanceInfo //ScriptStruct MFGridLevelsRuntime.MFFoliageBillboardInstanceInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t SectionIndex; // 0x0
        char bVisibile; // 0x4

    };

    struct FMFFoliageBillboardSection //ScriptStruct MFGridLevelsRuntime.MFFoliageBillboardSection
    {
    //Children Prop Count (Fields): 4
    public:

        class UStaticMesh* StaticMesh; // 0x0
        class UMaterialInterface* MaterialInterface; // 0x8
        struct TArray<struct FTransform> PerInstanceTransform; // 0x10
        struct TArray<float> PerInstanceCustomData; // 0x20

    };

    struct FMFStaticMeshComponentGroupForCombine //ScriptStruct MFGridLevelsRuntime.MFStaticMeshComponentGroupForCombine
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FMFStaticMeshComponentForCombine> StaticMeshComponents; // 0x0

    };

    struct FMFStaticMeshComponentForCombine //ScriptStruct MFGridLevelsRuntime.MFStaticMeshComponentForCombine
    {
    //Children Prop Count (Fields): 3
    public:

        class UStaticMeshComponent* Component; // 0x0
        class UMaterialInterface* Material; // 0x8
        uint32_t HashCode; // 0x10

    };

    struct FProcMeshSection //ScriptStruct ProceduralMeshComponent.ProcMeshSection
    {
    //Children Prop Count (Fields): 5
    public:

        struct TArray<struct FProcMeshVertex> ProcVertexBuffer; // 0x0
        struct TArray<uint32_t> ProcIndexBuffer; // 0x10
        struct FBox SectionLocalBox; // 0x20
        bool bEnableCollision; // 0x3c
        bool bSectionVisible; // 0x3d

    };

    struct FProcMeshVertex //ScriptStruct ProceduralMeshComponent.ProcMeshVertex
    {
    //Children Prop Count (Fields): 8
    public:

        struct FVector position; // 0x0
        struct FVector Normal; // 0xc
        struct FProcMeshTangent Tangent; // 0x18
        struct FColor Color; // 0x28
        struct FVector2D UV0; // 0x2c
        struct FVector2D UV1; // 0x34
        struct FVector2D UV2; // 0x3c
        struct FVector2D UV3; // 0x44

    };

    struct FProcMeshTangent //ScriptStruct ProceduralMeshComponent.ProcMeshTangent
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector TangentX; // 0x0
        bool bFlipTangentY; // 0xc

    };

    struct FConnectionAlwaysRelevantNodePair //ScriptStruct ReplicationGraph.ConnectionAlwaysRelevantNodePair
    {
    //Children Prop Count (Fields): 2
    public:

        class UNetConnection* NetConnection; // 0x0
        class UReplicationGraphNode_AlwaysRelevant_ForConnection* Node; // 0x8

    };

    struct FDynamicCharacterRepInfo //ScriptStruct ReplicationGraph.DynamicCharacterRepInfo
    {
    //Children Prop Count (Fields): 8
    public:

        class AActor* Actor; // 0x0
        uint32_t ReplicationPeriodFrame; // 0x8
        uint32_t FastPath_ReplicationPeriodFrame; // 0xc
        uint32_t FastShare_ReplicationIndex; // 0x10
        uint32_t Default_ReplicationIndex; // 0x14
        float NetPriority; // 0x18
        float ExtraNetPriority; // 0x1c
        bool bReplicate_FastShare; // 0x20

    };

    struct FLastLocationGatherInfo //ScriptStruct ReplicationGraph.LastLocationGatherInfo
    {
    //Children Prop Count (Fields): 3
    public:

        class UNetConnection* Connection; // 0x0
        struct FVector LastLocation; // 0x8
        struct FVector LastOutOfRangeLocationCheck; // 0x14

    };

    struct FTearOffActorInfo //ScriptStruct ReplicationGraph.TearOffActorInfo
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* Actor; // 0x8

    };

    struct FAlwaysRelevantActorInfo //ScriptStruct ReplicationGraph.AlwaysRelevantActorInfo
    {
    //Children Prop Count (Fields): 3
    public:

        class UNetConnection* Connection; // 0x0
        class AActor* LastViewer; // 0x8
        class AActor* LastViewTarget; // 0x10

    };

    struct FClassReplicationInfo //ScriptStruct ReplicationGraph.ClassReplicationInfo
    {
    //Children Prop Count (Fields): 8
    public:

        float DistancePriorityScale; // 0x0
        float StarvationPriorityScale; // 0x4
        float AccumulatedNetPriorityBias; // 0x8
        uint16_t ReplicationPeriodFrame; // 0xc
        uint16_t FastPath_ReplicationPeriodFrame; // 0xe
        uint16_t ActorChannelFrameTimeout; // 0x10
        float CullDistance; // 0x68
        float CullDistanceSquared; // 0x6c

    };

    struct FNetSerializeScriptStructCache //ScriptStruct GameplayAbilities.NetSerializeScriptStructCache
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class UScriptStruct*> ScriptStructs; // 0x0

    };

    struct FAttributeMetaData : FTableRowBase //ScriptStruct GameplayAbilities.AttributeMetaData
    {
    //Children Prop Count (Fields): 5
    public:

        float BaseValue; // 0x8
        float MinValue; // 0xc
        float MaxValue; // 0x10
        struct FString DerivedAttributeInfo; // 0x18
        bool bCanStack; // 0x28

    };

    struct FGameplayAttributeData //ScriptStruct GameplayAbilities.GameplayAttributeData
    {
    //Children Prop Count (Fields): 2
    public:

        float BaseValue; // 0x8
        float CurrentValue; // 0xc

    };

    struct FAbilityTriggerData //ScriptStruct GameplayAbilities.AbilityTriggerData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FGameplayTag TriggerTag; // 0x0
        enum class EGameplayAbilityTriggerSource TriggerSource; // 0x8

    };

    struct FGameplayAbilityBindInfo //ScriptStruct GameplayAbilities.GameplayAbilityBindInfo
    {
    //Children Prop Count (Fields): 2
    public:

        enum class EGameplayAbilityInputBinds Command; // 0x0
        class UGameplayAbility* GameplayAbilityClass; // 0x8

    };

    struct FGameplayTargetDataFilterHandle //ScriptStruct GameplayAbilities.GameplayTargetDataFilterHandle
    {
    public:


    };

    struct FGameplayTargetDataFilter //ScriptStruct GameplayAbilities.GameplayTargetDataFilter
    {
    //Children Prop Count (Fields): 4
    public:

        class AActor* SelfActor; // 0x8
        class AActor* RequiredActorClass; // 0x10
        enum class ETargetDataFilterSelf SelfFilter; // 0x18
        bool bReverseFilter; // 0x19

    };

    struct FGameplayAbilityTargetData //ScriptStruct GameplayAbilities.GameplayAbilityTargetData
    {
    public:


    };

    struct FGameplayAbilityTargetData_SingleTargetHit : FGameplayAbilityTargetData //ScriptStruct GameplayAbilities.GameplayAbilityTargetData_SingleTargetHit
    {
    //Children Prop Count (Fields): 2
    public:

        struct FHitResult HitResult; // 0x8
        bool bHitReplaced; // 0xa0

    };

    struct FGameplayAbilityTargetData_ActorArray : FGameplayAbilityTargetData //ScriptStruct GameplayAbilities.GameplayAbilityTargetData_ActorArray
    {
    //Children Prop Count (Fields): 2
    public:

        struct FGameplayAbilityTargetingLocationInfo SourceLocation; // 0x10
        struct TArray<struct TWeakObjectPtr<struct AActor>> TargetActorArray; // 0x80

    };

    struct FGameplayAbilityTargetingLocationInfo //ScriptStruct GameplayAbilities.GameplayAbilityTargetingLocationInfo
    {
    //Children Prop Count (Fields): 6
    public:

        enum class EGameplayAbilityTargetingLocationType LocationType; // 0x10
        struct FTransform LiteralTransform; // 0x20
        class AActor* SourceActor; // 0x50
        class UMeshComponent* SourceComponent; // 0x58
        class UGameplayAbility* SourceAbility; // 0x60
        struct FName SourceSocketName; // 0x68

    };

    struct FGameplayAbilityTargetData_LocationInfo : FGameplayAbilityTargetData //ScriptStruct GameplayAbilities.GameplayAbilityTargetData_LocationInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FGameplayAbilityTargetingLocationInfo SourceLocation; // 0x10
        struct FGameplayAbilityTargetingLocationInfo TargetLocation; // 0x80

    };

    struct FGameplayAbilitySpecHandleAndPredictionKey //ScriptStruct GameplayAbilities.GameplayAbilitySpecHandleAndPredictionKey
    {
    //Children Prop Count (Fields): 2
    public:

        struct FGameplayAbilitySpecHandle AbilityHandle; // 0x0
        int32_t PredictionKeyAtCreation; // 0x4

    };

    struct FAbilityTaskDebugMessage //ScriptStruct GameplayAbilities.AbilityTaskDebugMessage
    {
    //Children Prop Count (Fields): 2
    public:

        class UGameplayTask* FromTask; // 0x0
        struct FString Message; // 0x8

    };

    struct FAbilityEndedData //ScriptStruct GameplayAbilities.AbilityEndedData
    {
    //Children Prop Count (Fields): 4
    public:

        class UGameplayAbility* AbilityThatEnded; // 0x0
        struct FGameplayAbilitySpecHandle AbilitySpecHandle; // 0x8
        bool bReplicateEndAbility; // 0xc
        bool bWasCancelled; // 0xd

    };

    struct FGameplayAbilityActorInfo //ScriptStruct GameplayAbilities.GameplayAbilityActorInfo
    {
    //Children Prop Count (Fields): 8
    public:

        struct TWeakObjectPtr<struct AActor> OwnerActor; // 0x8
        struct TWeakObjectPtr<struct AActor> AvatarActor; // 0x10
        struct TWeakObjectPtr<struct APlayerController> PlayerController; // 0x18
        struct TWeakObjectPtr<struct UAbilitySystemComponent> AbilitySystemComponent; // 0x20
        struct TWeakObjectPtr<struct USkeletalMeshComponent> SkeletalMeshComponent; // 0x28
        struct TWeakObjectPtr<struct UAnimInstance> AnimInstance; // 0x30
        struct TWeakObjectPtr<struct UMovementComponent> MovementComponent; // 0x38
        struct FName AffectedAnimInstanceTag; // 0x40

    };

    struct FWorldReticleParameters //ScriptStruct GameplayAbilities.WorldReticleParameters
    {
    //Children Prop Count (Fields): 1
    public:

        struct FVector AOEScale; // 0x0

    };

    struct FPreallocationInfo //ScriptStruct GameplayAbilities.PreallocationInfo
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class AGameplayCueNotify_Actor*> ClassesNeedingPreallocation; // 0x50

    };

    struct FGameplayCuePendingExecute //ScriptStruct GameplayAbilities.GameplayCuePendingExecute
    {
    //Children Prop Count (Fields): 5
    public:

        struct FPredictionKey PredictionKey; // 0x18
        enum class EGameplayCuePayloadType PayloadType; // 0x28
        class UAbilitySystemComponent* OwningComponent; // 0x30
        struct FGameplayEffectSpecForRPC FromSpec; // 0x38
        struct FGameplayCueParameters CueParameters; // 0xb0

    };

    struct FMinimalGameplayCueReplicationProxy //ScriptStruct GameplayAbilities.MinimalGameplayCueReplicationProxy
    {
    //Children Prop Count (Fields): 1
    public:

        class UAbilitySystemComponent* Owner; // 0x1b0

    };

    struct FGameplayCueTag //ScriptStruct GameplayAbilities.GameplayCueTag
    {
    //Children Prop Count (Fields): 1
    public:

        struct FGameplayTag GameplayCueTag; // 0x0

    };

    struct FGameplayCueObjectLibrary //ScriptStruct GameplayAbilities.GameplayCueObjectLibrary
    {
    //Children Prop Count (Fields): 8
    public:

        struct TArray<struct FString> Paths; // 0x0
        class UObjectLibrary* ActorObjectLibrary; // 0x30
        class UObjectLibrary* StaticObjectLibrary; // 0x38
        class UGameplayCueSet* CueSet; // 0x40
        bool bShouldSyncScan; // 0x4c
        bool bShouldAsyncLoad; // 0x4d
        bool bShouldSyncLoad; // 0x4e
        bool bHasBeenInitialized; // 0x4f

    };

    struct FGameplayCueNotifyData //ScriptStruct GameplayAbilities.GameplayCueNotifyData
    {
    //Children Prop Count (Fields): 3
    public:

        struct FGameplayTag GameplayCueTag; // 0x0
        struct FSoftObjectPath GameplayCueNotifyObj; // 0x8
        class UObject* LoadedGameplayCueClass; // 0x20

    };

    struct FGameplayCueTranslationManager //ScriptStruct GameplayAbilities.GameplayCueTranslationManager
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FGameplayCueTranslatorNode> TranslationLUT; // 0x0
        struct TMap<struct FName, struct FGameplayCueTranslatorNodeIndex> TranslationNameToIndexMap; // 0x10
        class UGameplayTagsManager* TagManager; // 0x60

    };

    struct FGameplayCueTranslatorNodeIndex //ScriptStruct GameplayAbilities.GameplayCueTranslatorNodeIndex
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t Index; // 0x0

    };

    struct FGameplayCueTranslatorNode //ScriptStruct GameplayAbilities.GameplayCueTranslatorNode
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<struct FGameplayCueTranslationLink> Links; // 0x0
        struct FGameplayCueTranslatorNodeIndex CachedIndex; // 0x10
        struct FGameplayTag CachedGameplayTag; // 0x14
        struct FName CachedGameplayTagName; // 0x1c

    };

    struct FGameplayCueTranslationLink //ScriptStruct GameplayAbilities.GameplayCueTranslationLink
    {
    //Children Prop Count (Fields): 1
    public:

        class UGameplayCueTranslator* RulesCDO; // 0x0

    };

    struct FActiveGameplayEffectQuery //ScriptStruct GameplayAbilities.ActiveGameplayEffectQuery
    {
    public:


    };

    struct FInheritedTagContainer //ScriptStruct GameplayAbilities.InheritedTagContainer
    {
    //Children Prop Count (Fields): 3
    public:

        struct FGameplayTagContainer CombinedTags; // 0x0
        struct FGameplayTagContainer Added; // 0x20
        struct FGameplayTagContainer Removed; // 0x40

    };

    struct FGameplayEffectCue //ScriptStruct GameplayAbilities.GameplayEffectCue
    {
    //Children Prop Count (Fields): 4
    public:

        struct FGameplayAttribute MagnitudeAttribute; // 0x0
        float MinLevel; // 0x38
        float MaxLevel; // 0x3c
        struct FGameplayTagContainer GameplayCueTags; // 0x40

    };

    struct FGameplayModifierInfo //ScriptStruct GameplayAbilities.GameplayModifierInfo
    {
    //Children Prop Count (Fields): 9
    public:

        struct FGameplayAttribute Attribute; // 0x0
        enum class EGameplayModOp ModifierOp; // 0x38
        enum class EGameplayModsSelector ModifiersSelector; // 0x39
        char Priority; // 0x3a
        struct FScalableFloat Magnitude; // 0x40
        struct FGameplayEffectModifierMagnitude ModifierMagnitude; // 0x60
        struct FGameplayModEvaluationChannelSettings EvaluationChannelSettings; // 0x208
        struct FGameplayTagRequirements SourceTags; // 0x210
        struct FGameplayTagRequirements TargetTags; // 0x250

    };

    struct FGameplayTagRequirements //ScriptStruct GameplayAbilities.GameplayTagRequirements
    {
    //Children Prop Count (Fields): 2
    public:

        struct FGameplayTagContainer RequireTags; // 0x0
        struct FGameplayTagContainer IgnoreTags; // 0x20

    };

    struct FGameplayModEvaluationChannelSettings //ScriptStruct GameplayAbilities.GameplayModEvaluationChannelSettings
    {
    //Children Prop Count (Fields): 1
    public:

        enum class EGameplayModEvaluationChannel Channel; // 0x0

    };

    struct FGameplayEffectModifierMagnitude //ScriptStruct GameplayAbilities.GameplayEffectModifierMagnitude
    {
    //Children Prop Count (Fields): 5
    public:

        enum class EGameplayEffectMagnitudeCalculation MagnitudeCalculationType; // 0x0
        struct FScalableFloat ScalableFloatMagnitude; // 0x8
        struct FAttributeBasedFloat AttributeBasedMagnitude; // 0x28
        struct FCustomCalculationBasedFloat CustomMagnitude; // 0x120
        struct FSetByCallerFloat SetByCallerMagnitude; // 0x198

    };

    struct FSetByCallerFloat //ScriptStruct GameplayAbilities.SetByCallerFloat
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName DataName; // 0x0
        struct FGameplayTag DataTag; // 0x8

    };

    struct FCustomCalculationBasedFloat //ScriptStruct GameplayAbilities.CustomCalculationBasedFloat
    {
    //Children Prop Count (Fields): 5
    public:

        class UGameplayModMagnitudeCalculation* CalculationClassMagnitude; // 0x0
        struct FScalableFloat Coefficient; // 0x8
        struct FScalableFloat PreMultiplyAdditiveValue; // 0x28
        struct FScalableFloat PostMultiplyAdditiveValue; // 0x48
        struct FCurveTableRowHandle FinalLookupCurve; // 0x68

    };

    struct FAttributeBasedFloat //ScriptStruct GameplayAbilities.AttributeBasedFloat
    {
    //Children Prop Count (Fields): 9
    public:

        struct FScalableFloat Coefficient; // 0x0
        struct FScalableFloat PreMultiplyAdditiveValue; // 0x20
        struct FScalableFloat PostMultiplyAdditiveValue; // 0x40
        struct FGameplayEffectAttributeCaptureDefinition BackingAttribute; // 0x60
        struct FCurveTableRowHandle AttributeCurve; // 0xa0
        enum class EAttributeBasedFloatCalculationType AttributeCalculationType; // 0xb0
        enum class EGameplayModEvaluationChannel FinalChannel; // 0xb1
        struct FGameplayTagContainer SourceTagFilter; // 0xb8
        struct FGameplayTagContainer TargetTagFilter; // 0xd8

    };

    struct FGameplayEffectExecutionDefinition //ScriptStruct GameplayAbilities.GameplayEffectExecutionDefinition
    {
    //Children Prop Count (Fields): 5
    public:

        class UGameplayEffectExecutionCalculation* CalculationClass; // 0x0
        struct FGameplayTagContainer PassedInTags; // 0x8
        struct TArray<struct FGameplayEffectExecutionScopedModifierInfo> CalculationModifiers; // 0x28
        struct TArray<class UGameplayEffect*> ConditionalGameplayEffectClasses; // 0x38
        struct TArray<struct FConditionalGameplayEffect> ConditionalGameplayEffects; // 0x48

    };

    struct FConditionalGameplayEffect //ScriptStruct GameplayAbilities.ConditionalGameplayEffect
    {
    //Children Prop Count (Fields): 2
    public:

        class UGameplayEffect* EffectClass; // 0x0
        struct FGameplayTagContainer RequiredSourceTags; // 0x8

    };

    struct FGameplayEffectExecutionScopedModifierInfo //ScriptStruct GameplayAbilities.GameplayEffectExecutionScopedModifierInfo
    {
    //Children Prop Count (Fields): 10
    public:

        struct FGameplayEffectAttributeCaptureDefinition CapturedAttribute; // 0x0
        struct FGameplayTag TransientAggregatorIdentifier; // 0x40
        enum class EGameplayEffectScopedModifierAggregatorType AggregatorType; // 0x48
        enum class EGameplayModOp ModifierOp; // 0x49
        enum class EGameplayModsSelector ModifiersSelector; // 0x4a
        char Priority; // 0x4b
        struct FGameplayEffectModifierMagnitude ModifierMagnitude; // 0x50
        struct FGameplayModEvaluationChannelSettings EvaluationChannelSettings; // 0x1f8
        struct FGameplayTagRequirements SourceTags; // 0x200
        struct FGameplayTagRequirements TargetTags; // 0x240

    };

    struct FGameplayEffectCustomExecutionOutput //ScriptStruct GameplayAbilities.GameplayEffectCustomExecutionOutput
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<struct FGameplayModifierEvaluatedData> OutputModifiers; // 0x0
        char bTriggerConditionalGameplayEffects; // 0x10
        char bHandledStackCountManually; // 0x10
        char bHandledGameplayCuesManually; // 0x10

    };

    struct FGameplayModifierEvaluatedData //ScriptStruct GameplayAbilities.GameplayModifierEvaluatedData
    {
    //Children Prop Count (Fields): 8
    public:

        struct FGameplayAttribute Attribute; // 0x0
        enum class EGameplayModOp ModifierOp; // 0x38
        float Magnitude; // 0x3c
        char Priority; // 0x40
        enum class EGameplayModsSelector ModsSelector; // 0x41
        enum class EGameplayModEvaluationChannel ModsChannel; // 0x42
        struct FActiveGameplayEffectHandle Handle; // 0x58
        bool IsValid; // 0x60

    };

    struct FGameplayEffectCustomExecutionParameters //ScriptStruct GameplayAbilities.GameplayEffectCustomExecutionParameters
    {
    public:


    };

    struct FGameplayTagBlueprintPropertyMap //ScriptStruct GameplayAbilities.GameplayTagBlueprintPropertyMap
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FGameplayTagBlueprintPropertyMapping> PropertyMappings; // 0x10

    };

    struct FGameplayTagBlueprintPropertyMapping //ScriptStruct GameplayAbilities.GameplayTagBlueprintPropertyMapping
    {
    //Children Prop Count (Fields): 4
    public:

        struct FGameplayTag TagToMap; // 0x0
        struct TFieldPath<FProperty> PropertyToEdit; // 0x8
        struct FName PropertyName; // 0x28
        struct FGuid PropertyGuid; // 0x30

    };

    struct FGameplayEffectContext //ScriptStruct GameplayAbilities.GameplayEffectContext
    {
    //Children Prop Count (Fields): 11
    public:

        struct TWeakObjectPtr<struct AActor> Instigator; // 0x8
        struct TWeakObjectPtr<struct AActor> EffectCauser; // 0x10
        struct TWeakObjectPtr<struct UGameplayAbility> AbilityCDO; // 0x18
        struct TWeakObjectPtr<struct UGameplayAbility> AbilityInstanceNotReplicated; // 0x20
        int32_t AbilityLevel; // 0x28
        struct TWeakObjectPtr<struct UObject> SourceObject; // 0x2c
        struct TWeakObjectPtr<struct UAbilitySystemComponent> InstigatorAbilitySystemComponent; // 0x34
        struct TArray<struct TWeakObjectPtr<struct AActor>> Actors; // 0x40
        struct FVector WorldOrigin; // 0x60
        char bHasWorldOrigin; // 0x6c
        char bReplicateSourceObject; // 0x6c

    };

    struct FGameplayTagResponseTableEntry //ScriptStruct GameplayAbilities.GameplayTagResponseTableEntry
    {
    //Children Prop Count (Fields): 2
    public:

        struct FGameplayTagReponsePair Positive; // 0x0
        struct FGameplayTagReponsePair Negative; // 0x28

    };

    struct FGameplayTagReponsePair //ScriptStruct GameplayAbilities.GameplayTagReponsePair
    {
    //Children Prop Count (Fields): 4
    public:

        struct FGameplayTag Tag; // 0x0
        class UGameplayEffect* ResponseGameplayEffect; // 0x8
        struct TArray<class UGameplayEffect*> ResponseGameplayEffects; // 0x10
        int32_t SoftCountCap; // 0x20

    };

    struct FAdaptorPolygon2Group //ScriptStruct EditableMesh.AdaptorPolygon2Group
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t RenderingSectionIndex; // 0x0
        int32_t MaterialIndex; // 0x4
        int32_t MaxTriangles; // 0x8

    };

    struct FAdaptorPolygon //ScriptStruct EditableMesh.AdaptorPolygon
    {
    //Children Prop Count (Fields): 2
    public:

        struct FPolygonGroupID PolygonGroupID; // 0x0
        struct TArray<struct FAdaptorTriangleID> TriangulatedPolygonTriangleIndices; // 0x8

    };

    struct FElementID //ScriptStruct MeshDescription.ElementID
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t IDValue; // 0x0

    };

    struct FAdaptorTriangleID : FElementID //ScriptStruct EditableMesh.AdaptorTriangleID
    {
    public:


    };

    struct FPolygonGroupID : FElementID //ScriptStruct MeshDescription.PolygonGroupID
    {
    public:


    };

    struct FPolygonGroupForPolygon //ScriptStruct EditableMesh.PolygonGroupForPolygon
    {
    //Children Prop Count (Fields): 2
    public:

        struct FPolygonID PolygonID; // 0x0
        struct FPolygonGroupID PolygonGroupID; // 0x4

    };

    struct FPolygonID : FElementID //ScriptStruct MeshDescription.PolygonID
    {
    public:


    };

    struct FPolygonGroupToCreate //ScriptStruct EditableMesh.PolygonGroupToCreate
    {
    //Children Prop Count (Fields): 2
    public:

        struct FMeshElementAttributeList PolygonGroupAttributes; // 0x0
        struct FPolygonGroupID OriginalPolygonGroupID; // 0x10

    };

    struct FMeshElementAttributeList //ScriptStruct EditableMesh.MeshElementAttributeList
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FMeshElementAttributeData> Attributes; // 0x0

    };

    struct FMeshElementAttributeData //ScriptStruct EditableMesh.MeshElementAttributeData
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName AttributeName; // 0x0
        int32_t AttributeIndex; // 0x8
        struct FMeshElementAttributeValue AttributeValue; // 0x10

    };

    struct FMeshElementAttributeValue //ScriptStruct EditableMesh.MeshElementAttributeValue
    {
    public:


    };

    struct FVertexToMove //ScriptStruct EditableMesh.VertexToMove
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVertexID VertexID; // 0x0
        struct FVector NewVertexPosition; // 0x4

    };

    struct FVertexID : FElementID //ScriptStruct MeshDescription.VertexID
    {
    public:


    };

    struct FChangeVertexInstancesForPolygon //ScriptStruct EditableMesh.ChangeVertexInstancesForPolygon
    {
    //Children Prop Count (Fields): 3
    public:

        struct FPolygonID PolygonID; // 0x0
        struct TArray<struct FVertexIndexAndInstanceID> PerimeterVertexIndicesAndInstanceIDs; // 0x8
        struct TArray<struct FVertexInstancesForPolygonHole> VertexIndicesAndInstanceIDsForEachHole; // 0x18

    };

    struct FVertexInstancesForPolygonHole //ScriptStruct EditableMesh.VertexInstancesForPolygonHole
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FVertexIndexAndInstanceID> VertexIndicesAndInstanceIDs; // 0x0

    };

    struct FVertexIndexAndInstanceID //ScriptStruct EditableMesh.VertexIndexAndInstanceID
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t ContourIndex; // 0x0
        struct FVertexInstanceID VertexInstanceID; // 0x4

    };

    struct FVertexInstanceID : FElementID //ScriptStruct MeshDescription.VertexInstanceID
    {
    public:


    };

    struct FVertexAttributesForPolygon //ScriptStruct EditableMesh.VertexAttributesForPolygon
    {
    //Children Prop Count (Fields): 3
    public:

        struct FPolygonID PolygonID; // 0x0
        struct TArray<struct FMeshElementAttributeList> PerimeterVertexAttributeLists; // 0x8
        struct TArray<struct FVertexAttributesForPolygonHole> VertexAttributeListsForEachHole; // 0x18

    };

    struct FVertexAttributesForPolygonHole //ScriptStruct EditableMesh.VertexAttributesForPolygonHole
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FMeshElementAttributeList> VertexAttributeList; // 0x0

    };

    struct FAttributesForEdge //ScriptStruct EditableMesh.AttributesForEdge
    {
    //Children Prop Count (Fields): 2
    public:

        struct FEdgeID EdgeID; // 0x0
        struct FMeshElementAttributeList EdgeAttributes; // 0x8

    };

    struct FEdgeID : FElementID //ScriptStruct MeshDescription.EdgeID
    {
    public:


    };

    struct FAttributesForVertexInstance //ScriptStruct EditableMesh.AttributesForVertexInstance
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVertexInstanceID VertexInstanceID; // 0x0
        struct FMeshElementAttributeList VertexInstanceAttributes; // 0x8

    };

    struct FAttributesForVertex //ScriptStruct EditableMesh.AttributesForVertex
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVertexID VertexID; // 0x0
        struct FMeshElementAttributeList VertexAttributes; // 0x8

    };

    struct FPolygonToSplit //ScriptStruct EditableMesh.PolygonToSplit
    {
    //Children Prop Count (Fields): 2
    public:

        struct FPolygonID PolygonID; // 0x0
        struct TArray<struct FVertexPair> VertexPairsToSplitAt; // 0x8

    };

    struct FVertexPair //ScriptStruct EditableMesh.VertexPair
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVertexID VertexID0; // 0x0
        struct FVertexID VertexID1; // 0x4

    };

    struct FPolygonToCreate //ScriptStruct EditableMesh.PolygonToCreate
    {
    //Children Prop Count (Fields): 4
    public:

        struct FPolygonGroupID PolygonGroupID; // 0x0
        struct TArray<struct FVertexAndAttributes> PerimeterVertices; // 0x8
        struct FPolygonID OriginalPolygonID; // 0x18
        enum class EPolygonEdgeHardness PolygonEdgeHardness; // 0x1c

    };

    struct FVertexAndAttributes //ScriptStruct EditableMesh.VertexAndAttributes
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVertexInstanceID VertexInstanceID; // 0x0
        struct FVertexID VertexID; // 0x4
        struct FMeshElementAttributeList PolygonVertexAttributes; // 0x8

    };

    struct FEdgeToCreate //ScriptStruct EditableMesh.EdgeToCreate
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVertexID VertexID0; // 0x0
        struct FVertexID VertexID1; // 0x4
        struct FMeshElementAttributeList EdgeAttributes; // 0x8
        struct FEdgeID OriginalEdgeID; // 0x18

    };

    struct FVertexInstanceToCreate //ScriptStruct EditableMesh.VertexInstanceToCreate
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVertexID VertexID; // 0x0
        struct FMeshElementAttributeList VertexInstanceAttributes; // 0x8
        struct FVertexInstanceID OriginalVertexInstanceID; // 0x18

    };

    struct FVertexToCreate //ScriptStruct EditableMesh.VertexToCreate
    {
    //Children Prop Count (Fields): 2
    public:

        struct FMeshElementAttributeList VertexAttributes; // 0x0
        struct FVertexID OriginalVertexID; // 0x10

    };

    struct FSubdivisionLimitData //ScriptStruct EditableMesh.SubdivisionLimitData
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FVector> VertexPositions; // 0x0
        struct TArray<struct FSubdivisionLimitSection> Sections; // 0x10
        struct TArray<struct FSubdividedWireEdge> SubdividedWireEdges; // 0x20

    };

    struct FSubdividedWireEdge //ScriptStruct EditableMesh.SubdividedWireEdge
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t EdgeVertex0PositionIndex; // 0x0
        int32_t EdgeVertex1PositionIndex; // 0x4

    };

    struct FSubdivisionLimitSection //ScriptStruct EditableMesh.SubdivisionLimitSection
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FSubdividedQuad> SubdividedQuads; // 0x0

    };

    struct FSubdividedQuad //ScriptStruct EditableMesh.SubdividedQuad
    {
    //Children Prop Count (Fields): 4
    public:

        struct FSubdividedQuadVertex QuadVertex0; // 0x0
        struct FSubdividedQuadVertex QuadVertex1; // 0x34
        struct FSubdividedQuadVertex QuadVertex2; // 0x68
        struct FSubdividedQuadVertex QuadVertex3; // 0x9c

    };

    struct FSubdividedQuadVertex //ScriptStruct EditableMesh.SubdividedQuadVertex
    {
    //Children Prop Count (Fields): 7
    public:

        int32_t VertexPositionIndex; // 0x0
        struct FVector2D TextureCoordinate0; // 0x4
        struct FVector2D TextureCoordinate1; // 0xc
        struct FColor VertexColor; // 0x14
        struct FVector VertexNormal; // 0x18
        struct FVector VertexTangent; // 0x24
        float VertexBinormalSign; // 0x30

    };

    struct FRenderingPolygonGroup //ScriptStruct EditableMesh.RenderingPolygonGroup
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t RenderingSectionIndex; // 0x0
        int32_t MaterialIndex; // 0x4
        int32_t MaxTriangles; // 0x8

    };

    struct FRenderingPolygon //ScriptStruct EditableMesh.RenderingPolygon
    {
    //Children Prop Count (Fields): 2
    public:

        struct FPolygonGroupID PolygonGroupID; // 0x0
        struct TArray<struct FTriangleID> TriangulatedPolygonTriangleIndices; // 0x8

    };

    struct FTriangleID : FElementID //ScriptStruct MeshDescription.TriangleID
    {
    public:


    };

    struct FMovieSceneGeometryCollectionParams //ScriptStruct GeometryCollectionTracks.MovieSceneGeometryCollectionParams
    {
    //Children Prop Count (Fields): 4
    public:

        struct FSoftObjectPath GeometryCollectionCache; // 0x8
        struct FFrameNumber StartFrameOffset; // 0x20
        struct FFrameNumber EndFrameOffset; // 0x24
        float PlayRate; // 0x28

    };

    struct FMovieSceneGeometryCollectionSectionTemplate : FMovieSceneEvalTemplate //ScriptStruct GeometryCollectionTracks.MovieSceneGeometryCollectionSectionTemplate
    {
    //Children Prop Count (Fields): 1
    public:

        struct FMovieSceneGeometryCollectionSectionTemplateParameters Params; // 0x20

    };

    struct FMovieSceneGeometryCollectionSectionTemplateParameters : FMovieSceneGeometryCollectionParams //ScriptStruct GeometryCollectionTracks.MovieSceneGeometryCollectionSectionTemplateParameters
    {
    //Children Prop Count (Fields): 2
    public:

        struct FFrameNumber SectionStartTime; // 0x30
        struct FFrameNumber SectionEndTime; // 0x34

    };

    struct FUdpMockMessage //ScriptStruct UdpMessaging.UdpMockMessage
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<char> Data; // 0x0

    };

    struct FNodeHierarchyWithUserData //ScriptStruct AnimationCore.NodeHierarchyWithUserData
    {
    //Children Prop Count (Fields): 1
    public:

        struct FNodeHierarchyData Hierarchy; // 0x8

    };

    struct FNodeHierarchyData //ScriptStruct AnimationCore.NodeHierarchyData
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FNodeObject> Nodes; // 0x0
        struct TArray<struct FTransform> Transforms; // 0x10
        struct TMap<struct FName, int32_t> NodeNameToIndexMapping; // 0x20

    };

    struct FNodeObject //ScriptStruct AnimationCore.NodeObject
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Name; // 0x0
        struct FName ParentName; // 0x8

    };

    struct FAnimationHierarchy : FNodeHierarchyWithUserData //ScriptStruct ControlRig.AnimationHierarchy
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FConstraintNodeData> UserData; // 0x78

    };

    struct FConstraintNodeData //ScriptStruct ControlRig.ConstraintNodeData
    {
    //Children Prop Count (Fields): 4
    public:

        struct FTransform RelativeParent; // 0x0
        struct FConstraintOffset ConstraintOffset; // 0x30
        struct FName LinkedNode; // 0x90
        struct TArray<struct FTransformConstraint> Constraints; // 0x98

    };

    struct FTransformConstraint //ScriptStruct AnimationCore.TransformConstraint
    {
    //Children Prop Count (Fields): 5
    public:

        struct FConstraintDescription Operator; // 0x0
        struct FName SourceNode; // 0x10
        struct FName TargetNode; // 0x18
        float Weight; // 0x20
        bool bMaintainOffset; // 0x24

    };

    struct FConstraintDescription //ScriptStruct AnimationCore.ConstraintDescription
    {
    //Children Prop Count (Fields): 7
    public:

        bool bTranslation; // 0x0
        bool bRotation; // 0x1
        bool bScale; // 0x2
        bool bParent; // 0x3
        struct FFilterOptionPerAxis TranslationAxes; // 0x4
        struct FFilterOptionPerAxis RotationAxes; // 0x7
        struct FFilterOptionPerAxis ScaleAxes; // 0xa

    };

    struct FFilterOptionPerAxis //ScriptStruct AnimationCore.FilterOptionPerAxis
    {
    //Children Prop Count (Fields): 3
    public:

        bool bX; // 0x0
        bool bY; // 0x1
        bool bZ; // 0x2

    };

    struct FConstraintOffset //ScriptStruct AnimationCore.ConstraintOffset
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector Translation; // 0x0
        struct FQuat Rotation; // 0x10
        struct FVector Scale; // 0x20
        struct FTransform Parent; // 0x30

    };

    struct FAnimNode_Base //ScriptStruct Engine.AnimNode_Base
    {
    public:


    };

    struct FAnimNode_CustomProperty : FAnimNode_Base //ScriptStruct Engine.AnimNode_CustomProperty
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FName> SourcePropertyNames; // 0x10
        struct TArray<struct FName> DestPropertyNames; // 0x20
        class UObject* TargetInstance; // 0x30

    };

    struct FAnimNode_ControlRigBase : FAnimNode_CustomProperty //ScriptStruct ControlRig.AnimNode_ControlRigBase
    {
    //Children Prop Count (Fields): 8
    public:

        struct FPoseLink Source; // 0x58
        struct TMap<struct FName, uint16_t> ControlRigBoneMapping; // 0x68
        struct TMap<struct FName, uint16_t> ControlRigCurveMapping; // 0xb8
        struct TMap<struct FName, uint16_t> InputToCurveMappingUIDs; // 0x108
        struct TWeakObjectPtr<struct UNodeMappingContainer> NodeMappingContainer; // 0x158
        struct FControlRigIOSettings InputSettings; // 0x160
        struct FControlRigIOSettings OutputSettings; // 0x162
        bool bExecute; // 0x164

    };

    struct FControlRigIOSettings //ScriptStruct ControlRig.ControlRigIOSettings
    {
    //Children Prop Count (Fields): 2
    public:

        bool bUpdatePose; // 0x0
        bool bUpdateCurves; // 0x1

    };

    struct FPoseLinkBase //ScriptStruct Engine.PoseLinkBase
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t LinkID; // 0x0

    };

    struct FPoseLink : FPoseLinkBase //ScriptStruct Engine.PoseLink
    {
    public:


    };

    struct FAnimNode_ControlRig : FAnimNode_ControlRigBase //ScriptStruct ControlRig.AnimNode_ControlRig
    {
    //Children Prop Count (Fields): 13
    public:

        class UControlRig* ControlRigClass; // 0x170
        class UControlRig* ControlRig; // 0x178
        float Alpha; // 0x180
        enum class EAnimAlphaInputType AlphaInputType; // 0x184
        char bAlphaBoolEnabled; // 0x185
        char bSetRefPoseFromSkeleton; // 0x185
        struct FInputScaleBias AlphaScaleBias; // 0x188
        struct FInputAlphaBoolBlend AlphaBoolBlend; // 0x190
        struct FName AlphaCurveName; // 0x1d8
        struct FInputScaleBiasClamp AlphaScaleBiasClamp; // 0x1e0
        struct TMap<struct FName, struct FName> InputMapping; // 0x210
        struct TMap<struct FName, struct FName> OutputMapping; // 0x260
        int32_t LODThreshold; // 0x360

    };

    struct FInputScaleBiasClamp //ScriptStruct Engine.InputScaleBiasClamp
    {
    //Children Prop Count (Fields): 11
    public:

        bool bMapRange; // 0x0
        bool bClampResult; // 0x1
        bool bInterpResult; // 0x2
        struct FInputRange InRange; // 0x4
        struct FInputRange OutRange; // 0xc
        float Scale; // 0x14
        float Bias; // 0x18
        float ClampMin; // 0x1c
        float ClampMax; // 0x20
        float InterpSpeedIncreasing; // 0x24
        float InterpSpeedDecreasing; // 0x28

    };

    struct FInputRange //ScriptStruct Engine.InputRange
    {
    //Children Prop Count (Fields): 2
    public:

        float Min; // 0x0
        float Max; // 0x4

    };

    struct FInputAlphaBoolBlend //ScriptStruct Engine.InputAlphaBoolBlend
    {
    //Children Prop Count (Fields): 6
    public:

        float BlendInTime; // 0x0
        float BlendOutTime; // 0x4
        enum class EAlphaBlendOption BlendOption; // 0x8
        bool bInitialized; // 0x9
        class UCurveFloat* CustomCurve; // 0x10
        struct FAlphaBlend AlphaBlend; // 0x18

    };

    struct FAlphaBlend //ScriptStruct Engine.AlphaBlend
    {
    //Children Prop Count (Fields): 3
    public:

        class UCurveFloat* CustomCurve; // 0x0
        float BlendTime; // 0x8
        enum class EAlphaBlendOption BlendOption; // 0x24

    };

    struct FInputScaleBias //ScriptStruct Engine.InputScaleBias
    {
    //Children Prop Count (Fields): 2
    public:

        float Scale; // 0x0
        float Bias; // 0x4

    };

    struct FAnimNode_ControlRig_ExternalSource : FAnimNode_ControlRigBase //ScriptStruct ControlRig.AnimNode_ControlRig_ExternalSource
    {
    //Children Prop Count (Fields): 1
    public:

        struct TWeakObjectPtr<struct UControlRig> ControlRig; // 0x170

    };

    struct FAnimInstanceProxy //ScriptStruct Engine.AnimInstanceProxy
    {
    public:


    };

    struct FControlRigAnimInstanceProxy : FAnimInstanceProxy //ScriptStruct ControlRig.ControlRigAnimInstanceProxy
    {
    public:


    };

    struct FControlRigComponentMappedCurve //ScriptStruct ControlRig.ControlRigComponentMappedCurve
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Source; // 0x0
        struct FName Target; // 0x8

    };

    struct FControlRigComponentMappedBone //ScriptStruct ControlRig.ControlRigComponentMappedBone
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Source; // 0x0
        struct FName Target; // 0x8

    };

    struct FControlRigComponentMappedComponent //ScriptStruct ControlRig.ControlRigComponentMappedComponent
    {
    //Children Prop Count (Fields): 4
    public:

        class USceneComponent* Component; // 0x0
        struct FName ElementName; // 0x8
        enum class ERigElementType ElementType; // 0x10
        enum class EControlRigComponentMapDirection Direction; // 0x11

    };

    struct FControlRigComponentMappedElement //ScriptStruct ControlRig.ControlRigComponentMappedElement
    {
    //Children Prop Count (Fields): 12
    public:

        struct FComponentReference ComponentReference; // 0x0
        int32_t TransformIndex; // 0x28
        struct FName TransformName; // 0x2c
        enum class ERigElementType ElementType; // 0x34
        struct FName ElementName; // 0x38
        enum class EControlRigComponentMapDirection Direction; // 0x40
        struct FTransform Offset; // 0x50
        float Weight; // 0x80
        enum class EControlRigComponentSpace Space; // 0x84
        class USceneComponent* SceneComponent; // 0x88
        int32_t ElementIndex; // 0x90
        int32_t SubIndex; // 0x94

    };

    struct FComponentReference //ScriptStruct Engine.ComponentReference
    {
    //Children Prop Count (Fields): 3
    public:

        class AActor* OtherActor; // 0x0
        struct FName ComponentProperty; // 0x8
        struct FString PathToComponent; // 0x10

    };

    struct FRigVMExecuteContext //ScriptStruct RigVM.RigVMExecuteContext
    {
    public:


    };

    struct FControlRigExecuteContext : FRigVMExecuteContext //ScriptStruct ControlRig.ControlRigExecuteContext
    {
    public:


    };

    struct FControlRigDrawContainer //ScriptStruct ControlRig.ControlRigDrawContainer
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FControlRigDrawInstruction> Instructions; // 0x8

    };

    struct FControlRigDrawInstruction //ScriptStruct ControlRig.ControlRigDrawInstruction
    {
    //Children Prop Count (Fields): 6
    public:

        struct FName Name; // 0x0
        enum class EControlRigDrawSettings PrimitiveType; // 0x8
        struct TArray<struct FVector> Positions; // 0x10
        struct FLinearColor Color; // 0x20
        float Thickness; // 0x30
        struct FTransform Transform; // 0x40

    };

    struct FControlRigDrawInterface : FControlRigDrawContainer //ScriptStruct ControlRig.ControlRigDrawInterface
    {
    public:


    };

    struct FGizmoActorCreationParam //ScriptStruct ControlRig.GizmoActorCreationParam
    {
    public:


    };

    struct FControlRigGizmoDefinition //ScriptStruct ControlRig.ControlRigGizmoDefinition
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName GizmoName; // 0x0
        struct TSoftObjectPtr<UStaticMesh> StaticMesh; // 0x8
        struct FTransform Transform; // 0x30

    };

    struct FControlRigLayerInstanceProxy : FAnimInstanceProxy //ScriptStruct ControlRig.ControlRigLayerInstanceProxy
    {
    public:


    };

    struct FAnimNode_ControlRigInputPose : FAnimNode_Base //ScriptStruct ControlRig.AnimNode_ControlRigInputPose
    {
    //Children Prop Count (Fields): 1
    public:

        struct FPoseLink InputPose; // 0x10

    };

    struct FCRFourPointBezier //ScriptStruct ControlRig.CRFourPointBezier
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector A; // 0x0
        struct FVector B; // 0xc
        struct FVector C; // 0x18
        struct FVector D; // 0x24

    };

    struct FControlRigSequenceObjectReferenceMap //ScriptStruct ControlRig.ControlRigSequenceObjectReferenceMap
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FGuid> BindingIds; // 0x0
        struct TArray<struct FControlRigSequenceObjectReferences> References; // 0x10

    };

    struct FControlRigSequenceObjectReferences //ScriptStruct ControlRig.ControlRigSequenceObjectReferences
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FControlRigSequenceObjectReference> Array; // 0x0

    };

    struct FControlRigSequenceObjectReference //ScriptStruct ControlRig.ControlRigSequenceObjectReference
    {
    //Children Prop Count (Fields): 1
    public:

        class UControlRig* ControlRigClass; // 0x0

    };

    struct FAnimSequencerInstanceProxy : FAnimInstanceProxy //ScriptStruct AnimGraphRuntime.AnimSequencerInstanceProxy
    {
    public:


    };

    struct FControlRigSequencerAnimInstanceProxy : FAnimSequencerInstanceProxy //ScriptStruct ControlRig.ControlRigSequencerAnimInstanceProxy
    {
    public:


    };

    struct FControlRigSettingsPerPinBool //ScriptStruct ControlRig.ControlRigSettingsPerPinBool
    {
    //Children Prop Count (Fields): 1
    public:

        struct TMap<struct FString, bool> Values; // 0x0

    };

    struct FControlRigValidationContext //ScriptStruct ControlRig.ControlRigValidationContext
    {
    public:


    };

    struct FCRSimContainer //ScriptStruct ControlRig.CRSimContainer
    {
    //Children Prop Count (Fields): 3
    public:

        float TimeStep; // 0x8
        float AccumulatedTime; // 0xc
        float TimeLeftForStep; // 0x10

    };

    struct FCRSimLinearSpring //ScriptStruct ControlRig.CRSimLinearSpring
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t SubjectA; // 0x0
        int32_t SubjectB; // 0x4
        float Coefficient; // 0x8
        float Equilibrium; // 0xc

    };

    struct FCRSimPoint //ScriptStruct ControlRig.CRSimPoint
    {
    //Children Prop Count (Fields): 6
    public:

        float Mass; // 0x0
        float Size; // 0x4
        float LinearDamping; // 0x8
        float InheritMotion; // 0xc
        struct FVector position; // 0x10
        struct FVector LinearVelocity; // 0x1c

    };

    struct FCRSimPointConstraint //ScriptStruct ControlRig.CRSimPointConstraint
    {
    //Children Prop Count (Fields): 5
    public:

        enum class ECRSimConstraintType Type; // 0x0
        int32_t SubjectA; // 0x4
        int32_t SubjectB; // 0x8
        struct FVector DataA; // 0xc
        struct FVector DataB; // 0x18

    };

    struct FCRSimPointContainer : FCRSimContainer //ScriptStruct ControlRig.CRSimPointContainer
    {
    //Children Prop Count (Fields): 6
    public:

        struct TArray<struct FCRSimPoint> Points; // 0x18
        struct TArray<struct FCRSimLinearSpring> Springs; // 0x28
        struct TArray<struct FCRSimPointForce> Forces; // 0x38
        struct TArray<struct FCRSimSoftCollision> CollisionVolumes; // 0x48
        struct TArray<struct FCRSimPointConstraint> Constraints; // 0x58
        struct TArray<struct FCRSimPoint> PreviousStep; // 0x68

    };

    struct FCRSimSoftCollision //ScriptStruct ControlRig.CRSimSoftCollision
    {
    //Children Prop Count (Fields): 7
    public:

        struct FTransform Transform; // 0x0
        enum class ECRSimSoftCollisionType ShapeType; // 0x30
        float MinimumDistance; // 0x34
        float MaximumDistance; // 0x38
        enum class EControlRigAnimEasingType FalloffType; // 0x3c
        float Coefficient; // 0x40
        bool bInverted; // 0x44

    };

    struct FCRSimPointForce //ScriptStruct ControlRig.CRSimPointForce
    {
    //Children Prop Count (Fields): 4
    public:

        enum class ECRSimPointForceType ForceType; // 0x0
        struct FVector Vector; // 0x4
        float Coefficient; // 0x10
        bool bNormalize; // 0x14

    };

    struct FMovieSceneSequenceInstanceData //ScriptStruct MovieScene.MovieSceneSequenceInstanceData
    {
    public:


    };

    struct FMovieSceneControlRigInstanceData : FMovieSceneSequenceInstanceData //ScriptStruct ControlRig.MovieSceneControlRigInstanceData
    {
    //Children Prop Count (Fields): 5
    public:

        bool bAdditive; // 0x8
        bool bApplyBoneFilter; // 0x9
        struct FInputBlendPose BoneFilter; // 0x10
        struct FMovieSceneFloatChannel Weight; // 0x20
        struct FMovieSceneEvaluationOperand Operand; // 0xc0

    };

    struct FMovieSceneEvaluationOperand //ScriptStruct MovieScene.MovieSceneEvaluationOperand
    {
    //Children Prop Count (Fields): 2
    public:

        struct FGuid ObjectBindingID; // 0x0
        struct FMovieSceneSequenceID SequenceID; // 0x10

    };

    struct FMovieSceneSequenceID //ScriptStruct MovieScene.MovieSceneSequenceID
    {
    //Children Prop Count (Fields): 1
    public:

        uint32_t Value; // 0x0

    };

    struct FMovieSceneChannel //ScriptStruct MovieScene.MovieSceneChannel
    {
    public:


    };

    struct FMovieSceneFloatChannel : FMovieSceneChannel //ScriptStruct MovieScene.MovieSceneFloatChannel
    {
    //Children Prop Count (Fields): 8
    public:

        enum class ERichCurveExtrapolation PreInfinityExtrap; // 0x8
        enum class ERichCurveExtrapolation PostInfinityExtrap; // 0x9
        struct TArray<struct FFrameNumber> Times; // 0x10
        struct TArray<struct FMovieSceneFloatValue> Values; // 0x20
        float DefaultValue; // 0x30
        bool bHasDefaultValue; // 0x34
        struct FMovieSceneKeyHandleMap KeyHandles; // 0x38
        struct FFrameRate TickResolution; // 0x98

    };

    struct FKeyHandleLookupTable //ScriptStruct Engine.KeyHandleLookupTable
    {
    public:


    };

    struct FMovieSceneKeyHandleMap : FKeyHandleLookupTable //ScriptStruct MovieScene.MovieSceneKeyHandleMap
    {
    public:


    };

    struct FMovieSceneFloatValue //ScriptStruct MovieScene.MovieSceneFloatValue
    {
    //Children Prop Count (Fields): 5
    public:

        float Value; // 0x0
        struct FMovieSceneTangentData Tangent; // 0x4
        enum class ERichCurveInterpMode InterpMode; // 0x18
        enum class ERichCurveTangentMode TangentMode; // 0x19
        char PaddingByte; // 0x1a

    };

    struct FMovieSceneTangentData //ScriptStruct MovieScene.MovieSceneTangentData
    {
    //Children Prop Count (Fields): 5
    public:

        float ArriveTangent; // 0x0
        float LeaveTangent; // 0x4
        float ArriveTangentWeight; // 0x8
        float LeaveTangentWeight; // 0xc
        enum class ERichCurveTangentWeightMode TangentWeightMode; // 0x10

    };

    struct FInputBlendPose //ScriptStruct Engine.InputBlendPose
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FBranchFilter> BranchFilters; // 0x0

    };

    struct FBranchFilter //ScriptStruct Engine.BranchFilter
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName BoneName; // 0x0
        int32_t BlendDepth; // 0x8

    };

    struct FChannelMapInfo //ScriptStruct ControlRig.ChannelMapInfo
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t ControlIndex; // 0x0
        int32_t TotalChannelIndex; // 0x4
        int32_t ChannelIndex; // 0x8
        int32_t ParentControlIndex; // 0xc
        struct FName ChannelTypeName; // 0x10

    };

    struct FIntegerParameterNameAndCurve //ScriptStruct ControlRig.IntegerParameterNameAndCurve
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName ParameterName; // 0x0
        struct FMovieSceneIntegerChannel ParameterCurve; // 0x8

    };

    struct FMovieSceneIntegerChannel : FMovieSceneChannel //ScriptStruct MovieScene.MovieSceneIntegerChannel
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<struct FFrameNumber> Times; // 0x8
        int32_t DefaultValue; // 0x18
        bool bHasDefaultValue; // 0x1c
        struct TArray<int32_t> Values; // 0x20

    };

    struct FEnumParameterNameAndCurve //ScriptStruct ControlRig.EnumParameterNameAndCurve
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName ParameterName; // 0x0
        struct FMovieSceneByteChannel ParameterCurve; // 0x8

    };

    struct FMovieSceneByteChannel : FMovieSceneChannel //ScriptStruct MovieScene.MovieSceneByteChannel
    {
    //Children Prop Count (Fields): 5
    public:

        struct TArray<struct FFrameNumber> Times; // 0x8
        char DefaultValue; // 0x18
        bool bHasDefaultValue; // 0x19
        struct TArray<char> Values; // 0x20
        class UEnum* Enum; // 0x30

    };

    struct FMovieSceneParameterSectionTemplate : FMovieSceneEvalTemplate //ScriptStruct MovieSceneTracks.MovieSceneParameterSectionTemplate
    {
    //Children Prop Count (Fields): 6
    public:

        struct TArray<struct FScalarParameterNameAndCurve> Scalars; // 0x20
        struct TArray<struct FBoolParameterNameAndCurve> Bools; // 0x30
        struct TArray<struct FVector2DParameterNameAndCurves> Vector2Ds; // 0x40
        struct TArray<struct FVectorParameterNameAndCurves> Vectors; // 0x50
        struct TArray<struct FColorParameterNameAndCurves> Colors; // 0x60
        struct TArray<struct FTransformParameterNameAndCurves> Transforms; // 0x70

    };

    struct FTransformParameterNameAndCurves //ScriptStruct MovieSceneTracks.TransformParameterNameAndCurves
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName ParameterName; // 0x0
        struct FMovieSceneFloatChannel Translation; // 0x8
        struct FMovieSceneFloatChannel Rotation; // 0x1e8
        struct FMovieSceneFloatChannel Scale; // 0x3c8

    };

    struct FColorParameterNameAndCurves //ScriptStruct MovieSceneTracks.ColorParameterNameAndCurves
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName ParameterName; // 0x0
        struct FMovieSceneFloatChannel RedCurve; // 0x8
        struct FMovieSceneFloatChannel GreenCurve; // 0xa8
        struct FMovieSceneFloatChannel BlueCurve; // 0x148
        struct FMovieSceneFloatChannel AlphaCurve; // 0x1e8

    };

    struct FVectorParameterNameAndCurves //ScriptStruct MovieSceneTracks.VectorParameterNameAndCurves
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName ParameterName; // 0x0
        struct FMovieSceneFloatChannel XCurve; // 0x8
        struct FMovieSceneFloatChannel YCurve; // 0xa8
        struct FMovieSceneFloatChannel ZCurve; // 0x148

    };

    struct FVector2DParameterNameAndCurves //ScriptStruct MovieSceneTracks.Vector2DParameterNameAndCurves
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName ParameterName; // 0x0
        struct FMovieSceneFloatChannel XCurve; // 0x8
        struct FMovieSceneFloatChannel YCurve; // 0xa8

    };

    struct FBoolParameterNameAndCurve //ScriptStruct MovieSceneTracks.BoolParameterNameAndCurve
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName ParameterName; // 0x0
        struct FMovieSceneBoolChannel ParameterCurve; // 0x8

    };

    struct FMovieSceneBoolChannel : FMovieSceneChannel //ScriptStruct MovieScene.MovieSceneBoolChannel
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<struct FFrameNumber> Times; // 0x8
        bool DefaultValue; // 0x18
        bool bHasDefaultValue; // 0x19
        struct TArray<bool> Values; // 0x20

    };

    struct FScalarParameterNameAndCurve //ScriptStruct MovieSceneTracks.ScalarParameterNameAndCurve
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName ParameterName; // 0x0
        struct FMovieSceneFloatChannel ParameterCurve; // 0x8

    };

    struct FMovieSceneControlRigParameterTemplate : FMovieSceneParameterSectionTemplate //ScriptStruct ControlRig.MovieSceneControlRigParameterTemplate
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FEnumParameterNameAndCurve> Enums; // 0x80
        struct TArray<struct FIntegerParameterNameAndCurve> Integers; // 0x90

    };

    struct FRigBoneHierarchy //ScriptStruct ControlRig.RigBoneHierarchy
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FRigBone> Bones; // 0x20
        struct TMap<struct FName, int32_t> NameToIndexMapping; // 0x30
        struct TArray<struct FName> Selection; // 0x80

    };

    struct FRigElement //ScriptStruct ControlRig.RigElement
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Name; // 0x8
        int32_t Index; // 0x10

    };

    struct FRigBone : FRigElement //ScriptStruct ControlRig.RigBone
    {
    //Children Prop Count (Fields): 7
    public:

        struct FName ParentName; // 0x18
        int32_t ParentIndex; // 0x20
        struct FTransform InitialTransform; // 0x30
        struct FTransform GlobalTransform; // 0x60
        struct FTransform LocalTransform; // 0x90
        struct TArray<int32_t> Dependents; // 0xc0
        enum class ERigBoneType Type; // 0xd0

    };

    struct FRigControlHierarchy //ScriptStruct ControlRig.RigControlHierarchy
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FRigControl> Controls; // 0x98
        struct TMap<struct FName, int32_t> NameToIndexMapping; // 0xa8
        struct TArray<struct FName> Selection; // 0xf8

    };

    struct FRigControl : FRigElement //ScriptStruct ControlRig.RigControl
    {
    //Children Prop Count (Fields): 26
    public:

        enum class ERigControlType ControlType; // 0x18
        struct FName DisplayName; // 0x1c
        struct FName ParentName; // 0x24
        int32_t ParentIndex; // 0x2c
        struct FName SpaceName; // 0x30
        int32_t SpaceIndex; // 0x38
        struct FTransform OffsetTransform; // 0x40
        struct FRigControlValue InitialValue; // 0x70
        struct FRigControlValue Value; // 0xf0
        enum class ERigControlAxis PrimaryAxis; // 0x170
        bool bIsCurve; // 0x171
        bool bAnimatable; // 0x172
        bool bLimitTranslation; // 0x173
        bool bLimitRotation; // 0x174
        bool bLimitScale; // 0x175
        bool bDrawLimits; // 0x176
        struct FRigControlValue MinimumValue; // 0x180
        struct FRigControlValue MaximumValue; // 0x200
        bool bGizmoEnabled; // 0x280
        bool bGizmoVisible; // 0x281
        struct FName GizmoName; // 0x284
        struct FTransform GizmoTransform; // 0x290
        struct FLinearColor GizmoColor; // 0x2c0
        struct TArray<int32_t> Dependents; // 0x2d0
        bool bIsTransientControl; // 0x2e0
        class UEnum* ControlEnum; // 0x2e8

    };

    struct FRigControlValue //ScriptStruct ControlRig.RigControlValue
    {
    //Children Prop Count (Fields): 2
    public:

        struct FRigControlValueStorage FloatStorage; // 0x0
        struct FTransform Storage; // 0x50

    };

    struct FRigControlValueStorage //ScriptStruct ControlRig.RigControlValueStorage
    {
    //Children Prop Count (Fields): 17
    public:

        float Float00; // 0x0
        float Float01; // 0x4
        float Float02; // 0x8
        float Float03; // 0xc
        float Float10; // 0x10
        float Float11; // 0x14
        float Float12; // 0x18
        float Float13; // 0x1c
        float Float20; // 0x20
        float Float21; // 0x24
        float Float22; // 0x28
        float Float23; // 0x2c
        float Float30; // 0x30
        float Float31; // 0x34
        float Float32; // 0x38
        float Float33; // 0x3c
        bool bValid; // 0x40

    };

    struct FRigCurveContainer //ScriptStruct ControlRig.RigCurveContainer
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FRigCurve> Curves; // 0x20
        struct TMap<struct FName, int32_t> NameToIndexMapping; // 0x30
        struct TArray<struct FName> Selection; // 0x80

    };

    struct FRigCurve : FRigElement //ScriptStruct ControlRig.RigCurve
    {
    //Children Prop Count (Fields): 1
    public:

        float Value; // 0x18

    };

    struct FCachedRigElement //ScriptStruct ControlRig.CachedRigElement
    {
    //Children Prop Count (Fields): 3
    public:

        struct FRigElementKey Key; // 0x0
        uint16_t Index; // 0xc
        int32_t ContainerVersion; // 0x10

    };

    struct FRigElementKey //ScriptStruct ControlRig.RigElementKey
    {
    //Children Prop Count (Fields): 2
    public:

        enum class ERigElementType Type; // 0x0
        struct FName Name; // 0x4

    };

    struct FRigHierarchyRef //ScriptStruct ControlRig.RigHierarchyRef
    {
    public:


    };

    struct FRigHierarchyContainer //ScriptStruct ControlRig.RigHierarchyContainer
    {
    //Children Prop Count (Fields): 5
    public:

        struct FRigBoneHierarchy BoneHierarchy; // 0x0
        struct FRigSpaceHierarchy SpaceHierarchy; // 0x98
        struct FRigControlHierarchy ControlHierarchy; // 0x128
        struct FRigCurveContainer CurveContainer; // 0x230
        int32_t Version; // 0x2c8

    };

    struct FRigSpaceHierarchy //ScriptStruct ControlRig.RigSpaceHierarchy
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FRigSpace> Spaces; // 0x20
        struct TMap<struct FName, int32_t> NameToIndexMapping; // 0x30
        struct TArray<struct FName> Selection; // 0x80

    };

    struct FRigSpace : FRigElement //ScriptStruct ControlRig.RigSpace
    {
    //Children Prop Count (Fields): 5
    public:

        enum class ERigSpaceType SpaceType; // 0x18
        struct FName ParentName; // 0x1c
        int32_t ParentIndex; // 0x24
        struct FTransform InitialTransform; // 0x30
        struct FTransform LocalTransform; // 0x60

    };

    struct FRigMirrorSettings //ScriptStruct ControlRig.RigMirrorSettings
    {
    //Children Prop Count (Fields): 4
    public:

        enum class EAxis MirrorAxis; // 0x0
        enum class EAxis AxisToFlip; // 0x1
        struct FString OldName; // 0x8
        struct FString NewName; // 0x18

    };

    struct FRigHierarchyCopyPasteContent //ScriptStruct ControlRig.RigHierarchyCopyPasteContent
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<enum class ERigElementType> Types; // 0x0
        struct TArray<struct FString> Contents; // 0x10
        struct TArray<struct FTransform> LocalTransforms; // 0x20
        struct TArray<struct FTransform> GlobalTransforms; // 0x30

    };

    struct FRigEventContext //ScriptStruct ControlRig.RigEventContext
    {
    public:


    };

    struct FRigElementKeyCollection //ScriptStruct ControlRig.RigElementKeyCollection
    {
    public:


    };

    struct FRigControlModifiedContext //ScriptStruct ControlRig.RigControlModifiedContext
    {
    public:


    };

    struct FRigPose //ScriptStruct ControlRig.RigPose
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FRigPoseElement> Elements; // 0x0

    };

    struct FRigPoseElement //ScriptStruct ControlRig.RigPoseElement
    {
    //Children Prop Count (Fields): 4
    public:

        struct FCachedRigElement Index; // 0x0
        struct FTransform GlobalTransform; // 0x20
        struct FTransform LocalTransform; // 0x50
        float CurveValue; // 0x80

    };

    struct FRigInfluenceMapPerEvent //ScriptStruct ControlRig.RigInfluenceMapPerEvent
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FRigInfluenceMap> Maps; // 0x0
        struct TMap<struct FName, int32_t> EventToIndex; // 0x10

    };

    struct FRigInfluenceMap //ScriptStruct ControlRig.RigInfluenceMap
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName EventName; // 0x0
        struct TArray<struct FRigInfluenceEntry> Entries; // 0x8
        struct TMap<struct FRigElementKey, int32_t> KeyToIndex; // 0x18

    };

    struct FRigInfluenceEntry //ScriptStruct ControlRig.RigInfluenceEntry
    {
    //Children Prop Count (Fields): 2
    public:

        struct FRigElementKey Source; // 0x0
        struct TArray<struct FRigElementKey> AffectedList; // 0x10

    };

    struct FRigInfluenceEntryModifier //ScriptStruct ControlRig.RigInfluenceEntryModifier
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FRigElementKey> AffectedList; // 0x0

    };

    struct FRigVMStruct //ScriptStruct RigVM.RigVMStruct
    {
    public:


    };

    struct FRigUnit : FRigVMStruct //ScriptStruct ControlRig.RigUnit
    {
    public:


    };

    struct FRigUnitMutable : FRigUnit //ScriptStruct ControlRig.RigUnitMutable
    {
    //Children Prop Count (Fields): 1
    public:

        struct FControlRigExecuteContext ExecuteContext; // 0x8

    };

    struct FRigUnit_SimBase : FRigUnit //ScriptStruct ControlRig.RigUnit_SimBase
    {
    public:


    };

    struct FRigUnit_AccumulateVectorRange : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_AccumulateVectorRange
    {
    //Children Prop Count (Fields): 5
    public:

        struct FVector Value; // 0x8
        struct FVector Minimum; // 0x14
        struct FVector Maximum; // 0x20
        struct FVector AccumulatedMinimum; // 0x2c
        struct FVector AccumulatedMaximum; // 0x38

    };

    struct FRigUnit_AccumulateFloatRange : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_AccumulateFloatRange
    {
    //Children Prop Count (Fields): 5
    public:

        float Value; // 0x8
        float Minimum; // 0xc
        float Maximum; // 0x10
        float AccumulatedMinimum; // 0x14
        float AccumulatedMaximum; // 0x18

    };

    struct FRigUnit_AccumulateTransformLerp : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_AccumulateTransformLerp
    {
    //Children Prop Count (Fields): 6
    public:

        struct FTransform TargetValue; // 0x10
        struct FTransform InitialValue; // 0x40
        float Blend; // 0x70
        bool bIntegrateDeltaTime; // 0x74
        struct FTransform Result; // 0x80
        struct FTransform AccumulatedValue; // 0xb0

    };

    struct FRigUnit_AccumulateQuatLerp : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_AccumulateQuatLerp
    {
    //Children Prop Count (Fields): 6
    public:

        struct FQuat TargetValue; // 0x10
        struct FQuat InitialValue; // 0x20
        float Blend; // 0x30
        bool bIntegrateDeltaTime; // 0x34
        struct FQuat Result; // 0x40
        struct FQuat AccumulatedValue; // 0x50

    };

    struct FRigUnit_AccumulateVectorLerp : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_AccumulateVectorLerp
    {
    //Children Prop Count (Fields): 6
    public:

        struct FVector TargetValue; // 0x8
        struct FVector InitialValue; // 0x14
        float Blend; // 0x20
        bool bIntegrateDeltaTime; // 0x24
        struct FVector Result; // 0x28
        struct FVector AccumulatedValue; // 0x34

    };

    struct FRigUnit_AccumulateFloatLerp : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_AccumulateFloatLerp
    {
    //Children Prop Count (Fields): 6
    public:

        float TargetValue; // 0x8
        float InitialValue; // 0xc
        float Blend; // 0x10
        bool bIntegrateDeltaTime; // 0x14
        float Result; // 0x18
        float AccumulatedValue; // 0x1c

    };

    struct FRigUnit_AccumulateTransformMul : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_AccumulateTransformMul
    {
    //Children Prop Count (Fields): 6
    public:

        struct FTransform Multiplier; // 0x10
        struct FTransform InitialValue; // 0x40
        bool bFlipOrder; // 0x70
        bool bIntegrateDeltaTime; // 0x71
        struct FTransform Result; // 0x80
        struct FTransform AccumulatedValue; // 0xb0

    };

    struct FRigUnit_AccumulateQuatMul : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_AccumulateQuatMul
    {
    //Children Prop Count (Fields): 6
    public:

        struct FQuat Multiplier; // 0x10
        struct FQuat InitialValue; // 0x20
        bool bFlipOrder; // 0x30
        bool bIntegrateDeltaTime; // 0x31
        struct FQuat Result; // 0x40
        struct FQuat AccumulatedValue; // 0x50

    };

    struct FRigUnit_AccumulateVectorMul : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_AccumulateVectorMul
    {
    //Children Prop Count (Fields): 5
    public:

        struct FVector Multiplier; // 0x8
        struct FVector InitialValue; // 0x14
        bool bIntegrateDeltaTime; // 0x20
        struct FVector Result; // 0x24
        struct FVector AccumulatedValue; // 0x30

    };

    struct FRigUnit_AccumulateFloatMul : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_AccumulateFloatMul
    {
    //Children Prop Count (Fields): 5
    public:

        float Multiplier; // 0x8
        float InitialValue; // 0xc
        bool bIntegrateDeltaTime; // 0x10
        float Result; // 0x14
        float AccumulatedValue; // 0x18

    };

    struct FRigUnit_AccumulateVectorAdd : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_AccumulateVectorAdd
    {
    //Children Prop Count (Fields): 5
    public:

        struct FVector Increment; // 0x8
        struct FVector InitialValue; // 0x14
        bool bIntegrateDeltaTime; // 0x20
        struct FVector Result; // 0x24
        struct FVector AccumulatedValue; // 0x30

    };

    struct FRigUnit_AccumulateFloatAdd : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_AccumulateFloatAdd
    {
    //Children Prop Count (Fields): 5
    public:

        float Increment; // 0x8
        float InitialValue; // 0xc
        bool bIntegrateDeltaTime; // 0x10
        float Result; // 0x14
        float AccumulatedValue; // 0x18

    };

    struct FRigUnit_AddBoneTransform : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_AddBoneTransform
    {
    //Children Prop Count (Fields): 6
    public:

        struct FName Bone; // 0x68
        struct FTransform Transform; // 0x70
        float Weight; // 0xa0
        bool bPostMultiply; // 0xa4
        bool bPropagateToChildren; // 0xa5
        struct FCachedRigElement CachedBone; // 0xa8

    };

    struct FRigUnit_HighlevelBaseMutable : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_HighlevelBaseMutable
    {
    public:


    };

    struct FRigUnit_AimItem : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_AimItem
    {
    //Children Prop Count (Fields): 8
    public:

        struct FRigElementKey item; // 0x68
        struct FRigUnit_AimItem_Target Primary; // 0x74
        struct FRigUnit_AimItem_Target Secondary; // 0xa0
        float Weight; // 0xcc
        struct FRigUnit_AimBone_DebugSettings DebugSettings; // 0xd0
        struct FCachedRigElement CachedItem; // 0x110
        struct FCachedRigElement PrimaryCachedSpace; // 0x124
        struct FCachedRigElement SecondaryCachedSpace; // 0x138

    };

    struct FRigUnit_AimBone_DebugSettings //ScriptStruct ControlRig.RigUnit_AimBone_DebugSettings
    {
    //Children Prop Count (Fields): 3
    public:

        bool bEnabled; // 0x0
        float Scale; // 0x4
        struct FTransform WorldOffset; // 0x10

    };

    struct FRigUnit_AimItem_Target //ScriptStruct ControlRig.RigUnit_AimItem_Target
    {
    //Children Prop Count (Fields): 5
    public:

        float Weight; // 0x0
        struct FVector Axis; // 0x4
        struct FVector Target; // 0x10
        enum class EControlRigVectorKind Kind; // 0x1c
        struct FRigElementKey Space; // 0x20

    };

    struct FRigUnit_AimBone : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_AimBone
    {
    //Children Prop Count (Fields): 9
    public:

        struct FName Bone; // 0x68
        struct FRigUnit_AimBone_Target Primary; // 0x70
        struct FRigUnit_AimBone_Target Secondary; // 0x98
        float Weight; // 0xc0
        bool bPropagateToChildren; // 0xc4
        struct FRigUnit_AimBone_DebugSettings DebugSettings; // 0xd0
        struct FCachedRigElement CachedBoneIndex; // 0x110
        struct FCachedRigElement PrimaryCachedSpace; // 0x124
        struct FCachedRigElement SecondaryCachedSpace; // 0x138

    };

    struct FRigUnit_AimBone_Target //ScriptStruct ControlRig.RigUnit_AimBone_Target
    {
    //Children Prop Count (Fields): 5
    public:

        float Weight; // 0x0
        struct FVector Axis; // 0x4
        struct FVector Target; // 0x10
        enum class EControlRigVectorKind Kind; // 0x1c
        struct FName Space; // 0x20

    };

    struct FRigUnit_HighlevelBase : FRigUnit //ScriptStruct ControlRig.RigUnit_HighlevelBase
    {
    public:


    };

    struct FRigUnit_AimBoneMath : FRigUnit_HighlevelBase //ScriptStruct ControlRig.RigUnit_AimBoneMath
    {
    //Children Prop Count (Fields): 8
    public:

        struct FTransform InputTransform; // 0x10
        struct FRigUnit_AimItem_Target Primary; // 0x40
        struct FRigUnit_AimItem_Target Secondary; // 0x6c
        float Weight; // 0x98
        struct FTransform Result; // 0xa0
        struct FRigUnit_AimBone_DebugSettings DebugSettings; // 0xd0
        struct FCachedRigElement PrimaryCachedSpace; // 0x110
        struct FCachedRigElement SecondaryCachedSpace; // 0x124

    };

    struct FRigUnit_AimConstraint : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_AimConstraint
    {
    //Children Prop Count (Fields): 8
    public:

        struct FName Joint; // 0x68
        enum class EAimMode AimMode; // 0x70
        enum class EAimMode UpMode; // 0x71
        struct FVector AimVector; // 0x74
        struct FVector UpVector; // 0x80
        struct TArray<struct FAimTarget> AimTargets; // 0x90
        struct TArray<struct FAimTarget> UpTargets; // 0xa0
        struct FRigUnit_AimConstraint_WorkData WorkData; // 0xb0

    };

    struct FRigUnit_AimConstraint_WorkData //ScriptStruct ControlRig.RigUnit_AimConstraint_WorkData
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FConstraintData> ConstraintData; // 0x0

    };

    struct FConstraintData //ScriptStruct AnimationCore.ConstraintData
    {
    //Children Prop Count (Fields): 5
    public:

        struct FConstraintDescriptor Constraint; // 0x0
        float Weight; // 0x10
        bool bMaintainOffset; // 0x14
        struct FTransform Offset; // 0x20
        struct FTransform CurrentTransform; // 0x50

    };

    struct FConstraintDescriptor //ScriptStruct AnimationCore.ConstraintDescriptor
    {
    //Children Prop Count (Fields): 1
    public:

        enum class EConstraintType Type; // 0x0

    };

    struct FAimTarget //ScriptStruct ControlRig.AimTarget
    {
    //Children Prop Count (Fields): 3
    public:

        float Weight; // 0x0
        struct FTransform Transform; // 0x10
        struct FVector AlignVector; // 0x40

    };

    struct FRigUnit_AlphaInterpVector : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_AlphaInterpVector
    {
    //Children Prop Count (Fields): 14
    public:

        struct FVector Value; // 0x8
        float Scale; // 0x14
        float Bias; // 0x18
        bool bMapRange; // 0x1c
        struct FInputRange InRange; // 0x20
        struct FInputRange OutRange; // 0x28
        bool bClampResult; // 0x30
        float ClampMin; // 0x34
        float ClampMax; // 0x38
        bool bInterpResult; // 0x3c
        float InterpSpeedIncreasing; // 0x40
        float InterpSpeedDecreasing; // 0x44
        struct FVector Result; // 0x48
        struct FInputScaleBiasClamp ScaleBiasClamp; // 0x54

    };

    struct FRigUnit_AlphaInterp : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_AlphaInterp
    {
    //Children Prop Count (Fields): 14
    public:

        float Value; // 0x8
        float Scale; // 0xc
        float Bias; // 0x10
        bool bMapRange; // 0x14
        struct FInputRange InRange; // 0x18
        struct FInputRange OutRange; // 0x20
        bool bClampResult; // 0x28
        float ClampMin; // 0x2c
        float ClampMax; // 0x30
        bool bInterpResult; // 0x34
        float InterpSpeedIncreasing; // 0x38
        float InterpSpeedDecreasing; // 0x3c
        float Result; // 0x40
        struct FInputScaleBiasClamp ScaleBiasClamp; // 0x44

    };

    struct FRigUnit_AnimBase : FRigUnit //ScriptStruct ControlRig.RigUnit_AnimBase
    {
    public:


    };

    struct FRigUnit_AnimEasing : FRigUnit_AnimBase //ScriptStruct ControlRig.RigUnit_AnimEasing
    {
    //Children Prop Count (Fields): 7
    public:

        float Value; // 0x8
        enum class EControlRigAnimEasingType Type; // 0xc
        float SourceMinimum; // 0x10
        float SourceMaximum; // 0x14
        float TargetMinimum; // 0x18
        float TargetMaximum; // 0x1c
        float Result; // 0x20

    };

    struct FRigUnit_AnimEasingType : FRigUnit_AnimBase //ScriptStruct ControlRig.RigUnit_AnimEasingType
    {
    //Children Prop Count (Fields): 1
    public:

        enum class EControlRigAnimEasingType Type; // 0x8

    };

    struct FRigUnit_AnimEvalRichCurve : FRigUnit_AnimBase //ScriptStruct ControlRig.RigUnit_AnimEvalRichCurve
    {
    //Children Prop Count (Fields): 7
    public:

        float Value; // 0x8
        struct FRuntimeFloatCurve Curve; // 0x10
        float SourceMinimum; // 0x98
        float SourceMaximum; // 0x9c
        float TargetMinimum; // 0xa0
        float TargetMaximum; // 0xa4
        float Result; // 0xa8

    };

    struct FRuntimeFloatCurve //ScriptStruct Engine.RuntimeFloatCurve
    {
    //Children Prop Count (Fields): 2
    public:

        struct FRichCurve EditorCurveData; // 0x0
        class UCurveFloat* ExternalCurve; // 0x80

    };

    struct FIndexedCurve //ScriptStruct Engine.IndexedCurve
    {
    //Children Prop Count (Fields): 1
    public:

        struct FKeyHandleMap KeyHandlesToIndices; // 0x8

    };

    struct FKeyHandleMap //ScriptStruct Engine.KeyHandleMap
    {
    public:


    };

    struct FRealCurve : FIndexedCurve //ScriptStruct Engine.RealCurve
    {
    //Children Prop Count (Fields): 3
    public:

        float DefaultValue; // 0x68
        enum class ERichCurveExtrapolation PreInfinityExtrap; // 0x6c
        enum class ERichCurveExtrapolation PostInfinityExtrap; // 0x6d

    };

    struct FRichCurve : FRealCurve //ScriptStruct Engine.RichCurve
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FRichCurveKey> Keys; // 0x70

    };

    struct FRichCurveKey //ScriptStruct Engine.RichCurveKey
    {
    //Children Prop Count (Fields): 9
    public:

        enum class ERichCurveInterpMode InterpMode; // 0x0
        enum class ERichCurveTangentMode TangentMode; // 0x1
        enum class ERichCurveTangentWeightMode TangentWeightMode; // 0x2
        float Time; // 0x4
        float Value; // 0x8
        float ArriveTangent; // 0xc
        float ArriveTangentWeight; // 0x10
        float LeaveTangent; // 0x14
        float LeaveTangentWeight; // 0x18

    };

    struct FRigUnit_AnimRichCurve : FRigUnit_AnimBase //ScriptStruct ControlRig.RigUnit_AnimRichCurve
    {
    //Children Prop Count (Fields): 1
    public:

        struct FRuntimeFloatCurve Curve; // 0x8

    };

    struct FRigUnit_ApplyFK : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_ApplyFK
    {
    //Children Prop Count (Fields): 7
    public:

        struct FName Joint; // 0x68
        struct FTransform Transform; // 0x70
        struct FTransformFilter Filter; // 0xa0
        enum class EApplyTransformMode ApplyTransformMode; // 0xa9
        enum class ETransformSpaceMode ApplyTransformSpace; // 0xaa
        struct FTransform BaseTransform; // 0xb0
        struct FName BaseJoint; // 0xe0

    };

    struct FTransformFilter //ScriptStruct AnimationCore.TransformFilter
    {
    //Children Prop Count (Fields): 3
    public:

        struct FFilterOptionPerAxis TranslationFilter; // 0x0
        struct FFilterOptionPerAxis RotationFilter; // 0x3
        struct FFilterOptionPerAxis ScaleFilter; // 0x6

    };

    struct FRigUnit_BeginExecution : FRigUnit //ScriptStruct ControlRig.RigUnit_BeginExecution
    {
    //Children Prop Count (Fields): 1
    public:

        struct FControlRigExecuteContext ExecuteContext; // 0x8

    };

    struct FRigUnit_BlendTransform : FRigUnit //ScriptStruct ControlRig.RigUnit_BlendTransform
    {
    //Children Prop Count (Fields): 3
    public:

        struct FTransform Source; // 0x10
        struct TArray<struct FBlendTarget> Targets; // 0x40
        struct FTransform Result; // 0x50

    };

    struct FBlendTarget //ScriptStruct ControlRig.BlendTarget
    {
    //Children Prop Count (Fields): 2
    public:

        struct FTransform Transform; // 0x0
        float Weight; // 0x30

    };

    struct FRigUnit_ItemHarmonics : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_ItemHarmonics
    {
    //Children Prop Count (Fields): 11
    public:

        struct TArray<struct FRigUnit_Harmonics_TargetItem> Targets; // 0x68
        struct FVector WaveSpeed; // 0x78
        struct FVector WaveFrequency; // 0x84
        struct FVector WaveAmplitude; // 0x90
        struct FVector WaveOffset; // 0x9c
        struct FVector WaveNoise; // 0xa8
        enum class EControlRigAnimEasingType WaveEase; // 0xb4
        float WaveMinimum; // 0xb8
        float WaveMaximum; // 0xbc
        enum class EControlRigRotationOrder RotationOrder; // 0xc0
        struct FRigUnit_BoneHarmonics_WorkData WorkData; // 0xc8

    };

    struct FRigUnit_BoneHarmonics_WorkData //ScriptStruct ControlRig.RigUnit_BoneHarmonics_WorkData
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FCachedRigElement> CachedItems; // 0x0
        struct FVector WaveTime; // 0x10

    };

    struct FRigUnit_Harmonics_TargetItem //ScriptStruct ControlRig.RigUnit_Harmonics_TargetItem
    {
    //Children Prop Count (Fields): 2
    public:

        struct FRigElementKey item; // 0x0
        float Ratio; // 0xc

    };

    struct FRigUnit_BoneHarmonics : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_BoneHarmonics
    {
    //Children Prop Count (Fields): 12
    public:

        struct TArray<struct FRigUnit_BoneHarmonics_BoneTarget> Bones; // 0x68
        struct FVector WaveSpeed; // 0x78
        struct FVector WaveFrequency; // 0x84
        struct FVector WaveAmplitude; // 0x90
        struct FVector WaveOffset; // 0x9c
        struct FVector WaveNoise; // 0xa8
        enum class EControlRigAnimEasingType WaveEase; // 0xb4
        float WaveMinimum; // 0xb8
        float WaveMaximum; // 0xbc
        enum class EControlRigRotationOrder RotationOrder; // 0xc0
        bool bPropagateToChildren; // 0xc1
        struct FRigUnit_BoneHarmonics_WorkData WorkData; // 0xc8

    };

    struct FRigUnit_BoneHarmonics_BoneTarget //ScriptStruct ControlRig.RigUnit_BoneHarmonics_BoneTarget
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Bone; // 0x0
        float Ratio; // 0x8

    };

    struct FRigUnit_ControlName : FRigUnit //ScriptStruct ControlRig.RigUnit_ControlName
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName Control; // 0x8

    };

    struct FRigUnit_SpaceName : FRigUnit //ScriptStruct ControlRig.RigUnit_SpaceName
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName Space; // 0x8

    };

    struct FRigUnit_BoneName : FRigUnit //ScriptStruct ControlRig.RigUnit_BoneName
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName Bone; // 0x8

    };

    struct FRigUnit_Item : FRigUnit //ScriptStruct ControlRig.RigUnit_Item
    {
    //Children Prop Count (Fields): 1
    public:

        struct FRigElementKey item; // 0x8

    };

    struct FRigUnit_CCDIKPerItem : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_CCDIKPerItem
    {
    //Children Prop Count (Fields): 10
    public:

        struct FRigElementKeyCollection Items; // 0x68
        struct FTransform EffectorTransform; // 0x80
        float Precision; // 0xb0
        float Weight; // 0xb4
        int32_t MaxIterations; // 0xb8
        bool bStartFromTail; // 0xbc
        float BaseRotationLimit; // 0xc0
        struct TArray<struct FRigUnit_CCDIK_RotationLimitPerItem> RotationLimits; // 0xc8
        bool bPropagateToChildren; // 0xd8
        struct FRigUnit_CCDIK_WorkData WorkData; // 0xe0

    };

    struct FRigUnit_CCDIK_WorkData //ScriptStruct ControlRig.RigUnit_CCDIK_WorkData
    {
    //Children Prop Count (Fields): 5
    public:

        struct TArray<struct FCCDIKChainLink> Chain; // 0x0
        struct TArray<struct FCachedRigElement> CachedItems; // 0x10
        struct TArray<int32_t> RotationLimitIndex; // 0x20
        struct TArray<float> RotationLimitsPerItem; // 0x30
        struct FCachedRigElement CachedEffector; // 0x40

    };

    struct FCCDIKChainLink //ScriptStruct AnimationCore.CCDIKChainLink
    {
    public:


    };

    struct FRigUnit_CCDIK_RotationLimitPerItem //ScriptStruct ControlRig.RigUnit_CCDIK_RotationLimitPerItem
    {
    //Children Prop Count (Fields): 2
    public:

        struct FRigElementKey item; // 0x0
        float Limit; // 0xc

    };

    struct FRigUnit_CCDIK : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_CCDIK
    {
    //Children Prop Count (Fields): 11
    public:

        struct FName StartBone; // 0x68
        struct FName EffectorBone; // 0x70
        struct FTransform EffectorTransform; // 0x80
        float Precision; // 0xb0
        float Weight; // 0xb4
        int32_t MaxIterations; // 0xb8
        bool bStartFromTail; // 0xbc
        float BaseRotationLimit; // 0xc0
        struct TArray<struct FRigUnit_CCDIK_RotationLimit> RotationLimits; // 0xc8
        bool bPropagateToChildren; // 0xd8
        struct FRigUnit_CCDIK_WorkData WorkData; // 0xe0

    };

    struct FRigUnit_CCDIK_RotationLimit //ScriptStruct ControlRig.RigUnit_CCDIK_RotationLimit
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Bone; // 0x0
        float Limit; // 0x8

    };

    struct FRigUnit_ChainHarmonicsPerItem : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_ChainHarmonicsPerItem
    {
    //Children Prop Count (Fields): 9
    public:

        struct FRigElementKey ChainRoot; // 0x68
        struct FVector Speed; // 0x74
        struct FRigUnit_ChainHarmonics_Reach Reach; // 0x80
        struct FRigUnit_ChainHarmonics_Wave Wave; // 0xa8
        struct FRuntimeFloatCurve WaveCurve; // 0xe8
        struct FRigUnit_ChainHarmonics_Pendulum Pendulum; // 0x170
        bool bDrawDebug; // 0x1ac
        struct FTransform DrawWorldOffset; // 0x1b0
        struct FRigUnit_ChainHarmonics_WorkData WorkData; // 0x1e0

    };

    struct FRigUnit_ChainHarmonics_WorkData //ScriptStruct ControlRig.RigUnit_ChainHarmonics_WorkData
    {
    //Children Prop Count (Fields): 9
    public:

        struct FVector Time; // 0x0
        struct TArray<struct FCachedRigElement> Items; // 0x10
        struct TArray<float> Ratio; // 0x20
        struct TArray<struct FVector> LocalTip; // 0x30
        struct TArray<struct FVector> PendulumTip; // 0x40
        struct TArray<struct FVector> PendulumPosition; // 0x50
        struct TArray<struct FVector> PendulumVelocity; // 0x60
        struct TArray<struct FVector> HierarchyLine; // 0x70
        struct TArray<struct FVector> VelocityLines; // 0x80

    };

    struct FRigUnit_ChainHarmonics_Pendulum //ScriptStruct ControlRig.RigUnit_ChainHarmonics_Pendulum
    {
    //Children Prop Count (Fields): 11
    public:

        bool bEnabled; // 0x0
        float PendulumStiffness; // 0x4
        struct FVector PendulumGravity; // 0x8
        float PendulumBlend; // 0x14
        float PendulumDrag; // 0x18
        float PendulumMinimum; // 0x1c
        float PendulumMaximum; // 0x20
        enum class EControlRigAnimEasingType PendulumEase; // 0x24
        struct FVector UnwindAxis; // 0x28
        float UnwindMinimum; // 0x34
        float UnwindMaximum; // 0x38

    };

    struct FRigUnit_ChainHarmonics_Wave //ScriptStruct ControlRig.RigUnit_ChainHarmonics_Wave
    {
    //Children Prop Count (Fields): 8
    public:

        bool bEnabled; // 0x0
        struct FVector WaveFrequency; // 0x4
        struct FVector WaveAmplitude; // 0x10
        struct FVector WaveOffset; // 0x1c
        struct FVector WaveNoise; // 0x28
        float WaveMinimum; // 0x34
        float WaveMaximum; // 0x38
        enum class EControlRigAnimEasingType WaveEase; // 0x3c

    };

    struct FRigUnit_ChainHarmonics_Reach //ScriptStruct ControlRig.RigUnit_ChainHarmonics_Reach
    {
    //Children Prop Count (Fields): 6
    public:

        bool bEnabled; // 0x0
        struct FVector ReachTarget; // 0x4
        struct FVector ReachAxis; // 0x10
        float ReachMinimum; // 0x1c
        float ReachMaximum; // 0x20
        enum class EControlRigAnimEasingType ReachEase; // 0x24

    };

    struct FRigUnit_ChainHarmonics : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_ChainHarmonics
    {
    //Children Prop Count (Fields): 9
    public:

        struct FName ChainRoot; // 0x68
        struct FVector Speed; // 0x70
        struct FRigUnit_ChainHarmonics_Reach Reach; // 0x7c
        struct FRigUnit_ChainHarmonics_Wave Wave; // 0xa4
        struct FRuntimeFloatCurve WaveCurve; // 0xe8
        struct FRigUnit_ChainHarmonics_Pendulum Pendulum; // 0x170
        bool bDrawDebug; // 0x1ac
        struct FTransform DrawWorldOffset; // 0x1b0
        struct FRigUnit_ChainHarmonics_WorkData WorkData; // 0x1e0

    };

    struct FRigUnit_CollectionBaseMutable : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_CollectionBaseMutable
    {
    public:


    };

    struct FRigUnit_CollectionLoop : FRigUnit_CollectionBaseMutable //ScriptStruct ControlRig.RigUnit_CollectionLoop
    {
    //Children Prop Count (Fields): 7
    public:

        struct FRigElementKeyCollection Collection; // 0x68
        struct FRigElementKey item; // 0x78
        int32_t Index; // 0x84
        int32_t Count; // 0x88
        float Ratio; // 0x8c
        bool Continue; // 0x90
        struct FControlRigExecuteContext Completed; // 0x98

    };

    struct FRigUnit_CollectionBase : FRigUnit //ScriptStruct ControlRig.RigUnit_CollectionBase
    {
    public:


    };

    struct FRigUnit_CollectionItemAtIndex : FRigUnit_CollectionBase //ScriptStruct ControlRig.RigUnit_CollectionItemAtIndex
    {
    //Children Prop Count (Fields): 3
    public:

        struct FRigElementKeyCollection Collection; // 0x8
        int32_t Index; // 0x18
        struct FRigElementKey item; // 0x1c

    };

    struct FRigUnit_CollectionCount : FRigUnit_CollectionBase //ScriptStruct ControlRig.RigUnit_CollectionCount
    {
    //Children Prop Count (Fields): 2
    public:

        struct FRigElementKeyCollection Collection; // 0x8
        int32_t Count; // 0x18

    };

    struct FRigUnit_CollectionReverse : FRigUnit_CollectionBase //ScriptStruct ControlRig.RigUnit_CollectionReverse
    {
    //Children Prop Count (Fields): 2
    public:

        struct FRigElementKeyCollection Collection; // 0x8
        struct FRigElementKeyCollection Reversed; // 0x18

    };

    struct FRigUnit_CollectionDifference : FRigUnit_CollectionBase //ScriptStruct ControlRig.RigUnit_CollectionDifference
    {
    //Children Prop Count (Fields): 3
    public:

        struct FRigElementKeyCollection A; // 0x8
        struct FRigElementKeyCollection B; // 0x18
        struct FRigElementKeyCollection Collection; // 0x28

    };

    struct FRigUnit_CollectionIntersection : FRigUnit_CollectionBase //ScriptStruct ControlRig.RigUnit_CollectionIntersection
    {
    //Children Prop Count (Fields): 3
    public:

        struct FRigElementKeyCollection A; // 0x8
        struct FRigElementKeyCollection B; // 0x18
        struct FRigElementKeyCollection Collection; // 0x28

    };

    struct FRigUnit_CollectionUnion : FRigUnit_CollectionBase //ScriptStruct ControlRig.RigUnit_CollectionUnion
    {
    //Children Prop Count (Fields): 3
    public:

        struct FRigElementKeyCollection A; // 0x8
        struct FRigElementKeyCollection B; // 0x18
        struct FRigElementKeyCollection Collection; // 0x28

    };

    struct FRigUnit_CollectionItems : FRigUnit_CollectionBase //ScriptStruct ControlRig.RigUnit_CollectionItems
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FRigElementKey> Items; // 0x8
        struct FRigElementKeyCollection Collection; // 0x18

    };

    struct FRigUnit_CollectionReplaceItems : FRigUnit_CollectionBase //ScriptStruct ControlRig.RigUnit_CollectionReplaceItems
    {
    //Children Prop Count (Fields): 7
    public:

        struct FRigElementKeyCollection Items; // 0x8
        struct FName Old; // 0x18
        struct FName New; // 0x20
        bool RemoveInvalidItems; // 0x28
        struct FRigElementKeyCollection Collection; // 0x30
        struct FRigElementKeyCollection CachedCollection; // 0x40
        int32_t CachedHierarchyHash; // 0x50

    };

    struct FRigUnit_CollectionChildren : FRigUnit_CollectionBase //ScriptStruct ControlRig.RigUnit_CollectionChildren
    {
    //Children Prop Count (Fields): 7
    public:

        struct FRigElementKey Parent; // 0x8
        bool bIncludeParent; // 0x14
        bool bRecursive; // 0x15
        enum class ERigElementType TypeToSearch; // 0x16
        struct FRigElementKeyCollection Collection; // 0x18
        struct FRigElementKeyCollection CachedCollection; // 0x28
        int32_t CachedHierarchyHash; // 0x38

    };

    struct FRigUnit_CollectionNameSearch : FRigUnit_CollectionBase //ScriptStruct ControlRig.RigUnit_CollectionNameSearch
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName PartialName; // 0x8
        enum class ERigElementType TypeToSearch; // 0x10
        struct FRigElementKeyCollection Collection; // 0x18
        struct FRigElementKeyCollection CachedCollection; // 0x28
        int32_t CachedHierarchyHash; // 0x38

    };

    struct FRigUnit_CollectionChain : FRigUnit_CollectionBase //ScriptStruct ControlRig.RigUnit_CollectionChain
    {
    //Children Prop Count (Fields): 6
    public:

        struct FRigElementKey FirstItem; // 0x8
        struct FRigElementKey LastItem; // 0x14
        bool Reverse; // 0x20
        struct FRigElementKeyCollection Collection; // 0x28
        struct FRigElementKeyCollection CachedCollection; // 0x38
        int32_t CachedHierarchyHash; // 0x48

    };

    struct FRigUnit_Control : FRigUnit //ScriptStruct ControlRig.RigUnit_Control
    {
    //Children Prop Count (Fields): 5
    public:

        struct FEulerTransform Transform; // 0x8
        struct FTransform Base; // 0x30
        struct FTransform InitTransform; // 0x60
        struct FTransform Result; // 0x90
        struct FTransformFilter Filter; // 0xc0

    };

    struct FEulerTransform //ScriptStruct AnimationCore.EulerTransform
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Location; // 0x0
        struct FRotator Rotation; // 0xc
        struct FVector Scale; // 0x18

    };

    struct FRigUnit_Control_StaticMesh : FRigUnit_Control //ScriptStruct ControlRig.RigUnit_Control_StaticMesh
    {
    //Children Prop Count (Fields): 1
    public:

        struct FTransform MeshTransform; // 0xd0

    };

    struct FRigUnit_ToSwingAndTwist : FRigUnit //ScriptStruct ControlRig.RigUnit_ToSwingAndTwist
    {
    //Children Prop Count (Fields): 4
    public:

        struct FQuat Input; // 0x10
        struct FVector TwistAxis; // 0x20
        struct FQuat Swing; // 0x30
        struct FQuat Twist; // 0x40

    };

    struct FRigUnit_ConvertQuaternionToVector : FRigUnit //ScriptStruct ControlRig.RigUnit_ConvertQuaternionToVector
    {
    //Children Prop Count (Fields): 2
    public:

        struct FQuat Input; // 0x10
        struct FVector Result; // 0x20

    };

    struct FRigUnit_ConvertRotationToVector : FRigUnit //ScriptStruct ControlRig.RigUnit_ConvertRotationToVector
    {
    //Children Prop Count (Fields): 2
    public:

        struct FRotator Input; // 0x8
        struct FVector Result; // 0x14

    };

    struct FRigUnit_ConvertVectorToQuaternion : FRigUnit //ScriptStruct ControlRig.RigUnit_ConvertVectorToQuaternion
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Input; // 0x8
        struct FQuat Result; // 0x20

    };

    struct FRigUnit_ConvertVectorToRotation : FRigUnit //ScriptStruct ControlRig.RigUnit_ConvertVectorToRotation
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Input; // 0x8
        struct FRotator Result; // 0x14

    };

    struct FRigUnit_ConvertQuaternion : FRigUnit //ScriptStruct ControlRig.RigUnit_ConvertQuaternion
    {
    //Children Prop Count (Fields): 2
    public:

        struct FQuat Input; // 0x10
        struct FRotator Result; // 0x20

    };

    struct FRigUnit_ConvertRotation : FRigUnit //ScriptStruct ControlRig.RigUnit_ConvertRotation
    {
    //Children Prop Count (Fields): 2
    public:

        struct FRotator Input; // 0x8
        struct FQuat Result; // 0x20

    };

    struct FRigUnit_ConvertVectorRotation : FRigUnit_ConvertRotation //ScriptStruct ControlRig.RigUnit_ConvertVectorRotation
    {
    public:


    };

    struct FRigUnit_ConvertEulerTransform : FRigUnit //ScriptStruct ControlRig.RigUnit_ConvertEulerTransform
    {
    //Children Prop Count (Fields): 2
    public:

        struct FEulerTransform Input; // 0x8
        struct FTransform Result; // 0x30

    };

    struct FRigUnit_ConvertTransform : FRigUnit //ScriptStruct ControlRig.RigUnit_ConvertTransform
    {
    //Children Prop Count (Fields): 2
    public:

        struct FTransform Input; // 0x10
        struct FEulerTransform Result; // 0x40

    };

    struct FRigUnit_DebugBaseMutable : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_DebugBaseMutable
    {
    public:


    };

    struct FRigUnit_DebugBase : FRigUnit //ScriptStruct ControlRig.RigUnit_DebugBase
    {
    public:


    };

    struct FRigUnit_DebugBezierItemSpace : FRigUnit_DebugBaseMutable //ScriptStruct ControlRig.RigUnit_DebugBezierItemSpace
    {
    //Children Prop Count (Fields): 9
    public:

        struct FCRFourPointBezier Bezier; // 0x68
        float MinimumU; // 0x98
        float MaximumU; // 0x9c
        struct FLinearColor Color; // 0xa0
        float Thickness; // 0xb0
        int32_t Detail; // 0xb4
        struct FRigElementKey Space; // 0xb8
        struct FTransform WorldOffset; // 0xd0
        bool bEnabled; // 0x100

    };

    struct FRigUnit_DebugBezier : FRigUnit_DebugBaseMutable //ScriptStruct ControlRig.RigUnit_DebugBezier
    {
    //Children Prop Count (Fields): 9
    public:

        struct FCRFourPointBezier Bezier; // 0x68
        float MinimumU; // 0x98
        float MaximumU; // 0x9c
        struct FLinearColor Color; // 0xa0
        float Thickness; // 0xb0
        int32_t Detail; // 0xb4
        struct FName Space; // 0xb8
        struct FTransform WorldOffset; // 0xc0
        bool bEnabled; // 0xf0

    };

    struct FRigUnit_DebugHierarchy : FRigUnit_DebugBaseMutable //ScriptStruct ControlRig.RigUnit_DebugHierarchy
    {
    //Children Prop Count (Fields): 5
    public:

        float Scale; // 0x68
        struct FLinearColor Color; // 0x6c
        float Thickness; // 0x7c
        struct FTransform WorldOffset; // 0x80
        bool bEnabled; // 0xb0

    };

    struct FRigUnit_DebugLineItemSpace : FRigUnit_DebugBaseMutable //ScriptStruct ControlRig.RigUnit_DebugLineItemSpace
    {
    //Children Prop Count (Fields): 7
    public:

        struct FVector A; // 0x68
        struct FVector B; // 0x74
        struct FLinearColor Color; // 0x80
        float Thickness; // 0x90
        struct FRigElementKey Space; // 0x94
        struct FTransform WorldOffset; // 0xa0
        bool bEnabled; // 0xd0

    };

    struct FRigUnit_DebugLine : FRigUnit_DebugBaseMutable //ScriptStruct ControlRig.RigUnit_DebugLine
    {
    //Children Prop Count (Fields): 7
    public:

        struct FVector A; // 0x68
        struct FVector B; // 0x74
        struct FLinearColor Color; // 0x80
        float Thickness; // 0x90
        struct FName Space; // 0x94
        struct FTransform WorldOffset; // 0xa0
        bool bEnabled; // 0xd0

    };

    struct FRigUnit_DebugLineStripItemSpace : FRigUnit_DebugBaseMutable //ScriptStruct ControlRig.RigUnit_DebugLineStripItemSpace
    {
    //Children Prop Count (Fields): 6
    public:

        struct TArray<struct FVector> Points; // 0x68
        struct FLinearColor Color; // 0x78
        float Thickness; // 0x88
        struct FRigElementKey Space; // 0x8c
        struct FTransform WorldOffset; // 0xa0
        bool bEnabled; // 0xd0

    };

    struct FRigUnit_DebugLineStrip : FRigUnit_DebugBaseMutable //ScriptStruct ControlRig.RigUnit_DebugLineStrip
    {
    //Children Prop Count (Fields): 6
    public:

        struct TArray<struct FVector> Points; // 0x68
        struct FLinearColor Color; // 0x78
        float Thickness; // 0x88
        struct FName Space; // 0x8c
        struct FTransform WorldOffset; // 0xa0
        bool bEnabled; // 0xd0

    };

    struct FRigUnit_DebugPointMutable : FRigUnit_DebugBaseMutable //ScriptStruct ControlRig.RigUnit_DebugPointMutable
    {
    //Children Prop Count (Fields): 8
    public:

        struct FVector Vector; // 0x68
        enum class ERigUnitDebugPointMode Mode; // 0x74
        struct FLinearColor Color; // 0x78
        float Scale; // 0x88
        float Thickness; // 0x8c
        struct FName Space; // 0x90
        struct FTransform WorldOffset; // 0xa0
        bool bEnabled; // 0xd0

    };

    struct FRigUnit_DebugPoint : FRigUnit_DebugBase //ScriptStruct ControlRig.RigUnit_DebugPoint
    {
    //Children Prop Count (Fields): 8
    public:

        struct FVector Vector; // 0x8
        enum class ERigUnitDebugPointMode Mode; // 0x14
        struct FLinearColor Color; // 0x18
        float Scale; // 0x28
        float Thickness; // 0x2c
        struct FName Space; // 0x30
        struct FTransform WorldOffset; // 0x40
        bool bEnabled; // 0x70

    };

    struct FRigUnit_DebugArcItemSpace : FRigUnit_DebugBaseMutable //ScriptStruct ControlRig.RigUnit_DebugArcItemSpace
    {
    //Children Prop Count (Fields): 10
    public:

        struct FTransform Transform; // 0x70
        struct FLinearColor Color; // 0xa0
        float Radius; // 0xb0
        float MinimumDegrees; // 0xb4
        float MaximumDegrees; // 0xb8
        float Thickness; // 0xbc
        int32_t Detail; // 0xc0
        struct FRigElementKey Space; // 0xc4
        struct FTransform WorldOffset; // 0xd0
        bool bEnabled; // 0x100

    };

    struct FRigUnit_DebugArc : FRigUnit_DebugBaseMutable //ScriptStruct ControlRig.RigUnit_DebugArc
    {
    //Children Prop Count (Fields): 10
    public:

        struct FTransform Transform; // 0x70
        struct FLinearColor Color; // 0xa0
        float Radius; // 0xb0
        float MinimumDegrees; // 0xb4
        float MaximumDegrees; // 0xb8
        float Thickness; // 0xbc
        int32_t Detail; // 0xc0
        struct FName Space; // 0xc4
        struct FTransform WorldOffset; // 0xd0
        bool bEnabled; // 0x100

    };

    struct FRigUnit_DebugRectangleItemSpace : FRigUnit_DebugBaseMutable //ScriptStruct ControlRig.RigUnit_DebugRectangleItemSpace
    {
    //Children Prop Count (Fields): 7
    public:

        struct FTransform Transform; // 0x70
        struct FLinearColor Color; // 0xa0
        float Scale; // 0xb0
        float Thickness; // 0xb4
        struct FRigElementKey Space; // 0xb8
        struct FTransform WorldOffset; // 0xd0
        bool bEnabled; // 0x100

    };

    struct FRigUnit_DebugRectangle : FRigUnit_DebugBaseMutable //ScriptStruct ControlRig.RigUnit_DebugRectangle
    {
    //Children Prop Count (Fields): 7
    public:

        struct FTransform Transform; // 0x70
        struct FLinearColor Color; // 0xa0
        float Scale; // 0xb0
        float Thickness; // 0xb4
        struct FName Space; // 0xb8
        struct FTransform WorldOffset; // 0xc0
        bool bEnabled; // 0xf0

    };

    struct FRigUnit_DebugTransformArrayMutable : FRigUnit_DebugBaseMutable //ScriptStruct ControlRig.RigUnit_DebugTransformArrayMutable
    {
    //Children Prop Count (Fields): 9
    public:

        struct TArray<struct FTransform> Transforms; // 0x68
        enum class ERigUnitDebugTransformMode Mode; // 0x78
        struct FLinearColor Color; // 0x7c
        float Thickness; // 0x8c
        float Scale; // 0x90
        struct FName Space; // 0x94
        struct FTransform WorldOffset; // 0xa0
        bool bEnabled; // 0xd0
        struct FRigUnit_DebugTransformArrayMutable_WorkData WorkData; // 0xd8

    };

    struct FRigUnit_DebugTransformArrayMutable_WorkData //ScriptStruct ControlRig.RigUnit_DebugTransformArrayMutable_WorkData
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FTransform> DrawTransforms; // 0x0

    };

    struct FRigUnit_DebugTransformMutableItemSpace : FRigUnit_DebugBaseMutable //ScriptStruct ControlRig.RigUnit_DebugTransformMutableItemSpace
    {
    //Children Prop Count (Fields): 8
    public:

        struct FTransform Transform; // 0x70
        enum class ERigUnitDebugTransformMode Mode; // 0xa0
        struct FLinearColor Color; // 0xa4
        float Thickness; // 0xb4
        float Scale; // 0xb8
        struct FRigElementKey Space; // 0xbc
        struct FTransform WorldOffset; // 0xd0
        bool bEnabled; // 0x100

    };

    struct FRigUnit_DebugTransformMutable : FRigUnit_DebugBaseMutable //ScriptStruct ControlRig.RigUnit_DebugTransformMutable
    {
    //Children Prop Count (Fields): 8
    public:

        struct FTransform Transform; // 0x70
        enum class ERigUnitDebugTransformMode Mode; // 0xa0
        struct FLinearColor Color; // 0xa4
        float Thickness; // 0xb4
        float Scale; // 0xb8
        struct FName Space; // 0xbc
        struct FTransform WorldOffset; // 0xd0
        bool bEnabled; // 0x100

    };

    struct FRigUnit_DebugTransform : FRigUnit_DebugBase //ScriptStruct ControlRig.RigUnit_DebugTransform
    {
    //Children Prop Count (Fields): 8
    public:

        struct FTransform Transform; // 0x10
        enum class ERigUnitDebugTransformMode Mode; // 0x40
        struct FLinearColor Color; // 0x44
        float Thickness; // 0x54
        float Scale; // 0x58
        struct FName Space; // 0x5c
        struct FTransform WorldOffset; // 0x70
        bool bEnabled; // 0xa0

    };

    struct FRigUnit_DeltaFromPreviousTransform : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_DeltaFromPreviousTransform
    {
    //Children Prop Count (Fields): 4
    public:

        struct FTransform Value; // 0x10
        struct FTransform Delta; // 0x40
        struct FTransform PreviousValue; // 0x70
        struct FTransform Cache; // 0xa0

    };

    struct FRigUnit_DeltaFromPreviousQuat : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_DeltaFromPreviousQuat
    {
    //Children Prop Count (Fields): 4
    public:

        struct FQuat Value; // 0x10
        struct FQuat Delta; // 0x20
        struct FQuat PreviousValue; // 0x30
        struct FQuat Cache; // 0x40

    };

    struct FRigUnit_DeltaFromPreviousVector : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_DeltaFromPreviousVector
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector Value; // 0x8
        struct FVector Delta; // 0x14
        struct FVector PreviousValue; // 0x20
        struct FVector Cache; // 0x2c

    };

    struct FRigUnit_DeltaFromPreviousFloat : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_DeltaFromPreviousFloat
    {
    //Children Prop Count (Fields): 4
    public:

        float Value; // 0x8
        float Delta; // 0xc
        float PreviousValue; // 0x10
        float Cache; // 0x14

    };

    struct FRigUnit_DistributeRotationForCollection : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_DistributeRotationForCollection
    {
    //Children Prop Count (Fields): 5
    public:

        struct FRigElementKeyCollection Items; // 0x68
        struct TArray<struct FRigUnit_DistributeRotation_Rotation> Rotations; // 0x78
        enum class EControlRigAnimEasingType RotationEaseType; // 0x88
        float Weight; // 0x8c
        struct FRigUnit_DistributeRotation_WorkData WorkData; // 0x90

    };

    struct FRigUnit_DistributeRotation_WorkData //ScriptStruct ControlRig.RigUnit_DistributeRotation_WorkData
    {
    //Children Prop Count (Fields): 5
    public:

        struct TArray<struct FCachedRigElement> CachedItems; // 0x0
        struct TArray<int32_t> ItemRotationA; // 0x10
        struct TArray<int32_t> ItemRotationB; // 0x20
        struct TArray<float> ItemRotationT; // 0x30
        struct TArray<struct FTransform> ItemLocalTransforms; // 0x40

    };

    struct FRigUnit_DistributeRotation_Rotation //ScriptStruct ControlRig.RigUnit_DistributeRotation_Rotation
    {
    //Children Prop Count (Fields): 2
    public:

        struct FQuat Rotation; // 0x0
        float Ratio; // 0x10

    };

    struct FRigUnit_DistributeRotation : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_DistributeRotation
    {
    //Children Prop Count (Fields): 7
    public:

        struct FName StartBone; // 0x68
        struct FName EndBone; // 0x70
        struct TArray<struct FRigUnit_DistributeRotation_Rotation> Rotations; // 0x78
        enum class EControlRigAnimEasingType RotationEaseType; // 0x88
        float Weight; // 0x8c
        bool bPropagateToChildren; // 0x90
        struct FRigUnit_DistributeRotation_WorkData WorkData; // 0x98

    };

    struct FRigUnit_DrawContainerSetTransform : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_DrawContainerSetTransform
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName InstructionName; // 0x68
        struct FTransform Transform; // 0x70

    };

    struct FRigUnit_DrawContainerSetThickness : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_DrawContainerSetThickness
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName InstructionName; // 0x68
        float Thickness; // 0x70

    };

    struct FRigUnit_DrawContainerSetColor : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_DrawContainerSetColor
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName InstructionName; // 0x68
        struct FLinearColor Color; // 0x70

    };

    struct FRigUnit_DrawContainerGetInstruction : FRigUnit //ScriptStruct ControlRig.RigUnit_DrawContainerGetInstruction
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName InstructionName; // 0x8
        struct FLinearColor Color; // 0x10
        struct FTransform Transform; // 0x20

    };

    struct FRigUnit_FABRIKPerItem : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_FABRIKPerItem
    {
    //Children Prop Count (Fields): 7
    public:

        struct FRigElementKeyCollection Items; // 0x68
        struct FTransform EffectorTransform; // 0x80
        float Precision; // 0xb0
        float Weight; // 0xb4
        bool bPropagateToChildren; // 0xb8
        int32_t MaxIterations; // 0xbc
        struct FRigUnit_FABRIK_WorkData WorkData; // 0xc0

    };

    struct FRigUnit_FABRIK_WorkData //ScriptStruct ControlRig.RigUnit_FABRIK_WorkData
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FFABRIKChainLink> Chain; // 0x0
        struct TArray<struct FCachedRigElement> CachedItems; // 0x10
        struct FCachedRigElement CachedEffector; // 0x20

    };

    struct FFABRIKChainLink //ScriptStruct AnimationCore.FABRIKChainLink
    {
    public:


    };

    struct FRigUnit_FABRIK : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_FABRIK
    {
    //Children Prop Count (Fields): 8
    public:

        struct FName StartBone; // 0x68
        struct FName EffectorBone; // 0x70
        struct FTransform EffectorTransform; // 0x80
        float Precision; // 0xb0
        float Weight; // 0xb4
        bool bPropagateToChildren; // 0xb8
        int32_t MaxIterations; // 0xbc
        struct FRigUnit_FABRIK_WorkData WorkData; // 0xc0

    };

    struct FRigUnit_FitChainToCurvePerItem : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_FitChainToCurvePerItem
    {
    //Children Prop Count (Fields): 15
    public:

        struct FRigElementKeyCollection Items; // 0x68
        struct FCRFourPointBezier Bezier; // 0x78
        enum class EControlRigCurveAlignment Alignment; // 0xa8
        float Minimum; // 0xac
        float Maximum; // 0xb0
        int32_t SamplingPrecision; // 0xb4
        struct FVector PrimaryAxis; // 0xb8
        struct FVector SecondaryAxis; // 0xc4
        struct FVector PoleVectorPosition; // 0xd0
        struct TArray<struct FRigUnit_FitChainToCurve_Rotation> Rotations; // 0xe0
        enum class EControlRigAnimEasingType RotationEaseType; // 0xf0
        float Weight; // 0xf4
        bool bPropagateToChildren; // 0xf8
        struct FRigUnit_FitChainToCurve_DebugSettings DebugSettings; // 0x100
        struct FRigUnit_FitChainToCurve_WorkData WorkData; // 0x160

    };

    struct FRigUnit_FitChainToCurve_WorkData //ScriptStruct ControlRig.RigUnit_FitChainToCurve_WorkData
    {
    //Children Prop Count (Fields): 10
    public:

        float ChainLength; // 0x0
        struct TArray<struct FVector> ItemPositions; // 0x8
        struct TArray<float> ItemSegments; // 0x18
        struct TArray<struct FVector> CurvePositions; // 0x28
        struct TArray<float> CurveSegments; // 0x38
        struct TArray<struct FCachedRigElement> CachedItems; // 0x48
        struct TArray<int32_t> ItemRotationA; // 0x58
        struct TArray<int32_t> ItemRotationB; // 0x68
        struct TArray<float> ItemRotationT; // 0x78
        struct TArray<struct FTransform> ItemLocalTransforms; // 0x88

    };

    struct FRigUnit_FitChainToCurve_DebugSettings //ScriptStruct ControlRig.RigUnit_FitChainToCurve_DebugSettings
    {
    //Children Prop Count (Fields): 5
    public:

        bool bEnabled; // 0x0
        float Scale; // 0x4
        struct FLinearColor CurveColor; // 0x8
        struct FLinearColor SegmentsColor; // 0x18
        struct FTransform WorldOffset; // 0x30

    };

    struct FRigUnit_FitChainToCurve_Rotation //ScriptStruct ControlRig.RigUnit_FitChainToCurve_Rotation
    {
    //Children Prop Count (Fields): 2
    public:

        struct FQuat Rotation; // 0x0
        float Ratio; // 0x10

    };

    struct FRigUnit_FitChainToCurve : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_FitChainToCurve
    {
    //Children Prop Count (Fields): 16
    public:

        struct FName StartBone; // 0x68
        struct FName EndBone; // 0x70
        struct FCRFourPointBezier Bezier; // 0x78
        enum class EControlRigCurveAlignment Alignment; // 0xa8
        float Minimum; // 0xac
        float Maximum; // 0xb0
        int32_t SamplingPrecision; // 0xb4
        struct FVector PrimaryAxis; // 0xb8
        struct FVector SecondaryAxis; // 0xc4
        struct FVector PoleVectorPosition; // 0xd0
        struct TArray<struct FRigUnit_FitChainToCurve_Rotation> Rotations; // 0xe0
        enum class EControlRigAnimEasingType RotationEaseType; // 0xf0
        float Weight; // 0xf4
        bool bPropagateToChildren; // 0xf8
        struct FRigUnit_FitChainToCurve_DebugSettings DebugSettings; // 0x100
        struct FRigUnit_FitChainToCurve_WorkData WorkData; // 0x160

    };

    struct FRigUnit_MapRange_Float : FRigUnit //ScriptStruct ControlRig.RigUnit_MapRange_Float
    {
    //Children Prop Count (Fields): 6
    public:

        float Value; // 0x8
        float MinIn; // 0xc
        float MaxIn; // 0x10
        float MinOut; // 0x14
        float MaxOut; // 0x18
        float Result; // 0x1c

    };

    struct FRigUnit_Clamp_Float : FRigUnit //ScriptStruct ControlRig.RigUnit_Clamp_Float
    {
    //Children Prop Count (Fields): 4
    public:

        float Value; // 0x8
        float Min; // 0xc
        float Max; // 0x10
        float Result; // 0x14

    };

    struct FRigUnit_BinaryFloatOp : FRigUnit //ScriptStruct ControlRig.RigUnit_BinaryFloatOp
    {
    //Children Prop Count (Fields): 3
    public:

        float Argument0; // 0x8
        float Argument1; // 0xc
        float Result; // 0x10

    };

    struct FRigUnit_Divide_FloatFloat : FRigUnit_BinaryFloatOp //ScriptStruct ControlRig.RigUnit_Divide_FloatFloat
    {
    public:


    };

    struct FRigUnit_Subtract_FloatFloat : FRigUnit_BinaryFloatOp //ScriptStruct ControlRig.RigUnit_Subtract_FloatFloat
    {
    public:


    };

    struct FRigUnit_Add_FloatFloat : FRigUnit_BinaryFloatOp //ScriptStruct ControlRig.RigUnit_Add_FloatFloat
    {
    public:


    };

    struct FRigUnit_Multiply_FloatFloat : FRigUnit_BinaryFloatOp //ScriptStruct ControlRig.RigUnit_Multiply_FloatFloat
    {
    public:


    };

    struct FRigUnit_ForLoopCount : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_ForLoopCount
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t Count; // 0x68
        int32_t Index; // 0x6c
        float Ratio; // 0x70
        bool Continue; // 0x74
        struct FControlRigExecuteContext Completed; // 0x78

    };

    struct FRigUnit_GetBoneTransform : FRigUnit //ScriptStruct ControlRig.RigUnit_GetBoneTransform
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName Bone; // 0x8
        enum class EBoneGetterSetterMode Space; // 0x10
        struct FTransform Transform; // 0x20
        struct FCachedRigElement CachedBone; // 0x50

    };

    struct FRigUnit_GetControlInitialTransform : FRigUnit //ScriptStruct ControlRig.RigUnit_GetControlInitialTransform
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName Control; // 0x8
        enum class EBoneGetterSetterMode Space; // 0x10
        struct FTransform Transform; // 0x20
        struct FCachedRigElement CachedControlIndex; // 0x50

    };

    struct FRigUnit_GetControlTransform : FRigUnit //ScriptStruct ControlRig.RigUnit_GetControlTransform
    {
    //Children Prop Count (Fields): 6
    public:

        struct FName Control; // 0x8
        enum class EBoneGetterSetterMode Space; // 0x10
        struct FTransform Transform; // 0x20
        struct FTransform Minimum; // 0x50
        struct FTransform Maximum; // 0x80
        struct FCachedRigElement CachedControlIndex; // 0xb0

    };

    struct FRigUnit_GetControlRotator : FRigUnit //ScriptStruct ControlRig.RigUnit_GetControlRotator
    {
    //Children Prop Count (Fields): 6
    public:

        struct FName Control; // 0x8
        enum class EBoneGetterSetterMode Space; // 0x10
        struct FRotator Rotator; // 0x14
        struct FRotator Minimum; // 0x20
        struct FRotator Maximum; // 0x2c
        struct FCachedRigElement CachedControlIndex; // 0x38

    };

    struct FRigUnit_GetControlVector : FRigUnit //ScriptStruct ControlRig.RigUnit_GetControlVector
    {
    //Children Prop Count (Fields): 6
    public:

        struct FName Control; // 0x8
        enum class EBoneGetterSetterMode Space; // 0x10
        struct FVector Vector; // 0x14
        struct FVector Minimum; // 0x20
        struct FVector Maximum; // 0x2c
        struct FCachedRigElement CachedControlIndex; // 0x38

    };

    struct FRigUnit_GetControlVector2D : FRigUnit //ScriptStruct ControlRig.RigUnit_GetControlVector2D
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName Control; // 0x8
        struct FVector2D Vector; // 0x10
        struct FVector2D Minimum; // 0x18
        struct FVector2D Maximum; // 0x20
        struct FCachedRigElement CachedControlIndex; // 0x28

    };

    struct FRigUnit_GetControlInteger : FRigUnit //ScriptStruct ControlRig.RigUnit_GetControlInteger
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName Control; // 0x8
        int32_t IntegerValue; // 0x10
        int32_t Minimum; // 0x14
        int32_t Maximum; // 0x18
        struct FCachedRigElement CachedControlIndex; // 0x1c

    };

    struct FRigUnit_GetControlFloat : FRigUnit //ScriptStruct ControlRig.RigUnit_GetControlFloat
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName Control; // 0x8
        float FloatValue; // 0x10
        float Minimum; // 0x14
        float Maximum; // 0x18
        struct FCachedRigElement CachedControlIndex; // 0x1c

    };

    struct FRigUnit_GetControlBool : FRigUnit //ScriptStruct ControlRig.RigUnit_GetControlBool
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Control; // 0x8
        bool BoolValue; // 0x10
        struct FCachedRigElement CachedControlIndex; // 0x14

    };

    struct FRigUnit_GetCurveValue : FRigUnit //ScriptStruct ControlRig.RigUnit_GetCurveValue
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Curve; // 0x8
        float Value; // 0x10
        struct FCachedRigElement CachedCurveIndex; // 0x14

    };

    struct FRigUnit_GetDeltaTime : FRigUnit_AnimBase //ScriptStruct ControlRig.RigUnit_GetDeltaTime
    {
    //Children Prop Count (Fields): 1
    public:

        float Result; // 0x8

    };

    struct FRigUnit_GetInitialBoneTransform : FRigUnit //ScriptStruct ControlRig.RigUnit_GetInitialBoneTransform
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName Bone; // 0x8
        enum class EBoneGetterSetterMode Space; // 0x10
        struct FTransform Transform; // 0x20
        struct FCachedRigElement CachedBone; // 0x50

    };

    struct FRigUnit_GetJointTransform : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_GetJointTransform
    {
    //Children Prop Count (Fields): 6
    public:

        struct FName Joint; // 0x68
        enum class ETransformGetterType Type; // 0x70
        enum class ETransformSpaceMode TransformSpace; // 0x71
        struct FTransform BaseTransform; // 0x80
        struct FName BaseJoint; // 0xb0
        struct FTransform Output; // 0xc0

    };

    struct FRigUnit_GetRelativeBoneTransform : FRigUnit //ScriptStruct ControlRig.RigUnit_GetRelativeBoneTransform
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName Bone; // 0x8
        struct FName Space; // 0x10
        struct FTransform Transform; // 0x20
        struct FCachedRigElement CachedBone; // 0x50
        struct FCachedRigElement CachedSpace; // 0x64

    };

    struct FRigUnit_GetRelativeTransformForItem : FRigUnit //ScriptStruct ControlRig.RigUnit_GetRelativeTransformForItem
    {
    //Children Prop Count (Fields): 7
    public:

        struct FRigElementKey Child; // 0x8
        bool bChildInitial; // 0x14
        struct FRigElementKey Parent; // 0x18
        bool bParentInitial; // 0x24
        struct FTransform RelativeTransform; // 0x30
        struct FCachedRigElement CachedChild; // 0x60
        struct FCachedRigElement CachedParent; // 0x74

    };

    struct FRigUnit_GetSpaceTransform : FRigUnit //ScriptStruct ControlRig.RigUnit_GetSpaceTransform
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName Space; // 0x8
        enum class EBoneGetterSetterMode SpaceType; // 0x10
        struct FTransform Transform; // 0x20
        struct FCachedRigElement CachedSpaceIndex; // 0x50

    };

    struct FRigUnit_GetTransform : FRigUnit //ScriptStruct ControlRig.RigUnit_GetTransform
    {
    //Children Prop Count (Fields): 5
    public:

        struct FRigElementKey item; // 0x8
        enum class EBoneGetterSetterMode Space; // 0x14
        bool bInitial; // 0x15
        struct FTransform Transform; // 0x20
        struct FCachedRigElement CachedIndex; // 0x50

    };

    struct FRigUnit_GetWorldTime : FRigUnit_AnimBase //ScriptStruct ControlRig.RigUnit_GetWorldTime
    {
    //Children Prop Count (Fields): 8
    public:

        float Year; // 0x8
        float Month; // 0xc
        float Day; // 0x10
        float WeekDay; // 0x14
        float Hours; // 0x18
        float Minutes; // 0x1c
        float Seconds; // 0x20
        float OverallSeconds; // 0x24

    };

    struct FRigUnit_HierarchyBase : FRigUnit //ScriptStruct ControlRig.RigUnit_HierarchyBase
    {
    public:


    };

    struct FRigUnit_HierarchyGetSiblings : FRigUnit_HierarchyBase //ScriptStruct ControlRig.RigUnit_HierarchyGetSiblings
    {
    //Children Prop Count (Fields): 5
    public:

        struct FRigElementKey item; // 0x8
        bool bIncludeItem; // 0x14
        struct FRigElementKeyCollection Siblings; // 0x18
        struct FCachedRigElement CachedItem; // 0x28
        struct FRigElementKeyCollection CachedSiblings; // 0x40

    };

    struct FRigUnit_HierarchyGetChildren : FRigUnit_HierarchyBase //ScriptStruct ControlRig.RigUnit_HierarchyGetChildren
    {
    //Children Prop Count (Fields): 6
    public:

        struct FRigElementKey Parent; // 0x8
        bool bIncludeParent; // 0x14
        bool bRecursive; // 0x15
        struct FRigElementKeyCollection Children; // 0x18
        struct FCachedRigElement CachedParent; // 0x28
        struct FRigElementKeyCollection CachedChildren; // 0x40

    };

    struct FRigUnit_HierarchyGetParents : FRigUnit_HierarchyBase //ScriptStruct ControlRig.RigUnit_HierarchyGetParents
    {
    //Children Prop Count (Fields): 6
    public:

        struct FRigElementKey Child; // 0x8
        bool bIncludeChild; // 0x14
        bool bReverse; // 0x15
        struct FRigElementKeyCollection Parents; // 0x18
        struct FCachedRigElement CachedChild; // 0x28
        struct FRigElementKeyCollection CachedParents; // 0x40

    };

    struct FRigUnit_HierarchyGetParent : FRigUnit_HierarchyBase //ScriptStruct ControlRig.RigUnit_HierarchyGetParent
    {
    //Children Prop Count (Fields): 4
    public:

        struct FRigElementKey Child; // 0x8
        struct FRigElementKey Parent; // 0x14
        struct FCachedRigElement CachedChild; // 0x20
        struct FCachedRigElement CachedParent; // 0x34

    };

    struct FRigUnit_InverseExecution : FRigUnit //ScriptStruct ControlRig.RigUnit_InverseExecution
    {
    //Children Prop Count (Fields): 1
    public:

        struct FControlRigExecuteContext ExecuteContext; // 0x8

    };

    struct FRigUnit_IsInteracting : FRigUnit //ScriptStruct ControlRig.RigUnit_IsInteracting
    {
    //Children Prop Count (Fields): 1
    public:

        bool bIsInteracting; // 0x8

    };

    struct FRigUnit_ItemBase : FRigUnit //ScriptStruct ControlRig.RigUnit_ItemBase
    {
    public:


    };

    struct FRigUnit_ItemReplace : FRigUnit_ItemBase //ScriptStruct ControlRig.RigUnit_ItemReplace
    {
    //Children Prop Count (Fields): 4
    public:

        struct FRigElementKey item; // 0x8
        struct FName Old; // 0x14
        struct FName New; // 0x1c
        struct FRigElementKey Result; // 0x24

    };

    struct FRigUnit_ItemExists : FRigUnit_ItemBase //ScriptStruct ControlRig.RigUnit_ItemExists
    {
    //Children Prop Count (Fields): 3
    public:

        struct FRigElementKey item; // 0x8
        bool Exists; // 0x14
        struct FCachedRigElement CachedIndex; // 0x18

    };

    struct FRigUnit_ItemBaseMutable : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_ItemBaseMutable
    {
    public:


    };

    struct FRigUnit_KalmanTransform : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_KalmanTransform
    {
    //Children Prop Count (Fields): 5
    public:

        struct FTransform Value; // 0x10
        int32_t BufferSize; // 0x40
        struct FTransform Result; // 0x50
        struct TArray<struct FTransform> Buffer; // 0x80
        int32_t LastInsertIndex; // 0x90

    };

    struct FRigUnit_KalmanVector : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_KalmanVector
    {
    //Children Prop Count (Fields): 5
    public:

        struct FVector Value; // 0x8
        int32_t BufferSize; // 0x14
        struct FVector Result; // 0x18
        struct TArray<struct FVector> Buffer; // 0x28
        int32_t LastInsertIndex; // 0x38

    };

    struct FRigUnit_KalmanFloat : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_KalmanFloat
    {
    //Children Prop Count (Fields): 5
    public:

        float Value; // 0x8
        int32_t BufferSize; // 0xc
        float Result; // 0x10
        struct TArray<float> Buffer; // 0x18
        int32_t LastInsertIndex; // 0x28

    };

    struct FRigUnit_MathBase : FRigUnit //ScriptStruct ControlRig.RigUnit_MathBase
    {
    public:


    };

    struct FRigUnit_MathBoolBase : FRigUnit_MathBase //ScriptStruct ControlRig.RigUnit_MathBoolBase
    {
    public:


    };

    struct FRigUnit_MathBoolNotEquals : FRigUnit_MathBoolBase //ScriptStruct ControlRig.RigUnit_MathBoolNotEquals
    {
    //Children Prop Count (Fields): 3
    public:

        bool A; // 0x8
        bool B; // 0x9
        bool Result; // 0xa

    };

    struct FRigUnit_MathBoolEquals : FRigUnit_MathBoolBase //ScriptStruct ControlRig.RigUnit_MathBoolEquals
    {
    //Children Prop Count (Fields): 3
    public:

        bool A; // 0x8
        bool B; // 0x9
        bool Result; // 0xa

    };

    struct FRigUnit_MathBoolBinaryOp : FRigUnit_MathBoolBase //ScriptStruct ControlRig.RigUnit_MathBoolBinaryOp
    {
    //Children Prop Count (Fields): 3
    public:

        bool A; // 0x8
        bool B; // 0x9
        bool Result; // 0xa

    };

    struct FRigUnit_MathBoolOr : FRigUnit_MathBoolBinaryOp //ScriptStruct ControlRig.RigUnit_MathBoolOr
    {
    public:


    };

    struct FRigUnit_MathBoolNand : FRigUnit_MathBoolBinaryOp //ScriptStruct ControlRig.RigUnit_MathBoolNand
    {
    public:


    };

    struct FRigUnit_MathBoolAnd : FRigUnit_MathBoolBinaryOp //ScriptStruct ControlRig.RigUnit_MathBoolAnd
    {
    public:


    };

    struct FRigUnit_MathBoolUnaryOp : FRigUnit_MathBoolBase //ScriptStruct ControlRig.RigUnit_MathBoolUnaryOp
    {
    //Children Prop Count (Fields): 2
    public:

        bool Value; // 0x8
        bool Result; // 0x9

    };

    struct FRigUnit_MathBoolNot : FRigUnit_MathBoolUnaryOp //ScriptStruct ControlRig.RigUnit_MathBoolNot
    {
    public:


    };

    struct FRigUnit_MathBoolConstant : FRigUnit_MathBoolBase //ScriptStruct ControlRig.RigUnit_MathBoolConstant
    {
    //Children Prop Count (Fields): 1
    public:

        bool Value; // 0x8

    };

    struct FRigUnit_MathBoolConstFalse : FRigUnit_MathBoolConstant //ScriptStruct ControlRig.RigUnit_MathBoolConstFalse
    {
    public:


    };

    struct FRigUnit_MathBoolConstTrue : FRigUnit_MathBoolConstant //ScriptStruct ControlRig.RigUnit_MathBoolConstTrue
    {
    public:


    };

    struct FRigUnit_MathColorBase : FRigUnit_MathBase //ScriptStruct ControlRig.RigUnit_MathColorBase
    {
    public:


    };

    struct FRigUnit_MathColorLerp : FRigUnit_MathColorBase //ScriptStruct ControlRig.RigUnit_MathColorLerp
    {
    //Children Prop Count (Fields): 4
    public:

        struct FLinearColor A; // 0x8
        struct FLinearColor B; // 0x18
        float T; // 0x28
        struct FLinearColor Result; // 0x2c

    };

    struct FRigUnit_MathColorBinaryOp : FRigUnit_MathColorBase //ScriptStruct ControlRig.RigUnit_MathColorBinaryOp
    {
    //Children Prop Count (Fields): 3
    public:

        struct FLinearColor A; // 0x8
        struct FLinearColor B; // 0x18
        struct FLinearColor Result; // 0x28

    };

    struct FRigUnit_MathColorMul : FRigUnit_MathColorBinaryOp //ScriptStruct ControlRig.RigUnit_MathColorMul
    {
    public:


    };

    struct FRigUnit_MathColorSub : FRigUnit_MathColorBinaryOp //ScriptStruct ControlRig.RigUnit_MathColorSub
    {
    public:


    };

    struct FRigUnit_MathColorAdd : FRigUnit_MathColorBinaryOp //ScriptStruct ControlRig.RigUnit_MathColorAdd
    {
    public:


    };

    struct FRigUnit_MathColorFromFloat : FRigUnit_MathColorBase //ScriptStruct ControlRig.RigUnit_MathColorFromFloat
    {
    //Children Prop Count (Fields): 2
    public:

        float Value; // 0x8
        struct FLinearColor Result; // 0xc

    };

    struct FRigUnit_MathFloatBase : FRigUnit_MathBase //ScriptStruct ControlRig.RigUnit_MathFloatBase
    {
    public:


    };

    struct FRigUnit_MathFloatLawOfCosine : FRigUnit_MathFloatBase //ScriptStruct ControlRig.RigUnit_MathFloatLawOfCosine
    {
    //Children Prop Count (Fields): 7
    public:

        float A; // 0x8
        float B; // 0xc
        float C; // 0x10
        float AlphaAngle; // 0x14
        float BetaAngle; // 0x18
        float GammaAngle; // 0x1c
        bool bValid; // 0x20

    };

    struct FRigUnit_MathFloatUnaryOp : FRigUnit_MathFloatBase //ScriptStruct ControlRig.RigUnit_MathFloatUnaryOp
    {
    //Children Prop Count (Fields): 2
    public:

        float Value; // 0x8
        float Result; // 0xc

    };

    struct FRigUnit_MathFloatAtan : FRigUnit_MathFloatUnaryOp //ScriptStruct ControlRig.RigUnit_MathFloatAtan
    {
    public:


    };

    struct FRigUnit_MathFloatAcos : FRigUnit_MathFloatUnaryOp //ScriptStruct ControlRig.RigUnit_MathFloatAcos
    {
    public:


    };

    struct FRigUnit_MathFloatAsin : FRigUnit_MathFloatUnaryOp //ScriptStruct ControlRig.RigUnit_MathFloatAsin
    {
    public:


    };

    struct FRigUnit_MathFloatTan : FRigUnit_MathFloatUnaryOp //ScriptStruct ControlRig.RigUnit_MathFloatTan
    {
    public:


    };

    struct FRigUnit_MathFloatCos : FRigUnit_MathFloatUnaryOp //ScriptStruct ControlRig.RigUnit_MathFloatCos
    {
    public:


    };

    struct FRigUnit_MathFloatSin : FRigUnit_MathFloatUnaryOp //ScriptStruct ControlRig.RigUnit_MathFloatSin
    {
    public:


    };

    struct FRigUnit_MathFloatRad : FRigUnit_MathFloatUnaryOp //ScriptStruct ControlRig.RigUnit_MathFloatRad
    {
    public:


    };

    struct FRigUnit_MathFloatDeg : FRigUnit_MathFloatUnaryOp //ScriptStruct ControlRig.RigUnit_MathFloatDeg
    {
    public:


    };

    struct FRigUnit_MathFloatSelectBool : FRigUnit_MathFloatBase //ScriptStruct ControlRig.RigUnit_MathFloatSelectBool
    {
    //Children Prop Count (Fields): 4
    public:

        bool Condition; // 0x8
        float IfTrue; // 0xc
        float IfFalse; // 0x10
        float Result; // 0x14

    };

    struct FRigUnit_MathFloatIsNearlyEqual : FRigUnit_MathFloatBase //ScriptStruct ControlRig.RigUnit_MathFloatIsNearlyEqual
    {
    //Children Prop Count (Fields): 4
    public:

        float A; // 0x8
        float B; // 0xc
        float Tolerance; // 0x10
        bool Result; // 0x14

    };

    struct FRigUnit_MathFloatIsNearlyZero : FRigUnit_MathFloatBase //ScriptStruct ControlRig.RigUnit_MathFloatIsNearlyZero
    {
    //Children Prop Count (Fields): 3
    public:

        float Value; // 0x8
        float Tolerance; // 0xc
        bool Result; // 0x10

    };

    struct FRigUnit_MathFloatLessEqual : FRigUnit_MathFloatBase //ScriptStruct ControlRig.RigUnit_MathFloatLessEqual
    {
    //Children Prop Count (Fields): 3
    public:

        float A; // 0x8
        float B; // 0xc
        bool Result; // 0x10

    };

    struct FRigUnit_MathFloatGreaterEqual : FRigUnit_MathFloatBase //ScriptStruct ControlRig.RigUnit_MathFloatGreaterEqual
    {
    //Children Prop Count (Fields): 3
    public:

        float A; // 0x8
        float B; // 0xc
        bool Result; // 0x10

    };

    struct FRigUnit_MathFloatLess : FRigUnit_MathFloatBase //ScriptStruct ControlRig.RigUnit_MathFloatLess
    {
    //Children Prop Count (Fields): 3
    public:

        float A; // 0x8
        float B; // 0xc
        bool Result; // 0x10

    };

    struct FRigUnit_MathFloatGreater : FRigUnit_MathFloatBase //ScriptStruct ControlRig.RigUnit_MathFloatGreater
    {
    //Children Prop Count (Fields): 3
    public:

        float A; // 0x8
        float B; // 0xc
        bool Result; // 0x10

    };

    struct FRigUnit_MathFloatNotEquals : FRigUnit_MathFloatBase //ScriptStruct ControlRig.RigUnit_MathFloatNotEquals
    {
    //Children Prop Count (Fields): 3
    public:

        float A; // 0x8
        float B; // 0xc
        bool Result; // 0x10

    };

    struct FRigUnit_MathFloatEquals : FRigUnit_MathFloatBase //ScriptStruct ControlRig.RigUnit_MathFloatEquals
    {
    //Children Prop Count (Fields): 3
    public:

        float A; // 0x8
        float B; // 0xc
        bool Result; // 0x10

    };

    struct FRigUnit_MathFloatRemap : FRigUnit_MathFloatBase //ScriptStruct ControlRig.RigUnit_MathFloatRemap
    {
    //Children Prop Count (Fields): 7
    public:

        float Value; // 0x8
        float SourceMinimum; // 0xc
        float SourceMaximum; // 0x10
        float TargetMinimum; // 0x14
        float TargetMaximum; // 0x18
        bool bClamp; // 0x1c
        float Result; // 0x20

    };

    struct FRigUnit_MathFloatLerp : FRigUnit_MathFloatBase //ScriptStruct ControlRig.RigUnit_MathFloatLerp
    {
    //Children Prop Count (Fields): 4
    public:

        float A; // 0x8
        float B; // 0xc
        float T; // 0x10
        float Result; // 0x14

    };

    struct FRigUnit_MathFloatClamp : FRigUnit_MathFloatBase //ScriptStruct ControlRig.RigUnit_MathFloatClamp
    {
    //Children Prop Count (Fields): 4
    public:

        float Value; // 0x8
        float Minimum; // 0xc
        float Maximum; // 0x10
        float Result; // 0x14

    };

    struct FRigUnit_MathFloatSign : FRigUnit_MathFloatUnaryOp //ScriptStruct ControlRig.RigUnit_MathFloatSign
    {
    public:


    };

    struct FRigUnit_MathFloatToInt : FRigUnit_MathFloatBase //ScriptStruct ControlRig.RigUnit_MathFloatToInt
    {
    //Children Prop Count (Fields): 2
    public:

        float Value; // 0x8
        int32_t Result; // 0xc

    };

    struct FRigUnit_MathFloatRound : FRigUnit_MathFloatBase //ScriptStruct ControlRig.RigUnit_MathFloatRound
    {
    //Children Prop Count (Fields): 3
    public:

        float Value; // 0x8
        float Result; // 0xc
        int32_t Int; // 0x10

    };

    struct FRigUnit_MathFloatCeil : FRigUnit_MathFloatBase //ScriptStruct ControlRig.RigUnit_MathFloatCeil
    {
    //Children Prop Count (Fields): 3
    public:

        float Value; // 0x8
        float Result; // 0xc
        int32_t Int; // 0x10

    };

    struct FRigUnit_MathFloatFloor : FRigUnit_MathFloatBase //ScriptStruct ControlRig.RigUnit_MathFloatFloor
    {
    //Children Prop Count (Fields): 3
    public:

        float Value; // 0x8
        float Result; // 0xc
        int32_t Int; // 0x10

    };

    struct FRigUnit_MathFloatAbs : FRigUnit_MathFloatUnaryOp //ScriptStruct ControlRig.RigUnit_MathFloatAbs
    {
    public:


    };

    struct FRigUnit_MathFloatNegate : FRigUnit_MathFloatUnaryOp //ScriptStruct ControlRig.RigUnit_MathFloatNegate
    {
    public:


    };

    struct FRigUnit_MathFloatSqrt : FRigUnit_MathFloatUnaryOp //ScriptStruct ControlRig.RigUnit_MathFloatSqrt
    {
    public:


    };

    struct FRigUnit_MathFloatBinaryOp : FRigUnit_MathFloatBase //ScriptStruct ControlRig.RigUnit_MathFloatBinaryOp
    {
    //Children Prop Count (Fields): 3
    public:

        float A; // 0x8
        float B; // 0xc
        float Result; // 0x10

    };

    struct FRigUnit_MathFloatPow : FRigUnit_MathFloatBinaryOp //ScriptStruct ControlRig.RigUnit_MathFloatPow
    {
    public:


    };

    struct FRigUnit_MathFloatMax : FRigUnit_MathFloatBinaryOp //ScriptStruct ControlRig.RigUnit_MathFloatMax
    {
    public:


    };

    struct FRigUnit_MathFloatMin : FRigUnit_MathFloatBinaryOp //ScriptStruct ControlRig.RigUnit_MathFloatMin
    {
    public:


    };

    struct FRigUnit_MathFloatMod : FRigUnit_MathFloatBinaryOp //ScriptStruct ControlRig.RigUnit_MathFloatMod
    {
    public:


    };

    struct FRigUnit_MathFloatDiv : FRigUnit_MathFloatBinaryOp //ScriptStruct ControlRig.RigUnit_MathFloatDiv
    {
    public:


    };

    struct FRigUnit_MathFloatMul : FRigUnit_MathFloatBinaryOp //ScriptStruct ControlRig.RigUnit_MathFloatMul
    {
    public:


    };

    struct FRigUnit_MathFloatSub : FRigUnit_MathFloatBinaryOp //ScriptStruct ControlRig.RigUnit_MathFloatSub
    {
    public:


    };

    struct FRigUnit_MathFloatAdd : FRigUnit_MathFloatBinaryOp //ScriptStruct ControlRig.RigUnit_MathFloatAdd
    {
    public:


    };

    struct FRigUnit_MathFloatConstant : FRigUnit_MathFloatBase //ScriptStruct ControlRig.RigUnit_MathFloatConstant
    {
    //Children Prop Count (Fields): 1
    public:

        float Value; // 0x8

    };

    struct FRigUnit_MathFloatConstTwoPi : FRigUnit_MathFloatConstant //ScriptStruct ControlRig.RigUnit_MathFloatConstTwoPi
    {
    public:


    };

    struct FRigUnit_MathFloatConstHalfPi : FRigUnit_MathFloatConstant //ScriptStruct ControlRig.RigUnit_MathFloatConstHalfPi
    {
    public:


    };

    struct FRigUnit_MathFloatConstPi : FRigUnit_MathFloatConstant //ScriptStruct ControlRig.RigUnit_MathFloatConstPi
    {
    public:


    };

    struct FRigUnit_MathIntBase : FRigUnit_MathBase //ScriptStruct ControlRig.RigUnit_MathIntBase
    {
    public:


    };

    struct FRigUnit_MathIntLessEqual : FRigUnit_MathIntBase //ScriptStruct ControlRig.RigUnit_MathIntLessEqual
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t A; // 0x8
        int32_t B; // 0xc
        bool Result; // 0x10

    };

    struct FRigUnit_MathIntGreaterEqual : FRigUnit_MathIntBase //ScriptStruct ControlRig.RigUnit_MathIntGreaterEqual
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t A; // 0x8
        int32_t B; // 0xc
        bool Result; // 0x10

    };

    struct FRigUnit_MathIntLess : FRigUnit_MathIntBase //ScriptStruct ControlRig.RigUnit_MathIntLess
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t A; // 0x8
        int32_t B; // 0xc
        bool Result; // 0x10

    };

    struct FRigUnit_MathIntGreater : FRigUnit_MathIntBase //ScriptStruct ControlRig.RigUnit_MathIntGreater
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t A; // 0x8
        int32_t B; // 0xc
        bool Result; // 0x10

    };

    struct FRigUnit_MathIntNotEquals : FRigUnit_MathIntBase //ScriptStruct ControlRig.RigUnit_MathIntNotEquals
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t A; // 0x8
        int32_t B; // 0xc
        bool Result; // 0x10

    };

    struct FRigUnit_MathIntEquals : FRigUnit_MathIntBase //ScriptStruct ControlRig.RigUnit_MathIntEquals
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t A; // 0x8
        int32_t B; // 0xc
        bool Result; // 0x10

    };

    struct FRigUnit_MathIntClamp : FRigUnit_MathIntBase //ScriptStruct ControlRig.RigUnit_MathIntClamp
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t Value; // 0x8
        int32_t Minimum; // 0xc
        int32_t Maximum; // 0x10
        int32_t Result; // 0x14

    };

    struct FRigUnit_MathIntUnaryOp : FRigUnit_MathIntBase //ScriptStruct ControlRig.RigUnit_MathIntUnaryOp
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t Value; // 0x8
        int32_t Result; // 0xc

    };

    struct FRigUnit_MathIntSign : FRigUnit_MathIntUnaryOp //ScriptStruct ControlRig.RigUnit_MathIntSign
    {
    public:


    };

    struct FRigUnit_MathIntToFloat : FRigUnit_MathIntBase //ScriptStruct ControlRig.RigUnit_MathIntToFloat
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t Value; // 0x8
        float Result; // 0xc

    };

    struct FRigUnit_MathIntAbs : FRigUnit_MathIntUnaryOp //ScriptStruct ControlRig.RigUnit_MathIntAbs
    {
    public:


    };

    struct FRigUnit_MathIntNegate : FRigUnit_MathIntUnaryOp //ScriptStruct ControlRig.RigUnit_MathIntNegate
    {
    public:


    };

    struct FRigUnit_MathIntBinaryOp : FRigUnit_MathIntBase //ScriptStruct ControlRig.RigUnit_MathIntBinaryOp
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t A; // 0x8
        int32_t B; // 0xc
        int32_t Result; // 0x10

    };

    struct FRigUnit_MathIntPow : FRigUnit_MathIntBinaryOp //ScriptStruct ControlRig.RigUnit_MathIntPow
    {
    public:


    };

    struct FRigUnit_MathIntMax : FRigUnit_MathIntBinaryOp //ScriptStruct ControlRig.RigUnit_MathIntMax
    {
    public:


    };

    struct FRigUnit_MathIntMin : FRigUnit_MathIntBinaryOp //ScriptStruct ControlRig.RigUnit_MathIntMin
    {
    public:


    };

    struct FRigUnit_MathIntMod : FRigUnit_MathIntBinaryOp //ScriptStruct ControlRig.RigUnit_MathIntMod
    {
    public:


    };

    struct FRigUnit_MathIntDiv : FRigUnit_MathIntBinaryOp //ScriptStruct ControlRig.RigUnit_MathIntDiv
    {
    public:


    };

    struct FRigUnit_MathIntMul : FRigUnit_MathIntBinaryOp //ScriptStruct ControlRig.RigUnit_MathIntMul
    {
    public:


    };

    struct FRigUnit_MathIntSub : FRigUnit_MathIntBinaryOp //ScriptStruct ControlRig.RigUnit_MathIntSub
    {
    public:


    };

    struct FRigUnit_MathIntAdd : FRigUnit_MathIntBinaryOp //ScriptStruct ControlRig.RigUnit_MathIntAdd
    {
    public:


    };

    struct FRigUnit_MathQuaternionRotationOrder : FRigUnit_MathBase //ScriptStruct ControlRig.RigUnit_MathQuaternionRotationOrder
    {
    //Children Prop Count (Fields): 1
    public:

        enum class EControlRigRotationOrder RotationOrder; // 0x8

    };

    struct FRigUnit_MathQuaternionBase : FRigUnit_MathBase //ScriptStruct ControlRig.RigUnit_MathQuaternionBase
    {
    public:


    };

    struct FRigUnit_MathQuaternionSwingTwist : FRigUnit_MathQuaternionBase //ScriptStruct ControlRig.RigUnit_MathQuaternionSwingTwist
    {
    //Children Prop Count (Fields): 4
    public:

        struct FQuat Input; // 0x10
        struct FVector TwistAxis; // 0x20
        struct FQuat Swing; // 0x30
        struct FQuat Twist; // 0x40

    };

    struct FRigUnit_MathQuaternionGetAxis : FRigUnit_MathQuaternionBase //ScriptStruct ControlRig.RigUnit_MathQuaternionGetAxis
    {
    //Children Prop Count (Fields): 3
    public:

        struct FQuat Quaternion; // 0x10
        enum class EAxis Axis; // 0x20
        struct FVector Result; // 0x24

    };

    struct FRigUnit_MathQuaternionRotateVector : FRigUnit_MathQuaternionBase //ScriptStruct ControlRig.RigUnit_MathQuaternionRotateVector
    {
    //Children Prop Count (Fields): 3
    public:

        struct FQuat Quaternion; // 0x10
        struct FVector Vector; // 0x20
        struct FVector Result; // 0x2c

    };

    struct FRigUnit_MathQuaternionUnaryOp : FRigUnit_MathQuaternionBase //ScriptStruct ControlRig.RigUnit_MathQuaternionUnaryOp
    {
    //Children Prop Count (Fields): 2
    public:

        struct FQuat Value; // 0x10
        struct FQuat Result; // 0x20

    };

    struct FRigUnit_MathQuaternionUnit : FRigUnit_MathQuaternionUnaryOp //ScriptStruct ControlRig.RigUnit_MathQuaternionUnit
    {
    public:


    };

    struct FRigUnit_MathQuaternionDot : FRigUnit_MathQuaternionBase //ScriptStruct ControlRig.RigUnit_MathQuaternionDot
    {
    //Children Prop Count (Fields): 3
    public:

        struct FQuat A; // 0x10
        struct FQuat B; // 0x20
        float Result; // 0x30

    };

    struct FRigUnit_MathQuaternionSelectBool : FRigUnit_MathQuaternionBase //ScriptStruct ControlRig.RigUnit_MathQuaternionSelectBool
    {
    //Children Prop Count (Fields): 4
    public:

        bool Condition; // 0x8
        struct FQuat IfTrue; // 0x10
        struct FQuat IfFalse; // 0x20
        struct FQuat Result; // 0x30

    };

    struct FRigUnit_MathQuaternionNotEquals : FRigUnit_MathQuaternionBase //ScriptStruct ControlRig.RigUnit_MathQuaternionNotEquals
    {
    //Children Prop Count (Fields): 3
    public:

        struct FQuat A; // 0x10
        struct FQuat B; // 0x20
        bool Result; // 0x30

    };

    struct FRigUnit_MathQuaternionEquals : FRigUnit_MathQuaternionBase //ScriptStruct ControlRig.RigUnit_MathQuaternionEquals
    {
    //Children Prop Count (Fields): 3
    public:

        struct FQuat A; // 0x10
        struct FQuat B; // 0x20
        bool Result; // 0x30

    };

    struct FRigUnit_MathQuaternionSlerp : FRigUnit_MathQuaternionBase //ScriptStruct ControlRig.RigUnit_MathQuaternionSlerp
    {
    //Children Prop Count (Fields): 4
    public:

        struct FQuat A; // 0x10
        struct FQuat B; // 0x20
        float T; // 0x30
        struct FQuat Result; // 0x40

    };

    struct FRigUnit_MathQuaternionInverse : FRigUnit_MathQuaternionUnaryOp //ScriptStruct ControlRig.RigUnit_MathQuaternionInverse
    {
    public:


    };

    struct FRigUnit_MathQuaternionBinaryOp : FRigUnit_MathQuaternionBase //ScriptStruct ControlRig.RigUnit_MathQuaternionBinaryOp
    {
    //Children Prop Count (Fields): 3
    public:

        struct FQuat A; // 0x10
        struct FQuat B; // 0x20
        struct FQuat Result; // 0x30

    };

    struct FRigUnit_MathQuaternionMul : FRigUnit_MathQuaternionBinaryOp //ScriptStruct ControlRig.RigUnit_MathQuaternionMul
    {
    public:


    };

    struct FRigUnit_MathQuaternionToRotator : FRigUnit_MathQuaternionBase //ScriptStruct ControlRig.RigUnit_MathQuaternionToRotator
    {
    //Children Prop Count (Fields): 2
    public:

        struct FQuat Value; // 0x10
        struct FRotator Result; // 0x20

    };

    struct FRigUnit_MathQuaternionToEuler : FRigUnit_MathQuaternionBase //ScriptStruct ControlRig.RigUnit_MathQuaternionToEuler
    {
    //Children Prop Count (Fields): 3
    public:

        struct FQuat Value; // 0x10
        enum class EControlRigRotationOrder RotationOrder; // 0x20
        struct FVector Result; // 0x24

    };

    struct FRigUnit_MathQuaternionScale : FRigUnit_MathQuaternionBase //ScriptStruct ControlRig.RigUnit_MathQuaternionScale
    {
    //Children Prop Count (Fields): 2
    public:

        struct FQuat Value; // 0x10
        float Scale; // 0x20

    };

    struct FRigUnit_MathQuaternionToAxisAndAngle : FRigUnit_MathQuaternionBase //ScriptStruct ControlRig.RigUnit_MathQuaternionToAxisAndAngle
    {
    //Children Prop Count (Fields): 3
    public:

        struct FQuat Value; // 0x10
        struct FVector Axis; // 0x20
        float Angle; // 0x2c

    };

    struct FRigUnit_MathQuaternionFromTwoVectors : FRigUnit_MathQuaternionBase //ScriptStruct ControlRig.RigUnit_MathQuaternionFromTwoVectors
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector A; // 0x8
        struct FVector B; // 0x14
        struct FQuat Result; // 0x20

    };

    struct FRigUnit_MathQuaternionFromRotator : FRigUnit_MathQuaternionBase //ScriptStruct ControlRig.RigUnit_MathQuaternionFromRotator
    {
    //Children Prop Count (Fields): 2
    public:

        struct FRotator Rotator; // 0x8
        struct FQuat Result; // 0x20

    };

    struct FRigUnit_MathQuaternionFromEuler : FRigUnit_MathQuaternionBase //ScriptStruct ControlRig.RigUnit_MathQuaternionFromEuler
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Euler; // 0x8
        enum class EControlRigRotationOrder RotationOrder; // 0x14
        struct FQuat Result; // 0x20

    };

    struct FRigUnit_MathQuaternionFromAxisAndAngle : FRigUnit_MathQuaternionBase //ScriptStruct ControlRig.RigUnit_MathQuaternionFromAxisAndAngle
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Axis; // 0x8
        float Angle; // 0x14
        struct FQuat Result; // 0x20

    };

    struct FRigUnit_MathRBFInterpolateBase : FRigUnit_MathBase //ScriptStruct ControlRig.RigUnit_MathRBFInterpolateBase
    {
    public:


    };

    struct FRigUnit_MathRBFInterpolateVectorBase : FRigUnit_MathRBFInterpolateBase //ScriptStruct ControlRig.RigUnit_MathRBFInterpolateVectorBase
    {
    //Children Prop Count (Fields): 6
    public:

        struct FVector Input; // 0x8
        enum class ERBFVectorDistanceType DistanceFunction; // 0x14
        enum class ERBFKernelType SmoothingFunction; // 0x15
        float SmoothingRadius; // 0x18
        bool bNormalizeOutput; // 0x1c
        struct FRigUnit_MathRBFInterpolateVectorWorkData WorkData; // 0x20

    };

    struct FRigUnit_MathRBFInterpolateVectorWorkData //ScriptStruct ControlRig.RigUnit_MathRBFInterpolateVectorWorkData
    {
    public:


    };

    struct FRigUnit_MathRBFInterpolateVectorXform : FRigUnit_MathRBFInterpolateVectorBase //ScriptStruct ControlRig.RigUnit_MathRBFInterpolateVectorXform
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FMathRBFInterpolateVectorXform_Target> Targets; // 0xb0
        struct FTransform Output; // 0xc0

    };

    struct FMathRBFInterpolateVectorXform_Target //ScriptStruct ControlRig.MathRBFInterpolateVectorXform_Target
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Target; // 0x0
        struct FTransform Value; // 0x10

    };

    struct FRigUnit_MathRBFInterpolateVectorQuat : FRigUnit_MathRBFInterpolateVectorBase //ScriptStruct ControlRig.RigUnit_MathRBFInterpolateVectorQuat
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FMathRBFInterpolateVectorQuat_Target> Targets; // 0xb0
        struct FQuat Output; // 0xc0

    };

    struct FMathRBFInterpolateVectorQuat_Target //ScriptStruct ControlRig.MathRBFInterpolateVectorQuat_Target
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Target; // 0x0
        struct FQuat Value; // 0x10

    };

    struct FRigUnit_MathRBFInterpolateVectorColor : FRigUnit_MathRBFInterpolateVectorBase //ScriptStruct ControlRig.RigUnit_MathRBFInterpolateVectorColor
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FMathRBFInterpolateVectorColor_Target> Targets; // 0xb0
        struct FLinearColor Output; // 0xc0

    };

    struct FMathRBFInterpolateVectorColor_Target //ScriptStruct ControlRig.MathRBFInterpolateVectorColor_Target
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Target; // 0x0
        struct FLinearColor Value; // 0xc

    };

    struct FRigUnit_MathRBFInterpolateVectorVector : FRigUnit_MathRBFInterpolateVectorBase //ScriptStruct ControlRig.RigUnit_MathRBFInterpolateVectorVector
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FMathRBFInterpolateVectorVector_Target> Targets; // 0xb0
        struct FVector Output; // 0xc0

    };

    struct FMathRBFInterpolateVectorVector_Target //ScriptStruct ControlRig.MathRBFInterpolateVectorVector_Target
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Target; // 0x0
        struct FVector Value; // 0xc

    };

    struct FRigUnit_MathRBFInterpolateVectorFloat : FRigUnit_MathRBFInterpolateVectorBase //ScriptStruct ControlRig.RigUnit_MathRBFInterpolateVectorFloat
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FMathRBFInterpolateVectorFloat_Target> Targets; // 0xb0
        float Output; // 0xc0

    };

    struct FMathRBFInterpolateVectorFloat_Target //ScriptStruct ControlRig.MathRBFInterpolateVectorFloat_Target
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Target; // 0x0
        float Value; // 0xc

    };

    struct FRigUnit_MathRBFInterpolateQuatBase : FRigUnit_MathRBFInterpolateBase //ScriptStruct ControlRig.RigUnit_MathRBFInterpolateQuatBase
    {
    //Children Prop Count (Fields): 7
    public:

        struct FQuat Input; // 0x10
        enum class ERBFQuatDistanceType DistanceFunction; // 0x20
        enum class ERBFKernelType SmoothingFunction; // 0x21
        float SmoothingAngle; // 0x24
        bool bNormalizeOutput; // 0x28
        struct FVector TwistAxis; // 0x2c
        struct FRigUnit_MathRBFInterpolateQuatWorkData WorkData; // 0x40

    };

    struct FRigUnit_MathRBFInterpolateQuatWorkData //ScriptStruct ControlRig.RigUnit_MathRBFInterpolateQuatWorkData
    {
    public:


    };

    struct FRigUnit_MathRBFInterpolateQuatXform : FRigUnit_MathRBFInterpolateQuatBase //ScriptStruct ControlRig.RigUnit_MathRBFInterpolateQuatXform
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FMathRBFInterpolateQuatXform_Target> Targets; // 0xd0
        struct FTransform Output; // 0xe0

    };

    struct FMathRBFInterpolateQuatXform_Target //ScriptStruct ControlRig.MathRBFInterpolateQuatXform_Target
    {
    //Children Prop Count (Fields): 2
    public:

        struct FQuat Target; // 0x0
        struct FTransform Value; // 0x10

    };

    struct FRigUnit_MathRBFInterpolateQuatQuat : FRigUnit_MathRBFInterpolateQuatBase //ScriptStruct ControlRig.RigUnit_MathRBFInterpolateQuatQuat
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FMathRBFInterpolateQuatQuat_Target> Targets; // 0xd0
        struct FQuat Output; // 0xe0

    };

    struct FMathRBFInterpolateQuatQuat_Target //ScriptStruct ControlRig.MathRBFInterpolateQuatQuat_Target
    {
    //Children Prop Count (Fields): 2
    public:

        struct FQuat Target; // 0x0
        struct FQuat Value; // 0x10

    };

    struct FRigUnit_MathRBFInterpolateQuatColor : FRigUnit_MathRBFInterpolateQuatBase //ScriptStruct ControlRig.RigUnit_MathRBFInterpolateQuatColor
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FMathRBFInterpolateQuatColor_Target> Targets; // 0xd0
        struct FLinearColor Output; // 0xe0

    };

    struct FMathRBFInterpolateQuatColor_Target //ScriptStruct ControlRig.MathRBFInterpolateQuatColor_Target
    {
    //Children Prop Count (Fields): 2
    public:

        struct FQuat Target; // 0x0
        struct FLinearColor Value; // 0x10

    };

    struct FRigUnit_MathRBFInterpolateQuatVector : FRigUnit_MathRBFInterpolateQuatBase //ScriptStruct ControlRig.RigUnit_MathRBFInterpolateQuatVector
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FMathRBFInterpolateQuatVector_Target> Targets; // 0xd0
        struct FVector Output; // 0xe0

    };

    struct FMathRBFInterpolateQuatVector_Target //ScriptStruct ControlRig.MathRBFInterpolateQuatVector_Target
    {
    //Children Prop Count (Fields): 2
    public:

        struct FQuat Target; // 0x0
        struct FVector Value; // 0x10

    };

    struct FRigUnit_MathRBFInterpolateQuatFloat : FRigUnit_MathRBFInterpolateQuatBase //ScriptStruct ControlRig.RigUnit_MathRBFInterpolateQuatFloat
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FMathRBFInterpolateQuatFloat_Target> Targets; // 0xd0
        float Output; // 0xe0

    };

    struct FMathRBFInterpolateQuatFloat_Target //ScriptStruct ControlRig.MathRBFInterpolateQuatFloat_Target
    {
    //Children Prop Count (Fields): 2
    public:

        struct FQuat Target; // 0x0
        float Value; // 0x10

    };

    struct FRigUnit_MathTransformBase : FRigUnit_MathBase //ScriptStruct ControlRig.RigUnit_MathTransformBase
    {
    public:


    };

    struct FRigUnit_MathTransformClampSpatially : FRigUnit_MathTransformBase //ScriptStruct ControlRig.RigUnit_MathTransformClampSpatially
    {
    //Children Prop Count (Fields): 10
    public:

        struct FTransform Value; // 0x10
        enum class EAxis Axis; // 0x40
        enum class EControlRigClampSpatialMode Type; // 0x41
        float Minimum; // 0x44
        float Maximum; // 0x48
        struct FTransform Space; // 0x50
        bool bDrawDebug; // 0x80
        struct FLinearColor DebugColor; // 0x84
        float DebugThickness; // 0x94
        struct FTransform Result; // 0xa0

    };

    struct FRigUnit_MathTransformFromSRT : FRigUnit_MathTransformBase //ScriptStruct ControlRig.RigUnit_MathTransformFromSRT
    {
    //Children Prop Count (Fields): 6
    public:

        struct FVector Location; // 0x8
        struct FVector Rotation; // 0x14
        enum class EControlRigRotationOrder RotationOrder; // 0x20
        struct FVector Scale; // 0x24
        struct FTransform Transform; // 0x30
        struct FEulerTransform EulerTransform; // 0x60

    };

    struct FRigUnit_MathTransformTransformVector : FRigUnit_MathTransformBase //ScriptStruct ControlRig.RigUnit_MathTransformTransformVector
    {
    //Children Prop Count (Fields): 3
    public:

        struct FTransform Transform; // 0x10
        struct FVector Location; // 0x40
        struct FVector Result; // 0x4c

    };

    struct FRigUnit_MathTransformRotateVector : FRigUnit_MathTransformBase //ScriptStruct ControlRig.RigUnit_MathTransformRotateVector
    {
    //Children Prop Count (Fields): 3
    public:

        struct FTransform Transform; // 0x10
        struct FVector Direction; // 0x40
        struct FVector Result; // 0x4c

    };

    struct FRigUnit_MathTransformSelectBool : FRigUnit_MathTransformBase //ScriptStruct ControlRig.RigUnit_MathTransformSelectBool
    {
    //Children Prop Count (Fields): 4
    public:

        bool Condition; // 0x8
        struct FTransform IfTrue; // 0x10
        struct FTransform IfFalse; // 0x40
        struct FTransform Result; // 0x70

    };

    struct FRigUnit_MathTransformLerp : FRigUnit_MathTransformBase //ScriptStruct ControlRig.RigUnit_MathTransformLerp
    {
    //Children Prop Count (Fields): 4
    public:

        struct FTransform A; // 0x10
        struct FTransform B; // 0x40
        float T; // 0x70
        struct FTransform Result; // 0x80

    };

    struct FRigUnit_MathTransformUnaryOp : FRigUnit_MathTransformBase //ScriptStruct ControlRig.RigUnit_MathTransformUnaryOp
    {
    //Children Prop Count (Fields): 2
    public:

        struct FTransform Value; // 0x10
        struct FTransform Result; // 0x40

    };

    struct FRigUnit_MathTransformInverse : FRigUnit_MathTransformUnaryOp //ScriptStruct ControlRig.RigUnit_MathTransformInverse
    {
    public:


    };

    struct FRigUnit_MathTransformMakeAbsolute : FRigUnit_MathTransformBase //ScriptStruct ControlRig.RigUnit_MathTransformMakeAbsolute
    {
    //Children Prop Count (Fields): 3
    public:

        struct FTransform Local; // 0x10
        struct FTransform Parent; // 0x40
        struct FTransform Global; // 0x70

    };

    struct FRigUnit_MathTransformMakeRelative : FRigUnit_MathTransformBase //ScriptStruct ControlRig.RigUnit_MathTransformMakeRelative
    {
    //Children Prop Count (Fields): 3
    public:

        struct FTransform Global; // 0x10
        struct FTransform Parent; // 0x40
        struct FTransform Local; // 0x70

    };

    struct FRigUnit_MathTransformBinaryOp : FRigUnit_MathTransformBase //ScriptStruct ControlRig.RigUnit_MathTransformBinaryOp
    {
    //Children Prop Count (Fields): 3
    public:

        struct FTransform A; // 0x10
        struct FTransform B; // 0x40
        struct FTransform Result; // 0x70

    };

    struct FRigUnit_MathTransformMul : FRigUnit_MathTransformBinaryOp //ScriptStruct ControlRig.RigUnit_MathTransformMul
    {
    public:


    };

    struct FRigUnit_MathTransformToEulerTransform : FRigUnit_MathTransformBase //ScriptStruct ControlRig.RigUnit_MathTransformToEulerTransform
    {
    //Children Prop Count (Fields): 2
    public:

        struct FTransform Value; // 0x10
        struct FEulerTransform Result; // 0x40

    };

    struct FRigUnit_MathTransformFromEulerTransform : FRigUnit_MathTransformBase //ScriptStruct ControlRig.RigUnit_MathTransformFromEulerTransform
    {
    //Children Prop Count (Fields): 2
    public:

        struct FEulerTransform EulerTransform; // 0x8
        struct FTransform Result; // 0x30

    };

    struct FRigUnit_MathVectorBase : FRigUnit_MathBase //ScriptStruct ControlRig.RigUnit_MathVectorBase
    {
    public:


    };

    struct FRigUnit_MathIntersectPlane : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathIntersectPlane
    {
    //Children Prop Count (Fields): 6
    public:

        struct FVector Start; // 0x8
        struct FVector Direction; // 0x14
        struct FVector PlanePoint; // 0x20
        struct FVector PlaneNormal; // 0x2c
        struct FVector Result; // 0x38
        float Distance; // 0x44

    };

    struct FRigUnit_MathVectorClampSpatially : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorClampSpatially
    {
    //Children Prop Count (Fields): 10
    public:

        struct FVector Value; // 0x8
        enum class EAxis Axis; // 0x14
        enum class EControlRigClampSpatialMode Type; // 0x15
        float Minimum; // 0x18
        float Maximum; // 0x1c
        struct FTransform Space; // 0x20
        bool bDrawDebug; // 0x50
        struct FLinearColor DebugColor; // 0x54
        float DebugThickness; // 0x64
        struct FVector Result; // 0x68

    };

    struct FRigUnit_MathVectorMakeBezierFourPoint : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorMakeBezierFourPoint
    {
    //Children Prop Count (Fields): 1
    public:

        struct FCRFourPointBezier Bezier; // 0x8

    };

    struct FRigUnit_MathVectorBezierFourPoint : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorBezierFourPoint
    {
    //Children Prop Count (Fields): 4
    public:

        struct FCRFourPointBezier Bezier; // 0x8
        float T; // 0x38
        struct FVector Result; // 0x3c
        struct FVector Tangent; // 0x48

    };

    struct FRigUnit_MathVectorOrthogonal : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorOrthogonal
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector A; // 0x8
        struct FVector B; // 0x14
        bool Result; // 0x20

    };

    struct FRigUnit_MathVectorParallel : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorParallel
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector A; // 0x8
        struct FVector B; // 0x14
        bool Result; // 0x20

    };

    struct FRigUnit_MathVectorAngle : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorAngle
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector A; // 0x8
        struct FVector B; // 0x14
        float Result; // 0x20

    };

    struct FRigUnit_MathVectorMirror : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorMirror
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Value; // 0x8
        struct FVector Normal; // 0x14
        struct FVector Result; // 0x20

    };

    struct FRigUnit_MathVectorClampLength : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorClampLength
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector Value; // 0x8
        float MinimumLength; // 0x14
        float MaximumLength; // 0x18
        struct FVector Result; // 0x1c

    };

    struct FRigUnit_MathVectorSetLength : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorSetLength
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Value; // 0x8
        float Length; // 0x14
        struct FVector Result; // 0x18

    };

    struct FRigUnit_MathVectorUnaryOp : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorUnaryOp
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Value; // 0x8
        struct FVector Result; // 0x14

    };

    struct FRigUnit_MathVectorUnit : FRigUnit_MathVectorUnaryOp //ScriptStruct ControlRig.RigUnit_MathVectorUnit
    {
    public:


    };

    struct FRigUnit_MathVectorDot : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorDot
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector A; // 0x8
        struct FVector B; // 0x14
        float Result; // 0x20

    };

    struct FRigUnit_MathVectorBinaryOp : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorBinaryOp
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector A; // 0x8
        struct FVector B; // 0x14
        struct FVector Result; // 0x20

    };

    struct FRigUnit_MathVectorCross : FRigUnit_MathVectorBinaryOp //ScriptStruct ControlRig.RigUnit_MathVectorCross
    {
    public:


    };

    struct FRigUnit_MathVectorDistance : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorDistance
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector A; // 0x8
        struct FVector B; // 0x14
        float Result; // 0x20

    };

    struct FRigUnit_MathVectorLength : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorLength
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Value; // 0x8
        float Result; // 0x14

    };

    struct FRigUnit_MathVectorLengthSquared : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorLengthSquared
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Value; // 0x8
        float Result; // 0x14

    };

    struct FRigUnit_MathVectorRad : FRigUnit_MathVectorUnaryOp //ScriptStruct ControlRig.RigUnit_MathVectorRad
    {
    public:


    };

    struct FRigUnit_MathVectorDeg : FRigUnit_MathVectorUnaryOp //ScriptStruct ControlRig.RigUnit_MathVectorDeg
    {
    public:


    };

    struct FRigUnit_MathVectorSelectBool : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorSelectBool
    {
    //Children Prop Count (Fields): 4
    public:

        bool Condition; // 0x8
        struct FVector IfTrue; // 0xc
        struct FVector IfFalse; // 0x18
        struct FVector Result; // 0x24

    };

    struct FRigUnit_MathVectorIsNearlyEqual : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorIsNearlyEqual
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector A; // 0x8
        struct FVector B; // 0x14
        float Tolerance; // 0x20
        bool Result; // 0x24

    };

    struct FRigUnit_MathVectorIsNearlyZero : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorIsNearlyZero
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Value; // 0x8
        float Tolerance; // 0x14
        bool Result; // 0x18

    };

    struct FRigUnit_MathVectorNotEquals : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorNotEquals
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector A; // 0x8
        struct FVector B; // 0x14
        bool Result; // 0x20

    };

    struct FRigUnit_MathVectorEquals : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorEquals
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector A; // 0x8
        struct FVector B; // 0x14
        bool Result; // 0x20

    };

    struct FRigUnit_MathVectorRemap : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorRemap
    {
    //Children Prop Count (Fields): 7
    public:

        struct FVector Value; // 0x8
        struct FVector SourceMinimum; // 0x14
        struct FVector SourceMaximum; // 0x20
        struct FVector TargetMinimum; // 0x2c
        struct FVector TargetMaximum; // 0x38
        bool bClamp; // 0x44
        struct FVector Result; // 0x48

    };

    struct FRigUnit_MathVectorLerp : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorLerp
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector A; // 0x8
        struct FVector B; // 0x14
        float T; // 0x20
        struct FVector Result; // 0x24

    };

    struct FRigUnit_MathVectorClamp : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorClamp
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector Value; // 0x8
        struct FVector Minimum; // 0x14
        struct FVector Maximum; // 0x20
        struct FVector Result; // 0x2c

    };

    struct FRigUnit_MathVectorSign : FRigUnit_MathVectorUnaryOp //ScriptStruct ControlRig.RigUnit_MathVectorSign
    {
    public:


    };

    struct FRigUnit_MathVectorRound : FRigUnit_MathVectorUnaryOp //ScriptStruct ControlRig.RigUnit_MathVectorRound
    {
    public:


    };

    struct FRigUnit_MathVectorCeil : FRigUnit_MathVectorUnaryOp //ScriptStruct ControlRig.RigUnit_MathVectorCeil
    {
    public:


    };

    struct FRigUnit_MathVectorFloor : FRigUnit_MathVectorUnaryOp //ScriptStruct ControlRig.RigUnit_MathVectorFloor
    {
    public:


    };

    struct FRigUnit_MathVectorAbs : FRigUnit_MathVectorUnaryOp //ScriptStruct ControlRig.RigUnit_MathVectorAbs
    {
    public:


    };

    struct FRigUnit_MathVectorNegate : FRigUnit_MathVectorUnaryOp //ScriptStruct ControlRig.RigUnit_MathVectorNegate
    {
    public:


    };

    struct FRigUnit_MathVectorMax : FRigUnit_MathVectorBinaryOp //ScriptStruct ControlRig.RigUnit_MathVectorMax
    {
    public:


    };

    struct FRigUnit_MathVectorMin : FRigUnit_MathVectorBinaryOp //ScriptStruct ControlRig.RigUnit_MathVectorMin
    {
    public:


    };

    struct FRigUnit_MathVectorMod : FRigUnit_MathVectorBinaryOp //ScriptStruct ControlRig.RigUnit_MathVectorMod
    {
    public:


    };

    struct FRigUnit_MathVectorDiv : FRigUnit_MathVectorBinaryOp //ScriptStruct ControlRig.RigUnit_MathVectorDiv
    {
    public:


    };

    struct FRigUnit_MathVectorScale : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorScale
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Value; // 0x8
        float Factor; // 0x14
        struct FVector Result; // 0x18

    };

    struct FRigUnit_MathVectorMul : FRigUnit_MathVectorBinaryOp //ScriptStruct ControlRig.RigUnit_MathVectorMul
    {
    public:


    };

    struct FRigUnit_MathVectorSub : FRigUnit_MathVectorBinaryOp //ScriptStruct ControlRig.RigUnit_MathVectorSub
    {
    public:


    };

    struct FRigUnit_MathVectorAdd : FRigUnit_MathVectorBinaryOp //ScriptStruct ControlRig.RigUnit_MathVectorAdd
    {
    public:


    };

    struct FRigUnit_MathVectorFromFloat : FRigUnit_MathVectorBase //ScriptStruct ControlRig.RigUnit_MathVectorFromFloat
    {
    //Children Prop Count (Fields): 2
    public:

        float Value; // 0x8
        struct FVector Result; // 0xc

    };

    struct FRigUnit_ModifyBoneTransforms : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_ModifyBoneTransforms
    {
    //Children Prop Count (Fields): 6
    public:

        struct TArray<struct FRigUnit_ModifyBoneTransforms_PerBone> BoneToModify; // 0x68
        float Weight; // 0x78
        float WeightMinimum; // 0x7c
        float WeightMaximum; // 0x80
        enum class EControlRigModifyBoneMode Mode; // 0x84
        struct FRigUnit_ModifyBoneTransforms_WorkData WorkData; // 0x88

    };

    struct FRigUnit_ModifyTransforms_WorkData //ScriptStruct ControlRig.RigUnit_ModifyTransforms_WorkData
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FCachedRigElement> CachedItems; // 0x0

    };

    struct FRigUnit_ModifyBoneTransforms_WorkData : FRigUnit_ModifyTransforms_WorkData //ScriptStruct ControlRig.RigUnit_ModifyBoneTransforms_WorkData
    {
    public:


    };

    struct FRigUnit_ModifyBoneTransforms_PerBone //ScriptStruct ControlRig.RigUnit_ModifyBoneTransforms_PerBone
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Bone; // 0x0
        struct FTransform Transform; // 0x10

    };

    struct FRigUnit_ModifyTransforms : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_ModifyTransforms
    {
    //Children Prop Count (Fields): 6
    public:

        struct TArray<struct FRigUnit_ModifyTransforms_PerItem> ItemToModify; // 0x68
        float Weight; // 0x78
        float WeightMinimum; // 0x7c
        float WeightMaximum; // 0x80
        enum class EControlRigModifyBoneMode Mode; // 0x84
        struct FRigUnit_ModifyTransforms_WorkData WorkData; // 0x88

    };

    struct FRigUnit_ModifyTransforms_PerItem //ScriptStruct ControlRig.RigUnit_ModifyTransforms_PerItem
    {
    //Children Prop Count (Fields): 2
    public:

        struct FRigElementKey item; // 0x0
        struct FTransform Transform; // 0x10

    };

    struct FRigUnit_MultiFABRIK : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_MultiFABRIK
    {
    //Children Prop Count (Fields): 6
    public:

        struct FName RootBone; // 0x68
        struct TArray<struct FRigUnit_MultiFABRIK_EndEffector> Effectors; // 0x70
        float Precision; // 0x80
        bool bPropagateToChildren; // 0x84
        int32_t MaxIterations; // 0x88
        struct FRigUnit_MultiFABRIK_WorkData WorkData; // 0x90

    };

    struct FRigUnit_MultiFABRIK_WorkData //ScriptStruct ControlRig.RigUnit_MultiFABRIK_WorkData
    {
    public:


    };

    struct FRigUnit_MultiFABRIK_EndEffector //ScriptStruct ControlRig.RigUnit_MultiFABRIK_EndEffector
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Bone; // 0x0
        struct FVector Location; // 0x8

    };

    struct FRigUnit_NameBase : FRigUnit //ScriptStruct ControlRig.RigUnit_NameBase
    {
    public:


    };

    struct FRigUnit_Contains : FRigUnit_NameBase //ScriptStruct ControlRig.RigUnit_Contains
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Name; // 0x8
        struct FName Search; // 0x10
        bool Result; // 0x18

    };

    struct FRigUnit_StartsWith : FRigUnit_NameBase //ScriptStruct ControlRig.RigUnit_StartsWith
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Name; // 0x8
        struct FName Start; // 0x10
        bool Result; // 0x18

    };

    struct FRigUnit_EndsWith : FRigUnit_NameBase //ScriptStruct ControlRig.RigUnit_EndsWith
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Name; // 0x8
        struct FName Ending; // 0x10
        bool Result; // 0x18

    };

    struct FRigUnit_NameReplace : FRigUnit_NameBase //ScriptStruct ControlRig.RigUnit_NameReplace
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName Name; // 0x8
        struct FName Old; // 0x10
        struct FName New; // 0x18
        struct FName Result; // 0x20

    };

    struct FRigUnit_NameTruncate : FRigUnit_NameBase //ScriptStruct ControlRig.RigUnit_NameTruncate
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName Name; // 0x8
        int32_t Count; // 0x10
        bool FromEnd; // 0x14
        struct FName Remainder; // 0x18
        struct FName Chopped; // 0x20

    };

    struct FRigUnit_NameConcat : FRigUnit_NameBase //ScriptStruct ControlRig.RigUnit_NameConcat
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName A; // 0x8
        struct FName B; // 0x10
        struct FName Result; // 0x18

    };

    struct FRigUnit_NoiseVector : FRigUnit_MathBase //ScriptStruct ControlRig.RigUnit_NoiseVector
    {
    //Children Prop Count (Fields): 7
    public:

        struct FVector position; // 0x8
        struct FVector Speed; // 0x14
        struct FVector Frequency; // 0x20
        float Minimum; // 0x2c
        float Maximum; // 0x30
        struct FVector Result; // 0x34
        struct FVector Time; // 0x40

    };

    struct FRigUnit_NoiseFloat : FRigUnit_MathBase //ScriptStruct ControlRig.RigUnit_NoiseFloat
    {
    //Children Prop Count (Fields): 7
    public:

        float Value; // 0x8
        float Speed; // 0xc
        float Frequency; // 0x10
        float Minimum; // 0x14
        float Maximum; // 0x18
        float Result; // 0x1c
        float Time; // 0x20

    };

    struct FRigUnit_OffsetTransformForItem : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_OffsetTransformForItem
    {
    //Children Prop Count (Fields): 5
    public:

        struct FRigElementKey item; // 0x68
        struct FTransform OffsetTransform; // 0x80
        float Weight; // 0xb0
        bool bPropagateToChildren; // 0xb4
        struct FCachedRigElement CachedIndex; // 0xb8

    };

    struct FRigUnit_ParentSwitchConstraint : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_ParentSwitchConstraint
    {
    //Children Prop Count (Fields): 10
    public:

        struct FRigElementKey Subject; // 0x68
        int32_t ParentIndex; // 0x74
        struct FRigElementKeyCollection Parents; // 0x78
        struct FTransform InitialGlobalTransform; // 0x90
        float Weight; // 0xc0
        struct FTransform Transform; // 0xd0
        bool Switched; // 0x100
        struct FCachedRigElement CachedSubject; // 0x104
        struct FCachedRigElement CachedParent; // 0x118
        struct FTransform RelativeOffset; // 0x130

    };

    struct FRigUnit_SimBaseMutable : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SimBaseMutable
    {
    public:


    };

    struct FRigUnit_PointSimulation : FRigUnit_SimBaseMutable //ScriptStruct ControlRig.RigUnit_PointSimulation
    {
    //Children Prop Count (Fields): 15
    public:

        struct TArray<struct FCRSimPoint> Points; // 0x68
        struct TArray<struct FCRSimLinearSpring> Links; // 0x78
        struct TArray<struct FCRSimPointForce> Forces; // 0x88
        struct TArray<struct FCRSimSoftCollision> CollisionVolumes; // 0x98
        float SimulatedStepsPerSecond; // 0xa8
        enum class ECRSimPointIntegrateType IntegratorType; // 0xac
        float VerletBlend; // 0xb0
        struct TArray<struct FRigUnit_PointSimulation_BoneTarget> BoneTargets; // 0xb8
        bool bLimitLocalPosition; // 0xc8
        bool bPropagateToChildren; // 0xc9
        struct FVector PrimaryAimAxis; // 0xcc
        struct FVector SecondaryAimAxis; // 0xd8
        struct FRigUnit_PointSimulation_DebugSettings DebugSettings; // 0xf0
        struct FCRFourPointBezier Bezier; // 0x140
        struct FRigUnit_PointSimulation_WorkData WorkData; // 0x170

    };

    struct FRigUnit_PointSimulation_WorkData //ScriptStruct ControlRig.RigUnit_PointSimulation_WorkData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FCRSimPointContainer Simulation; // 0x0
        struct TArray<struct FCachedRigElement> BoneIndices; // 0x78

    };

    struct FRigUnit_PointSimulation_DebugSettings //ScriptStruct ControlRig.RigUnit_PointSimulation_DebugSettings
    {
    //Children Prop Count (Fields): 6
    public:

        bool bEnabled; // 0x0
        float Scale; // 0x4
        float CollisionScale; // 0x8
        bool bDrawPointsAsSpheres; // 0xc
        struct FLinearColor Color; // 0x10
        struct FTransform WorldOffset; // 0x20

    };

    struct FRigUnit_PointSimulation_BoneTarget //ScriptStruct ControlRig.RigUnit_PointSimulation_BoneTarget
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName Bone; // 0x0
        int32_t TranslationPoint; // 0x8
        int32_t PrimaryAimPoint; // 0xc
        int32_t SecondaryAimPoint; // 0x10

    };

    struct FRigUnit_PrepareForExecution : FRigUnit //ScriptStruct ControlRig.RigUnit_PrepareForExecution
    {
    //Children Prop Count (Fields): 1
    public:

        struct FControlRigExecuteContext ExecuteContext; // 0x8

    };

    struct FRigUnit_EndProfilingTimer : FRigUnit_DebugBaseMutable //ScriptStruct ControlRig.RigUnit_EndProfilingTimer
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t NumberOfMeasurements; // 0x68
        struct FString Prefix; // 0x70
        float AccumulatedTime; // 0x80
        int32_t MeasurementsLeft; // 0x84

    };

    struct FRigUnit_StartProfilingTimer : FRigUnit_DebugBaseMutable //ScriptStruct ControlRig.RigUnit_StartProfilingTimer
    {
    public:


    };

    struct FRigUnit_ProjectTransformToNewParent : FRigUnit //ScriptStruct ControlRig.RigUnit_ProjectTransformToNewParent
    {
    //Children Prop Count (Fields): 10
    public:

        struct FRigElementKey Child; // 0x8
        bool bChildInitial; // 0x14
        struct FRigElementKey OldParent; // 0x18
        bool bOldParentInitial; // 0x24
        struct FRigElementKey NewParent; // 0x28
        bool bNewParentInitial; // 0x34
        struct FTransform Transform; // 0x40
        struct FCachedRigElement CachedChild; // 0x70
        struct FCachedRigElement CachedOldParent; // 0x84
        struct FCachedRigElement CachedNewParent; // 0x98

    };

    struct FRigUnit_PropagateTransform : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_PropagateTransform
    {
    //Children Prop Count (Fields): 5
    public:

        struct FRigElementKey item; // 0x68
        bool bRecomputeGlobal; // 0x74
        bool bApplyToChildren; // 0x75
        bool bRecursive; // 0x76
        struct FCachedRigElement CachedIndex; // 0x78

    };

    struct FRigUnit_QuaternionToAngle : FRigUnit //ScriptStruct ControlRig.RigUnit_QuaternionToAngle
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Axis; // 0x8
        struct FQuat Argument; // 0x20
        float Angle; // 0x30

    };

    struct FRigUnit_QuaternionFromAxisAndAngle : FRigUnit //ScriptStruct ControlRig.RigUnit_QuaternionFromAxisAndAngle
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Axis; // 0x8
        float Angle; // 0x14
        struct FQuat Result; // 0x20

    };

    struct FRigUnit_QuaternionToAxisAndAngle : FRigUnit //ScriptStruct ControlRig.RigUnit_QuaternionToAxisAndAngle
    {
    //Children Prop Count (Fields): 3
    public:

        struct FQuat Argument; // 0x10
        struct FVector Axis; // 0x20
        float Angle; // 0x2c

    };

    struct FRigUnit_UnaryQuaternionOp : FRigUnit //ScriptStruct ControlRig.RigUnit_UnaryQuaternionOp
    {
    //Children Prop Count (Fields): 2
    public:

        struct FQuat Argument; // 0x10
        struct FQuat Result; // 0x20

    };

    struct FRigUnit_InverseQuaterion : FRigUnit_UnaryQuaternionOp //ScriptStruct ControlRig.RigUnit_InverseQuaterion
    {
    public:


    };

    struct FRigUnit_BinaryQuaternionOp : FRigUnit //ScriptStruct ControlRig.RigUnit_BinaryQuaternionOp
    {
    //Children Prop Count (Fields): 3
    public:

        struct FQuat Argument0; // 0x10
        struct FQuat Argument1; // 0x20
        struct FQuat Result; // 0x30

    };

    struct FRigUnit_MultiplyQuaternion : FRigUnit_BinaryQuaternionOp //ScriptStruct ControlRig.RigUnit_MultiplyQuaternion
    {
    public:


    };

    struct FRigUnit_RandomVector : FRigUnit_MathBase //ScriptStruct ControlRig.RigUnit_RandomVector
    {
    //Children Prop Count (Fields): 8
    public:

        int32_t Seed; // 0x8
        float Minimum; // 0xc
        float Maximum; // 0x10
        float Duration; // 0x14
        struct FVector Result; // 0x18
        struct FVector LastResult; // 0x24
        int32_t LastSeed; // 0x30
        float TimeLeft; // 0x34

    };

    struct FRigUnit_RandomFloat : FRigUnit_MathBase //ScriptStruct ControlRig.RigUnit_RandomFloat
    {
    //Children Prop Count (Fields): 8
    public:

        int32_t Seed; // 0x8
        float Minimum; // 0xc
        float Maximum; // 0x10
        float Duration; // 0x14
        float Result; // 0x18
        float LastResult; // 0x1c
        int32_t LastSeed; // 0x20
        float TimeLeft; // 0x24

    };

    struct FRigUnit_SendEvent : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SendEvent
    {
    //Children Prop Count (Fields): 5
    public:

        enum class ERigEvent Event; // 0x68
        struct FRigElementKey item; // 0x6c
        float OffsetInSeconds; // 0x78
        bool bEnable; // 0x7c
        bool bOnlyDuringInteraction; // 0x7d

    };

    struct FRigUnit_SequenceExecution : FRigUnit //ScriptStruct ControlRig.RigUnit_SequenceExecution
    {
    //Children Prop Count (Fields): 5
    public:

        struct FControlRigExecuteContext ExecuteContext; // 0x8
        struct FControlRigExecuteContext A; // 0x68
        struct FControlRigExecuteContext B; // 0xc8
        struct FControlRigExecuteContext C; // 0x128
        struct FControlRigExecuteContext D; // 0x188

    };

    struct FRigUnit_SetBoneInitialTransform : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetBoneInitialTransform
    {
    //Children Prop Count (Fields): 6
    public:

        struct FName Bone; // 0x68
        struct FTransform Transform; // 0x70
        struct FTransform Result; // 0xa0
        enum class EBoneGetterSetterMode Space; // 0xd0
        bool bPropagateToChildren; // 0xd1
        struct FCachedRigElement CachedBone; // 0xd4

    };

    struct FRigUnit_SetBoneRotation : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetBoneRotation
    {
    //Children Prop Count (Fields): 6
    public:

        struct FName Bone; // 0x68
        struct FQuat Rotation; // 0x70
        enum class EBoneGetterSetterMode Space; // 0x80
        float Weight; // 0x84
        bool bPropagateToChildren; // 0x88
        struct FCachedRigElement CachedBone; // 0x8c

    };

    struct FRigUnit_SetBoneTransform : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetBoneTransform
    {
    //Children Prop Count (Fields): 7
    public:

        struct FName Bone; // 0x68
        struct FTransform Transform; // 0x70
        struct FTransform Result; // 0xa0
        enum class EBoneGetterSetterMode Space; // 0xd0
        float Weight; // 0xd4
        bool bPropagateToChildren; // 0xd8
        struct FCachedRigElement CachedBone; // 0xdc

    };

    struct FRigUnit_SetBoneTranslation : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetBoneTranslation
    {
    //Children Prop Count (Fields): 6
    public:

        struct FName Bone; // 0x68
        struct FVector Translation; // 0x70
        enum class EBoneGetterSetterMode Space; // 0x7c
        float Weight; // 0x80
        bool bPropagateToChildren; // 0x84
        struct FCachedRigElement CachedBone; // 0x88

    };

    struct FRigUnit_SetControlColor : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetControlColor
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Control; // 0x68
        struct FLinearColor Color; // 0x70
        struct FCachedRigElement CachedControlIndex; // 0x80

    };

    struct FRigUnit_SetControlOffset : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetControlOffset
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName Control; // 0x68
        struct FTransform Offset; // 0x70
        enum class EBoneGetterSetterMode Space; // 0xa0
        struct FCachedRigElement CachedControlIndex; // 0xa4

    };

    struct FRigUnit_SetControlTransform : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetControlTransform
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName Control; // 0x68
        float Weight; // 0x70
        struct FTransform Transform; // 0x80
        enum class EBoneGetterSetterMode Space; // 0xb0
        struct FCachedRigElement CachedControlIndex; // 0xb4

    };

    struct FRigUnit_SetMultiControlRotator : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetMultiControlRotator
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FRigUnit_SetMultiControlRotator_Entry> Entries; // 0x68
        float Weight; // 0x78
        struct TArray<struct FCachedRigElement> CachedControlIndices; // 0x80

    };

    struct FRigUnit_SetMultiControlRotator_Entry //ScriptStruct ControlRig.RigUnit_SetMultiControlRotator_Entry
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Control; // 0x0
        struct FRotator Rotator; // 0x8
        enum class EBoneGetterSetterMode Space; // 0x14

    };

    struct FRigUnit_SetControlRotator : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetControlRotator
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName Control; // 0x68
        float Weight; // 0x70
        struct FRotator Rotator; // 0x74
        enum class EBoneGetterSetterMode Space; // 0x80
        struct FCachedRigElement CachedControlIndex; // 0x84

    };

    struct FRigUnit_SetControlVector : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetControlVector
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName Control; // 0x68
        float Weight; // 0x70
        struct FVector Vector; // 0x74
        enum class EBoneGetterSetterMode Space; // 0x80
        struct FCachedRigElement CachedControlIndex; // 0x84

    };

    struct FRigUnit_SetMultiControlVector2D : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetMultiControlVector2D
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FRigUnit_SetMultiControlVector2D_Entry> Entries; // 0x68
        float Weight; // 0x78
        struct TArray<struct FCachedRigElement> CachedControlIndices; // 0x80

    };

    struct FRigUnit_SetMultiControlVector2D_Entry //ScriptStruct ControlRig.RigUnit_SetMultiControlVector2D_Entry
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Control; // 0x0
        struct FVector2D Vector; // 0x8

    };

    struct FRigUnit_SetControlVector2D : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetControlVector2D
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName Control; // 0x68
        float Weight; // 0x70
        struct FVector2D Vector; // 0x74
        struct FCachedRigElement CachedControlIndex; // 0x7c

    };

    struct FRigUnit_SetMultiControlInteger : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetMultiControlInteger
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FRigUnit_SetMultiControlInteger_Entry> Entries; // 0x68
        float Weight; // 0x78
        struct TArray<struct FCachedRigElement> CachedControlIndices; // 0x80

    };

    struct FRigUnit_SetMultiControlInteger_Entry //ScriptStruct ControlRig.RigUnit_SetMultiControlInteger_Entry
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Control; // 0x0
        int32_t IntegerValue; // 0x8

    };

    struct FRigUnit_SetControlInteger : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetControlInteger
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName Control; // 0x68
        int32_t Weight; // 0x70
        int32_t IntegerValue; // 0x74
        struct FCachedRigElement CachedControlIndex; // 0x78

    };

    struct FRigUnit_SetMultiControlFloat : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetMultiControlFloat
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FRigUnit_SetMultiControlFloat_Entry> Entries; // 0x68
        float Weight; // 0x78
        struct TArray<struct FCachedRigElement> CachedControlIndices; // 0x80

    };

    struct FRigUnit_SetMultiControlFloat_Entry //ScriptStruct ControlRig.RigUnit_SetMultiControlFloat_Entry
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Control; // 0x0
        float FloatValue; // 0x8

    };

    struct FRigUnit_SetControlFloat : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetControlFloat
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName Control; // 0x68
        float Weight; // 0x70
        float FloatValue; // 0x74
        struct FCachedRigElement CachedControlIndex; // 0x78

    };

    struct FRigUnit_SetMultiControlBool : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetMultiControlBool
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FRigUnit_SetMultiControlBool_Entry> Entries; // 0x68
        struct TArray<struct FCachedRigElement> CachedControlIndices; // 0x78

    };

    struct FRigUnit_SetMultiControlBool_Entry //ScriptStruct ControlRig.RigUnit_SetMultiControlBool_Entry
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Control; // 0x0
        bool BoolValue; // 0x8

    };

    struct FRigUnit_SetControlBool : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetControlBool
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Control; // 0x68
        bool BoolValue; // 0x70
        struct FCachedRigElement CachedControlIndex; // 0x74

    };

    struct FRigUnit_SetControlVisibility : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetControlVisibility
    {
    //Children Prop Count (Fields): 4
    public:

        struct FRigElementKey item; // 0x68
        struct FString Pattern; // 0x78
        bool bVisible; // 0x88
        struct TArray<struct FCachedRigElement> CachedControlIndices; // 0x90

    };

    struct FRigUnit_SetCurveValue : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetCurveValue
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Curve; // 0x68
        float Value; // 0x70
        struct FCachedRigElement CachedCurveIndex; // 0x74

    };

    struct FRigUnit_SetRelativeBoneTransform : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetRelativeBoneTransform
    {
    //Children Prop Count (Fields): 7
    public:

        struct FName Bone; // 0x68
        struct FName Space; // 0x70
        struct FTransform Transform; // 0x80
        float Weight; // 0xb0
        bool bPropagateToChildren; // 0xb4
        struct FCachedRigElement CachedBone; // 0xb8
        struct FCachedRigElement CachedSpaceIndex; // 0xcc

    };

    struct FRigUnit_SetRelativeTransformForItem : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetRelativeTransformForItem
    {
    //Children Prop Count (Fields): 8
    public:

        struct FRigElementKey Child; // 0x68
        struct FRigElementKey Parent; // 0x74
        bool bParentInitial; // 0x80
        struct FTransform RelativeTransform; // 0x90
        float Weight; // 0xc0
        bool bPropagateToChildren; // 0xc4
        struct FCachedRigElement CachedChild; // 0xc8
        struct FCachedRigElement CachedParent; // 0xdc

    };

    struct FRigUnit_SetSpaceInitialTransform : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetSpaceInitialTransform
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName SpaceName; // 0x68
        struct FTransform Transform; // 0x70
        struct FTransform Result; // 0xa0
        enum class EBoneGetterSetterMode Space; // 0xd0
        struct FCachedRigElement CachedSpaceIndex; // 0xd4

    };

    struct FRigUnit_SetSpaceTransform : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetSpaceTransform
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName Space; // 0x68
        float Weight; // 0x70
        struct FTransform Transform; // 0x80
        enum class EBoneGetterSetterMode SpaceType; // 0xb0
        struct FCachedRigElement CachedSpaceIndex; // 0xb4

    };

    struct FRigUnit_SetScale : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetScale
    {
    //Children Prop Count (Fields): 6
    public:

        struct FRigElementKey item; // 0x68
        enum class EBoneGetterSetterMode Space; // 0x74
        struct FVector Scale; // 0x78
        float Weight; // 0x84
        bool bPropagateToChildren; // 0x88
        struct FCachedRigElement CachedIndex; // 0x8c

    };

    struct FRigUnit_SetRotation : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetRotation
    {
    //Children Prop Count (Fields): 6
    public:

        struct FRigElementKey item; // 0x68
        enum class EBoneGetterSetterMode Space; // 0x74
        struct FQuat Rotation; // 0x80
        float Weight; // 0x90
        bool bPropagateToChildren; // 0x94
        struct FCachedRigElement CachedIndex; // 0x98

    };

    struct FRigUnit_SetTranslation : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetTranslation
    {
    //Children Prop Count (Fields): 6
    public:

        struct FRigElementKey item; // 0x68
        enum class EBoneGetterSetterMode Space; // 0x74
        struct FVector Translation; // 0x78
        float Weight; // 0x84
        bool bPropagateToChildren; // 0x88
        struct FCachedRigElement CachedIndex; // 0x8c

    };

    struct FRigUnit_SetTransform : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_SetTransform
    {
    //Children Prop Count (Fields): 7
    public:

        struct FRigElementKey item; // 0x68
        enum class EBoneGetterSetterMode Space; // 0x74
        bool bInitial; // 0x75
        struct FTransform Transform; // 0x80
        float Weight; // 0xb0
        bool bPropagateToChildren; // 0xb4
        struct FCachedRigElement CachedIndex; // 0xb8

    };

    struct FRigUnit_SlideChainPerItem : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_SlideChainPerItem
    {
    //Children Prop Count (Fields): 4
    public:

        struct FRigElementKeyCollection Items; // 0x68
        float SlideAmount; // 0x78
        bool bPropagateToChildren; // 0x7c
        struct FRigUnit_SlideChain_WorkData WorkData; // 0x80

    };

    struct FRigUnit_SlideChain_WorkData //ScriptStruct ControlRig.RigUnit_SlideChain_WorkData
    {
    //Children Prop Count (Fields): 5
    public:

        float ChainLength; // 0x0
        struct TArray<float> ItemSegments; // 0x8
        struct TArray<struct FCachedRigElement> CachedItems; // 0x18
        struct TArray<struct FTransform> Transforms; // 0x28
        struct TArray<struct FTransform> BlendedTransforms; // 0x38

    };

    struct FRigUnit_SlideChain : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_SlideChain
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName StartBone; // 0x68
        struct FName EndBone; // 0x70
        float SlideAmount; // 0x78
        bool bPropagateToChildren; // 0x7c
        struct FRigUnit_SlideChain_WorkData WorkData; // 0x80

    };

    struct FRigUnit_SpringIK : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_SpringIK
    {
    //Children Prop Count (Fields): 20
    public:

        struct FName StartBone; // 0x68
        struct FName EndBone; // 0x70
        float HierarchyStrength; // 0x78
        float EffectorStrength; // 0x7c
        float EffectorRatio; // 0x80
        float RootStrength; // 0x84
        float RootRatio; // 0x88
        float Damping; // 0x8c
        struct FVector PoleVector; // 0x90
        bool bFlipPolePlane; // 0x9c
        enum class EControlRigVectorKind PoleVectorKind; // 0x9d
        struct FName PoleVectorSpace; // 0xa0
        struct FVector PrimaryAxis; // 0xa8
        struct FVector SecondaryAxis; // 0xb4
        bool bLiveSimulation; // 0xc0
        int32_t Iterations; // 0xc4
        bool bLimitLocalPosition; // 0xc8
        bool bPropagateToChildren; // 0xc9
        struct FRigUnit_SpringIK_DebugSettings DebugSettings; // 0xd0
        struct FRigUnit_SpringIK_WorkData WorkData; // 0x120

    };

    struct FRigUnit_SpringIK_WorkData //ScriptStruct ControlRig.RigUnit_SpringIK_WorkData
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<struct FCachedRigElement> BoneIndices; // 0x0
        struct FCachedRigElement CachedPoleVector; // 0x10
        struct TArray<struct FTransform> Transforms; // 0x28
        struct FCRSimPointContainer Simulation; // 0x38

    };

    struct FRigUnit_SpringIK_DebugSettings //ScriptStruct ControlRig.RigUnit_SpringIK_DebugSettings
    {
    //Children Prop Count (Fields): 4
    public:

        bool bEnabled; // 0x0
        float Scale; // 0x4
        struct FLinearColor Color; // 0x8
        struct FTransform WorldOffset; // 0x20

    };

    struct FRigUnit_SecondsToFrames : FRigUnit_AnimBase //ScriptStruct ControlRig.RigUnit_SecondsToFrames
    {
    //Children Prop Count (Fields): 2
    public:

        float Seconds; // 0x8
        float Frames; // 0xc

    };

    struct FRigUnit_FramesToSeconds : FRigUnit_AnimBase //ScriptStruct ControlRig.RigUnit_FramesToSeconds
    {
    //Children Prop Count (Fields): 2
    public:

        float Frames; // 0x8
        float Seconds; // 0xc

    };

    struct FRigUnit_Timeline : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_Timeline
    {
    //Children Prop Count (Fields): 3
    public:

        float Speed; // 0x8
        float Time; // 0xc
        float AccumulatedValue; // 0x10

    };

    struct FRigUnit_TimeOffsetTransform : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_TimeOffsetTransform
    {
    //Children Prop Count (Fields): 9
    public:

        struct FTransform Value; // 0x10
        float SecondsAgo; // 0x40
        int32_t BufferSize; // 0x44
        float TimeRange; // 0x48
        struct FTransform Result; // 0x50
        struct TArray<struct FTransform> Buffer; // 0x80
        struct TArray<float> DeltaTimes; // 0x90
        int32_t LastInsertIndex; // 0xa0
        int32_t UpperBound; // 0xa4

    };

    struct FRigUnit_TimeOffsetVector : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_TimeOffsetVector
    {
    //Children Prop Count (Fields): 9
    public:

        struct FVector Value; // 0x8
        float SecondsAgo; // 0x14
        int32_t BufferSize; // 0x18
        float TimeRange; // 0x1c
        struct FVector Result; // 0x20
        struct TArray<struct FVector> Buffer; // 0x30
        struct TArray<float> DeltaTimes; // 0x40
        int32_t LastInsertIndex; // 0x50
        int32_t UpperBound; // 0x54

    };

    struct FRigUnit_TimeOffsetFloat : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_TimeOffsetFloat
    {
    //Children Prop Count (Fields): 9
    public:

        float Value; // 0x8
        float SecondsAgo; // 0xc
        int32_t BufferSize; // 0x10
        float TimeRange; // 0x14
        float Result; // 0x18
        struct TArray<float> Buffer; // 0x20
        struct TArray<float> DeltaTimes; // 0x30
        int32_t LastInsertIndex; // 0x40
        int32_t UpperBound; // 0x44

    };

    struct FRigUnit_BinaryTransformOp : FRigUnit //ScriptStruct ControlRig.RigUnit_BinaryTransformOp
    {
    //Children Prop Count (Fields): 3
    public:

        struct FTransform Argument0; // 0x10
        struct FTransform Argument1; // 0x40
        struct FTransform Result; // 0x70

    };

    struct FRigUnit_GetRelativeTransform : FRigUnit_BinaryTransformOp //ScriptStruct ControlRig.RigUnit_GetRelativeTransform
    {
    public:


    };

    struct FRigUnit_MultiplyTransform : FRigUnit_BinaryTransformOp //ScriptStruct ControlRig.RigUnit_MultiplyTransform
    {
    public:


    };

    struct FRigUnit_TransformConstraintPerItem : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_TransformConstraintPerItem
    {
    //Children Prop Count (Fields): 7
    public:

        struct FRigElementKey item; // 0x68
        enum class ETransformSpaceMode BaseTransformSpace; // 0x74
        struct FTransform BaseTransform; // 0x80
        struct FRigElementKey BaseItem; // 0xb0
        struct TArray<struct FConstraintTarget> Targets; // 0xc0
        bool bUseInitialTransforms; // 0xd0
        struct FRigUnit_TransformConstraint_WorkData WorkData; // 0xd8

    };

    struct FRigUnit_TransformConstraint_WorkData //ScriptStruct ControlRig.RigUnit_TransformConstraint_WorkData
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FConstraintData> ConstraintData; // 0x0
        struct TMap<int32_t, int32_t> ConstraintDataToTargets; // 0x10

    };

    struct FConstraintTarget //ScriptStruct ControlRig.ConstraintTarget
    {
    //Children Prop Count (Fields): 4
    public:

        struct FTransform Transform; // 0x0
        float Weight; // 0x30
        bool bMaintainOffset; // 0x34
        struct FTransformFilter Filter; // 0x35

    };

    struct FRigUnit_TransformConstraint : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_TransformConstraint
    {
    //Children Prop Count (Fields): 7
    public:

        struct FName Bone; // 0x68
        enum class ETransformSpaceMode BaseTransformSpace; // 0x70
        struct FTransform BaseTransform; // 0x80
        struct FName BaseBone; // 0xb0
        struct TArray<struct FConstraintTarget> Targets; // 0xb8
        bool bUseInitialTransforms; // 0xc8
        struct FRigUnit_TransformConstraint_WorkData WorkData; // 0xd0

    };

    struct FRigUnit_TwistBonesPerItem : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_TwistBonesPerItem
    {
    //Children Prop Count (Fields): 7
    public:

        struct FRigElementKeyCollection Items; // 0x68
        struct FVector TwistAxis; // 0x78
        struct FVector PoleAxis; // 0x84
        enum class EControlRigAnimEasingType TwistEaseType; // 0x90
        float Weight; // 0x94
        bool bPropagateToChildren; // 0x98
        struct FRigUnit_TwistBones_WorkData WorkData; // 0xa0

    };

    struct FRigUnit_TwistBones_WorkData //ScriptStruct ControlRig.RigUnit_TwistBones_WorkData
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FCachedRigElement> CachedItems; // 0x0
        struct TArray<float> ItemRatios; // 0x10
        struct TArray<struct FTransform> ItemTransforms; // 0x20

    };

    struct FRigUnit_TwistBones : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_TwistBones
    {
    //Children Prop Count (Fields): 8
    public:

        struct FName StartBone; // 0x68
        struct FName EndBone; // 0x70
        struct FVector TwistAxis; // 0x78
        struct FVector PoleAxis; // 0x84
        enum class EControlRigAnimEasingType TwistEaseType; // 0x90
        float Weight; // 0x94
        bool bPropagateToChildren; // 0x98
        struct FRigUnit_TwistBones_WorkData WorkData; // 0xa0

    };

    struct FRigUnit_TwoBoneIKFK : FRigUnitMutable //ScriptStruct ControlRig.RigUnit_TwoBoneIKFK
    {
    //Children Prop Count (Fields): 18
    public:

        struct FName StartJoint; // 0x68
        struct FName EndJoint; // 0x70
        struct FVector PoleTarget; // 0x78
        float Spin; // 0x84
        struct FTransform EndEffector; // 0x90
        float IKBlend; // 0xc0
        struct FTransform StartJointFKTransform; // 0xd0
        struct FTransform MidJointFKTransform; // 0x100
        struct FTransform EndJointFKTransform; // 0x130
        float PreviousFKIKBlend; // 0x160
        struct FTransform StartJointIKTransform; // 0x170
        struct FTransform MidJointIKTransform; // 0x1a0
        struct FTransform EndJointIKTransform; // 0x1d0
        int32_t StartJointIndex; // 0x200
        int32_t MidJointIndex; // 0x204
        int32_t EndJointIndex; // 0x208
        float UpperLimbLength; // 0x20c
        float LowerLimbLength; // 0x210

    };

    struct FRigUnit_TwoBoneIKSimpleTransforms : FRigUnit_HighlevelBase //ScriptStruct ControlRig.RigUnit_TwoBoneIKSimpleTransforms
    {
    //Children Prop Count (Fields): 12
    public:

        struct FTransform Root; // 0x10
        struct FVector PoleVector; // 0x40
        struct FTransform Effector; // 0x50
        struct FVector PrimaryAxis; // 0x80
        struct FVector SecondaryAxis; // 0x8c
        float SecondaryAxisWeight; // 0x98
        bool bEnableStretch; // 0x9c
        float StretchStartRatio; // 0xa0
        float StretchMaximumRatio; // 0xa4
        float BoneALength; // 0xa8
        float BoneBLength; // 0xac
        struct FTransform Elbow; // 0xb0

    };

    struct FRigUnit_TwoBoneIKSimpleVectors : FRigUnit_HighlevelBase //ScriptStruct ControlRig.RigUnit_TwoBoneIKSimpleVectors
    {
    //Children Prop Count (Fields): 9
    public:

        struct FVector Root; // 0x8
        struct FVector PoleVector; // 0x14
        struct FVector Effector; // 0x20
        bool bEnableStretch; // 0x2c
        float StretchStartRatio; // 0x30
        float StretchMaximumRatio; // 0x34
        float BoneALength; // 0x38
        float BoneBLength; // 0x3c
        struct FVector Elbow; // 0x40

    };

    struct FRigUnit_TwoBoneIKSimplePerItem : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_TwoBoneIKSimplePerItem
    {
    //Children Prop Count (Fields): 22
    public:

        struct FRigElementKey ItemA; // 0x68
        struct FRigElementKey ItemB; // 0x74
        struct FRigElementKey EffectorItem; // 0x80
        struct FTransform Effector; // 0x90
        struct FVector PrimaryAxis; // 0xc0
        struct FVector SecondaryAxis; // 0xcc
        float SecondaryAxisWeight; // 0xd8
        struct FVector PoleVector; // 0xdc
        enum class EControlRigVectorKind PoleVectorKind; // 0xe8
        struct FRigElementKey PoleVectorSpace; // 0xec
        bool bEnableStretch; // 0xf8
        float StretchStartRatio; // 0xfc
        float StretchMaximumRatio; // 0x100
        float Weight; // 0x104
        float ItemALength; // 0x108
        float ItemBLength; // 0x10c
        bool bPropagateToChildren; // 0x110
        struct FRigUnit_TwoBoneIKSimple_DebugSettings DebugSettings; // 0x120
        struct FCachedRigElement CachedItemAIndex; // 0x160
        struct FCachedRigElement CachedItemBIndex; // 0x174
        struct FCachedRigElement CachedEffectorItemIndex; // 0x188
        struct FCachedRigElement CachedPoleVectorSpaceIndex; // 0x19c

    };

    struct FRigUnit_TwoBoneIKSimple_DebugSettings //ScriptStruct ControlRig.RigUnit_TwoBoneIKSimple_DebugSettings
    {
    //Children Prop Count (Fields): 3
    public:

        bool bEnabled; // 0x0
        float Scale; // 0x4
        struct FTransform WorldOffset; // 0x10

    };

    struct FRigUnit_TwoBoneIKSimple : FRigUnit_HighlevelBaseMutable //ScriptStruct ControlRig.RigUnit_TwoBoneIKSimple
    {
    //Children Prop Count (Fields): 22
    public:

        struct FName BoneA; // 0x68
        struct FName BoneB; // 0x70
        struct FName EffectorBone; // 0x78
        struct FTransform Effector; // 0x80
        struct FVector PrimaryAxis; // 0xb0
        struct FVector SecondaryAxis; // 0xbc
        float SecondaryAxisWeight; // 0xc8
        struct FVector PoleVector; // 0xcc
        enum class EControlRigVectorKind PoleVectorKind; // 0xd8
        struct FName PoleVectorSpace; // 0xdc
        bool bEnableStretch; // 0xe4
        float StretchStartRatio; // 0xe8
        float StretchMaximumRatio; // 0xec
        float Weight; // 0xf0
        float BoneALength; // 0xf4
        float BoneBLength; // 0xf8
        bool bPropagateToChildren; // 0xfc
        struct FRigUnit_TwoBoneIKSimple_DebugSettings DebugSettings; // 0x100
        struct FCachedRigElement CachedBoneAIndex; // 0x140
        struct FCachedRigElement CachedBoneBIndex; // 0x154
        struct FCachedRigElement CachedEffectorBoneIndex; // 0x168
        struct FCachedRigElement CachedPoleVectorSpaceIndex; // 0x17c

    };

    struct FRigUnit_Distance_VectorVector : FRigUnit //ScriptStruct ControlRig.RigUnit_Distance_VectorVector
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Argument0; // 0x8
        struct FVector Argument1; // 0x14
        float Result; // 0x20

    };

    struct FRigUnit_BinaryVectorOp : FRigUnit //ScriptStruct ControlRig.RigUnit_BinaryVectorOp
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Argument0; // 0x8
        struct FVector Argument1; // 0x14
        struct FVector Result; // 0x20

    };

    struct FRigUnit_Divide_VectorVector : FRigUnit_BinaryVectorOp //ScriptStruct ControlRig.RigUnit_Divide_VectorVector
    {
    public:


    };

    struct FRigUnit_Subtract_VectorVector : FRigUnit_BinaryVectorOp //ScriptStruct ControlRig.RigUnit_Subtract_VectorVector
    {
    public:


    };

    struct FRigUnit_Add_VectorVector : FRigUnit_BinaryVectorOp //ScriptStruct ControlRig.RigUnit_Add_VectorVector
    {
    public:


    };

    struct FRigUnit_Multiply_VectorVector : FRigUnit_BinaryVectorOp //ScriptStruct ControlRig.RigUnit_Multiply_VectorVector
    {
    public:


    };

    struct FRigUnit_VerletIntegrateVector : FRigUnit_SimBase //ScriptStruct ControlRig.RigUnit_VerletIntegrateVector
    {
    //Children Prop Count (Fields): 9
    public:

        struct FVector Target; // 0x8
        float Strength; // 0x14
        float Damp; // 0x18
        float Blend; // 0x1c
        struct FVector position; // 0x20
        struct FVector Velocity; // 0x2c
        struct FVector Acceleration; // 0x38
        struct FCRSimPoint Point; // 0x44
        bool bInitialized; // 0x6c

    };

    struct FRigUnit_VisualDebugTransformItemSpace : FRigUnit_DebugBase //ScriptStruct ControlRig.RigUnit_VisualDebugTransformItemSpace
    {
    //Children Prop Count (Fields): 5
    public:

        struct FTransform Value; // 0x10
        bool bEnabled; // 0x40
        float Thickness; // 0x44
        float Scale; // 0x48
        struct FRigElementKey Space; // 0x4c

    };

    struct FRigUnit_VisualDebugTransform : FRigUnit_DebugBase //ScriptStruct ControlRig.RigUnit_VisualDebugTransform
    {
    //Children Prop Count (Fields): 5
    public:

        struct FTransform Value; // 0x10
        bool bEnabled; // 0x40
        float Thickness; // 0x44
        float Scale; // 0x48
        struct FName BoneSpace; // 0x4c

    };

    struct FRigUnit_VisualDebugQuatItemSpace : FRigUnit_DebugBase //ScriptStruct ControlRig.RigUnit_VisualDebugQuatItemSpace
    {
    //Children Prop Count (Fields): 5
    public:

        struct FQuat Value; // 0x10
        bool bEnabled; // 0x20
        float Thickness; // 0x24
        float Scale; // 0x28
        struct FRigElementKey Space; // 0x2c

    };

    struct FRigUnit_VisualDebugQuat : FRigUnit_DebugBase //ScriptStruct ControlRig.RigUnit_VisualDebugQuat
    {
    //Children Prop Count (Fields): 5
    public:

        struct FQuat Value; // 0x10
        bool bEnabled; // 0x20
        float Thickness; // 0x24
        float Scale; // 0x28
        struct FName BoneSpace; // 0x2c

    };

    struct FRigUnit_VisualDebugVectorItemSpace : FRigUnit_DebugBase //ScriptStruct ControlRig.RigUnit_VisualDebugVectorItemSpace
    {
    //Children Prop Count (Fields): 7
    public:

        struct FVector Value; // 0x8
        bool bEnabled; // 0x14
        enum class ERigUnitVisualDebugPointMode Mode; // 0x15
        struct FLinearColor Color; // 0x18
        float Thickness; // 0x28
        float Scale; // 0x2c
        struct FRigElementKey Space; // 0x30

    };

    struct FRigUnit_VisualDebugVector : FRigUnit_DebugBase //ScriptStruct ControlRig.RigUnit_VisualDebugVector
    {
    //Children Prop Count (Fields): 7
    public:

        struct FVector Value; // 0x8
        bool bEnabled; // 0x14
        enum class ERigUnitVisualDebugPointMode Mode; // 0x15
        struct FLinearColor Color; // 0x18
        float Thickness; // 0x28
        float Scale; // 0x2c
        struct FName BoneSpace; // 0x30

    };

    struct FRigUnit_SphereTraceWorld : FRigUnit //ScriptStruct ControlRig.RigUnit_SphereTraceWorld
    {
    //Children Prop Count (Fields): 7
    public:

        struct FVector Start; // 0x8
        struct FVector End; // 0x14
        enum class ECollisionChannel Channel; // 0x20
        float Radius; // 0x24
        bool bHit; // 0x28
        struct FVector HitLocation; // 0x2c
        struct FVector HitNormal; // 0x38

    };

    struct FRigUnit_ToRigSpace_Rotation : FRigUnit //ScriptStruct ControlRig.RigUnit_ToRigSpace_Rotation
    {
    //Children Prop Count (Fields): 2
    public:

        struct FQuat Rotation; // 0x10
        struct FQuat Global; // 0x20

    };

    struct FRigUnit_ToWorldSpace_Rotation : FRigUnit //ScriptStruct ControlRig.RigUnit_ToWorldSpace_Rotation
    {
    //Children Prop Count (Fields): 2
    public:

        struct FQuat Rotation; // 0x10
        struct FQuat World; // 0x20

    };

    struct FRigUnit_ToRigSpace_Location : FRigUnit //ScriptStruct ControlRig.RigUnit_ToRigSpace_Location
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Location; // 0x8
        struct FVector Global; // 0x14

    };

    struct FRigUnit_ToWorldSpace_Location : FRigUnit //ScriptStruct ControlRig.RigUnit_ToWorldSpace_Location
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Location; // 0x8
        struct FVector World; // 0x14

    };

    struct FRigUnit_ToRigSpace_Transform : FRigUnit //ScriptStruct ControlRig.RigUnit_ToRigSpace_Transform
    {
    //Children Prop Count (Fields): 2
    public:

        struct FTransform Transform; // 0x10
        struct FTransform Global; // 0x40

    };

    struct FRigUnit_ToWorldSpace_Transform : FRigUnit //ScriptStruct ControlRig.RigUnit_ToWorldSpace_Transform
    {
    //Children Prop Count (Fields): 2
    public:

        struct FTransform Transform; // 0x10
        struct FTransform World; // 0x40

    };

    struct FStructReference //ScriptStruct ControlRig.StructReference
    {
    public:


    };

    struct FPoolSpawnOptions //ScriptStruct OBJPool.PoolSpawnOptions
    {
    //Children Prop Count (Fields): 4
    public:

        enum class EPoolCollisionType CollisionType; // 0x0
        bool EnableCollision; // 0x1
        bool SimulatePhysics; // 0x2
        bool ActorTickEnabled; // 0x3

    };

    struct FNiagaraCompileHash //ScriptStruct NiagaraCore.NiagaraCompileHash
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<char> DataHash; // 0x0

    };

    struct FMovieSceneNiagaraParameterSectionTemplate : FMovieSceneEvalTemplate //ScriptStruct Niagara.MovieSceneNiagaraParameterSectionTemplate
    {
    //Children Prop Count (Fields): 1
    public:

        struct FNiagaraVariable Parameter; // 0x20

    };

    struct FNiagaraVariableBase //ScriptStruct Niagara.NiagaraVariableBase
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Name; // 0x0
        struct FNiagaraTypeDefinitionHandle TypeDefHandle; // 0x8

    };

    struct FNiagaraTypeDefinitionHandle //ScriptStruct Niagara.NiagaraTypeDefinitionHandle
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t RegisteredTypeIndex; // 0x0

    };

    struct FNiagaraVariable : FNiagaraVariableBase //ScriptStruct Niagara.NiagaraVariable
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<char> VarData; // 0x10

    };

    struct FMovieSceneNiagaraBoolParameterSectionTemplate : FMovieSceneNiagaraParameterSectionTemplate //ScriptStruct Niagara.MovieSceneNiagaraBoolParameterSectionTemplate
    {
    //Children Prop Count (Fields): 1
    public:

        struct FMovieSceneBoolChannel BoolChannel; // 0x40

    };

    struct FMovieSceneNiagaraColorParameterSectionTemplate : FMovieSceneNiagaraParameterSectionTemplate //ScriptStruct Niagara.MovieSceneNiagaraColorParameterSectionTemplate
    {
    //Children Prop Count (Fields): 4
    public:

        struct FMovieSceneFloatChannel RedChannel; // 0x40
        struct FMovieSceneFloatChannel GreenChannel; // 0xe0
        struct FMovieSceneFloatChannel BlueChannel; // 0x180
        struct FMovieSceneFloatChannel AlphaChannel; // 0x220

    };

    struct FMovieSceneNiagaraFloatParameterSectionTemplate : FMovieSceneNiagaraParameterSectionTemplate //ScriptStruct Niagara.MovieSceneNiagaraFloatParameterSectionTemplate
    {
    //Children Prop Count (Fields): 1
    public:

        struct FMovieSceneFloatChannel FloatChannel; // 0x40

    };

    struct FMovieSceneNiagaraIntegerParameterSectionTemplate : FMovieSceneNiagaraParameterSectionTemplate //ScriptStruct Niagara.MovieSceneNiagaraIntegerParameterSectionTemplate
    {
    //Children Prop Count (Fields): 1
    public:

        struct FMovieSceneIntegerChannel IntegerChannel; // 0x40

    };

    struct FMovieSceneTrackImplementation : FMovieSceneEvalTemplateBase //ScriptStruct MovieScene.MovieSceneTrackImplementation
    {
    public:


    };

    struct FMovieSceneNiagaraSystemTrackImplementation : FMovieSceneTrackImplementation //ScriptStruct Niagara.MovieSceneNiagaraSystemTrackImplementation
    {
    //Children Prop Count (Fields): 6
    public:

        struct FFrameNumber SpawnSectionStartFrame; // 0x10
        struct FFrameNumber SpawnSectionEndFrame; // 0x14
        enum class ENiagaraSystemSpawnSectionStartBehavior SpawnSectionStartBehavior; // 0x18
        enum class ENiagaraSystemSpawnSectionEvaluateBehavior SpawnSectionEvaluateBehavior; // 0x1c
        enum class ENiagaraSystemSpawnSectionEndBehavior SpawnSectionEndBehavior; // 0x20
        enum class ENiagaraAgeUpdateMode AgeUpdateMode; // 0x24

    };

    struct FMovieSceneNiagaraSystemTrackTemplate : FMovieSceneEvalTemplate //ScriptStruct Niagara.MovieSceneNiagaraSystemTrackTemplate
    {
    public:


    };

    struct FMovieSceneNiagaraVectorParameterSectionTemplate : FMovieSceneNiagaraParameterSectionTemplate //ScriptStruct Niagara.MovieSceneNiagaraVectorParameterSectionTemplate
    {
    //Children Prop Count (Fields): 2
    public:

        struct FMovieSceneFloatChannel VectorChannels; // 0x40
        int32_t ChannelsUsed; // 0x2c0

    };

    struct FNiagaraRandInfo //ScriptStruct Niagara.NiagaraRandInfo
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t Seed1; // 0x0
        int32_t Seed2; // 0x4
        int32_t Seed3; // 0x8

    };

    struct FNiagaraUserParameterBinding //ScriptStruct Niagara.NiagaraUserParameterBinding
    {
    //Children Prop Count (Fields): 1
    public:

        struct FNiagaraVariable Parameter; // 0x0

    };

    struct FNiagaraScriptVariableBinding //ScriptStruct Niagara.NiagaraScriptVariableBinding
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName Name; // 0x0

    };

    struct FNiagaraVariableDataInterfaceBinding //ScriptStruct Niagara.NiagaraVariableDataInterfaceBinding
    {
    //Children Prop Count (Fields): 1
    public:

        struct FNiagaraVariable BoundVariable; // 0x0

    };

    struct FNiagaraMaterialAttributeBinding //ScriptStruct Niagara.NiagaraMaterialAttributeBinding
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName MaterialParameterName; // 0x0
        struct FNiagaraVariableBase NiagaraVariable; // 0x8
        struct FNiagaraVariableBase ResolvedNiagaraVariable; // 0x14
        struct FNiagaraVariableBase NiagaraChildVariable; // 0x20

    };

    struct FNiagaraVariableAttributeBinding //ScriptStruct Niagara.NiagaraVariableAttributeBinding
    {
    //Children Prop Count (Fields): 6
    public:

        struct FNiagaraVariableBase ParamMapVariable; // 0x0
        struct FNiagaraVariable DataSetVariable; // 0x10
        struct FNiagaraVariable RootVariable; // 0x30
        enum class ENiagaraBindingSource BindingSourceMode; // 0x50
        char bBindingExistsOnSource; // 0x54
        char bIsCachedParticleValue; // 0x54

    };

    struct FNiagaraVariableInfo //ScriptStruct Niagara.NiagaraVariableInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FNiagaraVariable Variable; // 0x0
        struct FText Definition; // 0x20
        class UNiagaraDataInterface* DataInterface; // 0x38

    };

    struct FNiagaraSystemUpdateContext //ScriptStruct Niagara.NiagaraSystemUpdateContext
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<class UNiagaraComponent*> ComponentsToReset; // 0x0
        struct TArray<class UNiagaraComponent*> ComponentsToReInit; // 0x10
        struct TArray<class UNiagaraComponent*> ComponentsToNotifySimDestroy; // 0x20
        struct TArray<class UNiagaraSystem*> SystemSimsToDestroy; // 0x30

    };

    struct FVMExternalFunctionBindingInfo //ScriptStruct Niagara.VMExternalFunctionBindingInfo
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName Name; // 0x0
        struct FName OwnerName; // 0x8
        struct TArray<bool> InputParamLocations; // 0x10
        int32_t NumOutputs; // 0x20
        struct TArray<struct FVMFunctionSpecifier> FunctionSpecifiers; // 0x28

    };

    struct FVMFunctionSpecifier //ScriptStruct Niagara.VMFunctionSpecifier
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Key; // 0x0
        struct FName Value; // 0x8

    };

    struct FNiagaraStatScope //ScriptStruct Niagara.NiagaraStatScope
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName FullName; // 0x0
        struct FName FriendlyName; // 0x8

    };

    struct FNiagaraScriptDataInterfaceCompileInfo //ScriptStruct Niagara.NiagaraScriptDataInterfaceCompileInfo
    {
    //Children Prop Count (Fields): 6
    public:

        struct FName Name; // 0x0
        int32_t UserPtrIdx; // 0x8
        struct FNiagaraTypeDefinition Type; // 0x10
        struct FName RegisteredParameterMapRead; // 0x20
        struct FName RegisteredParameterMapWrite; // 0x28
        bool bIsPlaceholder; // 0x30

    };

    struct FNiagaraTypeDefinition //ScriptStruct Niagara.NiagaraTypeDefinition
    {
    //Children Prop Count (Fields): 2
    public:

        class UObject* ClassStructOrEnum; // 0x0
        uint16_t UnderlyingType; // 0x8

    };

    struct FNiagaraScriptDataInterfaceInfo //ScriptStruct Niagara.NiagaraScriptDataInterfaceInfo
    {
    //Children Prop Count (Fields): 6
    public:

        class UNiagaraDataInterface* DataInterface; // 0x0
        struct FName Name; // 0x8
        int32_t UserPtrIdx; // 0x10
        struct FNiagaraTypeDefinition Type; // 0x18
        struct FName RegisteredParameterMapRead; // 0x28
        struct FName RegisteredParameterMapWrite; // 0x30

    };

    struct FNiagaraFunctionSignature //ScriptStruct Niagara.NiagaraFunctionSignature
    {
    //Children Prop Count (Fields): 16
    public:

        struct FName Name; // 0x0
        struct TArray<struct FNiagaraVariable> Inputs; // 0x8
        struct TArray<struct FNiagaraVariable> Outputs; // 0x18
        struct FName OwnerName; // 0x28
        char bRequiresContext; // 0x30
        char bRequiresExecPin; // 0x30
        char bMemberFunction; // 0x30
        char bExperimental; // 0x30
        char bSupportsCPU; // 0x30
        char bSupportsGPU; // 0x30
        char bWriteFunction; // 0x30
        char bSoftDeprecatedFunction; // 0x30
        int32_t ModuleUsageBitmask; // 0x34
        int32_t ContextStageMinIndex; // 0x38
        int32_t ContextStageMaxIndex; // 0x3c
        struct TMap<struct FName, struct FName> FunctionSpecifiers; // 0x40

    };

    struct FNiagaraScriptDataUsageInfo //ScriptStruct Niagara.NiagaraScriptDataUsageInfo
    {
    //Children Prop Count (Fields): 1
    public:

        bool bReadsAttributeData; // 0x0

    };

    struct FNiagaraDataSetProperties //ScriptStruct Niagara.NiagaraDataSetProperties
    {
    //Children Prop Count (Fields): 2
    public:

        struct FNiagaraDataSetID ID; // 0x0
        struct TArray<struct FNiagaraVariable> Variables; // 0x10

    };

    struct FNiagaraDataSetID //ScriptStruct Niagara.NiagaraDataSetID
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Name; // 0x0
        enum class ENiagaraDataSetType Type; // 0x8

    };

    struct FNiagaraMaterialOverride //ScriptStruct Niagara.NiagaraMaterialOverride
    {
    //Children Prop Count (Fields): 3
    public:

        class UMaterialInterface* Material; // 0x0
        uint32_t MaterialSubIndex; // 0x8
        class UNiagaraRendererProperties* EmitterRendererProperty; // 0x10

    };

    struct FNCPool //ScriptStruct Niagara.NCPool
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FNCPoolElement> FreeElements; // 0x0
        struct TArray<class UNiagaraComponent*> InUseComponents_Auto; // 0x10
        struct TArray<class UNiagaraComponent*> InUseComponents_Manual; // 0x20

    };

    struct FNCPoolElement //ScriptStruct Niagara.NCPoolElement
    {
    //Children Prop Count (Fields): 1
    public:

        class UNiagaraComponent* Component; // 0x0

    };

    struct FNiagaraComponentPropertyBinding //ScriptStruct Niagara.NiagaraComponentPropertyBinding
    {
    //Children Prop Count (Fields): 5
    public:

        struct FNiagaraVariableAttributeBinding AttributeBinding; // 0x0
        struct FName PropertyName; // 0x58
        struct FNiagaraTypeDefinition PropertyType; // 0x60
        struct FName MetadataSetterName; // 0x70
        struct FNiagaraVariable WritableValue; // 0x78

    };

    struct FNiagaraEmitterNameSettingsRef //ScriptStruct Niagara.NiagaraEmitterNameSettingsRef
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName SystemName; // 0x0
        struct FString EmitterName; // 0x8

    };

    struct FBasicParticleData //ScriptStruct Niagara.BasicParticleData
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector position; // 0x0
        float Size; // 0xc
        struct FVector Velocity; // 0x10

    };

    struct FMeshTriCoordinate //ScriptStruct Niagara.MeshTriCoordinate
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t Tri; // 0x0
        struct FVector BaryCoord; // 0x4

    };

    struct FNDIStaticMeshSectionFilter //ScriptStruct Niagara.NDIStaticMeshSectionFilter
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<int32_t> AllowedMaterialSlots; // 0x0

    };

    struct FNiagaraDataSetCompiledData //ScriptStruct Niagara.NiagaraDataSetCompiledData
    {
    //Children Prop Count (Fields): 8
    public:

        struct TArray<struct FNiagaraVariable> Variables; // 0x0
        struct TArray<struct FNiagaraVariableLayoutInfo> VariableLayouts; // 0x10
        struct FNiagaraDataSetID ID; // 0x20
        uint32_t TotalFloatComponents; // 0x2c
        uint32_t TotalInt32Components; // 0x30
        uint32_t TotalHalfComponents; // 0x34
        char bRequiresPersistentIDs; // 0x38
        enum class ENiagaraSimTarget SimTarget; // 0x3c

    };

    struct FNiagaraVariableLayoutInfo //ScriptStruct Niagara.NiagaraVariableLayoutInfo
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t FloatComponentStart; // 0x0
        uint32_t Int32ComponentStart; // 0x4
        uint32_t HalfComponentStart; // 0x8
        struct FNiagaraTypeLayoutInfo LayoutInfo; // 0x10

    };

    struct FNiagaraTypeLayoutInfo //ScriptStruct Niagara.NiagaraTypeLayoutInfo
    {
    //Children Prop Count (Fields): 6
    public:

        struct TArray<uint32_t> FloatComponentByteOffsets; // 0x0
        struct TArray<uint32_t> FloatComponentRegisterOffsets; // 0x10
        struct TArray<uint32_t> Int32ComponentByteOffsets; // 0x20
        struct TArray<uint32_t> Int32ComponentRegisterOffsets; // 0x30
        struct TArray<uint32_t> HalfComponentByteOffsets; // 0x40
        struct TArray<uint32_t> HalfComponentRegisterOffsets; // 0x50

    };

    struct FNiagaraGraphViewSettings //ScriptStruct Niagara.NiagaraGraphViewSettings
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector2D Location; // 0x0
        float Zoom; // 0x8
        bool bIsValid; // 0xc

    };

    struct FNiagaraEmitterScalabilityOverrides //ScriptStruct Niagara.NiagaraEmitterScalabilityOverrides
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FNiagaraEmitterScalabilityOverride> Overrides; // 0x0

    };

    struct FNiagaraEmitterScalabilitySettings //ScriptStruct Niagara.NiagaraEmitterScalabilitySettings
    {
    //Children Prop Count (Fields): 3
    public:

        struct FNiagaraPlatformSet Platforms; // 0x0
        char bScaleSpawnCount; // 0x30
        float SpawnCountScale; // 0x34

    };

    struct FNiagaraPlatformSet //ScriptStruct Niagara.NiagaraPlatformSet
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t QualityLevelMask; // 0x0
        struct TArray<struct FNiagaraDeviceProfileStateEntry> DeviceProfileStates; // 0x8
        struct TArray<struct FNiagaraPlatformSetCVarCondition> CVarConditions; // 0x18

    };

    struct FNiagaraPlatformSetCVarCondition //ScriptStruct Niagara.NiagaraPlatformSetCVarCondition
    {
    //Children Prop Count (Fields): 10
    public:

        struct FName CVarName; // 0x0
        bool Value; // 0x8
        int32_t MinInt; // 0xc
        int32_t MaxInt; // 0x10
        float MinFloat; // 0x14
        float MaxFloat; // 0x18
        char bUseMinInt; // 0x1c
        char bUseMaxInt; // 0x1c
        char bUseMinFloat; // 0x1c
        char bUseMaxFloat; // 0x1c

    };

    struct FNiagaraDeviceProfileStateEntry //ScriptStruct Niagara.NiagaraDeviceProfileStateEntry
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName ProfileName; // 0x0
        uint32_t QualityLevelMask; // 0x8
        uint32_t SetQualityLevelMask; // 0xc

    };

    struct FNiagaraEmitterScalabilityOverride : FNiagaraEmitterScalabilitySettings //ScriptStruct Niagara.NiagaraEmitterScalabilityOverride
    {
    //Children Prop Count (Fields): 1
    public:

        char bOverrideSpawnCountScale; // 0x38

    };

    struct FNiagaraEmitterScalabilitySettingsArray //ScriptStruct Niagara.NiagaraEmitterScalabilitySettingsArray
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FNiagaraEmitterScalabilitySettings> Settings; // 0x0

    };

    struct FNiagaraSystemScalabilityOverrides //ScriptStruct Niagara.NiagaraSystemScalabilityOverrides
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FNiagaraSystemScalabilityOverride> Overrides; // 0x0

    };

    struct FNiagaraSystemScalabilitySettings //ScriptStruct Niagara.NiagaraSystemScalabilitySettings
    {
    //Children Prop Count (Fields): 9
    public:

        struct FNiagaraPlatformSet Platforms; // 0x0
        char bCullByDistance; // 0x30
        char bCullMaxInstanceCount; // 0x30
        char bCullPerSystemMaxInstanceCount; // 0x30
        char bCullByMaxTimeWithoutRender; // 0x30
        float MaxDistance; // 0x34
        int32_t MaxInstances; // 0x38
        int32_t MaxSystemInstances; // 0x3c
        float MaxTimeWithoutRender; // 0x40

    };

    struct FNiagaraSystemScalabilityOverride : FNiagaraSystemScalabilitySettings //ScriptStruct Niagara.NiagaraSystemScalabilityOverride
    {
    //Children Prop Count (Fields): 4
    public:

        char bOverrideDistanceSettings; // 0x48
        char bOverrideInstanceCountSettings; // 0x48
        char bOverridePerSystemInstanceCountSettings; // 0x48
        char bOverrideTimeSinceRendererSettings; // 0x48

    };

    struct FNiagaraSystemScalabilitySettingsArray //ScriptStruct Niagara.NiagaraSystemScalabilitySettingsArray
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FNiagaraSystemScalabilitySettings> Settings; // 0x0

    };

    struct FNiagaraDetailsLevelScaleOverrides //ScriptStruct Niagara.NiagaraDetailsLevelScaleOverrides
    {
    //Children Prop Count (Fields): 5
    public:

        float Low; // 0x0
        float Medium; // 0x4
        float High; // 0x8
        float Epic; // 0xc
        float Cine; // 0x10

    };

    struct FNiagaraEmitterScriptProperties //ScriptStruct Niagara.NiagaraEmitterScriptProperties
    {
    //Children Prop Count (Fields): 3
    public:

        class UNiagaraScript* Script; // 0x0
        struct TArray<struct FNiagaraEventReceiverProperties> EventReceivers; // 0x8
        struct TArray<struct FNiagaraEventGeneratorProperties> EventGenerators; // 0x18

    };

    struct FNiagaraEventGeneratorProperties //ScriptStruct Niagara.NiagaraEventGeneratorProperties
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t MaxEventsPerFrame; // 0x0
        struct FName ID; // 0x4
        struct FNiagaraDataSetCompiledData DataSetCompiledData; // 0x10

    };

    struct FNiagaraEventReceiverProperties //ScriptStruct Niagara.NiagaraEventReceiverProperties
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Name; // 0x0
        struct FName SourceEventGenerator; // 0x8
        struct FName SourceEmitter; // 0x10

    };

    struct FNiagaraEventScriptProperties : FNiagaraEmitterScriptProperties //ScriptStruct Niagara.NiagaraEventScriptProperties
    {
    //Children Prop Count (Fields): 7
    public:

        enum class EScriptExecutionMode ExecutionMode; // 0x28
        uint32_t SpawnNumber; // 0x2c
        uint32_t MaxEventsPerFrame; // 0x30
        struct FGuid SourceEmitterID; // 0x34
        struct FName SourceEventName; // 0x44
        bool bRandomSpawnNumber; // 0x4c
        uint32_t MinSpawnNumber; // 0x50

    };

    struct FNiagaraEmitterHandle //ScriptStruct Niagara.NiagaraEmitterHandle
    {
    //Children Prop Count (Fields): 5
    public:

        struct FGuid ID; // 0x0
        struct FName IdName; // 0x10
        bool bIsEnabled; // 0x18
        struct FName Name; // 0x1c
        class UNiagaraEmitter* Instance; // 0x28

    };

    struct FNiagaraCollisionEventPayload //ScriptStruct Niagara.NiagaraCollisionEventPayload
    {
    //Children Prop Count (Fields): 5
    public:

        struct FVector CollisionPos; // 0x0
        struct FVector CollisionNormal; // 0xc
        struct FVector CollisionVelocity; // 0x18
        int32_t ParticleIndex; // 0x24
        int32_t PhysicalMaterialIndex; // 0x28

    };

    struct FNiagaraMeshMaterialOverride //ScriptStruct Niagara.NiagaraMeshMaterialOverride
    {
    //Children Prop Count (Fields): 2
    public:

        class UMaterialInterface* ExplicitMat; // 0x0
        struct FNiagaraUserParameterBinding UserParamBinding; // 0x8

    };

    struct FNiagaraParameters //ScriptStruct Niagara.NiagaraParameters
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FNiagaraVariable> Parameters; // 0x0

    };

    struct FNiagaraParameterStore //ScriptStruct Niagara.NiagaraParameterStore
    {
    //Children Prop Count (Fields): 5
    public:

        class UObject* Owner; // 0x8
        struct TArray<struct FNiagaraVariableWithOffset> SortedParameterOffsets; // 0x10
        struct TArray<char> ParameterData; // 0x20
        struct TArray<class UNiagaraDataInterface*> DataInterfaces; // 0x30
        struct TArray<class UObject*> UObjects; // 0x40

    };

    struct FNiagaraVariableWithOffset : FNiagaraVariableBase //ScriptStruct Niagara.NiagaraVariableWithOffset
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t Offset; // 0xc

    };

    struct FNiagaraBoundParameter //ScriptStruct Niagara.NiagaraBoundParameter
    {
    //Children Prop Count (Fields): 3
    public:

        struct FNiagaraVariable Parameter; // 0x0
        int32_t SrcOffset; // 0x20
        int32_t DestOffset; // 0x24

    };

    struct FNiagaraPlatformSetConflictInfo //ScriptStruct Niagara.NiagaraPlatformSetConflictInfo
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t SetAIndex; // 0x0
        int32_t SetBIndex; // 0x4
        struct TArray<struct FNiagaraPlatformSetConflictEntry> Conflicts; // 0x8

    };

    struct FNiagaraPlatformSetConflictEntry //ScriptStruct Niagara.NiagaraPlatformSetConflictEntry
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName ProfileName; // 0x0
        int32_t QualityLevelMask; // 0x8

    };

    struct FNiagaraRibbonUVSettings //ScriptStruct Niagara.NiagaraRibbonUVSettings
    {
    //Children Prop Count (Fields): 8
    public:

        enum class ENiagaraRibbonUVEdgeMode LeadingEdgeMode; // 0x0
        enum class ENiagaraRibbonUVEdgeMode TrailingEdgeMode; // 0x4
        enum class ENiagaraRibbonUVDistributionMode DistributionMode; // 0x8
        float TilingLength; // 0xc
        struct FVector2D Offset; // 0x10
        struct FVector2D Scale; // 0x18
        bool bEnablePerParticleUOverride; // 0x20
        bool bEnablePerParticleVRangeOverride; // 0x21

    };

    struct FNiagaraScalabilityManager //ScriptStruct Niagara.NiagaraScalabilityManager
    {
    //Children Prop Count (Fields): 2
    public:

        class UNiagaraEffectType* EffectType; // 0x0
        struct TArray<class UNiagaraComponent*> ManagedComponents; // 0x8

    };

    struct FNiagaraVMExecutableData //ScriptStruct Niagara.NiagaraVMExecutableData
    {
    //Children Prop Count (Fields): 16
    public:

        struct TArray<char> ByteCode; // 0x0
        struct TArray<char> OptimizedByteCode; // 0x10
        int32_t NumTempRegisters; // 0x20
        int32_t NumUserPtrs; // 0x24
        struct TArray<char> ScriptLiterals; // 0x28
        struct TArray<struct FNiagaraVariable> Attributes; // 0x38
        struct FNiagaraScriptDataUsageInfo DataUsage; // 0x48
        struct TArray<struct FNiagaraScriptDataInterfaceCompileInfo> DataInterfaceInfo; // 0x50
        struct TArray<struct FVMExternalFunctionBindingInfo> CalledVMExternalFunctions; // 0x60
        struct TArray<struct FNiagaraDataSetID> ReadDataSets; // 0x80
        struct TArray<struct FNiagaraDataSetProperties> WriteDataSets; // 0x90
        struct TArray<struct FNiagaraStatScope> StatScopes; // 0xa0
        struct TArray<struct FNiagaraDataInterfaceGPUParamInfo> DIParamInfo; // 0xb0
        enum class ENiagaraScriptCompileStatus LastCompileStatus; // 0xc0
        struct TArray<struct FSimulationStageMetaData> SimulationStageMetaData; // 0xc8
        char bReadsSignificanceIndex; // 0xd8

    };

    struct FSimulationStageMetaData //ScriptStruct NiagaraShader.SimulationStageMetaData
    {
    //Children Prop Count (Fields): 8
    public:

        struct FName SimulationStageName; // 0x0
        struct FName IterationSource; // 0x8
        char bSpawnOnly; // 0x10
        char bWritesParticles; // 0x10
        char bPartialParticleUpdate; // 0x10
        struct TArray<struct FName> OutputDestinations; // 0x18
        int32_t MinStage; // 0x28
        int32_t MaxStage; // 0x2c

    };

    struct FNiagaraDataInterfaceGPUParamInfo //ScriptStruct NiagaraShader.NiagaraDataInterfaceGPUParamInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString DataInterfaceHLSLSymbol; // 0x0
        struct FString DIClassName; // 0x10
        struct TArray<struct FNiagaraDataInterfaceGeneratedFunction> GeneratedFunctions; // 0x20

    };

    struct FNiagaraDataInterfaceGeneratedFunction //ScriptStruct NiagaraShader.NiagaraDataInterfaceGeneratedFunction
    {
    public:


    };

    struct FNiagaraVMExecutableDataId //ScriptStruct Niagara.NiagaraVMExecutableDataId
    {
    //Children Prop Count (Fields): 8
    public:

        struct FGuid CompilerVersionID; // 0x0
        enum class ENiagaraScriptUsage ScriptUsageType; // 0x10
        struct FGuid ScriptUsageTypeID; // 0x14
        char bUsesRapidIterationParams; // 0x24
        char bInterpolatedSpawn; // 0x24
        char bRequiresPersistentIDs; // 0x24
        struct FGuid BaseScriptID; // 0x28
        struct FNiagaraCompileHash BaseScriptCompileHash; // 0x38

    };

    struct FNiagaraModuleDependency //ScriptStruct Niagara.NiagaraModuleDependency
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName ID; // 0x0
        enum class ENiagaraModuleDependencyType Type; // 0x8
        enum class ENiagaraModuleDependencyScriptConstraint ScriptConstraint; // 0x9
        struct FText Description; // 0x10

    };

    struct FNiagaraScriptInstanceParameterStore : FNiagaraParameterStore //ScriptStruct Niagara.NiagaraScriptInstanceParameterStore
    {
    public:


    };

    struct FNiagaraScriptExecutionParameterStore : FNiagaraParameterStore //ScriptStruct Niagara.NiagaraScriptExecutionParameterStore
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t ParameterSize; // 0x78
        uint32_t PaddedParameterSize; // 0x7c
        struct TArray<struct FNiagaraScriptExecutionPaddingInfo> PaddingInfo; // 0x80
        char bInitialized; // 0x90

    };

    struct FNiagaraScriptExecutionPaddingInfo //ScriptStruct Niagara.NiagaraScriptExecutionPaddingInfo
    {
    //Children Prop Count (Fields): 4
    public:

        uint16_t SrcOffset; // 0x0
        uint16_t DestOffset; // 0x2
        uint16_t SrcSize; // 0x4
        uint16_t DestSize; // 0x6

    };

    struct FNiagaraScriptHighlight //ScriptStruct Niagara.NiagaraScriptHighlight
    {
    //Children Prop Count (Fields): 2
    public:

        struct FLinearColor Color; // 0x0
        struct FText DisplayName; // 0x10

    };

    struct FNiagaraSystemCompileRequest //ScriptStruct Niagara.NiagaraSystemCompileRequest
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class UObject*> RootObjects; // 0x8

    };

    struct FEmitterCompiledScriptPair //ScriptStruct Niagara.EmitterCompiledScriptPair
    {
    public:


    };

    struct FNiagaraSystemCompiledData //ScriptStruct Niagara.NiagaraSystemCompiledData
    {
    //Children Prop Count (Fields): 12
    public:

        struct FNiagaraParameterStore InstanceParamStore; // 0x0
        struct FNiagaraDataSetCompiledData DataSetCompiledData; // 0x78
        struct FNiagaraDataSetCompiledData SpawnInstanceParamsDataSetCompiledData; // 0xb8
        struct FNiagaraDataSetCompiledData UpdateInstanceParamsDataSetCompiledData; // 0xf8
        struct FNiagaraParameterDataSetBindingCollection SpawnInstanceGlobalBinding; // 0x138
        struct FNiagaraParameterDataSetBindingCollection SpawnInstanceSystemBinding; // 0x158
        struct FNiagaraParameterDataSetBindingCollection SpawnInstanceOwnerBinding; // 0x178
        struct TArray<struct FNiagaraParameterDataSetBindingCollection> SpawnInstanceEmitterBindings; // 0x198
        struct FNiagaraParameterDataSetBindingCollection UpdateInstanceGlobalBinding; // 0x1a8
        struct FNiagaraParameterDataSetBindingCollection UpdateInstanceSystemBinding; // 0x1c8
        struct FNiagaraParameterDataSetBindingCollection UpdateInstanceOwnerBinding; // 0x1e8
        struct TArray<struct FNiagaraParameterDataSetBindingCollection> UpdateInstanceEmitterBindings; // 0x208

    };

    struct FNiagaraParameterDataSetBindingCollection //ScriptStruct Niagara.NiagaraParameterDataSetBindingCollection
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FNiagaraParameterDataSetBinding> FloatOffsets; // 0x0
        struct TArray<struct FNiagaraParameterDataSetBinding> Int32Offsets; // 0x10

    };

    struct FNiagaraParameterDataSetBinding //ScriptStruct Niagara.NiagaraParameterDataSetBinding
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t ParameterOffset; // 0x0
        int32_t DataSetComponentOffset; // 0x4

    };

    struct FNiagaraEmitterCompiledData //ScriptStruct Niagara.NiagaraEmitterCompiledData
    {
    //Children Prop Count (Fields): 9
    public:

        struct TArray<struct FName> SpawnAttributes; // 0x0
        struct FNiagaraVariable EmitterSpawnIntervalVar; // 0x10
        struct FNiagaraVariable EmitterInterpSpawnStartDTVar; // 0x30
        struct FNiagaraVariable EmitterSpawnGroupVar; // 0x50
        struct FNiagaraVariable EmitterAgeVar; // 0x70
        struct FNiagaraVariable EmitterRandomSeedVar; // 0x90
        struct FNiagaraVariable EmitterInstanceSeedVar; // 0xb0
        struct FNiagaraVariable EmitterTotalSpawnedParticlesVar; // 0xd0
        struct FNiagaraDataSetCompiledData DataSetCompiledData; // 0xf0

    };

    struct FNiagaraVariableMetaData //ScriptStruct Niagara.NiagaraVariableMetaData
    {
    //Children Prop Count (Fields): 18
    public:

        struct FText Description; // 0x0
        struct FText CategoryName; // 0x18
        bool bAdvancedDisplay; // 0x30
        int32_t EditorSortPriority; // 0x34
        bool bInlineEditConditionToggle; // 0x38
        struct FNiagaraInputConditionMetadata EditCondition; // 0x40
        struct FNiagaraInputConditionMetadata VisibleCondition; // 0x58
        struct TMap<struct FName, struct FString> PropertyMetaData; // 0x70
        struct FName ParentAttribute; // 0xc0
        struct FName ScopeName; // 0xc8
        enum class ENiagaraScriptParameterUsage Usage; // 0xd0
        bool bIsStaticSwitch; // 0xd4
        int32_t StaticSwitchDefaultValue; // 0xd8
        bool bAddedToNodeGraphDeepCopy; // 0xdc
        bool bOutputIsPersistent; // 0xdd
        struct FName CachedNamespacelessVariableName; // 0xe0
        bool bCreatedInSystemEditor; // 0xe8
        bool bUseLegacyNameString; // 0xe9

    };

    struct FNiagaraInputConditionMetadata //ScriptStruct Niagara.NiagaraInputConditionMetadata
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName InputName; // 0x0
        struct TArray<struct FString> TargetValues; // 0x8

    };

    struct FNiagaraParameterScopeInfo //ScriptStruct Niagara.NiagaraParameterScopeInfo
    {
    //Children Prop Count (Fields): 2
    public:

        enum class ENiagaraParameterScope Scope; // 0x0
        struct FString NamespaceString; // 0x8

    };

    struct FNiagaraCompileHashVisitorDebugInfo //ScriptStruct Niagara.NiagaraCompileHashVisitorDebugInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString Object; // 0x0
        struct TArray<struct FString> PropertyKeys; // 0x10
        struct TArray<struct FString> PropertyValues; // 0x20

    };

    struct FNiagaraID //ScriptStruct Niagara.NiagaraID
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t Index; // 0x0
        int32_t AcquireTag; // 0x4

    };

    struct FNiagaraSpawnInfo //ScriptStruct Niagara.NiagaraSpawnInfo
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t Count; // 0x0
        float InterpStartDt; // 0x4
        float IntervalDt; // 0x8
        int32_t SpawnGroup; // 0xc

    };

    struct FNiagaraMatrix //ScriptStruct Niagara.NiagaraMatrix
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector4 Row0; // 0x0
        struct FVector4 Row1; // 0x10
        struct FVector4 Row2; // 0x20
        struct FVector4 Row3; // 0x30

    };

    struct FNiagaraParameterMap //ScriptStruct Niagara.NiagaraParameterMap
    {
    public:


    };

    struct FNiagaraNumeric //ScriptStruct Niagara.NiagaraNumeric
    {
    public:


    };

    struct FNiagaraHalfVector4 //ScriptStruct Niagara.NiagaraHalfVector4
    {
    //Children Prop Count (Fields): 4
    public:

        uint16_t X; // 0x0
        uint16_t Y; // 0x2
        uint16_t Z; // 0x4
        uint16_t W; // 0x6

    };

    struct FNiagaraHalfVector3 //ScriptStruct Niagara.NiagaraHalfVector3
    {
    //Children Prop Count (Fields): 3
    public:

        uint16_t X; // 0x0
        uint16_t Y; // 0x2
        uint16_t Z; // 0x4

    };

    struct FNiagaraHalfVector2 //ScriptStruct Niagara.NiagaraHalfVector2
    {
    //Children Prop Count (Fields): 2
    public:

        uint16_t X; // 0x0
        uint16_t Y; // 0x2

    };

    struct FNiagaraHalf //ScriptStruct Niagara.NiagaraHalf
    {
    //Children Prop Count (Fields): 1
    public:

        uint16_t Value; // 0x0

    };

    struct FNiagaraBool //ScriptStruct Niagara.NiagaraBool
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t Value; // 0x0

    };

    struct FNiagaraInt32 //ScriptStruct Niagara.NiagaraInt32
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t Value; // 0x0

    };

    struct FNiagaraFloat //ScriptStruct Niagara.NiagaraFloat
    {
    //Children Prop Count (Fields): 1
    public:

        float Value; // 0x0

    };

    struct FNiagaraUserRedirectionParameterStore : FNiagaraParameterStore //ScriptStruct Niagara.NiagaraUserRedirectionParameterStore
    {
    //Children Prop Count (Fields): 1
    public:

        struct TMap<struct FNiagaraVariable, struct FNiagaraVariable> UserParameterRedirects; // 0x78

    };

    struct FNiagaraVariant //ScriptStruct Niagara.NiagaraVariant
    {
    //Children Prop Count (Fields): 4
    public:

        class UObject* Object; // 0x0
        class UNiagaraDataInterface* DataInterface; // 0x8
        struct TArray<char> Bytes; // 0x10
        enum class ENiagaraVariantMode CurrentMode; // 0x20

    };

    struct FNiagaraWorldManagerTickFunction : FTickFunction //ScriptStruct Niagara.NiagaraWorldManagerTickFunction
    {
    public:


    };

    struct FNiagaraCompileEvent //ScriptStruct NiagaraShader.NiagaraCompileEvent
    {
    //Children Prop Count (Fields): 5
    public:

        enum class FNiagaraCompileEventSeverity Severity; // 0x0
        struct FString Message; // 0x8
        struct FGuid NodeGuid; // 0x18
        struct FGuid PinGuid; // 0x28
        struct TArray<struct FGuid> StackGuids; // 0x38

    };

    struct FSubstanceInstanceDesc //ScriptStruct SubstanceCore.SubstanceInstanceDesc
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Name; // 0x0
        struct TArray<struct FSubstanceInputDesc> Inputs; // 0x10

    };

    struct FSubstanceInputDesc //ScriptStruct SubstanceCore.SubstanceInputDesc
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Name; // 0x0
        enum class ESubstanceInputType Type; // 0x10

    };

    struct FSubstanceFloatInputDesc : FSubstanceInputDesc //ScriptStruct SubstanceCore.SubstanceFloatInputDesc
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<float> Min; // 0x18
        struct TArray<float> Max; // 0x28
        struct TArray<float> Default; // 0x38

    };

    struct FSubstanceIntInputDesc : FSubstanceInputDesc //ScriptStruct SubstanceCore.SubstanceIntInputDesc
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<int32_t> Min; // 0x18
        struct TArray<int32_t> Max; // 0x28
        struct TArray<int32_t> Default; // 0x38

    };

    struct FSubstanceConnection //ScriptStruct SubstanceCore.SubstanceConnection
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString OutputIdentifier; // 0x0
        struct FString InputImageIdentifier; // 0x10

    };

    struct FAnimNode_SkeletalControlBase : FAnimNode_Base //ScriptStruct AnimGraphRuntime.AnimNode_SkeletalControlBase
    {
    //Children Prop Count (Fields): 11
    public:

        struct FComponentSpacePoseLink ComponentPose; // 0x10
        int32_t LODThreshold; // 0x20
        float ActualAlpha; // 0x24
        enum class EAnimAlphaInputType AlphaInputType; // 0x28
        bool bAlphaBoolEnabled; // 0x29
        float Alpha; // 0x2c
        struct FInputScaleBias AlphaScaleBias; // 0x30
        float AlphaScaleMultiplier; // 0x38
        struct FInputAlphaBoolBlend AlphaBoolBlend; // 0x40
        struct FName AlphaCurveName; // 0x88
        struct FInputScaleBiasClamp AlphaScaleBiasClamp; // 0x90

    };

    struct FComponentSpacePoseLink : FPoseLinkBase //ScriptStruct Engine.ComponentSpacePoseLink
    {
    public:


    };

    struct FAnimNode_AdjustArmStretch : FAnimNode_SkeletalControlBase //ScriptStruct MFAnimationRuntime.AnimNode_AdjustArmStretch
    {
    //Children Prop Count (Fields): 6
    public:

        struct FBoneReference BoneToModify; // 0xd0
        struct FBoneReference EndBone; // 0xe0
        struct FBoneReference IKHandBone; // 0xf0
        struct FVector ExtraOffset; // 0x100
        float ExpectAngleBetweenBones; // 0x10c
        enum class ECalcStretchAlgorithm CalcStretchAlgorithm; // 0x110

    };

    struct FBoneReference //ScriptStruct Engine.BoneReference
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName BoneName; // 0x0

    };

    struct FAnimNode_AlignAroundPivot : FAnimNode_SkeletalControlBase //ScriptStruct MFAnimationRuntime.AnimNode_AlignAroundPivot
    {
    //Children Prop Count (Fields): 6
    public:

        struct FBoneReference BoneToModify; // 0xd0
        struct FBoneSocketTarget AlignTarget; // 0xe0
        struct FTransform AlignTransform; // 0x140
        struct FVector Pivot; // 0x170
        float InterpSpeed; // 0x17c
        char AxisMask; // 0x180

    };

    struct FBoneSocketTarget //ScriptStruct AnimGraphRuntime.BoneSocketTarget
    {
    //Children Prop Count (Fields): 3
    public:

        bool bUseSocket; // 0x0
        struct FBoneReference BoneReference; // 0x4
        struct FSocketReference SocketReference; // 0x20

    };

    struct FSocketReference //ScriptStruct AnimGraphRuntime.SocketReference
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName SocketName; // 0x30

    };

    struct FAnimNode_ApplyBonesAdditive : FAnimNode_Base //ScriptStruct MFAnimationRuntime.AnimNode_ApplyBonesAdditive
    {
    //Children Prop Count (Fields): 4
    public:

        struct FPoseLink SourceBase; // 0x10
        struct FPoseLink Base; // 0x20
        struct FPoseLink Additive; // 0x30
        struct TArray<struct FBoneReference> TargetBoneList; // 0x40

    };

    struct FAnimNode_BoneAdjustment : FAnimNode_Base //ScriptStruct MFAnimationRuntime.AnimNode_BoneAdjustment
    {
    //Children Prop Count (Fields): 8
    public:

        struct FPoseLink Input; // 0x10
        struct FPoseLink Additive; // 0x20
        struct FPoseLink Target; // 0x30
        class UAnimSequenceBase* Sequence; // 0x40
        struct FBoneReference ScaledBone; // 0x48
        bool bEvaluateSequenceEndFrame; // 0x58
        struct TArray<struct FADSSetting> ADSSettings; // 0x60
        class UAnimSequenceBase* LastAnimSequence; // 0x70

    };

    struct FADSSetting //ScriptStruct MFAnimationRuntime.ADSSetting
    {
    //Children Prop Count (Fields): 3
    public:

        enum class EAxis Axis; // 0x0
        enum class EAdjustType AdjustType; // 0x1
        struct FName CurveName; // 0x4

    };

    struct FAnimNode_MotionForceWarping : FAnimNode_SkeletalControlBase //ScriptStruct MFAnimationRuntime.AnimNode_MotionForceWarping
    {
    //Children Prop Count (Fields): 8
    public:

        struct FBoneReference MotionBone; // 0x1e0
        struct FBoneReference MotionParentBone; // 0x1f0
        bool bAccelChange; // 0x200
        struct FVector MotionLinearAccScale; // 0x204
        struct FVector MotionLinearVelScale; // 0x210
        struct FVector LocalMotionAppliedLinearAccClamp; // 0x21c
        class USkeletalMeshComponent* MotionReciever; // 0x228
        struct FName MotionRecieverBone; // 0x230

    };

    struct FAnimNode_SpeedWarping : FAnimNode_SkeletalControlBase //ScriptStruct MFAnimationRuntime.AnimNode_SpeedWarping
    {
    //Children Prop Count (Fields): 7
    public:

        struct FBoneReference IkFootRootBone; // 0xd0
        struct TArray<struct FIKBones> FeetDefinitions; // 0xe0
        struct FBoneReference PelvisBone; // 0xf0
        float SpeedScaling; // 0x100
        float ActualSpeedScaling; // 0x104
        struct FInputScaleBiasClamp SpeedScalingBiasClamp; // 0x108
        bool ClampIKUsingFKLeg; // 0x138

    };

    struct FIKBones //ScriptStruct MFAnimationRuntime.IKBones
    {
    //Children Prop Count (Fields): 4
    public:

        struct FBoneReference IKFootBone; // 0x0
        struct FBoneReference FKFootBone; // 0x10
        int32_t NumBonesInUpperLimb; // 0x20
        int32_t NumBonesInLowerLimb; // 0x24

    };

    struct FPelvisAdjustmentInterp //ScriptStruct MFAnimationRuntime.PelvisAdjustmentInterp
    {
    //Children Prop Count (Fields): 2
    public:

        float Stiffness; // 0x0
        float Dampen; // 0x4

    };

    struct FIKFootLocation //ScriptStruct MFAnimationRuntime.IKFootLocation
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector LimbRootLocation; // 0x0
        struct FVector OriginLocation; // 0xc
        struct FVector ActualLocation; // 0x18
        struct FVector NewLocation; // 0x24

    };

    struct FAnimNode_UseCrossBPCachedPose : FAnimNode_Base //ScriptStruct MFAnimationRuntime.AnimNode_UseCrossBPCachedPose
    {
    public:


    };

    struct FAnimNode_VirtualPivot : FAnimNode_SkeletalControlBase //ScriptStruct MFAnimationRuntime.AnimNode_VirtualPivot
    {
    //Children Prop Count (Fields): 5
    public:

        struct FBoneReference BoneToModify; // 0xd0
        struct FBoneSocketTarget VirtualParent; // 0xe0
        struct FVector PivotOffset; // 0x140
        struct FRotator Rotation; // 0x14c
        enum class EBoneControlSpace PivotSpace; // 0x158

    };

    struct FMontageBlendTimePair //ScriptStruct MFAnimationRuntime.MontageBlendTimePair
    {
    //Children Prop Count (Fields): 2
    public:

        float BlendInTime; // 0x0
        float BlendOutTime; // 0x4

    };

    struct FAnimationFloatCurvesMap //ScriptStruct MFAnimationRuntime.AnimationFloatCurvesMap
    {
    //Children Prop Count (Fields): 1
    public:

        struct TMap<struct FString, class UCurveFloat*> NameToCurveMap; // 0x0

    };

    struct FAnimationCurvesMap //ScriptStruct MFAnimationRuntime.AnimationCurvesMap
    {
    //Children Prop Count (Fields): 1
    public:

        struct TMap<struct FString, float> CurveToValueMap; // 0x0

    };

    struct FRenderableTriangle //ScriptStruct ModelingComponents.RenderableTriangle
    {
    //Children Prop Count (Fields): 4
    public:

        class UMaterialInterface* Material; // 0x0
        struct FRenderableTriangleVertex Vertex0; // 0x8
        struct FRenderableTriangleVertex Vertex1; // 0x2c
        struct FRenderableTriangleVertex Vertex2; // 0x50

    };

    struct FRenderableTriangleVertex //ScriptStruct ModelingComponents.RenderableTriangleVertex
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector position; // 0x0
        struct FVector2D UV; // 0xc
        struct FVector Normal; // 0x14
        struct FColor Color; // 0x20

    };

    struct FPhysicsConvexData //ScriptStruct MeshModelingTools.PhysicsConvexData
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t NumVertices; // 0x0
        int32_t NumFaces; // 0x4
        struct FKShapeElem Element; // 0x8

    };

    struct FKShapeElem //ScriptStruct Engine.KShapeElem
    {
    //Children Prop Count (Fields): 4
    public:

        float RestOffset; // 0x8
        struct FName Name; // 0xc
        char bContributeToMass; // 0x18
        enum class ECollisionEnabled CollisionEnabled; // 0x19

    };

    struct FPhysicsCapsuleData //ScriptStruct MeshModelingTools.PhysicsCapsuleData
    {
    //Children Prop Count (Fields): 4
    public:

        float Radius; // 0x0
        float Length; // 0x4
        struct FTransform Transform; // 0x10
        struct FKShapeElem Element; // 0x40

    };

    struct FPhysicsBoxData //ScriptStruct MeshModelingTools.PhysicsBoxData
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Dimensions; // 0x0
        struct FTransform Transform; // 0x10
        struct FKShapeElem Element; // 0x40

    };

    struct FPhysicsSphereData //ScriptStruct MeshModelingTools.PhysicsSphereData
    {
    //Children Prop Count (Fields): 3
    public:

        float Radius; // 0x0
        struct FTransform Transform; // 0x10
        struct FKShapeElem Element; // 0x40

    };

    struct FPerlinLayerProperties //ScriptStruct MeshModelingTools.PerlinLayerProperties
    {
    //Children Prop Count (Fields): 2
    public:

        float Frequency; // 0x0
        float Intensity; // 0x4

    };

    struct FEditPivotTarget //ScriptStruct MeshModelingTools.EditPivotTarget
    {
    //Children Prop Count (Fields): 2
    public:

        class UTransformProxy* TransformProxy; // 0x0
        class UTransformGizmo* TransformGizmo; // 0x8

    };

    struct FTransformMeshesTarget //ScriptStruct MeshModelingTools.TransformMeshesTarget
    {
    //Children Prop Count (Fields): 2
    public:

        class UTransformProxy* TransformProxy; // 0x0
        class UTransformGizmo* TransformGizmo; // 0x8

    };

    struct FHairGroupInfo //ScriptStruct HairStrandsCore.HairGroupInfo
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t GroupID; // 0x0
        int32_t NumCurves; // 0x4
        int32_t NumGuides; // 0x8
        int32_t NumCurveVertices; // 0xc
        int32_t NumGuideVertices; // 0x10

    };

    struct FHairGroupInfoWithVisibility : FHairGroupInfo //ScriptStruct HairStrandsCore.HairGroupInfoWithVisibility
    {
    //Children Prop Count (Fields): 1
    public:

        bool bIsVisible; // 0x14

    };

    struct FHairGroupsMaterial //ScriptStruct HairStrandsCore.HairGroupsMaterial
    {
    //Children Prop Count (Fields): 2
    public:

        class UMaterialInterface* Material; // 0x0
        struct FName SlotName; // 0x8

    };

    struct FHairGroupsCardsSourceDescription //ScriptStruct HairStrandsCore.HairGroupsCardsSourceDescription
    {
    //Children Prop Count (Fields): 12
    public:

        class UMaterialInterface* Material; // 0x0
        struct FName MaterialSlotName; // 0x8
        enum class EHairCardsSourceType SourceType; // 0x10
        class UStaticMesh* ProceduralMesh; // 0x18
        struct FString ProceduralMeshKey; // 0x20
        class UStaticMesh* ImportedMesh; // 0x30
        struct FHairGroupsProceduralCards ProceduralSettings; // 0x38
        struct FHairGroupCardsTextures Textures; // 0x70
        int32_t GroupIndex; // 0xa0
        int32_t LODIndex; // 0xa4
        struct FHairGroupCardsInfo CardsInfo; // 0xa8
        struct FString ImportedMeshKey; // 0xb0

    };

    struct FHairGroupCardsInfo //ScriptStruct HairStrandsCore.HairGroupCardsInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t NumCards; // 0x0
        int32_t NumCardVertices; // 0x4

    };

    struct FHairGroupCardsTextures //ScriptStruct HairStrandsCore.HairGroupCardsTextures
    {
    //Children Prop Count (Fields): 5
    public:

        class UTexture2D* DepthTexture; // 0x0
        class UTexture2D* CoverageTexture; // 0x8
        class UTexture2D* TangentTexture; // 0x10
        class UTexture2D* AttributeTexture; // 0x18
        class UTexture2D* AuxilaryDataTexture; // 0x20

    };

    struct FHairGroupsProceduralCards //ScriptStruct HairStrandsCore.HairGroupsProceduralCards
    {
    //Children Prop Count (Fields): 4
    public:

        struct FHairCardsClusterSettings ClusterSettings; // 0x0
        struct FHairCardsGeometrySettings GeometrySettings; // 0x8
        struct FHairCardsTextureSettings TextureSettings; // 0x24
        int32_t Version; // 0x34

    };

    struct FHairCardsTextureSettings //ScriptStruct HairStrandsCore.HairCardsTextureSettings
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t AtlasMaxResolution; // 0x0
        int32_t PixelPerCentimeters; // 0x4
        int32_t LengthTextureCount; // 0x8
        int32_t DensityTextureCount; // 0xc

    };

    struct FHairCardsGeometrySettings //ScriptStruct HairStrandsCore.HairCardsGeometrySettings
    {
    //Children Prop Count (Fields): 7
    public:

        enum class EHairCardsGenerationType GenerationType; // 0x0
        int32_t CardsCount; // 0x4
        enum class EHairCardsClusterType ClusterType; // 0x8
        float MinSegmentLength; // 0xc
        float AngularThreshold; // 0x10
        float MinCardsLength; // 0x14
        float MaxCardsLength; // 0x18

    };

    struct FHairCardsClusterSettings //ScriptStruct HairStrandsCore.HairCardsClusterSettings
    {
    //Children Prop Count (Fields): 3
    public:

        float ClusterDecimation; // 0x0
        enum class EHairCardsClusterType Type; // 0x4
        bool bUseGuide; // 0x5

    };

    struct FHairGroupsLOD //ScriptStruct HairStrandsCore.HairGroupsLOD
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FHairLODSettings> LODs; // 0x0
        float ClusterWorldSize; // 0x10
        float ClusterScreenSizeScale; // 0x14

    };

    struct FHairLODSettings //ScriptStruct HairStrandsCore.HairLODSettings
    {
    //Children Prop Count (Fields): 7
    public:

        float CurveDecimation; // 0x0
        float VertexDecimation; // 0x4
        float AngularThreshold; // 0x8
        float ScreenSize; // 0xc
        float ThicknessScale; // 0x10
        bool bVisible; // 0x14
        enum class EGroomGeometryType GeometryType; // 0x15

    };

    struct FHairGroupsInterpolation //ScriptStruct HairStrandsCore.HairGroupsInterpolation
    {
    //Children Prop Count (Fields): 2
    public:

        struct FHairDecimationSettings DecimationSettings; // 0x0
        struct FHairInterpolationSettings InterpolationSettings; // 0x8

    };

    struct FHairInterpolationSettings //ScriptStruct HairStrandsCore.HairInterpolationSettings
    {
    //Children Prop Count (Fields): 6
    public:

        bool bOverrideGuides; // 0x0
        float HairToGuideDensity; // 0x4
        enum class EHairInterpolationQuality InterpolationQuality; // 0x8
        enum class EHairInterpolationWeight InterpolationDistance; // 0x9
        bool bRandomizeGuide; // 0xa
        bool bUseUniqueGuide; // 0xb

    };

    struct FHairDecimationSettings //ScriptStruct HairStrandsCore.HairDecimationSettings
    {
    //Children Prop Count (Fields): 2
    public:

        float CurveDecimation; // 0x0
        float VertexDecimation; // 0x4

    };

    struct FHairGroupsMeshesSourceDescription //ScriptStruct HairStrandsCore.HairGroupsMeshesSourceDescription
    {
    //Children Prop Count (Fields): 7
    public:

        class UMaterialInterface* Material; // 0x0
        struct FName MaterialSlotName; // 0x8
        class UStaticMesh* ImportedMesh; // 0x10
        struct FHairGroupCardsTextures Textures; // 0x18
        int32_t GroupIndex; // 0x48
        int32_t LODIndex; // 0x4c
        struct FString ImportedMeshKey; // 0x50

    };

    struct FHairGroupsPhysics //ScriptStruct HairStrandsCore.HairGroupsPhysics
    {
    //Children Prop Count (Fields): 4
    public:

        struct FHairSolverSettings SolverSettings; // 0x0
        struct FHairExternalForces ExternalForces; // 0x38
        struct FHairMaterialConstraints MaterialConstraints; // 0x58
        struct FHairStrandsParameters StrandsParameters; // 0x230

    };

    struct FHairStrandsParameters //ScriptStruct HairStrandsCore.HairStrandsParameters
    {
    //Children Prop Count (Fields): 5
    public:

        enum class EGroomStrandsSize StrandsSize; // 0x0
        float StrandsDensity; // 0x4
        float StrandsSmoothing; // 0x8
        float StrandsThickness; // 0xc
        struct FRuntimeFloatCurve ThicknessScale; // 0x10

    };

    struct FHairMaterialConstraints //ScriptStruct HairStrandsCore.HairMaterialConstraints
    {
    //Children Prop Count (Fields): 3
    public:

        struct FHairBendConstraint BendConstraint; // 0x0
        struct FHairStretchConstraint StretchConstraint; // 0x98
        struct FHairCollisionConstraint CollisionConstraint; // 0x130

    };

    struct FHairCollisionConstraint //ScriptStruct HairStrandsCore.HairCollisionConstraint
    {
    //Children Prop Count (Fields): 8
    public:

        bool SolveCollision; // 0x0
        bool ProjectCollision; // 0x1
        float StaticFriction; // 0x4
        float KineticFriction; // 0x8
        float StrandsViscosity; // 0xc
        struct FIntVector GridDimension; // 0x10
        float CollisionRadius; // 0x1c
        struct FRuntimeFloatCurve RadiusScale; // 0x20

    };

    struct FHairStretchConstraint //ScriptStruct HairStrandsCore.HairStretchConstraint
    {
    //Children Prop Count (Fields): 5
    public:

        bool SolveStretch; // 0x0
        bool ProjectStretch; // 0x1
        float StretchDamping; // 0x4
        float StretchStiffness; // 0x8
        struct FRuntimeFloatCurve StretchScale; // 0x10

    };

    struct FHairBendConstraint //ScriptStruct HairStrandsCore.HairBendConstraint
    {
    //Children Prop Count (Fields): 5
    public:

        bool SolveBend; // 0x0
        bool ProjectBend; // 0x1
        float BendDamping; // 0x4
        float BendStiffness; // 0x8
        struct FRuntimeFloatCurve BendScale; // 0x10

    };

    struct FHairExternalForces //ScriptStruct HairStrandsCore.HairExternalForces
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector GravityVector; // 0x0
        float AirDrag; // 0xc
        struct FVector AirVelocity; // 0x10

    };

    struct FHairSolverSettings //ScriptStruct HairStrandsCore.HairSolverSettings
    {
    //Children Prop Count (Fields): 5
    public:

        bool EnableSimulation; // 0x0
        enum class EGroomNiagaraSolvers NiagaraSolver; // 0x1
        struct TSoftObjectPtr<UNiagaraSystem> CustomSystem; // 0x8
        int32_t SubSteps; // 0x30
        int32_t IterationCount; // 0x34

    };

    struct FHairGroupsRendering //ScriptStruct HairStrandsCore.HairGroupsRendering
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName MaterialSlotName; // 0x0
        class UMaterialInterface* Material; // 0x8
        struct FHairGeometrySettings GeometrySettings; // 0x10
        struct FHairShadowSettings ShadowSettings; // 0x20
        struct FHairAdvancedRenderingSettings AdvancedSettings; // 0x2c

    };

    struct FHairAdvancedRenderingSettings //ScriptStruct HairStrandsCore.HairAdvancedRenderingSettings
    {
    //Children Prop Count (Fields): 2
    public:

        bool bUseStableRasterization; // 0x0
        bool bScatterSceneLighting; // 0x1

    };

    struct FHairShadowSettings //ScriptStruct HairStrandsCore.HairShadowSettings
    {
    //Children Prop Count (Fields): 4
    public:

        float HairShadowDensity; // 0x0
        float HairRaytracingRadiusScale; // 0x4
        bool bUseHairRaytracingGeometry; // 0x8
        bool bVoxelize; // 0x9

    };

    struct FHairGeometrySettings //ScriptStruct HairStrandsCore.HairGeometrySettings
    {
    //Children Prop Count (Fields): 4
    public:

        float HairWidth; // 0x0
        float HairRootScale; // 0x4
        float HairTipScale; // 0x8
        float HairClipScale; // 0xc

    };

    struct FGoomBindingGroupInfo //ScriptStruct HairStrandsCore.GoomBindingGroupInfo
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t RenRootCount; // 0x0
        int32_t RenLODCount; // 0x4
        int32_t SimRootCount; // 0x8
        int32_t SimLODCount; // 0xc

    };

    struct FFollicleMaskOptions //ScriptStruct HairStrandsCore.FollicleMaskOptions
    {
    //Children Prop Count (Fields): 2
    public:

        class UGroomAsset* Groom; // 0x0
        enum class EFollicleMaskChannel Channel; // 0x8

    };

    struct FHairGroupDesc //ScriptStruct HairStrandsCore.HairGroupDesc
    {
    //Children Prop Count (Fields): 25
    public:

        int32_t HairCount; // 0x0
        int32_t GuideCount; // 0x4
        float HairLength; // 0x8
        float HairWidth; // 0xc
        bool HairWidth_Override; // 0x10
        float HairRootScale; // 0x14
        bool HairRootScale_Override; // 0x18
        float HairTipScale; // 0x1c
        bool HairTipScale_Override; // 0x20
        float HairClipLength; // 0x24
        bool HairClipLength_Override; // 0x28
        float HairShadowDensity; // 0x2c
        bool HairShadowDensity_Override; // 0x30
        float HairRaytracingRadiusScale; // 0x34
        bool HairRaytracingRadiusScale_Override; // 0x38
        bool bUseHairRaytracingGeometry; // 0x39
        bool bUseHairRaytracingGeometry_Override; // 0x3a
        float LODBias; // 0x3c
        bool bUseStableRasterization; // 0x40
        bool bUseStableRasterization_Override; // 0x41
        bool bScatterSceneLighting; // 0x42
        bool bScatterSceneLighting_Override; // 0x43
        bool bSupportVoxelization; // 0x44
        bool bSupportVoxelization_Override; // 0x45
        int32_t LODForcedIndex; // 0x48

    };

    struct FGroomHairGroupPreview //ScriptStruct HairStrandsCore.GroomHairGroupPreview
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t GroupID; // 0x0
        int32_t CurveCount; // 0x4
        int32_t GuideCount; // 0x8
        struct FHairGroupsInterpolation InterpolationSettings; // 0xc

    };

    struct FGroomBuildSettings //ScriptStruct HairStrandsCore.GroomBuildSettings
    {
    //Children Prop Count (Fields): 6
    public:

        bool bOverrideGuides; // 0x0
        float HairToGuideDensity; // 0x4
        enum class EGroomInterpolationQuality InterpolationQuality; // 0x8
        enum class EGroomInterpolationWeight InterpolationDistance; // 0x9
        bool bRandomizeGuide; // 0xa
        bool bUseUniqueGuide; // 0xb

    };

    struct FGroomConversionSettings //ScriptStruct HairStrandsCore.GroomConversionSettings
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Rotation; // 0x0
        struct FVector Scale; // 0xc

    };

    struct FMotionWarpingWindowData //ScriptStruct MotionWarping.MotionWarpingWindowData
    {
    //Children Prop Count (Fields): 3
    public:

        class UAnimNotifyState_MotionWarping* AnimNotify; // 0x0
        float StartTime; // 0x8
        float EndTime; // 0xc

    };

    struct FMotionWarpingSyncPoint //ScriptStruct MotionWarping.MotionWarpingSyncPoint
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Location; // 0x0
        struct FQuat Rotation; // 0x10

    };

    struct FMotionDeltaTrackContainer //ScriptStruct MotionWarping.MotionDeltaTrackContainer
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FMotionDeltaTrack> Tracks; // 0x0

    };

    struct FMotionDeltaTrack //ScriptStruct MotionWarping.MotionDeltaTrack
    {
    //Children Prop Count (Fields): 5
    public:

        struct TArray<struct FTransform> BoneTransformTrack; // 0x0
        struct TArray<struct FVector> DeltaTranslationTrack; // 0x10
        struct TArray<struct FRotator> DeltaRotationTrack; // 0x20
        struct FVector TotalTranslation; // 0x30
        struct FRotator TotalRotation; // 0x3c

    };

    struct FAnimNode_OrientationWarping : FAnimNode_SkeletalControlBase //ScriptStruct AnimationWarpingRuntime.AnimNode_OrientationWarping
    {
    //Children Prop Count (Fields): 6
    public:

        float LocomotionAngle; // 0xd0
        float ActualLocomotionAngle; // 0xd4
        struct FInputScaleBiasClamp LocomotionAngleBiasClamp; // 0xd8
        struct FOrientationWarpingSettings Settings; // 0x108
        struct TArray<struct FOrientationWarpingSpineBoneData> SpineBoneDataArray; // 0x140
        float CachedDeltaTime; // 0x164

    };

    struct FOrientationWarpingSpineBoneData //ScriptStruct AnimationWarpingRuntime.OrientationWarpingSpineBoneData
    {
    public:


    };

    struct FOrientationWarpingSettings //ScriptStruct AnimationWarpingRuntime.OrientationWarpingSettings
    {
    //Children Prop Count (Fields): 5
    public:

        enum class EAxis YawRotationAxis; // 0x0
        float BodyOrientationAlpha; // 0x4
        struct TArray<struct FOrientationWarpingSpineBoneSettings> SpineBones; // 0x8
        struct FBoneReference IkFootRootBone; // 0x18
        struct TArray<struct FBoneReference> IKFootBones; // 0x28

    };

    struct FOrientationWarpingSpineBoneSettings //ScriptStruct AnimationWarpingRuntime.OrientationWarpingSpineBoneSettings
    {
    //Children Prop Count (Fields): 1
    public:

        struct FBoneReference Bone; // 0x0

    };

    struct FAnimNode_SlopeWarping : FAnimNode_SkeletalControlBase //ScriptStruct AnimationWarpingRuntime.AnimNode_SlopeWarping
    {
    //Children Prop Count (Fields): 21
    public:

        struct FBoneReference IkFootRootBone; // 0xe8
        struct FBoneReference PelvisBone; // 0xf8
        struct TArray<struct FSlopeWarpingFootDefinition> FeetDefinitions; // 0x108
        struct TArray<struct FSlopeWarpingFootData> FeetData; // 0x118
        struct FVectorRK4SpringInterpolator PelvisOffsetInterpolator; // 0x128
        struct FVector GravityDir; // 0x164
        struct FVector CustomFloorOffset; // 0x170
        float CachedDeltaTime; // 0x17c
        struct FVector TargetFloorNormalWorldSpace; // 0x180
        struct FVectorRK4SpringInterpolator FloorNormalInterpolator; // 0x18c
        struct FVector TargetFloorOffsetLocalSpace; // 0x1c8
        struct FVectorRK4SpringInterpolator FloorOffsetInterpolator; // 0x1d4
        float MaxStepHeight; // 0x210
        char bKeepMeshInsideOfCapsule; // 0x214
        char bPullPelvisDown; // 0x214
        char bUseCustomFloorOffset; // 0x214
        char bWasOnGround; // 0x214
        char bShowDebug; // 0x214
        char bFloorSmoothingInitialized; // 0x214
        struct FVector ActorLocation; // 0x218
        struct FVector GravityDirCompSpace; // 0x224

    };

    struct FSlopeWarpingFootData //ScriptStruct AnimationWarpingRuntime.SlopeWarpingFootData
    {
    public:


    };

    struct FSlopeWarpingFootDefinition //ScriptStruct AnimationWarpingRuntime.SlopeWarpingFootDefinition
    {
    //Children Prop Count (Fields): 4
    public:

        struct FBoneReference IKFootBone; // 0x0
        struct FBoneReference FKFootBone; // 0x10
        int32_t NumBonesInLimb; // 0x20
        float FootSize; // 0x24

    };

    struct FAnimNode_StrideWarping : FAnimNode_SkeletalControlBase //ScriptStruct AnimationWarpingRuntime.AnimNode_StrideWarping
    {
    //Children Prop Count (Fields): 19
    public:

        struct FBoneReference IkFootRootBone; // 0xd8
        struct TArray<struct FStrideWarpingFootDefinition> FeetDefinitions; // 0xe8
        struct TArray<struct FStrideWarpingFootData> FeetData; // 0xf8
        struct FBoneReference PelvisBone; // 0x108
        enum class EStrideWarpingAxisMode StrideWarpingAxisMode; // 0x118
        enum class EStrideWarpingAxisMode FloorNormalAxisMode; // 0x119
        enum class EStrideWarpingAxisMode GravityDirAxisMode; // 0x11a
        float StrideScaling; // 0x11c
        struct FInputScaleBiasClamp StrideScalingScaleBiasClamp; // 0x120
        struct FVector ManualStrideWarpingDir; // 0x150
        struct FVector ManualFloorNormalInput; // 0x15c
        struct FVector ManualGravityDirInput; // 0x168
        float PelvisPostAdjustmentAlpha; // 0x174
        int32_t PelvisAdjustmentMaxIter; // 0x178
        struct FVectorRK4SpringInterpolator PelvisAdjustmentInterp; // 0x17c
        char bAdjustThighBonesRotation; // 0x1b8
        char bClampIKUsingFKLeg; // 0x1b8
        char bOrientStrideWarpingAxisBasedOnFloorNormal; // 0x1b8
        float CachedDeltaTime; // 0x1bc

    };

    struct FStrideWarpingFootData //ScriptStruct AnimationWarpingRuntime.StrideWarpingFootData
    {
    public:


    };

    struct FStrideWarpingFootDefinition //ScriptStruct AnimationWarpingRuntime.StrideWarpingFootDefinition
    {
    //Children Prop Count (Fields): 3
    public:

        struct FBoneReference IKFootBone; // 0x0
        struct FBoneReference FKFootBone; // 0x10
        int32_t NumBonesInLimb; // 0x20

    };

    struct FAnimationBudgetAllocatorParameters //ScriptStruct AnimationBudgetAllocator.AnimationBudgetAllocatorParameters
    {
    //Children Prop Count (Fields): 20
    public:

        float BudgetInMs; // 0x0
        float MinQuality; // 0x4
        int32_t MaxTickRate; // 0x8
        float WorkUnitSmoothingSpeed; // 0xc
        float AlwaysTickFalloffAggression; // 0x10
        float InterpolationFalloffAggression; // 0x14
        int32_t InterpolationMaxRate; // 0x18
        int32_t MaxInterpolatedComponents; // 0x1c
        float InterpolationTickMultiplier; // 0x20
        float InitialEstimatedWorkUnitTimeMs; // 0x24
        int32_t MaxTickedOffsreenComponents; // 0x28
        int32_t StateChangeThrottleInFrames; // 0x2c
        float BudgetFactorBeforeReducedWork; // 0x30
        float BudgetFactorBeforeReducedWorkEpsilon; // 0x34
        float BudgetPressureSmoothingSpeed; // 0x38
        int32_t ReducedWorkThrottleMinInFrames; // 0x3c
        int32_t ReducedWorkThrottleMaxInFrames; // 0x40
        float BudgetFactorBeforeAggressiveReducedWork; // 0x44
        int32_t ReducedWorkThrottleMaxPerFrame; // 0x48
        float BudgetPressureBeforeEmergencyReducedWork; // 0x4c

    };

    struct FMFGlobalEventListenerData //ScriptStruct MFGlobalEvent.MFGlobalEventListenerData
    {
    public:


    };

    struct FMFGlobalEventParameterTagCreationWidgetHelper //ScriptStruct MFGlobalEventParameterTags.MFGlobalEventParameterTagCreationWidgetHelper
    {
    public:


    };

    struct FMFGlobalEventParameterTagContainer //ScriptStruct MFGlobalEventParameterTags.MFGlobalEventParameterTagContainer
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FMFGlobalEventParameterTag> MFGlobalEventParameterTags; // 0x0
        struct TArray<struct FMFGlobalEventParameterTag> ParentTags; // 0x10

    };

    struct FMFGlobalEventParameterTag //ScriptStruct MFGlobalEventParameterTags.MFGlobalEventParameterTag
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName TagName; // 0x0

    };

    struct FMFGlobalEventParameterTagNode //ScriptStruct MFGlobalEventParameterTags.MFGlobalEventParameterTagNode
    {
    public:


    };

    struct FMFGlobalEventParameterTagSource //ScriptStruct MFGlobalEventParameterTags.MFGlobalEventParameterTagSource
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName SourceName; // 0x0
        enum class EMFGlobalEventParameterTagSourceType SourceType; // 0x8
        class UMFGlobalEventParameterTagsList* SourceTagList; // 0x10
        class URestrictedMFGlobalEventParameterTagsList* SourceRestrictedTagList; // 0x18

    };

    struct FMFGlobalEventParameter : FTableRowBase //ScriptStruct MFGlobalEventParameterTags.MFGlobalEventParameter
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Tag; // 0x8
        struct FString DevComment; // 0x10
        struct FName PropertyType; // 0x20

    };

    struct FRestrictedMFGlobalEventParameterTagTableRow : FMFGlobalEventParameter //ScriptStruct MFGlobalEventParameterTags.RestrictedMFGlobalEventParameterTagTableRow
    {
    //Children Prop Count (Fields): 1
    public:

        bool bAllowNonRestrictedChildren; // 0x28

    };

    struct FRestrictedMFGlobalEventParameterConfigInfo //ScriptStruct MFGlobalEventParameterTags.RestrictedMFGlobalEventParameterConfigInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString RestrictedConfigName; // 0x0
        struct TArray<struct FString> Owners; // 0x10

    };

    struct FMFGlobalEventParameterTagCategoryRemap //ScriptStruct MFGlobalEventParameterTags.MFGlobalEventParameterTagCategoryRemap
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString BaseCategory; // 0x0
        struct TArray<struct FString> RemapCategories; // 0x10

    };

    struct FMFGlobalEventParameterTagRedirect //ScriptStruct MFGlobalEventParameterTags.MFGlobalEventParameterTagRedirect
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName OldTagName; // 0x0
        struct FName NewTagName; // 0x8

    };

    struct FMFGlobalEventTagCreationWidgetHelper //ScriptStruct MFGlobalEventTags.MFGlobalEventTagCreationWidgetHelper
    {
    public:


    };

    struct FMFGlobalEventTagContainer //ScriptStruct MFGlobalEventTags.MFGlobalEventTagContainer
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FMFGlobalEventTag> MFGlobalEventTags; // 0x0
        struct TArray<struct FMFGlobalEventTag> ParentTags; // 0x10

    };

    struct FMFGlobalEventTag //ScriptStruct MFGlobalEventTags.MFGlobalEventTag
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName TagName; // 0x0

    };

    struct FMFGlobalEventTagNode //ScriptStruct MFGlobalEventTags.MFGlobalEventTagNode
    {
    public:


    };

    struct FMFGlobalEventTagSource //ScriptStruct MFGlobalEventTags.MFGlobalEventTagSource
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName SourceName; // 0x0
        enum class EMFGlobalEventTagSourceType SourceType; // 0x8
        class UMFGlobalEventTagsList* SourceTagList; // 0x10
        class URestrictedMFGlobalEventTagsList* SourceRestrictedTagList; // 0x18

    };

    struct FMFGlobalEvent : FTableRowBase //ScriptStruct MFGlobalEventTags.MFGlobalEvent
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Tag; // 0x8
        struct FString DevComment; // 0x10
        struct TArray<struct FMFGlobalEventParameter> Parameters; // 0x20

    };

    struct FRestrictedMFGlobalEventTagTableRow : FMFGlobalEvent //ScriptStruct MFGlobalEventTags.RestrictedMFGlobalEventTagTableRow
    {
    //Children Prop Count (Fields): 1
    public:

        bool bAllowNonRestrictedChildren; // 0x30

    };

    struct FRestrictedMFGlobalEventConfigInfo //ScriptStruct MFGlobalEventTags.RestrictedMFGlobalEventConfigInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString RestrictedConfigName; // 0x0
        struct TArray<struct FString> Owners; // 0x10

    };

    struct FMFGlobalEventTagCategoryRemap //ScriptStruct MFGlobalEventTags.MFGlobalEventTagCategoryRemap
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString BaseCategory; // 0x0
        struct TArray<struct FString> RemapCategories; // 0x10

    };

    struct FMFGlobalEventTagRedirect //ScriptStruct MFGlobalEventTags.MFGlobalEventTagRedirect
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName OldTagName; // 0x0
        struct FName NewTagName; // 0x8

    };

    struct FMFMissionFlowExecutingNodeConfig //ScriptStruct MFMission.MFMissionFlowExecutingNodeConfig
    {
    //Children Prop Count (Fields): 2
    public:

        bool bExecutingFlow; // 0x0
        struct TArray<class UMFMissionFlowNode*> NodeList; // 0x8

    };

    struct FMFMissionFlowInstanceData //ScriptStruct MFMission.MFMissionFlowInstanceData
    {
    //Children Prop Count (Fields): 7
    public:

        class AActor* Instigator; // 0x0
        class UMFMissionFlow* MissionFlow; // 0x8
        enum class EMissionFlowNodeStatus NodeStatus; // 0x10
        enum class EMissionStatus MissionStatus; // 0x11
        bool bBeforeState; // 0x12
        class ACharacter* LastTriggerCharacter; // 0x18
        int32_t LoopCount; // 0x20

    };

    struct FMFMissionFlowVariableInstanceData //ScriptStruct MFMission.MFMissionFlowVariableInstanceData
    {
    //Children Prop Count (Fields): 4
    public:

        class UMFMissionDataComponent* DataComp; // 0x0
        class UMFMissionFlow* MissionFlow; // 0x8
        class UMFMissionFlowVariableData* VariableAsset; // 0x10
        struct TArray<class UMFMissionFlowVariableKeyType*> KeyInstances; // 0x38

    };

    struct FMissionFlowConnections //ScriptStruct MFMission.MissionFlowConnections
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FMissionFlowConnection> Connections; // 0x0

    };

    struct FMissionFlowConnection //ScriptStruct MFMission.MissionFlowConnection
    {
    //Children Prop Count (Fields): 1
    public:

        class UMFMissionFlowNode* ConnectNode; // 0x0

    };

    struct FMissionFlowPrevConnection : FMissionFlowConnection //ScriptStruct MFMission.MissionFlowPrevConnection
    {
    //Children Prop Count (Fields): 1
    public:

        enum class EMissionFlowConnectionType PrevConnectionType; // 0x8

    };

    struct FMissionFlowConnectionWeight //ScriptStruct MFMission.MissionFlowConnectionWeight
    {
    //Children Prop Count (Fields): 2
    public:

        char Index; // 0x0
        int32_t Weight; // 0x4

    };

    struct FMFMissionFlowVariableKeySelector //ScriptStruct MFMission.MFMissionFlowVariableKeySelector
    {
    //Children Prop Count (Fields): 5
    public:

        struct TArray<class UMFMissionFlowVariableKeyType*> AllowedTypes; // 0x0
        struct FName SelectedKeyName; // 0x10
        class UMFMissionFlowVariableKeyType* SelectedKeyType; // 0x18
        char SelectedKeyID; // 0x20
        bool bNoneIsAllowedValue; // 0x21

    };

    struct FMFMissionFlowVariableEntry //ScriptStruct MFMission.MFMissionFlowVariableEntry
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName EntryName; // 0x0
        class UMFMissionFlowVariableKeyType* KeyType; // 0x8
        char bInstanceSynced; // 0x10
        struct FName Category; // 0x14

    };

    struct FMFMissionVariableReadBase //ScriptStruct MFMission.MFMissionVariableReadBase
    {
    //Children Prop Count (Fields): 1
    public:

        struct FMFMissionFlowVariableKeySelector Key; // 0x0

    };

    struct FMFMissionVariableRead_Int : FMFMissionVariableReadBase //ScriptStruct MFMission.MFMissionVariableRead_Int
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t ConfigValue; // 0x28

    };

    struct FMFMissionVariableRead_Object : FMFMissionVariableReadBase //ScriptStruct MFMission.MFMissionVariableRead_Object
    {
    //Children Prop Count (Fields): 1
    public:

        class UObject* ConfigValue; // 0x28

    };

    struct FMFMissionVariableRead_Rotator : FMFMissionVariableReadBase //ScriptStruct MFMission.MFMissionVariableRead_Rotator
    {
    //Children Prop Count (Fields): 1
    public:

        struct FRotator ConfigValue; // 0x28

    };

    struct FMFMissionVariableRead_String : FMFMissionVariableReadBase //ScriptStruct MFMission.MFMissionVariableRead_String
    {
    //Children Prop Count (Fields): 1
    public:

        struct FString ConfigValue; // 0x28

    };

    struct FMFMissionVariableRead_Vector : FMFMissionVariableReadBase //ScriptStruct MFMission.MFMissionVariableRead_Vector
    {
    //Children Prop Count (Fields): 1
    public:

        struct FVector ConfigValue; // 0x28

    };

    struct FMissionObjectivePreConditions //ScriptStruct MFMission.MissionObjectivePreConditions
    {
    //Children Prop Count (Fields): 3
    public:

        enum class EMissionObjectiveConditionCheckType CheckType; // 0x0
        struct TArray<struct FMissionObjectiveConditionContainer> ConditionContainers; // 0x8
        struct TArray<class UMFMissionAction*> ActivateActions; // 0x18

    };

    struct FMissionObjectiveConditionContainer //ScriptStruct MFMission.MissionObjectiveConditionContainer
    {
    //Children Prop Count (Fields): 2
    public:

        enum class EMissionObjectiveConditionCheckType CheckType; // 0x0
        struct TArray<class UMFMissionCondition*> Conditions; // 0x8

    };

    struct FMissionObjectiveCheckConditions //ScriptStruct MFMission.MissionObjectiveCheckConditions
    {
    //Children Prop Count (Fields): 16
    public:

        enum class EMissionHelpType HelpType; // 0x0
        enum class EMissionCompareType CompareType; // 0x1
        int32_t BeginProgress; // 0x4
        int32_t EndProgress; // 0x8
        int32_t ProgressUnit; // 0xc
        int32_t ProgressFactor; // 0x10
        bool bNeedReportProgress; // 0x14
        bool bNeedReport; // 0x15
        bool bReachEndNotComplete; // 0x16
        int32_t OneBattleMaxAddProgress; // 0x18
        bool bFailWhenAchieved; // 0x1c
        enum class EMissionObjectiveConditionCheckType CheckType; // 0x1d
        struct TArray<struct FMissionObjectiveConditionContainer> ConditionContainers; // 0x20
        struct TArray<class UMFMissionAction*> ProgressActions; // 0x30
        struct TArray<class UMFMissionAction*> SuccessActions; // 0x40
        struct TArray<class UMFMissionAction*> FailedActions; // 0x50

    };

    struct FMissionInstigatorInfo //ScriptStruct MFMission.MissionInstigatorInfo
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class UObject*> Instigators; // 0x0

    };

    struct FMFGlobalEventMessage_MissionActivate //ScriptStruct MFMission.MFGlobalEventMessage_MissionActivate
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* Instigator; // 0x0

    };

    struct FMapRule //ScriptStruct AIServiceSDK.MapRule
    {
    //Children Prop Count (Fields): 2
    public:

        struct FSoftObjectPath MapPath; // 0x0
        struct TArray<int32_t> RuleIDs; // 0x18

    };

    struct FFalconScriptTextureView //ScriptStruct FalconLandscapeMixerShader.FalconScriptTextureView
    {
    public:


    };

    struct FScatter3DPattern //ScriptStruct FalconLandscapeMixerShader.Scatter3DPattern
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FVector> PointCloud; // 0x0
        struct FVector Size; // 0x10

    };

    struct FFalconPlacementToolPolygonRigidbody //ScriptStruct FalconLandscapeMixerShader.FalconPlacementToolPolygonRigidbody
    {
    //Children Prop Count (Fields): 8
    public:

        struct FVector Location; // 0x0
        struct FRotator Rotation; // 0xc
        struct FVector Velocity; // 0x18
        struct FVector AngularVelocity; // 0x24
        struct FVector BoundMin; // 0x30
        struct FVector BoundMax; // 0x3c
        class UVolumeTexture* SDFTexture; // 0x48
        struct TWeakObjectPtr<struct AStaticMeshActor> SMActor; // 0x50

    };

    struct FFalconPlacementToolSphereRigidbody //ScriptStruct FalconLandscapeMixerShader.FalconPlacementToolSphereRigidbody
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector Location; // 0x0
        struct FVector Velocity; // 0xc
        struct FVector AngularVelocity; // 0x18
        float Radius; // 0x24

    };

    struct FFalconRingVertex //ScriptStruct FalconLandscapeMixerShader.FalconRingVertex
    {
    //Children Prop Count (Fields): 1
    public:

        struct FVector position; // 0x0

    };

    struct FFalconRTAllocation //ScriptStruct FalconLandscapeMixerShader.FalconRTAllocation
    {
    //Children Prop Count (Fields): 2
    public:

        class UTextureRenderTarget2D* Texture; // 0x0
        struct FIntPoint BasePoint; // 0x8

    };

    struct FTrackRenderData //ScriptStruct GeometryCache.TrackRenderData
    {
    public:


    };

    struct FGeometryCacheMeshData //ScriptStruct GeometryCache.GeometryCacheMeshData
    {
    public:


    };

    struct FGeometryCacheVertexInfo //ScriptStruct GeometryCache.GeometryCacheVertexInfo
    {
    public:


    };

    struct FGeometryCacheMeshBatchInfo //ScriptStruct GeometryCache.GeometryCacheMeshBatchInfo
    {
    public:


    };

    struct FMovieSceneGeometryCacheParams //ScriptStruct GeometryCacheTracks.MovieSceneGeometryCacheParams
    {
    //Children Prop Count (Fields): 9
    public:

        class UGeometryCache* GeometryCacheAsset; // 0x0
        struct FFrameNumber FirstLoopStartFrameOffset; // 0x8
        struct FFrameNumber StartFrameOffset; // 0xc
        struct FFrameNumber EndFrameOffset; // 0x10
        float PlayRate; // 0x14
        char bReverse; // 0x18
        float StartOffset; // 0x1c
        float EndOffset; // 0x20
        struct FSoftObjectPath GeometryCache; // 0x28

    };

    struct FMovieSceneGeometryCacheSectionTemplate : FMovieSceneEvalTemplate //ScriptStruct GeometryCacheTracks.MovieSceneGeometryCacheSectionTemplate
    {
    //Children Prop Count (Fields): 1
    public:

        struct FMovieSceneGeometryCacheSectionTemplateParameters Params; // 0x20

    };

    struct FMovieSceneGeometryCacheSectionTemplateParameters : FMovieSceneGeometryCacheParams //ScriptStruct GeometryCacheTracks.MovieSceneGeometryCacheSectionTemplateParameters
    {
    //Children Prop Count (Fields): 2
    public:

        struct FFrameNumber SectionStartTime; // 0x40
        struct FFrameNumber SectionEndTime; // 0x44

    };

    struct FReliefMappingGeneratorInput //ScriptStruct ReliefMapping.ReliefMappingGeneratorInput
    {
    //Children Prop Count (Fields): 1
    public:

        class UTexture2D* HeightMap; // 0x0

    };

    struct FINTLBaseResult //ScriptStruct INTLCore.INTLBaseResult
    {
    //Children Prop Count (Fields): 6
    public:

        int32_t methodId; // 0x0
        int32_t RetCode; // 0x4
        struct FString RetMsg; // 0x8
        int32_t ThirdCode; // 0x18
        struct FString ThirdMsg; // 0x20
        struct FString extraJson; // 0x30

    };

    struct FINTLAdjustAttrsChangedResult : FINTLBaseResult //ScriptStruct INTLCore.INTLAdjustAttrsChangedResult
    {
    //Children Prop Count (Fields): 1
    public:

        struct FString AdjustAttribution; // 0x40

    };

    struct FINTLTabExpEntity //ScriptStruct INTLCore.INTLTabExpEntity
    {
    //Children Prop Count (Fields): 13
    public:

        struct FString ExpName; // 0x0
        struct FString Assignment; // 0x10
        struct FString ExpGrayId; // 0x20
        struct FString LayerName; // 0x30
        struct TMap<struct FString, struct FString> ExpParams; // 0x40
        int32_t ExpId; // 0x90
        int32_t Bucket; // 0x94
        int32_t ModuleBucketNum; // 0x98
        float Percentage; // 0x9c
        struct FString ExpKey; // 0xa0
        struct FString ExpGroupKey; // 0xb0
        struct FString ModuleCode; // 0xc0
        struct TMap<struct FString, struct FString> Params; // 0xd0

    };

    struct FINTLLIBindRewardResult : FINTLBaseResult //ScriptStruct INTLCore.INTLLIBindRewardResult
    {
    //Children Prop Count (Fields): 7
    public:

        struct FString Image; // 0x40
        struct FString Content; // 0x50
        int32_t CanSend; // 0x60
        int32_t IsSent; // 0x64
        bool FromNetwork; // 0x68
        int32_t eventId; // 0x6c
        struct TArray<struct FINTLEventsInfoItem> Events; // 0x70

    };

    struct FINTLEventsInfoItem //ScriptStruct INTLCore.INTLEventsInfoItem
    {
    //Children Prop Count (Fields): 6
    public:

        char CanSend; // 0x0
        char IsSent; // 0x1
        struct FString Image; // 0x8
        struct FString Content; // 0x18
        int32_t eventId; // 0x28
        struct TArray<struct FINTLRewardItem> rewards; // 0x30

    };

    struct FINTLRewardItem //ScriptStruct INTLCore.INTLRewardItem
    {
    //Children Prop Count (Fields): 4
    public:

        struct FString desc; // 0x0
        struct FString icon; // 0x10
        int32_t ID; // 0x20
        int32_t Num; // 0x24

    };

    struct FINTLPermissionResult : FINTLBaseResult //ScriptStruct INTLCore.INTLPermissionResult
    {
    //Children Prop Count (Fields): 1
    public:

        struct FString permission_json_; // 0x40

    };

    struct FCutoutInfoResult : FINTLBaseResult //ScriptStruct INTLCore.CutoutInfoResult
    {
    //Children Prop Count (Fields): 7
    public:

        bool HasCutout; // 0x40
        bool IsCutoutHidden; // 0x41
        int32_t ScreenHeight; // 0x44
        int32_t ScreenWidth; // 0x48
        int32_t StatusBarHeight; // 0x4c
        struct TArray<struct FCutoutRect> CutoutRects; // 0x50
        struct FCutoutRect SafeArea; // 0x60

    };

    struct FCutoutRect //ScriptStruct INTLCore.CutoutRect
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t Top; // 0x0
        int32_t Bottom; // 0x4
        int32_t Left; // 0x8
        int32_t Right; // 0xc

    };

    struct FINTLExtendResult : FINTLBaseResult //ScriptStruct INTLCore.INTLExtendResult
    {
    //Children Prop Count (Fields): 2
    public:

        enum class EINTLLoginChannel Channel; // 0x40
        struct FString ExtendMethodName; // 0x48

    };

    struct FINTLDNSResult : FINTLBaseResult //ScriptStruct INTLCore.INTLDNSResult
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString V4; // 0x40
        struct FString V6; // 0x50
        struct FString Host; // 0x60

    };

    struct FINTLToolsResult : FINTLBaseResult //ScriptStruct INTLCore.INTLToolsResult
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString DeepLinkUrl; // 0x40
        struct FString ShortLinkUrl; // 0x50

    };

    struct FINTLStartUdpSocketResult : FINTLBaseResult //ScriptStruct INTLCore.INTLStartUdpSocketResult
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString Ip; // 0x40
        int32_t Net_delay; // 0x50
        int32_t Port; // 0x54

    };

    struct FINTLDetectNetworkResult : FINTLBaseResult //ScriptStruct INTLCore.INTLDetectNetworkResult
    {
    //Children Prop Count (Fields): 3
    public:

        float LocalRouterTime; // 0x40
        float InternetRouterTime; // 0x44
        int32_t InternetDelay; // 0x48

    };

    struct FINTLLBSIPInfoResult : FINTLBaseResult //ScriptStruct INTLCore.INTLLBSIPInfoResult
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString Region; // 0x40
        struct FString Alpha2; // 0x50
        int32_t Timestamp; // 0x60

    };

    struct FINTLDirTreeNode //ScriptStruct INTLCore.INTLDirTreeNode
    {
    //Children Prop Count (Fields): 11
    public:

        int32_t NodeId; // 0x0
        int32_t ParentID; // 0x4
        bool IsLeaf; // 0x8
        struct FString Name; // 0x10
        struct FString URL; // 0x20
        int32_t status; // 0x30
        int32_t Tag; // 0x34
        int32_t CustomInt1; // 0x38
        int32_t CustomInt2; // 0x3c
        struct FString CustomStr; // 0x40
        struct TArray<int32_t> ChildrenIdSet; // 0x50

    };

    struct FINTLDirTreeResult : FINTLBaseResult //ScriptStruct INTLCore.INTLDirTreeResult
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t TreeId; // 0x40
        int32_t NodeId; // 0x44
        struct FString TreeInfo; // 0x48
        struct FString RoleInfo; // 0x58
        int32_t ExpireTime; // 0x68

    };

    struct FINTLUpdateOptionalRepoFilesStatus //ScriptStruct INTLCore.INTLUpdateOptionalRepoFilesStatus
    {
    //Children Prop Count (Fields): 4
    public:

        struct FString FilePath; // 0x0
        int32_t TotalFileNum; // 0x10
        int32_t ValidFileNum; // 0x14
        struct FString NeedDownloadSize; // 0x18

    };

    struct FINTLUpdateInitInfo //ScriptStruct INTLCore.INTLUpdateInitInfo
    {
    //Children Prop Count (Fields): 5
    public:

        enum class EINTLUpdateActionType ActionType; // 0x0
        int32_t RepoID; // 0x4
        int32_t ResourceCopyType; // 0x8
        struct FString ResourceSavePath; // 0x10
        struct FString FirstResourceDirPath; // 0x20

    };

    struct FINTLUpdateOptionalRepoInitResult : FINTLBaseResult //ScriptStruct INTLCore.INTLUpdateOptionalRepoInitResult
    {
    //Children Prop Count (Fields): 2
    public:

        enum class EINTLUpdateActionType ActionType; // 0x40
        int32_t RepoID; // 0x44

    };

    struct FINTLUpdateResult : FINTLBaseResult //ScriptStruct INTLCore.INTLUpdateResult
    {
    //Children Prop Count (Fields): 3
    public:

        enum class EINTLUpdateActionType ActionType; // 0x40
        int32_t RepoID; // 0x44
        int32_t TaskId; // 0x48

    };

    struct FINTLUpdateProgress //ScriptStruct INTLCore.INTLUpdateProgress
    {
    //Children Prop Count (Fields): 12
    public:

        int32_t methodId; // 0x0
        enum class EINTLUpdateActionType ActionType; // 0x4
        int32_t UpdateStep; // 0x8
        int32_t RepoID; // 0xc
        int32_t TaskId; // 0x10
        struct FString FinishedSize; // 0x18
        struct FString TotalSize; // 0x28
        struct FString Speed; // 0x38
        int32_t RemainTime; // 0x48
        float StepProgress; // 0x4c
        float TotalProgress; // 0x50
        struct FString ErrorMsg; // 0x58

    };

    struct FINTLUpdateStartRepoNewVersionInfo //ScriptStruct INTLCore.INTLUpdateStartRepoNewVersionInfo
    {
    //Children Prop Count (Fields): 6
    public:

        int32_t methodId; // 0x0
        enum class EINTLUpdateActionType ActionType; // 0x4
        int32_t NewVersionType; // 0x8
        struct FString Version; // 0x10
        struct FString NeedDownloadSize; // 0x20
        struct FString GameDefinedStr; // 0x30

    };

    struct FINTLCustomerUserProfile //ScriptStruct INTLCore.INTLCustomerUserProfile
    {
    //Children Prop Count (Fields): 16
    public:

        struct FString LangType; // 0x0
        struct FString Sign; // 0x10
        struct FString Openid; // 0x20
        struct FString GameLevel; // 0x30
        struct FString NickName; // 0x40
        struct FString RoleId; // 0x50
        struct FString AreaID; // 0x60
        struct FString ZoneId; // 0x70
        struct FString GameSvrId; // 0x80
        struct FString Region; // 0x90
        struct FString PictureUrl; // 0xa0
        struct FString CustomParam1; // 0xb0
        struct FString CustomParam2; // 0xc0
        struct FString CustomParam3; // 0xd0
        struct FString CustomParam4; // 0xe0
        struct FString CustomParam5; // 0xf0

    };

    struct FINTLCustomerResult : FINTLBaseResult //ScriptStruct INTLCore.INTLCustomerResult
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t MsgType; // 0x40

    };

    struct FINTLComplianceResult : FINTLBaseResult //ScriptStruct INTLCore.INTLComplianceResult
    {
    //Children Prop Count (Fields): 16
    public:

        int32_t AdultStatus; // 0x40
        int32_t ParentCertificateStatus; // 0x44
        struct FString ParentCertificateStatusExpiration; // 0x48
        int32_t EUUserAgreeStatus; // 0x58
        struct FString CountryCode; // 0x60
        int32_t AdultAge; // 0x70
        int32_t GameGrade; // 0x74
        int32_t CertificateType; // 0x78
        struct FString AdultStatusExpiration; // 0x80
        struct FString TS; // 0x90
        bool IsEEA; // 0xa0
        struct FString Region; // 0xa8
        struct FString Email; // 0xb8
        int32_t RealNameAuthStatus; // 0xc8
        int32_t NeedRealNameAuth; // 0xcc
        bool NeedLICertification; // 0xd0

    };

    struct FINTLWebViewResult : FINTLBaseResult //ScriptStruct INTLCore.INTLWebViewResult
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t MsgType; // 0x40
        struct FString MsgJsonData; // 0x48

    };

    struct FINTLPushResult : FINTLBaseResult //ScriptStruct INTLCore.INTLPushResult
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t Type; // 0x40
        struct FString Notification; // 0x48

    };

    struct FINTLLocalNotificationIOS //ScriptStruct INTLCore.INTLLocalNotificationIOS
    {
    //Children Prop Count (Fields): 8
    public:

        int32_t RepeatType; // 0x0
        struct FString AlertTitle; // 0x8
        int32_t FireTime; // 0x18
        int32_t Badge; // 0x1c
        struct FString AlertBody; // 0x20
        struct FString AlertAction; // 0x30
        struct FString NotificationID; // 0x40
        struct TMap<struct FString, struct FString> UserInfo; // 0x50

    };

    struct FINTLLocalNotification //ScriptStruct INTLCore.INTLLocalNotification
    {
    //Children Prop Count (Fields): 12
    public:

        int32_t NotificationID; // 0x0
        int32_t ActionType; // 0x4
        int32_t SoundEnabled; // 0x8
        int32_t Lights; // 0xc
        int32_t Vibrate; // 0x10
        int32_t FireTime; // 0x14
        struct FString Title; // 0x18
        struct FString Content; // 0x28
        struct FString TickerText; // 0x38
        struct FString ActionParameter; // 0x48
        struct FString RingUri; // 0x58
        struct FString SmallIcon; // 0x68

    };

    struct FINTLFriendReqInfo //ScriptStruct INTLCore.INTLFriendReqInfo
    {
    //Children Prop Count (Fields): 9
    public:

        int32_t Type; // 0x0
        struct FString User; // 0x8
        struct FString Title; // 0x18
        struct FString Description; // 0x28
        struct FString ImagePath; // 0x38
        struct FString ThumbPath; // 0x48
        struct FString MediaPath; // 0x58
        struct FString Link; // 0x68
        struct FString extraJson; // 0x78

    };

    struct FINTLFriendResult : FINTLBaseResult //ScriptStruct INTLCore.INTLFriendResult
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FINTLPersonInfo> FriendInfoList; // 0x40

    };

    struct FINTLPersonInfo //ScriptStruct INTLCore.INTLPersonInfo
    {
    //Children Prop Count (Fields): 9
    public:

        struct FString Openid; // 0x0
        struct FString userName; // 0x10
        int32_t Gender; // 0x20
        struct FString PictureUrl; // 0x28
        struct FString Country; // 0x38
        struct FString Province; // 0x48
        struct FString City; // 0x58
        struct FString Language; // 0x68
        struct FString extraJson; // 0x78

    };

    struct FINTLNoticeResult : FINTLBaseResult //ScriptStruct INTLCore.INTLNoticeResult
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString SeqId; // 0x40
        struct TArray<struct FINTLNoticeInfo> NoticeInfoList; // 0x50

    };

    struct FINTLNoticeInfo //ScriptStruct INTLCore.INTLNoticeInfo
    {
    //Children Prop Count (Fields): 11
    public:

        int32_t NoticeID; // 0x0
        struct FString AppID; // 0x8
        struct FString AppNoticeId; // 0x18
        int32_t status; // 0x28
        int32_t StartTime; // 0x2c
        int32_t EndTime; // 0x30
        int32_t UpdateTime; // 0x34
        struct FString AreaList; // 0x38
        struct TArray<struct FINTLNoticePicture> PictureList; // 0x48
        struct FString ExtraData; // 0x58
        struct TArray<struct FINTLNoticeContent> ContentList; // 0x68

    };

    struct FINTLNoticeContent //ScriptStruct INTLCore.INTLNoticeContent
    {
    //Children Prop Count (Fields): 8
    public:

        int32_t ContentId; // 0x0
        struct FString AppContentId; // 0x8
        struct FString Title; // 0x18
        struct FString Content; // 0x28
        struct FString LangType; // 0x38
        int32_t UpdateTime; // 0x48
        struct FString ExtraData; // 0x50
        struct TArray<struct FINTLNoticePicture> PictureList; // 0x60

    };

    struct FINTLNoticePicture //ScriptStruct INTLCore.INTLNoticePicture
    {
    //Children Prop Count (Fields): 4
    public:

        struct FString URL; // 0x0
        struct FString Hash; // 0x10
        struct FString RedirectURL; // 0x20
        struct FString ExtraData; // 0x30

    };

    struct FINTLAccountResult : FINTLBaseResult //ScriptStruct INTLCore.INTLAccountResult
    {
    //Children Prop Count (Fields): 34
    public:

        int32_t ChannelID; // 0x40
        struct FString Channel; // 0x48
        struct FString SeqId; // 0x58
        struct FString userName; // 0x68
        struct FString uid; // 0x78
        struct FString Token; // 0x88
        int32_t ExpireTime; // 0x98
        int32_t isRegister; // 0x9c
        int32_t isSetPassword; // 0xa0
        int32_t isReceiveEmail; // 0xa4
        int32_t VerifyCodeExpireTime; // 0xa8
        bool RequestIsLogin; // 0xac
        int32_t CanBind; // 0xb0
        int32_t LoginDays; // 0xb4
        struct FString PpAcceptanceVersion; // 0xb8
        struct FString TosAcceptanceVersion; // 0xc8
        struct FDateTime PpAcceptanceTime; // 0xd8
        struct FDateTime TosAcceptanceTime; // 0xe0
        struct FINTLAccountProfile Profile; // 0xe8
        int32_t IsUserNameAvailable; // 0x1c0
        bool HasGameSaccUid; // 0x1c4
        struct FString GameSaccUid; // 0x1c8
        bool HasGameSaccOpenId; // 0x1d8
        struct FString GameSaccOpenId; // 0x1e0
        bool HasLiUid; // 0x1f0
        struct FString LiUid; // 0x1f8
        bool HasLiOpenId; // 0x208
        struct FString LiOpenId; // 0x210
        bool NeedNotify; // 0x220
        struct FString UserAgreedGameTos; // 0x228
        struct FString UserAgreedGamePP; // 0x238
        struct FString UserAgreedLiPP; // 0x248
        struct FString UserAgreedLiDt; // 0x258
        struct FString UserAgreedLiTos; // 0x268

    };

    struct FINTLAccountProfile //ScriptStruct INTLCore.INTLAccountProfile
    {
    //Children Prop Count (Fields): 19
    public:

        struct FString userName; // 0x0
        struct FString Birthday; // 0x10
        int32_t BirthdayYear; // 0x20
        int32_t BirthdayMonth; // 0x24
        int32_t BirthdayDay; // 0x28
        int32_t isReceiveEmail; // 0x2c
        struct FString Region; // 0x30
        struct FString LangType; // 0x40
        struct FString extraJson; // 0x50
        struct FString Email; // 0x60
        struct FString Phone; // 0x70
        struct FString PhoneAreaCode; // 0x80
        int32_t AccountType; // 0x90
        struct FString NickName; // 0x98
        struct FString PrivacyPolicy; // 0xa8
        struct FString TermsOfService; // 0xb8
        int32_t PrivacyUpdateTime; // 0xc8
        int32_t TermsUpdateTime; // 0xcc
        int32_t UsernamePassVerify; // 0xd0

    };

    struct FINTLDeviceLevelResult : FINTLBaseResult //ScriptStruct INTLCore.INTLDeviceLevelResult
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t DeviceLevel; // 0x40

    };

    struct FINTLIDTokenResult : FINTLBaseResult //ScriptStruct INTLCore.INTLIDTokenResult
    {
    //Children Prop Count (Fields): 1
    public:

        struct FString IdToken; // 0x40

    };

    struct FINTLAuthResult : FINTLBaseResult //ScriptStruct INTLCore.INTLAuthResult
    {
    //Children Prop Count (Fields): 25
    public:

        struct FString Openid; // 0x40
        struct FString Token; // 0x50
        int32_t TokenExpireTime; // 0x60
        int32_t FirstLogin; // 0x64
        struct FString RegChannelDis; // 0x68
        struct FString userName; // 0x78
        int32_t Gender; // 0x88
        struct FString Birthday; // 0x90
        struct FString PicUrl; // 0xa0
        struct FString Pf; // 0xb0
        struct FString PfKey; // 0xc0
        bool NeedRealNameAuth; // 0xd0
        int32_t ChannelID; // 0xd4
        enum class EINTLLoginChannel ChannelName; // 0xd8
        struct FString ChannelInfo; // 0xe0
        struct FString ConfirmCode; // 0xf0
        int32_t ConfirmCodeExpireTime; // 0x100
        struct FString BindList; // 0x108
        struct FString LegalDocumentsAcceptedVersion; // 0x118
        int32_t DeleteAccountStatus; // 0x128
        struct FString DeleteAccountInfo; // 0x130
        int32_t DeleteLIAccountStatus; // 0x140
        struct FString TransferCode; // 0x148
        int32_t TransferCodeExpireTime; // 0x158
        struct FString Email; // 0x160

    };

    struct FINTLGroupReqInfo : FINTLBaseResult //ScriptStruct INTLCore.INTLGroupReqInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString worldId; // 0x40
        struct FString guildId; // 0x50

    };

    struct FLIUserData //ScriptStruct LevelInfinite.LIUserData
    {
    //Children Prop Count (Fields): 13
    public:

        int32_t GameId; // 0x0
        struct FString ChannelID; // 0x8
        struct FString Openid; // 0x18
        struct FString Token; // 0x28
        struct FString RoleId; // 0x38
        struct FString Region; // 0x48
        int32_t AreaID; // 0x58
        int32_t ZoneId; // 0x5c
        struct FString LangType; // 0x60
        struct FString DefLangType; // 0x70
        struct FString RoleName; // 0x80
        struct FString AppVersion; // 0x90
        struct FString extraJson; // 0xa0

    };

    struct FLIBaseEvent //ScriptStruct LevelInfinite.LIBaseEvent
    {
    //Children Prop Count (Fields): 2
    public:

        enum class ELIEventType EventType; // 0x0
        struct FString extraJson; // 0x8

    };

    struct FGNPanelReadyEventParam //ScriptStruct LevelInfinite.GNPanelReadyEventParam
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString Module; // 0x0
        bool isPopPanel; // 0x10
        struct FGNPanelReadyEventExtraParam ExtraParams; // 0x18

    };

    struct FGNPanelReadyEventExtraParam //ScriptStruct LevelInfinite.GNPanelReadyEventExtraParam
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString asset_version; // 0x0
        bool is_cdn_asset; // 0x10

    };

    struct FINTLUserData //ScriptStruct GameNative.INTLUserData
    {
    //Children Prop Count (Fields): 17
    public:

        int32_t GameId; // 0x0
        struct FString ChannelID; // 0x8
        struct FString Openid; // 0x18
        struct FString Token; // 0x28
        struct FString RoleId; // 0x38
        struct FString Region; // 0x48
        int32_t AreaID; // 0x58
        int32_t ZoneId; // 0x5c
        int32_t Os; // 0x60
        struct FString LangType; // 0x68
        struct FString DefLangType; // 0x78
        struct FString RoleName; // 0x88
        struct FString PayToken; // 0x98
        struct FString HeadUrl; // 0xa8
        struct FString PlayerLevel; // 0xb8
        struct FString AppVersion; // 0xc8
        struct FString extraJson; // 0xd8

    };

    struct FINTLFrameInfo //ScriptStruct GameNative.INTLFrameInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString Path; // 0x0
        struct FString Md5; // 0x10
        int32_t Size; // 0x20

    };

    struct FIntMargin //ScriptStruct Paper2D.IntMargin
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t Left; // 0x0
        int32_t Top; // 0x4
        int32_t Right; // 0x8
        int32_t Bottom; // 0xc

    };

    struct FPaperFlipbookKeyFrame //ScriptStruct Paper2D.PaperFlipbookKeyFrame
    {
    //Children Prop Count (Fields): 2
    public:

        class UPaperSprite* Sprite; // 0x0
        int32_t FrameRun; // 0x8

    };

    struct FSpriteInstanceData //ScriptStruct Paper2D.SpriteInstanceData
    {
    //Children Prop Count (Fields): 4
    public:

        struct FMatrix Transform; // 0x0
        class UPaperSprite* SourceSprite; // 0x40
        struct FColor VertexColor; // 0x48
        int32_t MaterialIndex; // 0x4c

    };

    struct FPaperSpriteSocket //ScriptStruct Paper2D.PaperSpriteSocket
    {
    //Children Prop Count (Fields): 2
    public:

        struct FTransform LocalTransform; // 0x0
        struct FName SocketName; // 0x30

    };

    struct FPaperSpriteAtlasSlot //ScriptStruct Paper2D.PaperSpriteAtlasSlot
    {
    //Children Prop Count (Fields): 6
    public:

        struct TSoftObjectPtr<UPaperSprite> SpriteRef; // 0x0
        int32_t AtlasIndex; // 0x28
        int32_t X; // 0x2c
        int32_t Y; // 0x30
        int32_t Width; // 0x34
        int32_t Height; // 0x38

    };

    struct FPaperTerrainMaterialRule //ScriptStruct Paper2D.PaperTerrainMaterialRule
    {
    //Children Prop Count (Fields): 8
    public:

        class UPaperSprite* StartCap; // 0x0
        struct TArray<class UPaperSprite*> Body; // 0x8
        class UPaperSprite* EndCap; // 0x18
        float MinimumAngle; // 0x20
        float MaximumAngle; // 0x24
        bool bEnableCollision; // 0x28
        float CollisionOffset; // 0x2c
        int32_t DrawOrder; // 0x30

    };

    struct FPaperTileInfo //ScriptStruct Paper2D.PaperTileInfo
    {
    //Children Prop Count (Fields): 2
    public:

        class UPaperTileSet* TileSet; // 0x0
        int32_t PackedTileIndex; // 0x8

    };

    struct FPaperTileSetTerrain //ScriptStruct Paper2D.PaperTileSetTerrain
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString TerrainName; // 0x0
        int32_t CenterTileIndex; // 0x10

    };

    struct FPaperTileMetadata //ScriptStruct Paper2D.PaperTileMetadata
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName UserDataName; // 0x0
        struct FSpriteGeometryCollection CollisionData; // 0x8
        char TerrainMembership; // 0x38

    };

    struct FSpriteGeometryCollection //ScriptStruct Paper2D.SpriteGeometryCollection
    {
    //Children Prop Count (Fields): 8
    public:

        struct TArray<struct FSpriteGeometryShape> Shapes; // 0x0
        enum class ESpritePolygonMode GeometryType; // 0x10
        int32_t PixelsPerSubdivisionX; // 0x14
        int32_t PixelsPerSubdivisionY; // 0x18
        bool bAvoidVertexMerging; // 0x1c
        float AlphaThreshold; // 0x20
        float DetailAmount; // 0x24
        float SimplifyEpsilon; // 0x28

    };

    struct FSpriteGeometryShape //ScriptStruct Paper2D.SpriteGeometryShape
    {
    //Children Prop Count (Fields): 6
    public:

        enum class ESpriteShapeType ShapeType; // 0x0
        struct TArray<struct FVector2D> Vertices; // 0x8
        struct FVector2D BoxSize; // 0x18
        struct FVector2D BoxPosition; // 0x20
        float Rotation; // 0x28
        bool bNegativeWinding; // 0x2c

    };

    struct FSpriteDrawCallRecord //ScriptStruct Paper2D.SpriteDrawCallRecord
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Destination; // 0x0
        class UTexture* BaseTexture; // 0x10
        struct FColor Color; // 0x48

    };

    struct FSpriteAssetInitParameters //ScriptStruct Paper2D.SpriteAssetInitParameters
    {
    public:


    };

    struct FVertexLayout //ScriptStruct RigLogicModule.VertexLayout
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t position; // 0x0
        int32_t TextureCoordinate; // 0x4
        int32_t Normal; // 0x8

    };

    struct FTextureCoordinate //ScriptStruct RigLogicModule.TextureCoordinate
    {
    //Children Prop Count (Fields): 2
    public:

        float U; // 0x0
        float V; // 0x4

    };

    struct FMeshBlendShapeChannelMapping //ScriptStruct RigLogicModule.MeshBlendShapeChannelMapping
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t MeshIndex; // 0x0
        int32_t BlendShapeChannelIndex; // 0x4

    };

    struct FCoordinateSystem //ScriptStruct RigLogicModule.CoordinateSystem
    {
    //Children Prop Count (Fields): 3
    public:

        enum class EDirection XAxis; // 0x0
        enum class EDirection YAxis; // 0x1
        enum class EDirection ZAxis; // 0x2

    };

    struct FRigUnit_RigLogic : FRigUnitMutable //ScriptStruct RigLogicModule.RigUnit_RigLogic
    {
    //Children Prop Count (Fields): 1
    public:

        struct FRigUnit_RigLogic_Data Data; // 0x68

    };

    struct FRigUnit_RigLogic_Data //ScriptStruct RigLogicModule.RigUnit_RigLogic_Data
    {
    //Children Prop Count (Fields): 8
    public:

        struct TWeakObjectPtr<struct USkeletalMeshComponent> SkelMeshComponent; // 0x0
        struct TArray<int32_t> InputCurveIndices; // 0x18
        struct TArray<int32_t> HierarchyBoneIndices; // 0x28
        struct TArray<struct FRigUnit_RigLogic_IntArray> MorphTargetCurveIndices; // 0x38
        struct TArray<struct FRigUnit_RigLogic_IntArray> BlendShapeIndices; // 0x48
        struct TArray<struct FRigUnit_RigLogic_IntArray> CurveContainerIndicesForAnimMaps; // 0x58
        struct TArray<struct FRigUnit_RigLogic_IntArray> RigLogicIndicesForAnimMaps; // 0x68
        uint32_t CurrentLOD; // 0x78

    };

    struct FRigUnit_RigLogic_IntArray //ScriptStruct RigLogicModule.RigUnit_RigLogic_IntArray
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<int32_t> Values; // 0x0

    };

    struct FGLTFOverrideMaterialBakeSettings //ScriptStruct GLTFExporterRuntime.GLTFOverrideMaterialBakeSettings
    {
    //Children Prop Count (Fields): 6
    public:

        bool bOverrideSize; // 0x0
        enum class EGLTFMaterialBakeSizePOT Size; // 0x1
        bool bOverrideFilter; // 0x2
        enum class TextureFilter Filter; // 0x3
        bool bOverrideTiling; // 0x4
        enum class TextureAddress Tiling; // 0x5

    };

    struct FFunctionCaller //ScriptStruct VariantManagerContent.FunctionCaller
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName FunctionName; // 0x0

    };

    struct FCapturedPropSegment //ScriptStruct VariantManagerContent.CapturedPropSegment
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString PropertyName; // 0x0
        int32_t PropertyIndex; // 0x10
        struct FString ComponentName; // 0x18

    };

    struct FVariantDependency //ScriptStruct VariantManagerContent.VariantDependency
    {
    //Children Prop Count (Fields): 3
    public:

        struct TSoftObjectPtr<UVariantSet> VariantSet; // 0x0
        struct TSoftObjectPtr<UVariant> Variant; // 0x28
        bool bEnabled; // 0x50

    };

    struct FMFMarkerPosDataTabelData : FTableRowBase //ScriptStruct MFBenchmark.MFMarkerPosDataTabelData
    {
    //Children Prop Count (Fields): 6
    public:

        float PosX; // 0x8
        float PosY; // 0xc
        float PosZ; // 0x10
        float RotX; // 0x14
        float RotY; // 0x18
        float RotZ; // 0x1c

    };

    struct FSceneObjeInfo_Base //ScriptStruct MFDataVisualizer.SceneObjeInfo_Base
    {
    public:


    };

    struct FSceneObjInfo_RenderObj : FSceneObjeInfo_Base //ScriptStruct MFDataVisualizer.SceneObjInfo_RenderObj
    {
    //Children Prop Count (Fields): 1
    public:

        class UStaticMesh* MeshResource; // 0x28

    };

    struct FSceneObjInfo_Foliage : FSceneObjeInfo_Base //ScriptStruct MFDataVisualizer.SceneObjInfo_Foliage
    {
    //Children Prop Count (Fields): 1
    public:

        class UStaticMesh* MeshResource; // 0x28

    };

    struct FSceneObjInfo_StaticMeshActor : FSceneObjeInfo_Base //ScriptStruct MFDataVisualizer.SceneObjInfo_StaticMeshActor
    {
    //Children Prop Count (Fields): 2
    public:

        class UStaticMesh* MeshResource; // 0x38
        class UMaterialInterface* MainMat; // 0x40

    };

    struct FPufferTaskInfo //ScriptStruct MFPluginWrapper.PufferTaskInfo
    {
    //Children Prop Count (Fields): 8
    public:

        int32_t TaskId; // 0x0
        struct FString TaskName; // 0x8
        enum class EPufferTaskState TaskState; // 0x18
        int32_t NowSize; // 0x1c
        int32_t TotalSize; // 0x20
        bool bIsFileTask; // 0x24
        bool bIsBatchTask; // 0x25
        bool bIsRestoreTask; // 0x26

    };

    struct FPufferInitConfigData //ScriptStruct MFPluginWrapper.PufferInitConfigData
    {
    //Children Prop Count (Fields): 18
    public:

        int32_t MaxDownloadSpeed; // 0x0
        int32_t MaxDownTask; // 0x4
        int32_t MaxDownloadsPerTask; // 0x8
        int64_t PufferProductId; // 0x10
        int32_t NeedCheck; // 0x18
        int32_t NeedFileRestore; // 0x1c
        int32_t RemoveOldWhenUpdate; // 0x20
        struct FString StrSourceDir; // 0x28
        struct FString StrPufferServerUrl; // 0x38
        struct FString StrPufferGroupMarkId; // 0x48
        struct FString strUserID; // 0x58
        int64_t PufferGameId; // 0x68
        int32_t PufferUpdateType; // 0x70
        int64_t PufferDolphinProductId; // 0x78
        struct FString StrDolphinAppVersion; // 0x80
        struct FString StrDolphinResVersion; // 0x90
        int32_t EnableIOSBGDownload; // 0xa0
        int32_t ShowFileList; // 0xa4

    };

    struct FMyHotfixStruct //ScriptStruct MFPluginWrapper.MyHotfixStruct
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t A; // 0x0
        int32_t B; // 0x4

    };

    struct FHardwareBlacklistTableRow : FTableRowBase //ScriptStruct WindowsDevicePermission.HardwareBlacklistTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t HardwareId; // 0x8
        struct FString HardwareName; // 0x10

    };

    struct FHardwareCheckConfigTableRow : FTableRowBase //ScriptStruct WindowsDevicePermission.HardwareCheckConfigTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString DeviceName; // 0x8
        int32_t IntValue; // 0x18
        struct FString Comment; // 0x20

    };

    struct FSystemLocalizationMsgTableRow : FTableRowBase //ScriptStruct WindowsDevicePermission.SystemLocalizationMsgTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t MsgID; // 0x8
        struct FString culture; // 0x10
        struct FText MsgText; // 0x20

    };

    struct FDeviceConsoleConfig //ScriptStruct MFBaseModule.DeviceConsoleConfig
    {
    public:


    };

    struct FDeviceQualityConfig //ScriptStruct MFBaseModule.DeviceQualityConfig
    {
    public:


    };

    struct FMemorySettingConfig //ScriptStruct MFBaseModule.MemorySettingConfig
    {
    public:


    };

    struct FGameletPropertyMetaRoot //ScriptStruct GameletJsEnv.GameletPropertyMetaRoot
    {
    public:


    };

    struct FGameletArrayBuffer //ScriptStruct GameletJsEnv.GameletArrayBuffer
    {
    public:


    };

    struct FGameletJsObject //ScriptStruct GameletJsEnv.GameletJsObject
    {
    public:


    };

    struct FMFClimateSharedNoiseGenerationSettings //ScriptStruct MFClimateRuntime.MFClimateSharedNoiseGenerationSettings
    {
    //Children Prop Count (Fields): 6
    public:

        struct FMFClimateNoiseGenerationParams BaseNoiseGenerationParams; // 0x0
        struct FMFClimateNoiseGenerationParams DetailNoiseGenerationParams; // 0x14
        struct FMFClimateNoiseGenerationParams BaseNoise2DGenerationParams; // 0x28
        struct FMFClimateNoiseGenerationParams DetailNoise2DGenerationParams; // 0x3c
        struct FMFClimateCurlCloudNoiseGenerationParams CurlNoiseParams; // 0x50
        struct FMFClimateWeatherMapCloudNoiseGenerationParams WeatherMapParams; // 0x58

    };

    struct FMFClimateWeatherMapCloudNoiseGenerationParams //ScriptStruct MFClimateRuntime.MFClimateWeatherMapCloudNoiseGenerationParams
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t CoverageWorleyCellNum; // 0x0
        int32_t CoveragePerlinFreq; // 0x4
        int32_t CloudTypePerlinFreq; // 0x8

    };

    struct FMFClimateCurlCloudNoiseGenerationParams //ScriptStruct MFClimateRuntime.MFClimateCurlCloudNoiseGenerationParams
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t CurlCells; // 0x0
        float CurlBrightness; // 0x4

    };

    struct FMFClimateNoiseGenerationParams //ScriptStruct MFClimateRuntime.MFClimateNoiseGenerationParams
    {
    //Children Prop Count (Fields): 5
    public:

        enum class EMFClimateNoiseType NoiseType; // 0x0
        int32_t CellNoiseCells; // 0x4
        float CellNoiseScale; // 0x8
        char bCellNoiseUseSmoothMin; // 0xc
        float CellNoiseSmoothMinK; // 0x10

    };

    struct FMFClimatePlatformNoiseGenerationSettings //ScriptStruct MFClimateRuntime.MFClimatePlatformNoiseGenerationSettings
    {
    //Children Prop Count (Fields): 6
    public:

        struct FIntVector BaseNoiseTextureSize; // 0x0
        struct FIntVector DetailNoiseTextureSize; // 0xc
        struct FIntPoint BaseNoise2DTextureSize; // 0x18
        struct FIntPoint DetailNoise2DTextureSize; // 0x20
        struct FIntPoint WeatherMapNoiseTextureSize; // 0x28
        struct FIntPoint CurlNoiseTextureSize; // 0x30

    };

    struct FMFClimateCloudTypeDescriptor //ScriptStruct MFClimateRuntime.MFClimateCloudTypeDescriptor
    {
    //Children Prop Count (Fields): 5
    public:

        float TypeWeight; // 0x0
        struct FRuntimeFloatCurve BaseNoiseCenter; // 0x8
        struct FRuntimeFloatCurve BaseNoiseVariation; // 0x90
        struct FRuntimeFloatCurve ExtinctionScale; // 0x118
        struct FRuntimeFloatCurve Erosion; // 0x1a0

    };

    struct FMFClimateFractalLightningGenerateParams //ScriptStruct MFClimateRuntime.MFClimateFractalLightningGenerateParams
    {
    //Children Prop Count (Fields): 10
    public:

        int32_t RandomSeed; // 0x0
        float InitialBranchProb; // 0x4
        float BranchProbAttenuation; // 0x8
        struct FVector TargetOffset; // 0xc
        float MinSegmentLength; // 0x18
        int32_t MaxFracTimes; // 0x1c
        float WidthFactor; // 0x20
        float BranchShortenFactor; // 0x24
        struct FVector2D MinMaxBranchLiftAngleDegrees; // 0x28
        float MinChannelCreationDistance; // 0x30

    };

    struct FMFClimateRainParameterUpdateTick : FTickFunction //ScriptStruct MFClimateRuntime.MFClimateRainParameterUpdateTick
    {
    //Children Prop Count (Fields): 1
    public:

        class AMFClimateRain* Rain; // 0x38

    };

    struct FMFClimateRainOcclusionTestQueueItem //ScriptStruct MFClimateRuntime.MFClimateRainOcclusionTestQueueItem
    {
    //Children Prop Count (Fields): 1
    public:

        class UMFClimateMovableRainWetnessComponent* Component; // 0x0

    };

    struct FMFClimateCloudSettings //ScriptStruct MFClimateRuntime.MFClimateCloudSettings
    {
    //Children Prop Count (Fields): 26
    public:

        float CloudBaseTilingVertical; // 0x0
        float CloudBaseTilingHorizontal; // 0x4
        float CloudDetailTiling; // 0x8
        float CloudDetailStrength; // 0xc
        float CloudCurlStrength; // 0x10
        float CloudCurlTiling; // 0x14
        float DetailWindMultiply; // 0x18
        float CloudBottomHeight; // 0x1c
        float CloudThickness; // 0x20
        float CloudDetailFadeStart; // 0x24
        float CloudDetailFadeEnd; // 0x28
        float HorizonAARange; // 0x2c
        float HorizonAAValue; // 0x30
        struct FLinearColor CloudAlbedo; // 0x34
        float CloudExtinction; // 0x44
        float CloudFirstLobeG; // 0x48
        float CloudSecondLobeG; // 0x4c
        float MaxShadowRayLength; // 0x50
        float ShadowAttenuation; // 0x54
        float CloudAmbientOcclusionSky; // 0x58
        float CloudAmbientOcclusionGround; // 0x5c
        float CloudOpacityScale; // 0x60
        struct FLinearColor CloudEmissive; // 0x64
        struct FLinearColor LightningTint; // 0x74
        float EarthShadowSharpness; // 0x84
        float InscatteringBrightness; // 0x88

    };

    struct FMFClimateWeatherLayer //ScriptStruct MFClimateRuntime.MFClimateWeatherLayer
    {
    //Children Prop Count (Fields): 5
    public:

        float BlendWeight; // 0x0
        float EffectiveBlendWeight; // 0x4
        class ULevelSequence* TimeOfDaySequence; // 0x8
        enum class EWeatherLayerEvaluationMode EvaluationMode; // 0x10
        bool bIgnorePresetSystem; // 0x14

    };

    struct FMFClimateLayerPreset //ScriptStruct MFClimateRuntime.MFClimateLayerPreset
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString PresetName; // 0x0
        struct TArray<struct FMFClimateWeatherLayerPresetItem> Items; // 0x10
        float Weight; // 0x20

    };

    struct FMFClimateWeatherLayerPresetItem //ScriptStruct MFClimateRuntime.MFClimateWeatherLayerPresetItem
    {
    //Children Prop Count (Fields): 2
    public:

        class ULevelSequence* Sequence; // 0x0
        float Weight; // 0x8

    };

    struct FMFClimateMPCItem //ScriptStruct MFClimateRuntime.MFClimateMPCItem
    {
    //Children Prop Count (Fields): 2
    public:

        class UMaterialParameterCollection* PublicMPC; // 0x0
        class UMaterialParameterCollectionInstance* MPCI; // 0x8

    };

    struct FMFEnvBlockInitInfo //ScriptStruct MFEnvironment.MFEnvBlockInitInfo
    {
    //Children Prop Count (Fields): 4
    public:

        struct FMFEnvBurnBlockBound BurnBounds; // 0x0
        char DamageScale; // 0x10
        char TimeScale; // 0x11
        bool bNoEffects; // 0x12

    };

    struct FMFEnvPhysFoliageMeshRow : FTableRowBase //ScriptStruct MFEnvironment.MFEnvPhysFoliageMeshRow
    {
    //Children Prop Count (Fields): 3
    public:

        struct TSoftObjectPtr<UStaticMesh> StaticMeshSoftPtr; // 0x8
        struct FSoftObjectPath MeshObjectPath; // 0x30
        enum class EMFPhysFoliageMeshTypeEnum MeshType; // 0x48

    };

    struct FMFEnvTrailPlayerInfo //ScriptStruct MFEnvironment.MFEnvTrailPlayerInfo
    {
    //Children Prop Count (Fields): 7
    public:

        struct FVector PlayerPosition; // 0x0
        struct FVector PlayerPositionLeft; // 0xc
        struct FVector PlayerPositionRight; // 0x18
        struct FVector2D Direction; // 0x24
        float Velocity; // 0x2c
        float Radius; // 0x30
        enum class EMFEnvTrailShapeEnum Shape; // 0x34

    };

    struct FMFEnvWindSwayInstInfo //ScriptStruct MFEnvironment.MFEnvWindSwayInstInfo
    {
    //Children Prop Count (Fields): 4
    public:

        class UHierarchicalInstancedStaticMeshComponent* InstPtr; // 0x0
        int32_t InstId; // 0x8
        struct FVector2D Pos; // 0xc
        struct FVector4 Params; // 0x20

    };

    struct FMFEnvWindDirectForceInfo //ScriptStruct MFEnvironment.MFEnvWindDirectForceInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector2D ForceVector; // 0x0
        struct FVector2D ForceOrigin; // 0x8
        float ForceMomentum; // 0x10

    };

    struct FMFEnvWindExplodeForceInfo //ScriptStruct MFEnvironment.MFEnvWindExplodeForceInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector2D ForceOrigin; // 0x0
        float ForceMomentum; // 0x8
        float LastTime; // 0xc

    };

    struct FHoverVehicleCheckLocationRepData //ScriptStruct SGFramework.HoverVehicleCheckLocationRepData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector ActorLocation; // 0x0
        struct FRotator ActorRotation; // 0xc

    };

    struct FHoverVehicleMovementRepData //ScriptStruct SGFramework.HoverVehicleMovementRepData
    {
    //Children Prop Count (Fields): 3
    public:

        float ForwardVal; // 0x0
        float RightVal; // 0x4
        bool IsSpeedUp; // 0x8

    };

    struct FRepInfo //ScriptStruct SGFramework.RepInfo
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<struct FVectorAndDist> GridNodes; // 0x0
        struct FIntVector MinCoord; // 0x10
        struct FIntVector MaxCoord; // 0x1c
        float InMaxDistanceColor; // 0x28

    };

    struct FVectorAndDist //ScriptStruct SGFramework.VectorAndDist
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t X; // 0x0
        int32_t Y; // 0x4
        int32_t Z; // 0x8
        int32_t ManhattanDistance; // 0xc

    };

    struct FGridNode //ScriptStruct SGFramework.GridNode
    {
    public:


    };

    struct FCooperateQTECharacterInfo //ScriptStruct SGFramework.CooperateQTECharacterInfo
    {
    //Children Prop Count (Fields): 2
    public:

        class ACharacter* Character; // 0x0
        class UAnimMontage* TargetAnimMontage; // 0x8

    };

    struct FEnvInfo //ScriptStruct SGFramework.EnvInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<class AActor*> ActorsNearBy; // 0x0
        float DetectRadius; // 0x10

    };

    struct FAircraftRotorSetup //ScriptStruct SGFramework.AircraftRotorSetup
    {
    //Children Prop Count (Fields): 6
    public:

        float ForceMax; // 0x0
        struct FRotator RotationMax; // 0x4
        struct FVector CurrentForce; // 0x10
        struct FVector CurrentTorqueForce; // 0x1c
        struct FName BoneName; // 0x28
        struct FVector AdditionalOffset; // 0x30

    };

    struct FAbilitySlot //ScriptStruct SGFramework.AbilitySlot
    {
    //Children Prop Count (Fields): 2
    public:

        struct FGameplayTag InstancedAbilityKey; // 0x0
        struct FGameplayAbilitySpecHandle InstancedAbilityHandle; // 0x8

    };

    struct FGameEffectExecutor //ScriptStruct SGFramework.GameEffectExecutor
    {
    //Children Prop Count (Fields): 3
    public:

        struct FActiveGameplayEffectHandle Handle; // 0x0
        bool bAdd; // 0x8
        struct FActiveGameplayEffect ActiveEffect; // 0x10

    };

    struct FGameplayAbilityRepEquipAnimMontage //ScriptStruct SGFramework.GameplayAbilityRepEquipAnimMontage
    {
    //Children Prop Count (Fields): 4
    public:

        bool bHasPlay; // 0x0
        class ASGInventory* EquipInv; // 0x8
        class UAnimMontage* InventoryMontage; // 0x10
        class UAnimMontage* CharacterMontage; // 0x18

    };

    struct FGameplayAbilityRepStopAdvancedAnimMontage //ScriptStruct SGFramework.GameplayAbilityRepStopAdvancedAnimMontage
    {
    //Children Prop Count (Fields): 3
    public:

        float Timestamp; // 0x0
        struct FName StopMontagesByGroupName; // 0x4
        float StopMontagesBlendOutTime; // 0xc

    };

    struct FGameplayAbilityRepAdvancedAnimMontage //ScriptStruct SGFramework.GameplayAbilityRepAdvancedAnimMontage
    {
    //Children Prop Count (Fields): 11
    public:

        bool bHasPlay; // 0x0
        class UAnimMontage* CharacterMontage; // 0x8
        class USkeletalMesh* InventoryMesh; // 0x10
        class UAnimMontage* InventoryMontage; // 0x18
        class UAnimInstance* InventoryAnimInstanceClass; // 0x20
        struct FName InventoryAttachSocket; // 0x28
        float Timestamp; // 0x30
        struct FName StopMontagesByGroupName; // 0x34
        float StopMontagesBlendOutTime; // 0x3c
        bool b3PShouldKeepLastFrame; // 0x40
        bool CanTriggerSoundWithGrass; // 0x41

    };

    struct FSGGameplayAbilityActorInfo : FGameplayAbilityActorInfo //ScriptStruct SGFramework.SGGameplayAbilityActorInfo
    {
    public:


    };

    struct FSGGameplayEffectContext : FGameplayEffectContext //ScriptStruct SGFramework.SGGameplayEffectContext
    {
    //Children Prop Count (Fields): 1
    public:

        struct FSGGEDataReference SGGEDataRef; // 0x70

    };

    struct FSGGEDataReference //ScriptStruct SGFramework.SGGEDataReference
    {
    //Children Prop Count (Fields): 2
    public:

        class UDataTable* DataOwner; // 0x0
        uint32_t GE_ID; // 0x8

    };

    struct FSGAbilityTaskFireTickFunction : FTickFunction //ScriptStruct SGFramework.SGAbilityTaskFireTickFunction
    {
    //Children Prop Count (Fields): 1
    public:

        class USGAbilityTask_Fire* Target; // 0x38

    };

    struct FSGAbilityTaskPrepareToFireTickFunction : FTickFunction //ScriptStruct SGFramework.SGAbilityTaskPrepareToFireTickFunction
    {
    //Children Prop Count (Fields): 1
    public:

        class USGAbilityTask_PrepareToFire* Target; // 0x38

    };

    struct FHeroAbilityConfig //ScriptStruct SGFramework.HeroAbilityConfig
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString HeroAbilityName; // 0x0
        struct TArray<class UGameplayAbility*> AbilityModuleClassList; // 0x10

    };

    struct FSGInventoryChildConfigsTableRow : FTableRowBase //ScriptStruct SGFramework.SGInventoryChildConfigsTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        float Percent; // 0x8
        enum class ESGInventoryChildConfigOperation ConfigType; // 0xc
        struct TArray<struct FSGInventoryChildConfig> ChildConfigs; // 0x10

    };

    struct FSGInventoryChildConfig //ScriptStruct SGFramework.SGInventoryChildConfig
    {
    //Children Prop Count (Fields): 2
    public:

        struct FSoftClassProperty InventoryClass; // 0x0
        float Percent; // 0x28

    };

    struct FSoundInfoInfo //ScriptStruct SGFramework.SoundInfoInfo
    {
    //Children Prop Count (Fields): 3
    public:

        class UAkAudioEvent* AkEvent; // 0x0
        bool bLoadAtBeginning; // 0x8
        bool bUnLoadWhenEnd; // 0x9

    };

    struct FSGAdapterAnimInstanceProxy : FAnimInstanceProxy //ScriptStruct SGFramework.SGAdapterAnimInstanceProxy
    {
    //Children Prop Count (Fields): 2
    public:

        class USGAdapterAnimInstance* AnimInstance; // 0x860
        float BipOnAlpha; // 0x868

    };

    struct FAIRankData //ScriptStruct SGFramework.AIRankData
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t ranking; // 0x0
        int32_t pranking; // 0x4
        int32_t ranked_rd; // 0x8

    };

    struct FAIDebugInfoDetail //ScriptStruct SGFramework.AIDebugInfoDetail
    {
    //Children Prop Count (Fields): 51
    public:

        struct TWeakObjectPtr<struct ASGAICharacter> AICharacterPtr; // 0x0
        bool bAllBlackboardKeysConcerned; // 0x8
        int32_t TreeActiveInstanceIndex; // 0xc
        int32_t TaskExecutionIndex; // 0x10
        float LastBlackboardChangeTime; // 0x14
        float LastDistanceChangeTime; // 0x18
        float LastTickTime; // 0x1c
        float DistanceToPlayerSq; // 0x20
        float AngleToPlayer; // 0x24
        bool bDisplayable; // 0x28
        bool bSelected; // 0x29
        struct FString AIName; // 0x30
        int64_t AIID; // 0x40
        int64_t PathGroupID; // 0x48
        int64_t EquipPoolID; // 0x50
        int64_t CampID; // 0x58
        enum class EFactionType FactionType; // 0x60
        float HpTotal; // 0x64
        float HpHead; // 0x68
        float HpChest; // 0x6c
        float HpStomach; // 0x70
        float HpLeftArm; // 0x74
        float HpRightArm; // 0x78
        float HpLeftLeg; // 0x7c
        float HpRightLeg; // 0x80
        float ElapsedAimingTime; // 0x84
        float RequiredAimingTime; // 0x88
        int32_t AimStatus; // 0x8c
        struct FColor TextColor; // 0x90
        struct FString BehaviorTreeName; // 0x98
        struct FString PreviousTaskNames; // 0xa8
        struct FString ActiveTaskNames; // 0xb8
        struct TArray<struct FName> BlackboardKeys; // 0xc8
        struct TArray<struct FString> BlackboardValues; // 0xd8
        struct FString ShootPartName; // 0xe8
        float HitRatePredestined; // 0xf8
        float HitRateNormal; // 0xfc
        float HitRateAverage; // 0x100
        float NotHitRatePresist; // 0x104
        bool bInHitInterval; // 0x108
        int32_t HitIntervalCount; // 0x10c
        float FirstTimeSeenScore; // 0x110
        float FirstTimeSeenTotalUse; // 0x114
        bool bInBombRange; // 0x118
        int32_t DelayFrames; // 0x11c
        struct FString SpawnPointCheckResult; // 0x120
        bool bIsCasual; // 0x130
        class UBehaviorTreeComponent* CachedBehaviorTreeComponent; // 0x138
        struct FString SpawnPointName; // 0x140
        struct FString SpawnVolumeName; // 0x150
        int32_t SpawnSquad; // 0x160

    };

    struct FSGAIDebugInfoTextColor //ScriptStruct SGFramework.SGAIDebugInfoTextColor
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString BTNameSuffix; // 0x0
        struct FColor DisplayColor; // 0x10

    };

    struct FAIDebugDrawStyleTableRow : FTableRowBase //ScriptStruct SGFramework.AIDebugDrawStyleTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        struct FLinearColor Color; // 0x8
        float Thickness; // 0x18
        float Radius; // 0x1c

    };

    struct FAIPressure //ScriptStruct SGFramework.AIPressure
    {
    public:


    };

    struct FAIWeaponDefaultBulletClassInfo //ScriptStruct SGFramework.AIWeaponDefaultBulletClassInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FSoftClassProperty DefaultBulletClassPtr; // 0x0
        class AActor* DefaultBulletClass; // 0x28

    };

    struct FAIIDMappedInfo //ScriptStruct SGFramework.AIIDMappedInfo
    {
    public:


    };

    struct FAIIDMappedData //ScriptStruct SGFramework.AIIDMappedData
    {
    public:


    };

    struct FLoadedAIFactionProfilesOfFactionClass //ScriptStruct SGFramework.LoadedAIFactionProfilesOfFactionClass
    {
    //Children Prop Count (Fields): 1
    public:

        struct TMap<class UObject*, struct FLoadedAIFactionProfiles> LoadedProfilesMap; // 0x0

    };

    struct FLoadedAIFactionProfiles //ScriptStruct SGFramework.LoadedAIFactionProfiles
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<class UNPCAIPropertyProfile*> LoadedProfiles; // 0x0
        struct TArray<class UNPCAIPropertyProfile*> LoadedSwitchProfiles; // 0x10

    };

    struct FSpawnedAIInfo //ScriptStruct SGFramework.SpawnedAIInfo
    {
    public:


    };

    struct FPendingSpawnInfo //ScriptStruct SGFramework.PendingSpawnInfo
    {
    //Children Prop Count (Fields): 12
    public:

        struct FSpawnRecord SpawnRecord; // 0x10
        bool bIsPMCAI; // 0x90
        int32_t DelayFrame; // 0x9c
        class ACharacter* AICharacterClass; // 0xb8
        class AAIController* AIControllerClass; // 0xc0
        class UBehaviorTree* ArchetypeTemplate; // 0xc8
        class UNPCAIFactionComponent* FactionClass; // 0xd0
        class UNPCAIRoleComponent* RoleClass; // 0xd8
        struct TArray<class ASGInventory*> AvatarInventories; // 0xf8
        struct TArray<class ASGInventory*> EventAvatarInventories; // 0x108
        class UDataTable* SoundData; // 0x118
        class ASGInventory* DeathBoxClass; // 0x120

    };

    struct FSpawnRecord //ScriptStruct SGFramework.SpawnRecord
    {
    //Children Prop Count (Fields): 8
    public:

        class AActor* SpawnPoint; // 0x8
        struct FVector SpawnPosition; // 0x10
        int32_t SpawnSquadID; // 0x1c
        struct FString SpawnArea; // 0x20
        int64_t AI_UID; // 0x30
        enum class ESpawnReason SpawnReason; // 0x3c
        struct FString TriggerString; // 0x48
        float ReadyTime; // 0x74

    };

    struct FSGNPCSpawnGroupWeight //ScriptStruct SGFramework.SGNPCSpawnGroupWeight
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName GroupID; // 0x0
        float SpawnWeight; // 0x8
        float Probability; // 0xc
        int32_t TakenCount; // 0x10

    };

    struct FBattleTestRoomInfo //ScriptStruct SGFramework.BattleTestRoomInfo
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FString> AreaNames; // 0x0

    };

    struct FBattleTestTeamInfo //ScriptStruct SGFramework.BattleTestTeamInfo
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FBattleTestAreaInfo> TeamInfo; // 0x0

    };

    struct FBattleTestAreaInfo //ScriptStruct SGFramework.BattleTestAreaInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t MaxAINum; // 0x0
        struct TArray<struct FAIPoolInfo> AIPool; // 0x8

    };

    struct FAIPoolInfo //ScriptStruct SGFramework.AIPoolInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString ID; // 0x0
        int32_t Equip; // 0x10
        int32_t Weight; // 0x14

    };

    struct FAnimationSpringTickFunction : FTickFunction //ScriptStruct SGFramework.AnimationSpringTickFunction
    {
    //Children Prop Count (Fields): 1
    public:

        float FixedTickInterval; // 0x38

    };

    struct FAnimationSpring //ScriptStruct SGFramework.AnimationSpring
    {
    //Children Prop Count (Fields): 7
    public:

        float Stiffness; // 0x0
        struct FRuntimeFloatCurve StiffnessScaleTimeCurve; // 0x8
        float DistSqToTimeFactor; // 0x90
        float Damping; // 0x94
        float RotationStability; // 0x98
        struct FVector4 MinError; // 0xa0
        struct FVector4 MaxError; // 0xb0

    };

    struct FForceModifier //ScriptStruct SGFramework.ForceModifier
    {
    //Children Prop Count (Fields): 11
    public:

        struct FVector4 AdsScale; // 0x0
        struct FVector4 NonAdsScale; // 0x10
        bool bAdsScale; // 0x20
        struct FVector4 StandPoseScale; // 0x30
        struct FVector4 CrouchPoseScale; // 0x40
        struct FVector4 PronePoseScale; // 0x50
        bool bPoseScale; // 0x60
        struct FVector4 SilentWalkScale; // 0x70
        struct FVector4 RunScale; // 0x80
        struct FVector4 SprintScale; // 0x90
        bool bMovementScale; // 0xa0

    };

    struct FSGMontagePlayConfig //ScriptStruct SGFramework.SGMontagePlayConfig
    {
    //Children Prop Count (Fields): 10
    public:

        enum class EAdapterAnimationType AdapterAnimType; // 0x0
        float ForceBlendInTime; // 0x4
        float ForceBlendOutTime; // 0x8
        char bDisableBlendIn; // 0xc
        char bDisableBlendOut; // 0xc
        char bLockAnimationSet; // 0xc
        char bStopAllMontage; // 0xc
        char bSyncMontage; // 0xc
        char bCanTriggerWithGrass; // 0xc
        char bReplayWhileIsPlaying; // 0xc

    };

    struct FSGEnterLoopLeaveStateMachine //ScriptStruct SGFramework.SGEnterLoopLeaveStateMachine
    {
    //Children Prop Count (Fields): 10
    public:

        bool bCanReverse; // 0x0
        float EnterSeqLength; // 0x4
        float LeaveSeqLength; // 0x8
        float EnterSeqTime; // 0xc
        float LeaveSeqTime; // 0x10
        bool bFullyEntered; // 0x14
        bool bFullyLeaved; // 0x15
        float NormalizedEnterSeqTime; // 0x18
        float NormalizedLeaveSeqTime; // 0x1c
        enum class ESGEnterLoopLeaveState State; // 0x21

    };

    struct FSGFloatCurvePlayer //ScriptStruct SGFramework.SGFloatCurvePlayer
    {
    //Children Prop Count (Fields): 4
    public:

        class UCurveFloat* Curve; // 0x0
        float PlayRate; // 0x8
        bool bLoop; // 0xc
        struct FFloatRange PlayRange; // 0x10

    };

    struct FSGSequenceGroupPlayer //ScriptStruct SGFramework.SGSequenceGroupPlayer
    {
    //Children Prop Count (Fields): 1
    public:

        class UCurveFloat* Curve; // 0x0

    };

    struct FSGPreviewRandomIdleAnimSet //ScriptStruct SGFramework.SGPreviewRandomIdleAnimSet
    {
    //Children Prop Count (Fields): 2
    public:

        struct FSGPreviewRandomIdleAnimGroup BigAnimGroup; // 0x0
        struct FSGPreviewRandomIdleAnimGroup SmallAnimGroup; // 0x18

    };

    struct FSGPreviewRandomIdleAnimGroup //ScriptStruct SGFramework.SGPreviewRandomIdleAnimGroup
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FSGPreviewRandomIdleAnimConfig> AnimGroup; // 0x0
        int32_t GroupWeight; // 0x10

    };

    struct FSGPreviewRandomIdleAnimConfig //ScriptStruct SGFramework.SGPreviewRandomIdleAnimConfig
    {
    //Children Prop Count (Fields): 2
    public:

        class UAnimSequence* Anim; // 0x0
        int32_t Weight; // 0x8

    };

    struct FCharacterSpeedWarpingBaseSpeed //ScriptStruct SGFramework.CharacterSpeedWarpingBaseSpeed
    {
    //Children Prop Count (Fields): 8
    public:

        float F_Speed; // 0x0
        float L_Speed; // 0x4
        float R_Speed; // 0x8
        float B_Speed; // 0xc
        float LF_Speed; // 0x10
        float RF_Speed; // 0x14
        float LB_Speed; // 0x18
        float RB_Speed; // 0x1c

    };

    struct FSGPreviewCharacterAnimationSet //ScriptStruct SGFramework.SGPreviewCharacterAnimationSet
    {
    //Children Prop Count (Fields): 6
    public:

        struct TMap<struct FString, class UAnimMontage*> CustomAnimations; // 0x0
        class UAnimSequence* IdleLoop; // 0x50
        class UAnimSequence* ReadyIn; // 0x58
        class UAnimSequence* ReadyLoop; // 0x60
        class UAnimSequence* ReadyOut; // 0x68
        class UBlendSpace1D* CasualGripAdjustmentBS; // 0x70

    };

    struct FSGCustomizeAnimationGroup //ScriptStruct SGFramework.SGCustomizeAnimationGroup
    {
    //Children Prop Count (Fields): 3
    public:

        class UAnimMontage* CharacterAnimation; // 0x0
        class UAnimMontage* WeaponAnimation; // 0x8
        class UAnimMontage* FacialAnimation; // 0x10

    };

    struct FDeliverCargosAnimInfo //ScriptStruct SGFramework.DeliverCargosAnimInfo
    {
    //Children Prop Count (Fields): 12
    public:

        struct TSoftObjectPtr<UAnimMontage> CharacterMontage; // 0x0
        struct TSoftObjectPtr<UAnimMontage> InventoryMontage; // 0x28
        struct TSoftObjectPtr<USkeletalMesh> InventoryMesh; // 0x50
        struct FSoftClassProperty AnimInstanceClass; // 0x78
        struct FName InventoryAttachSocket; // 0xa0
        float InPlayRate; // 0xa8
        struct FName StartSectionName; // 0xac
        float StartTimeSeconds; // 0xb4
        float BlendInTime; // 0xb8
        float BlendOutTime; // 0xbc
        bool bEnableAutoBlendOut; // 0xc0
        bool bStopAllMontages; // 0xc1

    };

    struct FSGWeaponChangedInfo //ScriptStruct SGFramework.SGWeaponChangedInfo
    {
    //Children Prop Count (Fields): 10
    public:

        struct TWeakObjectPtr<struct ASGInventory> DestWeapon; // 0x0
        struct TWeakObjectPtr<struct ASGInventory> LastWeapon; // 0x8
        struct FSGMontagePlayParams CharacterMontageParams; // 0x10
        struct FSGMontagePlayParams WeaponMontageParams; // 0x58
        float BlendOutTime; // 0xa0
        float BlendInTime; // 0xa4
        bool PlayMontageFirst; // 0xa8
        bool bDisableBlendIn; // 0xa9
        bool bDisableBlendOut; // 0xaa
        bool bUseTacticalTrans; // 0xab

    };

    struct FSGMontagePlayParams //ScriptStruct SGFramework.SGMontagePlayParams
    {
    //Children Prop Count (Fields): 6
    public:

        struct TSoftObjectPtr<UAnimMontage> MontagePath; // 0x0
        struct TWeakObjectPtr<struct UAnimMontage> Montage; // 0x28
        class UAnimMontage* MontageHardPtr; // 0x30
        struct FName SectionName; // 0x38
        float PlayRate; // 0x40
        float StartTime; // 0x44

    };

    struct FSGDynamicAnimationSet //ScriptStruct SGFramework.SGDynamicAnimationSet
    {
    //Children Prop Count (Fields): 7
    public:

        enum class ESGWeaponForegripType WeaponForegripType; // 0x0
        bool bHasForegrip; // 0x1
        class UAnimSequence* IdleSeq; // 0x8
        class UBlendSpace1D* GripIdleBS; // 0x10
        class UBlendSpace1D* WeaponSwayBS; // 0x18
        class UBlendSpace1D* WeaponSwayBS_ADS; // 0x20
        class UAnimSequence* KickingDoorHandSeq; // 0x28

    };

    struct FSGAdapterAnimSet //ScriptStruct SGFramework.SGAdapterAnimSet
    {
    //Children Prop Count (Fields): 1
    public:

        struct TMap<enum class EAdapterAnimationType, struct TSoftObjectPtr<UAnimSequenceBase>> AdapterAnimMontages; // 0x0

    };

    struct FSGUAMWeaponAnimationSet //ScriptStruct SGFramework.SGUAMWeaponAnimationSet
    {
    //Children Prop Count (Fields): 53
    public:

        struct FSGMontargeWithPlayRate WeaponFireResource; // 0x0
        struct FSGMontargeWithPlayRate ProneWeaponFireResource; // 0x30
        struct FSGMontargeWithPlayRate WeaponAutoBurstFireResource; // 0x60
        struct FSGMontargeWithPlayRate WeaponDownFireResource; // 0x90
        struct FSGMontargeWithPlayRate ProneWeaponDownFireResource; // 0xc0
        struct FSGMontargeWithPlayRate WeaponFastFireResource; // 0xf0
        struct FSGMontargeWithPlayRate ProneWeaponFastFireResource; // 0x120
        struct FSGMontargeWithPlayRate WeaponEmptyFireResource; // 0x150
        struct FSGMontargeWithPlayRate WeaponReloadResource; // 0x180
        struct FSGMontargeWithPlayRate WeaponTacticalReloadResource; // 0x1b0
        struct FSGMontargeWithPlayRate WeaponUnloadMagResource; // 0x1e0
        struct FSGMontargeWithPlayRate WeaponLoadMagResource; // 0x210
        struct FSGMontargeWithPlayRate MagazineCheckResource; // 0x240
        struct FSGMontargeWithPlayRate ReloadLoopEndResource; // 0x270
        struct FSGMontargeWithPlayRate ReloadLoopResource; // 0x2a0
        struct FSGMontargeWithPlayRate ReloadLoopBeginResource; // 0x2d0
        struct FSGMontargeWithPlayRate WeaponPullBoltResource; // 0x300
        struct FSGMontargeWithPlayRate WeaponPullBoltADSResource; // 0x330
        struct FSGMontargeWithPlayRate WeaponEndEquipResource; // 0x360
        struct FSGMontargeWithPlayRate WeaponEquipResource; // 0x390
        struct FSGMontargeWithPlayRate WeaponOpenBoltBeforeReloadResource; // 0x3c0
        struct FSGMontargeWithPlayRate WeaponCloseBoltAfterReloadResource; // 0x3f0
        struct FSGMontargeWithPlayRate WeaponBeltOutResource; // 0x420
        struct FSGMontargeWithPlayRate WeaponBeltInResource; // 0x450
        struct FSGMontargeWithPlayRate WeaponEquipWithChargeResource; // 0x480
        struct FSGMontargeWithPlayRate WeaponHoldOpenResource; // 0x4b0
        struct FSGMontargeWithPlayRate ProneWeaponHoldOpenResource; // 0x4e0
        struct FSGMontargeWithPlayRate WeaponReleaseOpenResource; // 0x510
        struct FSGMontargeWithPlayRate WeaponCheckFireModeResource; // 0x540
        struct FSGMontargeWithPlayRate ProneWeaponReleaseOpenResource; // 0x570
        struct FSGMontargeWithPlayRate WeaponSwitchFireMode0Resource; // 0x5a0
        struct FSGMontargeWithPlayRate WeaponSwitchFireMode1Resource; // 0x5d0
        struct FSGMontargeWithPlayRate WeaponSwitchFireMode2Resource; // 0x600
        struct FSGMontargeWithPlayRate WeaponSetBipodOnResource; // 0x630
        struct FSGMontargeWithPlayRate WeaponSetBipodOffResource; // 0x660
        struct FSGMontargeWithPlayRate AddNewMagzineResource; // 0x690
        struct TMap<struct FString, struct FSGMontargeWithPlayRateChangeClip> AddNewMagzineSeqMap; // 0x6c0
        struct TMap<struct FString, struct FSGMontargeWithPlayRateChangeClip> CheckMagzineSeqMap; // 0x710
        struct TMap<struct FString, struct FSGMontargeWithPlayRateChangeClip> ReloadSeqMap; // 0x760
        struct TMap<struct FString, struct FSGMontargeWithPlayRateChangeClip> TacticalReloadSeqMap; // 0x7b0
        struct TMap<struct FString, struct FSGMontargeWithPlayRateChangeClip> FastReloadSeqMap; // 0x800
        struct FSGMontargeWithPlayRate WeaponBeginBagOpenResource; // 0x850
        struct FSGMontargeWithPlayRate WeaponBagOpenResource; // 0x880
        struct FSGMontargeWithPlayRate WeaponEndBagOpenResource; // 0x8b0
        struct FSGMontargeWithPlayRate WeaponEndKeepPreFireResource; // 0x8e0
        struct FSGMontargeWithPlayRate ProneWeaponEndKeepPreFireResource; // 0x910
        struct FSGMontargeWithPlayRate WeaponSetupAdapterResource; // 0x940
        struct FSGMontargeWithPlayRate ViewWeaponResource; // 0x970
        struct TMap<struct FString, struct TSoftObjectPtr<UAnimMontage>> CustomAnimations; // 0x9a0
        struct FSGMontargeWithPlayRate WeaponFoldScopeResource; // 0x9f0
        struct FSGMontargeWithPlayRate WeaponFoldScopeADSResource; // 0xa20
        struct FSGMontargeWithPlayRate WeaponUnfoldScopeResource; // 0xa50
        struct FSGMontargeWithPlayRate WeaponUnfoldScopeADSResource; // 0xa80

    };

    struct FSGMontargeWithPlayRate //ScriptStruct SGFramework.SGMontargeWithPlayRate
    {
    //Children Prop Count (Fields): 2
    public:

        struct TSoftObjectPtr<UAnimMontage> AnimSeq; // 0x0
        float PlayRate; // 0x28

    };

    struct FSGMontargeWithPlayRateChangeClip //ScriptStruct SGFramework.SGMontargeWithPlayRateChangeClip
    {
    //Children Prop Count (Fields): 4
    public:

        struct TSoftObjectPtr<UAnimMontage> AnimSeq; // 0x0
        float PlayRate; // 0x28
        float BlendInWhenPlayStandAlone; // 0x2c
        float BlendOutWhenPlayStandAlone; // 0x30

    };

    struct FSGUAMHandAnimationSet //ScriptStruct SGFramework.SGUAMHandAnimationSet
    {
    //Children Prop Count (Fields): 113
    public:

        class UAnimSequence* IdleSeqBasePose; // 0x0
        class UAnimSequence* IdleSeq; // 0x8
        class UAnimSequence* IdleSeq3P; // 0x10
        class UAnimSequence* IdleSeq3P_Prone; // 0x18
        class UAnimSequence* IdleSeq_Additive; // 0x20
        class UAnimSequence* FireAdditive_Seq; // 0x28
        class UAnimSequence* FireAdditive_Seq_Prone; // 0x30
        class UAnimSequence* IdleSeq_Additive_3P; // 0x38
        class UAnimSequence* IdleSeq_Additive_3P_Prone; // 0x40
        class UAnimSequence* ADS_IdleSeq_Additive; // 0x48
        class UAnimSequence* Idle_FixUpRightHandAdditive; // 0x50
        class UBlendSpace1D* GripIdleBS; // 0x58
        class UAnimSequence* GripPoseAdditive_3P; // 0x60
        class UAnimSequence* GripPoseAdditive_3P_Prone; // 0x68
        class UBlendSpace1D* GripIdleBS_3P; // 0x70
        class UBlendSpace1D* GripIdleBS_3P_Prone; // 0x78
        class UBlendSpace1D* Grip3PIdleBS; // 0x80
        class UBlendSpace1D* GripProne3PIdleBS; // 0x88
        class UBlendSpace1D* RearGripIdleBS; // 0x90
        class UBlendSpace1D* RearGripIdleBS_3P; // 0x98
        class UBlendSpace1D* RearGripIdleBS_3P_Prone; // 0xa0
        class UBlendSpace1D* CasualRearGripIdleBS_Female; // 0xa8
        class UAnimSequence* CasualIdleSeq; // 0xb0
        class UAnimSequence* TacticalPistolStandBasePose_1P; // 0xb8
        class UAnimSequence* TacticalPistolStandBasePose_3P; // 0xc0
        class UAnimSequence* TacticalPistolCrouchBasePose_1P; // 0xc8
        class UAnimSequence* TacticalPistolCrouchBasePose_3P; // 0xd0
        class UAnimSequence* TacticalRightHandGripPose; // 0xd8
        class UAnimSequence* CasualIdleSeq_Female; // 0xe0
        bool bEnableInGameCasual; // 0xe8
        class UBlendSpace1D* CasualGripIdleBS; // 0xf0
        class UBlendSpace1D* CasualGripIdleBS_Female; // 0xf8
        class UBlendSpace1D* CasualGripAdjustmentBS; // 0x100
        class UBlendSpace1D* CasualGripAdjustmentBS_Female; // 0x108
        class UBlendSpace1D* CasualRearGripIdleBS; // 0x110
        class UBlendSpace1D* LFingerAdaptiveBS; // 0x118
        class UBlendSpace1D* LFingerAdaptiveBS_Lobby; // 0x120
        class UBlendSpace1D* LFingerAdaptiveBS_Lobby_Female; // 0x128
        class UBlendSpace1D* WeaponShakeBS; // 0x130
        struct TSoftObjectPtr<UAnimMontage> FireSeq; // 0x138
        struct TSoftObjectPtr<UAnimMontage> ProneFireSeq; // 0x160
        struct TSoftObjectPtr<UAnimMontage> AutoBurstFireSeq; // 0x188
        struct TArray<struct TSoftObjectPtr<UAnimMontage>> MeleeFireSeq; // 0x1b0
        struct TSoftObjectPtr<UAnimMontage> MeleeFireProneSeq; // 0x1c0
        struct TSoftObjectPtr<UAnimMontage> LoopFireSeq; // 0x1e8
        struct TSoftObjectPtr<UAnimMontage> ZoomFireSeq; // 0x210
        struct TSoftObjectPtr<UAnimMontage> EmptyFireSeq; // 0x238
        struct TSoftObjectPtr<UAnimMontage> ThrowDownSeq; // 0x260
        struct TSoftObjectPtr<UAnimMontage> ProneThrowDownSeq; // 0x288
        struct TSoftObjectPtr<UAnimMontage> FireWithoutChargeSeq; // 0x2b0
        struct TSoftObjectPtr<UAnimMontage> FastThrowFireSeq; // 0x2d8
        struct TSoftObjectPtr<UAnimMontage> ProneFastThrowFireSeq; // 0x300
        struct TSoftObjectPtr<UAnimMontage> ReloadSeq; // 0x328
        struct TSoftObjectPtr<UAnimMontage> CheckMagazineSeq; // 0x350
        struct TSoftObjectPtr<UAnimMontage> UnloadMagSeq; // 0x378
        struct TSoftObjectPtr<UAnimMontage> LoadMagSeq; // 0x3a0
        struct TSoftObjectPtr<UAnimMontage> OpenBoltBeforeReloadingSeq; // 0x3c8
        struct TSoftObjectPtr<UAnimMontage> CloseBoltAfterReloadingSeq; // 0x3f0
        struct TSoftObjectPtr<UAnimMontage> BeltOutSeq; // 0x418
        struct TSoftObjectPtr<UAnimMontage> BeltInSeq; // 0x440
        struct TSoftObjectPtr<UAnimMontage> ReloadLoopSeq; // 0x468
        struct TSoftObjectPtr<UAnimMontage> ReloadLoopBeginSeq; // 0x490
        struct TSoftObjectPtr<UAnimMontage> ReloadLoopEndSeq; // 0x4b8
        struct TSoftObjectPtr<UAnimMontage> PullBoltSeq; // 0x4e0
        struct TSoftObjectPtr<UAnimMontage> PullBoltADSSeq; // 0x508
        struct TSoftObjectPtr<UAnimMontage> EndEquipSeq; // 0x530
        struct TSoftObjectPtr<UAnimMontage> EndEquipSeq_Left; // 0x558
        struct TSoftObjectPtr<UAnimMontage> EndEquipSeq_Right; // 0x580
        struct TSoftObjectPtr<UAnimMontage> EquipSeq; // 0x5a8
        struct TSoftObjectPtr<UAnimMontage> EquipSeq_Left; // 0x5d0
        struct TSoftObjectPtr<UAnimMontage> EquipSeq_Right; // 0x5f8
        struct TSoftObjectPtr<UAnimMontage> EquipWithChargeSeq; // 0x620
        struct TSoftObjectPtr<UAnimMontage> HoldOpenSeq; // 0x648
        struct TSoftObjectPtr<UAnimMontage> ProneHoldOpenSeq; // 0x670
        struct TSoftObjectPtr<UAnimMontage> ReleaseHoldSeq; // 0x698
        struct TSoftObjectPtr<UAnimMontage> CheckFireModeSeq; // 0x6c0
        struct TSoftObjectPtr<UAnimMontage> ProneReleaseHoldSeq; // 0x6e8
        struct TSoftObjectPtr<UAnimMontage> SwitchFireMode0Seq; // 0x710
        struct TSoftObjectPtr<UAnimMontage> SwitchFireMode1Seq; // 0x738
        struct TSoftObjectPtr<UAnimMontage> SwitchFireMode2Seq; // 0x760
        struct TSoftObjectPtr<UAnimMontage> SetBipodOnSeq; // 0x788
        struct TSoftObjectPtr<UAnimMontage> SetBipodOffSeq; // 0x7b0
        struct TSoftObjectPtr<UAnimMontage> AddNewMagzineSeq; // 0x7d8
        struct TSoftObjectPtr<UAnimMontage> MeleeFireCompleteSeq; // 0x800
        struct TMap<struct FString, struct FSGMontargeWithPlayRateChangeClip> AddNewMagzineSeqMap; // 0x828
        struct TMap<struct FString, struct FSGMontargeWithPlayRateChangeClip> CheckMagzineSeqMap; // 0x878
        struct TMap<struct FString, struct FSGMontargeWithPlayRateChangeClip> ReloadSeqMap; // 0x8c8
        struct TMap<struct FString, struct FSGMontargeWithPlayRateChangeClip> TacticalReloadSeqMap; // 0x918
        struct TMap<struct FString, struct FSGMontargeWithPlayRateChangeClip> FastReloadSeqMap; // 0x968
        struct TSoftObjectPtr<UAnimMontage> BeginBagOpenSeq; // 0x9b8
        struct TSoftObjectPtr<UAnimMontage> EndBagOpenSeq; // 0x9e0
        struct TSoftObjectPtr<UAnimMontage> BeginBagOpenSeq_Prone; // 0xa08
        struct TSoftObjectPtr<UAnimMontage> EndBagOpenSeq_Prone; // 0xa30
        struct TSoftObjectPtr<UAnimMontage> EndKeepPreFireMontage; // 0xa58
        struct TSoftObjectPtr<UAnimMontage> ProneEndKeepPreFireMontage; // 0xa80
        struct TSoftObjectPtr<UAnimMontage> SetupAdapterMontage; // 0xaa8
        struct TSoftObjectPtr<UAnimMontage> BeginLowReadyeMontage; // 0xad0
        struct TSoftObjectPtr<UAnimMontage> EndLowReadyeMontage; // 0xaf8
        struct TSoftObjectPtr<UAnimMontage> LootSeq; // 0xb20
        struct TSoftObjectPtr<UAnimMontage> ViewWeaponMontage; // 0xb48
        struct TSoftObjectPtr<UAnimMontage> ViewWeaponGripMontage; // 0xb70
        struct TSoftObjectPtr<UAnimMontage> FoldScopeSeq; // 0xb98
        struct TSoftObjectPtr<UAnimMontage> FoldScopeADSSeq; // 0xbc0
        struct TSoftObjectPtr<UAnimMontage> UnfoldScopeSeq; // 0xbe8
        struct TSoftObjectPtr<UAnimMontage> UnfoldScopeADSSeq; // 0xc10
        struct TMap<struct FString, struct TSoftObjectPtr<UAnimSequence>> DTCustomSequences_Male; // 0xc38
        struct TMap<struct FString, struct TSoftObjectPtr<UAnimSequence>> DTCustomSequences_Female; // 0xc88
        struct TMap<struct FString, struct TSoftObjectPtr<UAnimSequence>> DTFacialAnimaSequences_Male; // 0xcd8
        struct TMap<struct FString, struct TSoftObjectPtr<UAnimSequence>> DTFacialAnimaSequences_Female; // 0xd28
        struct TSoftObjectPtr<UAnimMontage> PushDoor; // 0xd78
        struct TSoftObjectPtr<UAnimMontage> PullDoor; // 0xda0
        struct TSoftObjectPtr<UAnimMontage> KeyDoor; // 0xdc8
        struct TSoftObjectPtr<UAnimMontage> CardDoor; // 0xdf0

    };

    struct FSGPoseCacheInfo //ScriptStruct SGFramework.SGPoseCacheInfo
    {
    //Children Prop Count (Fields): 1
    public:

        struct FPoseSnapshot PoseCache; // 0x0

    };

    struct FPoseSnapshot //ScriptStruct Engine.PoseSnapshot
    {
    //Children Prop Count (Fields): 5
    public:

        struct TArray<struct FTransform> LocalTransforms; // 0x0
        struct TArray<struct FName> BoneNames; // 0x10
        struct FName SkeletalMeshName; // 0x20
        struct FName SnapshotName; // 0x28
        bool bIsValid; // 0x30

    };

    struct FSGRagdollInfo //ScriptStruct SGFramework.SGRagdollInfo
    {
    //Children Prop Count (Fields): 2
    public:

        bool bIsRagdoll; // 0x0
        struct FPoseSnapshot RagdollPose; // 0x8

    };

    struct FSGTakeHitInfo //ScriptStruct SGFramework.SGTakeHitInfo
    {
    //Children Prop Count (Fields): 6
    public:

        class UBlendSpace* TakeHitBlendSpace; // 0x0
        float TakeHitAnimationPlayRate; // 0x8
        bool bBlendShapeSwitch; // 0xc
        struct FVector2D TakeHitDir; // 0x10
        float TakeHitAlpha; // 0x18
        float StartPos; // 0x1c

    };

    struct FSGAnimWeaponInfo //ScriptStruct SGFramework.SGAnimWeaponInfo
    {
    //Children Prop Count (Fields): 18
    public:

        float FinalRecoilAlpha; // 0x0
        struct FRotator MeleeRecoilRotation; // 0x4
        float WeaponStabilityAlpha; // 0x10
        float AimingScale; // 0x14
        enum class ESGWeaponForegripType ForegripType; // 0x18
        float WeaponSwayAlpha_Yaw; // 0x1c
        float WeaponSwayAlpha_Pitch; // 0x20
        float WeaponSwayDelay_Yaw; // 0x24
        float WeaponSwayDelay_Pitch; // 0x28
        struct FVector WeaponWithStockHoldingOffset; // 0x2c
        struct FVector WeaponGunTranslation; // 0x38
        struct FRotator GunRotator; // 0x44
        struct FVector WeaponTraceLocationOffset_RightHand; // 0x50
        struct FRotator WeaponTraceRotationOffset_RightHand; // 0x5c
        struct FVector WeaponTraceLocationOffset_LeftHand; // 0x68
        struct FRotator WeaponTraceRotationOffset_LeftHand; // 0x74
        struct FRotator WeaponTraceRUpperArmRot; // 0x80
        struct FRotator WeaponTraceRForeArm1Rot; // 0x8c

    };

    struct FSGAnimTakeCoverInfo //ScriptStruct SGFramework.SGAnimTakeCoverInfo
    {
    //Children Prop Count (Fields): 10
    public:

        bool bIsTakingCover; // 0x0
        bool bLastTimeCrouchState; // 0x1
        enum class ETakeCoverLeanAnimType CharacterLeanType; // 0x2
        enum class ESGCharacterCoverState CharacterCoverState; // 0x3
        float TranslationAnimProcess; // 0x4
        enum class ESGCharacterCoverAimingState CoverAimingState; // 0x8
        float CoverHeightValue; // 0xc
        float ToCoverPercent; // 0x10
        enum class ESGCoverType CoverType; // 0x14
        enum class ESGCoverHeight CoverHeightType; // 0x15

    };

    struct FSGWeaponAccesoryAnimationSet //ScriptStruct SGFramework.SGWeaponAccesoryAnimationSet
    {
    //Children Prop Count (Fields): 1
    public:

        class UAnimMontage* EndFireSeq; // 0x0

    };

    struct FSGUAMInteractionAnimationSet //ScriptStruct SGFramework.SGUAMInteractionAnimationSet
    {
    //Children Prop Count (Fields): 12
    public:

        struct TSoftObjectPtr<UAnimMontage> PickUp; // 0x0
        struct TSoftObjectPtr<UAnimMontage> PushDoor; // 0x28
        struct TSoftObjectPtr<UAnimMontage> PullDoor; // 0x50
        struct TSoftObjectPtr<UAnimMontage> KeyDoor; // 0x78
        struct TSoftObjectPtr<UAnimMontage> CardDoor; // 0xa0
        struct TSoftObjectPtr<UAnimMontage> Rescue; // 0xc8
        struct TMap<struct FString, struct TSoftObjectPtr<UAnimMontage>> RescueSeqMap; // 0xf0
        struct TSoftObjectPtr<USkeletalMesh> RescueInventoryMesh; // 0x140
        struct TMap<struct FString, struct TSoftObjectPtr<USkeletalMesh>> RescueInventoryMeshMap; // 0x168
        struct TSoftObjectPtr<UAnimMontage> RescueInventory; // 0x1b8
        struct TMap<struct FString, struct TSoftObjectPtr<UAnimMontage>> RescueInventorySeqMap; // 0x1e0
        struct TMap<struct FString, struct TSoftObjectPtr<UAnimMontage>> InteractionSeqMap; // 0x230

    };

    struct FSGUAMJumpAnimationSet //ScriptStruct SGFramework.SGUAMJumpAnimationSet
    {
    //Children Prop Count (Fields): 18
    public:

        class UAnimSequence* JumpStart; // 0x0
        class UAnimSequence* JumpLoop; // 0x8
        class UBlendSpace* JumpEnd; // 0x10
        class UAnimSequence* JumpHighEnd; // 0x18
        class UAnimSequence* JumpLand; // 0x20
        class UBlendSpace* RunJumpLand; // 0x28
        class UAnimSequence* SprintJumpLand; // 0x30
        class UBlendSpace* RunJumpStart; // 0x38
        class UBlendSpace* RunJumpLoop; // 0x40
        class UBlendSpace* RunJumpEnd; // 0x48
        class UBlendSpace* RunJumpHighEnd; // 0x50
        class UAnimSequence* PreJump; // 0x58
        class UAnimSequence* SprintJumpStart; // 0x60
        class UAnimSequence* SprintJumpLoop; // 0x68
        class UAnimSequence* SprintJumpEnd; // 0x70
        class UBlendSpace* SprintToRunJumpEnd; // 0x78
        class UAnimSequence* RunToIdleJumpEnd; // 0x80
        class UAnimSequence* SprintToIdleJumpEnd; // 0x88

    };

    struct FSGUAMTransitionAnimationSet //ScriptStruct SGFramework.SGUAMTransitionAnimationSet
    {
    //Children Prop Count (Fields): 18
    public:

        class UBlendSpace* TransitionAnimationSet; // 0x0
        class UBlendSpace* FractureTransitionAnimationSet; // 0x8
        class UAnimSequence* StandToCrouch; // 0x10
        class UAnimSequence* StandToProne; // 0x18
        class UAnimSequence* SprintToProne; // 0x20
        class UAnimSequence* CrouchToStand; // 0x28
        class UAnimSequence* CrouchToProne; // 0x30
        class UAnimSequence* ProneToStand; // 0x38
        class UAnimSequence* ProneToCrouch; // 0x40
        class UAnimSequence* StandToDBNO; // 0x48
        class UAnimSequence* SprintToDBNO; // 0x50
        class UAnimSequence* CrouchToDBNO; // 0x58
        class UAnimSequence* ProneToDBNO; // 0x60
        class UAnimSequence* DBNOToCrouch; // 0x68
        class UAnimSequence* DBNOToProne; // 0x70
        class UBlendSpace* StandToSprint; // 0x78
        class UBlendSpace* SprintToStand; // 0x80
        class UBlendSpace* SprintToCrouch; // 0x88

    };

    struct FSGUAMLocomotionAnimationSet //ScriptStruct SGFramework.SGUAMLocomotionAnimationSet
    {
    //Children Prop Count (Fields): 29
    public:

        class UAnimSequence* Idle; // 0x0
        class UAnimSequence* IdleLeanLeft; // 0x8
        class UAnimSequence* IdleLeanRight; // 0x10
        class UAnimSequence* Idle_AO; // 0x18
        class UAnimSequence* Idle_AO_LeanLeft; // 0x20
        class UAnimSequence* Idle_AO_LeanRight; // 0x28
        class UAimOffsetBlendSpace* AimOffset; // 0x30
        class UAimOffsetBlendSpace* AimOffsetLeanLeft; // 0x38
        class UAimOffsetBlendSpace* AimOffsetLeanRight; // 0x40
        class UBlendSpace* Locomotion; // 0x48
        class UBlendSpace* Locomotion_Fracture; // 0x50
        class UBlendSpace* Locomotion_Fracture_ADS; // 0x58
        class UBlendSpace* Locomotion_FractureClear_ADS; // 0x60
        class UAnimSequence* Locomotion_HandSway; // 0x68
        class UBlendSpace* WalkLocomotion; // 0x70
        class UBlendSpace* RunLocomotion; // 0x78
        class UBlendSpace* SprintLocomotion; // 0x80
        class UBlendSpace* SprintLocomotion_Fracture; // 0x88
        class UBlendSpace* Locomotion_FractureClear; // 0x90
        class UBlendSpace* MovementAccelerationLeanBS; // 0x98
        class UBlendSpace* SprintAccelerationLeanBS; // 0xa0
        class UAnimSequence* TurnLeft90; // 0xa8
        class UAnimSequence* TurnRight90; // 0xb0
        class UAnimSequence* TurnLeft180; // 0xb8
        class UAnimSequence* TurnRight180; // 0xc0
        class UBlendSpace* MovingStartBS; // 0xc8
        class UBlendSpace* MovingStopBS; // 0xd0
        class UBlendSpace* MovingPivotBS; // 0xd8
        struct FSGPivotCardinalsAnimation PivotCardinals; // 0xe0

    };

    struct FSGPivotCardinalsAnimation //ScriptStruct SGFramework.SGPivotCardinalsAnimation
    {
    //Children Prop Count (Fields): 4
    public:

        class UAnimSequence* Forward; // 0x0
        class UAnimSequence* Backward; // 0x8
        class UAnimSequence* Left; // 0x10
        class UAnimSequence* Right; // 0x18

    };

    struct FSGUAMDeathAnimationSet //ScriptStruct SGFramework.SGUAMDeathAnimationSet
    {
    //Children Prop Count (Fields): 4
    public:

        struct FSGUAMPerBodyPartDeathAnimationSet StandDeathSet; // 0x0
        struct FSGUAMPerBodyPartDeathAnimationSet CrouchDeathSet; // 0xd0
        struct FSGUAMPerBodyPartDeathAnimationSet ProneDeathSet; // 0x1a0
        struct FSGUAMPerBodyPartDeathAnimationSet DBNODeathSet; // 0x270

    };

    struct FSGUAMPerBodyPartDeathAnimationSet //ScriptStruct SGFramework.SGUAMPerBodyPartDeathAnimationSet
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<class UAnimMontage*> DefaultAnimtionPool; // 0x0
        struct FSGUAMPerDirectionDeathAnimationSet HitHeadDeathset; // 0x10
        struct FSGUAMPerDirectionDeathAnimationSet HitBodyDeathset; // 0x50
        struct FSGUAMPerDirectionDeathAnimationSet HitLegDeathset; // 0x90

    };

    struct FSGUAMPerDirectionDeathAnimationSet //ScriptStruct SGFramework.SGUAMPerDirectionDeathAnimationSet
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<class UAnimMontage*> FrontHitPool; // 0x0
        struct TArray<class UAnimMontage*> BackHitPool; // 0x10
        struct TArray<class UAnimMontage*> LeftHitPool; // 0x20
        struct TArray<class UAnimMontage*> RightHitPool; // 0x30

    };

    struct FSGUAMTakeHitAnimationSet //ScriptStruct SGFramework.SGUAMTakeHitAnimationSet
    {
    //Children Prop Count (Fields): 6
    public:

        struct TArray<class UBlendSpace*> TakeHitHead; // 0x0
        struct TArray<class UBlendSpace*> TakeHitChest; // 0x10
        struct TArray<class UBlendSpace*> TakeHitLeftLeg; // 0x20
        struct TArray<class UBlendSpace*> TakeHitRightLeg; // 0x30
        struct TArray<class UBlendSpace*> TakeHitRightArm; // 0x40
        struct TArray<class UBlendSpace*> TakeHitLeftArm; // 0x50

    };

    struct FSGTacticalPistolAnimationSet //ScriptStruct SGFramework.SGTacticalPistolAnimationSet
    {
    //Children Prop Count (Fields): 7
    public:

        class UAnimMontage* IdleToTacticalAnimation; // 0x0
        class UAnimMontage* TacticalToMainWeaponAnimation; // 0x8
        class UAnimMontage* TacticalToPistolMontage; // 0x10
        class UAnimMontage* TacticalToPistolMontage_Fast; // 0x18
        class UAnimMontage* TacticalPutDownMontage; // 0x20
        class UAnimSequence* TacticalRightHandNegAdditiveSequence; // 0x28
        class UAnimSequence* DefaultTacticalPisotlGrip; // 0x30

    };

    struct FSGIdleBreathAnimationSet //ScriptStruct SGFramework.SGIdleBreathAnimationSet
    {
    //Children Prop Count (Fields): 2
    public:

        bool UseIdleBreathAnimation; // 0x0
        class UAnimSequence* IdleBreathAnimation; // 0x8

    };

    struct FSG1PRelaxAnimationSet //ScriptStruct SGFramework.SG1PRelaxAnimationSet
    {
    //Children Prop Count (Fields): 2
    public:

        struct TMap<enum class E1PRelaxType, struct FSG1PRelaxAnimationSetByGrip> RelaxAnimationMapByType; // 0x0
        struct TArray<class UAnimSequence*> DefaultRelaxAnimation; // 0x50

    };

    struct FSG1PRelaxAnimationSetByGrip //ScriptStruct SGFramework.SG1PRelaxAnimationSetByGrip
    {
    //Children Prop Count (Fields): 2
    public:

        struct TMap<enum class ESGWeaponForegripType, struct FSGRelaxAnimationArray> GripRelaxAnimationMap; // 0x0
        struct TArray<class UAnimSequence*> DefaultRelaxAnimation; // 0x50

    };

    struct FSGRelaxAnimationArray //ScriptStruct SGFramework.SGRelaxAnimationArray
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class UAnimSequence*> RelaxAnimation; // 0x0

    };

    struct FSGVaultAnimationSet //ScriptStruct SGFramework.SGVaultAnimationSet
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<class UAnimMontage*> VaultAnimationList; // 0x0
        struct TArray<class UAnimMontage*> ClimbAnimationList; // 0x10

    };

    struct FSGHeadwearAnimationSet //ScriptStruct SGFramework.SGHeadwearAnimationSet
    {
    //Children Prop Count (Fields): 2
    public:

        struct TMap<enum class ESGMainHeadwearType, struct TSoftObjectPtr<UAnimMontage>> PutUpHeadwearMap; // 0x0
        struct TMap<enum class ESGMainHeadwearType, struct TSoftObjectPtr<UAnimMontage>> PutDownHeadwearMap; // 0x50

    };

    struct FSGAnimationBoneModifierInfo //ScriptStruct SGFramework.SGAnimationBoneModifierInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector BoneTranslation; // 0x0
        struct FRotator BoneRotation; // 0xc
        struct TArray<float> ShoeBoneScaleList; // 0x18

    };

    struct FSGAnimationBreathInfo //ScriptStruct SGFramework.SGAnimationBreathInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector BreathTranslation; // 0x0
        struct FRotator BreathRotation; // 0xc

    };

    struct FSGTurnInPlaceAnimSequenceConfig //ScriptStruct SGFramework.SGTurnInPlaceAnimSequenceConfig
    {
    //Children Prop Count (Fields): 6
    public:

        class UAnimSequence* TurnLeft90; // 0x0
        class UAnimSequence* TurnRight90; // 0x8
        class UAnimSequence* TurnLeft90_Casual; // 0x10
        class UAnimSequence* TurnRight90_Casual; // 0x18
        class UAnimSequence* TurnLeft90_EmptyHands; // 0x20
        class UAnimSequence* TurnRight90_EmptyHands; // 0x28

    };

    struct FInvBulletInfo //ScriptStruct SGFramework.InvBulletInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FBulletMeshInfo> BulletMeshInfos; // 0x0
        int32_t WaitInsertBulletNum; // 0x10

    };

    struct FBulletMeshInfo //ScriptStruct SGFramework.BulletMeshInfo
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName SocketName; // 0x0
        class UStaticMeshComponent* Mesh; // 0x8
        class UStaticMeshComponent* BeltMesh; // 0x10
        class UStaticMesh* CacheMesh; // 0x18
        struct FSoftObjectPath BulletClass; // 0x20

    };

    struct FMeshSkinMaterialInfo //ScriptStruct SGFramework.MeshSkinMaterialInfo
    {
    //Children Prop Count (Fields): 2
    public:

        class ASGInventory* OwnerInventory; // 0x0
        struct TArray<struct TSoftObjectPtr<UMaterialInterface>> SkinMaterialList; // 0x8

    };

    struct FSGBackpackAnimInstanceProxy : FAnimInstanceProxy //ScriptStruct SGFramework.SGBackpackAnimInstanceProxy
    {
    //Children Prop Count (Fields): 1
    public:

        class USGBackpackAnimInstance* AnimInstance; // 0x890

    };

    struct FBreakInfo //ScriptStruct SGFramework.BreakInfo
    {
    //Children Prop Count (Fields): 3
    public:

        bool bBroken; // 0x0
        struct FVector Dir; // 0x4
        int32_t Count; // 0x10

    };

    struct FTempBurningInfo //ScriptStruct SGFramework.TempBurningInfo
    {
    //Children Prop Count (Fields): 2
    public:

        bool bIsBurning; // 0x0
        int32_t Count; // 0x4

    };

    struct FTempBurningMaterialParamInfo //ScriptStruct SGFramework.TempBurningMaterialParamInfo
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName ParamName; // 0x0
        float MaxValue; // 0x8
        float CurrValue; // 0xc
        float ValuePerSec; // 0x10

    };

    struct FBurningInfo //ScriptStruct SGFramework.BurningInfo
    {
    //Children Prop Count (Fields): 2
    public:

        bool bIsBurning; // 0x0
        int32_t Count; // 0x4

    };

    struct FBurningMaterialParamInfo //ScriptStruct SGFramework.BurningMaterialParamInfo
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName ParamName; // 0x0
        float MaxValue; // 0x8
        float CurrValue; // 0xc
        float ValuePerSec; // 0x10

    };

    struct FSGCameraMaterialSpec //ScriptStruct SGFramework.SGCameraMaterialSpec
    {
    //Children Prop Count (Fields): 1
    public:

        class USGCameraMaterial* CameraMaterial; // 0x0

    };

    struct FSGCameraMaterialAfterHeatTickFunction : FTickFunction //ScriptStruct SGFramework.SGCameraMaterialAfterHeatTickFunction
    {
    //Children Prop Count (Fields): 1
    public:

        class USGCameraMaterial_AfterHeat* Target; // 0x38

    };

    struct FBloodRandomConfig //ScriptStruct SGFramework.BloodRandomConfig
    {
    //Children Prop Count (Fields): 12
    public:

        int32_t NumMin; // 0x0
        int32_t NumMax; // 0x4
        int32_t DurationMin; // 0x8
        int32_t DurationMax; // 0xc
        float PosX_Min; // 0x10
        float PosX_Max; // 0x14
        float PosY_Min; // 0x18
        float PosY_Max; // 0x1c
        float ScaleMin; // 0x20
        float ScaleMax; // 0x24
        float RotatingAngleMin; // 0x28
        float RotatingAngleMax; // 0x2c

    };

    struct FBloodDropParams //ScriptStruct SGFramework.BloodDropParams
    {
    public:


    };

    struct FSGCameraMaterialCrossHairTickFunction : FTickFunction //ScriptStruct SGFramework.SGCameraMaterialCrossHairTickFunction
    {
    //Children Prop Count (Fields): 1
    public:

        class USGCameraMaterial_CrossHair* Target; // 0x38

    };

    struct FRandomDyingCurveSet //ScriptStruct SGFramework.RandomDyingCurveSet
    {
    //Children Prop Count (Fields): 3
    public:

        class UCurveFloat* CloseEyeCurve; // 0x0
        class UCurveFloat* DesaturationCurve; // 0x8
        class UCurveFloat* LightIntensityCurve; // 0x10

    };

    struct FFlashDistanceCurveSet //ScriptStruct SGFramework.FlashDistanceCurveSet
    {
    //Children Prop Count (Fields): 6
    public:

        float MinDistance; // 0x0
        float MaxDistance; // 0x4
        class UCurveFloat* OpacityCurveSet; // 0x8
        class UCurveFloat* InnerFlareStrengthCurveSet; // 0x10
        class UCurveFloat* EdgeFlareStrengthCurveSet; // 0x18
        class UCurveFloat* FlashWhiteCurveSet; // 0x20

    };

    struct FDistortRandomConfig //ScriptStruct SGFramework.DistortRandomConfig
    {
    //Children Prop Count (Fields): 8
    public:

        int32_t NumMin; // 0x0
        int32_t NumMax; // 0x4
        int32_t DurationMin; // 0x8
        int32_t DurationMax; // 0xc
        float PosX_Min; // 0x10
        float PosX_Max; // 0x14
        float PosY_Min; // 0x18
        float PosY_Max; // 0x1c

    };

    struct FHeatDistortParams //ScriptStruct SGFramework.HeatDistortParams
    {
    public:


    };

    struct FSGCameraMaterialLensDistortTickFunction : FTickFunction //ScriptStruct SGFramework.SGCameraMaterialLensDistortTickFunction
    {
    //Children Prop Count (Fields): 1
    public:

        class USGCameraMaterial_LensDistort* Target; // 0x38

    };

    struct FGrenadeBlurData //ScriptStruct SGFramework.GrenadeBlurData
    {
    //Children Prop Count (Fields): 4
    public:

        float DurationGrenade; // 0x0
        float GrenadeExplosionThreshold; // 0x4
        class UCurveFloat* BlurStrengthGrenadeCurve; // 0x8
        class UCurveFloat* GrenadeDistanceCurve; // 0x10

    };

    struct FInterpSpeedOverride //ScriptStruct SGFramework.InterpSpeedOverride
    {
    //Children Prop Count (Fields): 3
    public:

        class USGCameraMode* PrevCameraModeClass; // 0x0
        float OriginLocInterpSpeed; // 0x8
        struct FVector PerAxisOriginLocInterpSpeed; // 0xc

    };

    struct FViewOffsetData //ScriptStruct SGFramework.ViewOffsetData
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector OffsetHigh; // 0x0
        struct FVector OffsetMid; // 0xc
        struct FVector OffsetLow; // 0x18

    };

    struct FOscillatorInfo //ScriptStruct SGFramework.OscillatorInfo
    {
    //Children Prop Count (Fields): 2
    public:

        enum class ECameraShakeAxis ShakeAxis; // 0x0
        struct FSineOscillator OscillatorSetting; // 0x8

    };

    struct FSineOscillator //ScriptStruct SGFramework.SineOscillator
    {
    //Children Prop Count (Fields): 14
    public:

        float DurationTime; // 0x0
        float SingleFireDurationTime; // 0x4
        bool bSkipBlendIn; // 0x8
        float BlendInTime; // 0xc
        float BlendOutTime; // 0x10
        float AmplitudeAdditiveTime; // 0x14
        float Period; // 0x18
        bool bUseRandomInitialOffset; // 0x1c
        float Delay; // 0x20
        float BaseAmplitude; // 0x24
        float PerAmplitudeAdd; // 0x28
        float MinAmplitudeScale; // 0x2c
        float MaxAmplitudeScale; // 0x30
        class UCurveFloat* AmplitudeCurve; // 0x38

    };

    struct FPenetrationAvoidanceFeeler //ScriptStruct SGFramework.PenetrationAvoidanceFeeler
    {
    //Children Prop Count (Fields): 6
    public:

        struct FRotator AdjustmentRot; // 0x0
        float WorldWeight; // 0xc
        float PawnWeight; // 0x10
        struct FVector Extent; // 0x14
        int32_t TraceInterval; // 0x20
        int32_t FramesUntilNextTrace; // 0x24

    };

    struct FMovieCameraFocusPointParams //ScriptStruct SGFramework.MovieCameraFocusPointParams
    {
    //Children Prop Count (Fields): 10
    public:

        class AActor* FocusActor; // 0x0
        struct FName FocusBoneName; // 0x8
        struct FVector FocusWorldLoc; // 0x10
        float CameraFOV; // 0x1c
        struct FVector2D InterpSpeedRange; // 0x20
        struct FVector2D InFocusFOV; // 0x28
        bool bAlwaysFocus; // 0x30
        bool bAdjustCamera; // 0x31
        bool bIgnoreTrace; // 0x32
        float FocusPitchOffsetDeg; // 0x34

    };

    struct FMovieCameraParams //ScriptStruct SGFramework.MovieCameraParams
    {
    //Children Prop Count (Fields): 13
    public:

        struct FVector fFocusOffset; // 0x0
        float fFOVScale; // 0xc
        float fYawScale; // 0x10
        float fPitchScale; // 0x14
        float fViewOffsetDistanceScale; // 0x18
        float fSurroundingSpeed; // 0x1c
        bool bSurroundingClockwise; // 0x20
        bool bFPPMode; // 0x21
        int32_t iCamera3PMode; // 0x24
        bool bManual; // 0x28
        struct FVector OrbitingOffset; // 0x2c
        struct FRotator OrbitingViewRotation; // 0x38
        float ManualMoveSpeedBias; // 0x44

    };

    struct FCameraFocusPointParams //ScriptStruct SGFramework.CameraFocusPointParams
    {
    //Children Prop Count (Fields): 10
    public:

        class AActor* FocusActor; // 0x0
        struct FName FocusBoneName; // 0x8
        struct FVector FocusWorldLoc; // 0x10
        float CameraFOV; // 0x1c
        struct FVector2D InterpSpeedRange; // 0x20
        struct FVector2D InFocusFOV; // 0x28
        bool bAlwaysFocus; // 0x30
        bool bAdjustCamera; // 0x31
        bool bIgnoreTrace; // 0x32
        float FocusPitchOffsetDeg; // 0x34

    };

    struct FReplicationInfo //ScriptStruct SGFramework.ReplicationInfo
    {
    public:


    };

    struct FNPCFireBodyPartBoneNameMap //ScriptStruct SGFramework.NPCFireBodyPartBoneNameMap
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName BoneName; // 0x0
        bool bIsSocketBone; // 0x8

    };

    struct FPoseTransition //ScriptStruct SGFramework.PoseTransition
    {
    //Children Prop Count (Fields): 4
    public:

        enum class EAIPose FromPose; // 0x0
        enum class EAIPose ToPose; // 0x1
        enum class EAnimTransitionState TransitionState; // 0x2
        bool bForceStopMovement; // 0x3

    };

    struct FAISoundRepInfo //ScriptStruct SGFramework.AISoundRepInfo
    {
    //Children Prop Count (Fields): 2
    public:

        enum class EAISoundType SoundType; // 0x0
        int32_t Count; // 0x4

    };

    struct FRepCustomizeAnimation //ScriptStruct SGFramework.RepCustomizeAnimation
    {
    //Children Prop Count (Fields): 4
    public:

        struct FString InCustomizeMontageName; // 0x0
        struct FName InCustomizeMontageSectionName; // 0x10
        bool bReplayWhileIsPlaying; // 0x18
        char bPlayFlag; // 0x19

    };

    struct FSGCharacterAnimInstanceProxyBase : FAnimInstanceProxy //ScriptStruct SGFramework.SGCharacterAnimInstanceProxyBase
    {
    //Children Prop Count (Fields): 567
    public:

        class UAnimSequence* Stand_Idle; // 0x860
        class UAnimSequence* CasualStandAnimations_3P; // 0x868
        class UAnimSequence* StandAnimations_3P; // 0x870
        class UAnimSequence* Idle_FixUpRightHand; // 0x878
        class UAnimSequence* Stand_IdleLeanLeft; // 0x880
        class UAnimSequence* Stand_IdleLeanRight; // 0x888
        class UAnimSequence* Stand_Idle_AO; // 0x890
        class UAnimSequence* Stand_Idle_AO_LeanLeft; // 0x898
        class UAnimSequence* Stand_Idle_AO_LeanRight; // 0x8a0
        class UBlendSpace* Stand_Locomotion; // 0x8a8
        class UAimOffsetBlendSpace* Stand_AimOffset; // 0x8b0
        class UAimOffsetBlendSpace* Stand_AimOffsetLeanLeft; // 0x8b8
        class UAimOffsetBlendSpace* Stand_AimOffsetLeanRight; // 0x8c0
        enum class ELocomotionType Stand_Locomotion_Type; // 0x8c8
        bool bHasLocomotion_Fracture; // 0x8c9
        class UBlendSpace* Stand_AccelerationLeanBS; // 0x8d0
        class UBlendSpace* StandSprint_AccelerationLeanBS; // 0x8d8
        class UBlendSpace* AccelerationLeanBS; // 0x8e0
        bool bHasStand_AccelerationLeanBS; // 0x8e8
        class UAnimSequence* Crouch_Idle; // 0x8f0
        class UAnimSequence* Crouch_IdleLeanLeft; // 0x8f8
        class UAnimSequence* Crouch_IdleLeanRight; // 0x900
        class UAnimSequence* Crouch_Idle_AO; // 0x908
        class UAnimSequence* Crouch_Idle_AO_LeanLeft; // 0x910
        class UAnimSequence* Crouch_Idle_AO_LeanRight; // 0x918
        class UBlendSpace* Crouch_Locomotion; // 0x920
        class UAimOffsetBlendSpace* Crouch_AimOffset; // 0x928
        class UAimOffsetBlendSpace* Crouch_AimOffsetLeanLeft; // 0x930
        class UAimOffsetBlendSpace* Crouch_AimOffsetLeanRight; // 0x938
        class UAnimSequence* Prone_Idle; // 0x940
        class UAnimSequence* Prone_IdleLeanLeft; // 0x948
        class UAnimSequence* Prone_IdleLeanRight; // 0x950
        class UAnimSequence* Prone_Idle_AO; // 0x958
        class UAnimSequence* Prone_Idle_AO_LeanLeft; // 0x960
        class UAnimSequence* Prone_Idle_AO_LeanRight; // 0x968
        class UAimOffsetBlendSpace* Prone_AimOffset; // 0x970
        class UAimOffsetBlendSpace* Prone_AimOffsetLeanLeft; // 0x978
        class UAimOffsetBlendSpace* Prone_AimOffsetLeanRight; // 0x980
        class UAnimSequence* DBNO_Idle; // 0x988
        class UAnimSequence* DBNO_IdleLeanLeft; // 0x990
        class UAnimSequence* DBNO_IdleLeanRight; // 0x998
        class UAnimSequence* DBNO_Idle_AO; // 0x9a0
        class UAnimSequence* DBNO_Idle_AO_LeanLeft; // 0x9a8
        class UAnimSequence* DBNO_Idle_AO_LeanRight; // 0x9b0
        class UAimOffsetBlendSpace* DBNO_AimOffset; // 0x9b8
        class UAimOffsetBlendSpace* DBNO_AimOffsetLeanLeft; // 0x9c0
        class UAimOffsetBlendSpace* DBNO_AimOffsetLeanRight; // 0x9c8
        class UAnimSequence* Current_Idle; // 0x9d0
        class UAnimSequenceBase* DeathAnim; // 0x9d8
        class UAnimSequence* Current_1PRelaxAnimation; // 0x9e0
        enum class EAnimStance Stance; // 0x9e8
        enum class EWeaponType WeaponStance; // 0x9e9
        bool bIsStand; // 0x9ea
        bool bIsCasual; // 0x9eb
        bool bIsCrouch; // 0x9ec
        bool bIsProne; // 0x9ed
        bool bProneChangeThisFrame; // 0x9ee
        bool bIsDBNO; // 0x9ef
        bool bIsLadderClimbing; // 0x9f0
        float PronePlayRate; // 0x9f4
        bool bIsMoving; // 0x9f8
        bool bIsNotMoving; // 0x9f9
        bool bIsLocationChagned; // 0x9fa
        bool bILastLocationChagned; // 0x9fb
        bool bIsMovingForward; // 0x9fc
        bool bIsMovingOnGround; // 0x9fd
        bool bIsNotSprinting; // 0x9fe
        bool bIsSprinting; // 0x9ff
        bool bIsSprintingLastUpdate; // 0xa00
        float MovingRatio; // 0xa04
        float SprintingRatio; // 0xa08
        float NotSprintingRatio; // 0xa0c
        bool bIs1PSprinting; // 0xa10
        bool bIs1PMeleeWeaponSprinting; // 0xa11
        bool bIs1PPistolSprinting; // 0xa12
        bool bEnableSprintAddtive; // 0xa13
        bool bIsSprintingLastTime; // 0xa14
        float MovementStance; // 0xa18
        bool bIsLeaning; // 0xa1c
        bool bIsLeaningLeft; // 0xa1d
        bool bIsLeaningRight; // 0xa1e
        bool bIsDead; // 0xa1f
        enum class EWeaponLeanAimType LeanAimType; // 0xa20
        float LeftLeanAOAdditiveAlpha_3P; // 0xa24
        float RightLeanAOAdditiveAlpha_3P; // 0xa28
        bool bIsFPP; // 0xa2c
        bool bIsLocalPlayerControlled; // 0xa2d
        bool bIs1P; // 0xa2e
        enum class ECharacterSex CharacterSex; // 0xa2f
        float IdleBreathAlpha; // 0xa30
        bool bIsAiming; // 0xa34
        bool bIsSwitchingScope; // 0xa35
        bool bIsScoping; // 0xa36
        float CurrentSightFov; // 0xa38
        bool bIsScopingWithRearSight; // 0xa3c
        bool bIsArmedWithGun; // 0xa3d
        bool bIsArmedWithThrown; // 0xa3e
        bool bIsArmedWithMainWeapon; // 0xa3f
        bool bIsArmedWithAssistWeapon; // 0xa40
        bool bIsArmedWithDualHandWeapon; // 0xa41
        bool bIsReloading; // 0xa42
        bool bIsUpperbody; // 0xa43
        bool bIsMirrorAnim; // 0xa44
        bool bIsUsingItem; // 0xa45
        bool bIsCheckingWeapon; // 0xa46
        bool bShouldUseHandOffset; // 0xa47
        bool bCanPlayIdleAnim; // 0xa48
        int32_t IdleAnimIndex; // 0xa4c
        bool bIsFiring; // 0xa50
        bool bIsSilentWalk; // 0xa51
        bool bIsPlayingSlotAnimation; // 0xa52
        bool bIsPlayingSlotAnimation_UpperBody; // 0xa53
        bool bIsPlayingAdditiveMontage_UpperBody; // 0xa54
        bool bOverrideRightHandPostAdditive; // 0xa55
        bool bIsPlayingFireMontage; // 0xa56
        bool bIsPlayingSlotAnimation_LeftHand; // 0xa57
        bool bIsPlayingSlotAnimation_TacticalPistol; // 0xa58
        bool bIsPlayingAnimMontage; // 0xa59
        bool bDisableAdditiveMontageBlendPerBone; // 0xa5a
        bool bIsEmptyHand; // 0xa5b
        bool bIsPrviewCharacter; // 0xa5c
        float FPPAnimWeight_Translation; // 0xa60
        float FPPAnimWeight_Rotation; // 0xa64
        bool bShouldBlendFPPAnimWeight; // 0xa68
        bool bShouldFPPWeaponSway; // 0xa69
        bool bAnimSetReady; // 0xa6a
        bool bPlayingCustomAnimation; // 0xa6b
        bool bIsShadowMesh; // 0xa6c
        bool bShouldModifyAOCurve; // 0xa6d
        float bShouldModifyCopyHandGunIKBone; // 0xa70
        bool bShouldMovementSway; // 0xa74
        bool bShouldStandToCrouching; // 0xa75
        bool bShouldCrouchingToStand; // 0xa76
        bool bIsFPPAndAiming; // 0xa77
        bool bIsFPPAndNotAiming; // 0xa78
        float fIsFPPAndAiming; // 0xa7c
        bool bIsLegOutOfEndurance; // 0xa80
        bool bShouldTick1PRelax; // 0xa81
        float bTacticalPistol; // 0xa94
        enum class ETacticalPistolStatus CurrentTacticalPisotlStatus; // 0xa98
        float bFPPAndNotInOrTransTacticalPistolState; // 0xa9c
        float bInOrTransTacticalPistolState; // 0xaa0
        float TacticalLeftHandWeaponGripAlpha; // 0xaa4
        float TacticalRightHandWeaponGripAlpha; // 0xaa8
        float TacticalPistolHandOffsetAlpha; // 0xaac
        float TacticalPistolWeaponGripAlphaBeforeADS; // 0xab0
        float TacticalPistolWeaponGripAlphaAfterADS; // 0xab4
        float bAdditiveTacticalPistolGrip; // 0xab8
        float bShouldTacticalPistolCopyItemr; // 0xabc
        float bTacticalPistolAiming; // 0xac0
        float bFPPTacticalPistolAiming; // 0xac4
        float bIsTacticalBallisticShieldGrip; // 0xac8
        float bIs3PTacticalBallisticShieldGrip; // 0xacc
        float bShouldCopyVB_root_ik_hand_r; // 0xad0
        class UAnimSequence* Tactical_IdleSeq_Additive; // 0xad8
        class UBlendSpace1D* Tactical_LeftHandGripBS; // 0xae0
        float EnableBlendTacticaWeaponBaseGrip; // 0xae8
        class UAnimSequence* LeftHandWeaponBaseGripPose; // 0xaf0
        class UAnimSequence* TacticalPistolBaseGripPose; // 0xaf8
        class UAnimSequence* TacticalPistolStandBasePose; // 0xb00
        class UAnimSequence* TacticalPistolCrouchBasePose; // 0xb08
        class UAnimSequence* TacticalRightHandGripPose; // 0xb10
        class UAnimSequence* TacticalRightHandNegAdditiveSequence; // 0xb18
        struct FVector TacticalLeftHandOffset; // 0xb20
        struct FVector TacticalRightHandOffset; // 0xb2c
        float TacticalWeaponForegripType; // 0xb38
        enum class ETacticalPistolStatus LastTacticalPistolStatus; // 0xb3c
        float Enable_BlendTacticaMontage_IKGun; // 0xb40
        float Enable_BlendTacticaMontage_RightHand; // 0xb44
        float Enable_BlendTacticaMontage_LeftHand; // 0xb48
        float UpperBodyBlendAlpha_LeftHand; // 0xb4c
        float UpperBodyBlendAlpha_RightHand; // 0xb50
        float TacticalZoomingAlpha; // 0xb54
        float TacticalLeftHandGunkickAlpha_Aiming; // 0xb58
        float TacticalLeftHandGunkickAlpha_NotAiming; // 0xb5c
        float bShouldOverrideLocomotionPelvis; // 0xb60
        float MovementSpeedScale; // 0xb64
        bool bWantStop; // 0xb68
        float MovingDirection; // 0xb6c
        float MovingDirectionClamped; // 0xb70
        float MovingDirectionCompensation; // 0xb74
        float MovingDirectionOrientationWarpCopyBoneAlpha; // 0xb78
        float WantToMoveDirAngle; // 0xb7c
        float PawnToCamerAngle; // 0xb80
        float NormalizedSpeed; // 0xb84
        float VerticalVelocity; // 0xb88
        float HorizontalVelocity; // 0xb8c
        float AccLength; // 0xb90
        float AccDirection; // 0xb94
        float VelocityBeforStop; // 0xb98
        float AccDirBeforStop; // 0xb9c
        float DirectionBeforStop; // 0xba0
        float ProneRampRotationPitch; // 0xba4
        float ProneRampRotation; // 0xba8
        float MovementPlayRate; // 0xbac
        float MovementStartPosition; // 0xbb0
        float MovementSpeedWarping; // 0xbb4
        bool bIsPlayingRootMotion; // 0xbb8
        struct FVector FPPLowerBodyOffset; // 0xbbc
        struct FVector FPPJumpUpperBodyOffset; // 0xbc8
        struct FQuat CurrentFloorSlope; // 0xbe0
        struct FVector CoachLookAtLocation; // 0xbf0
        float CoachLookAtYaw; // 0xbfc
        float CoachLookAtPitch; // 0xc00
        float CoachLookAtAlpha; // 0xc04
        struct FVector BreathTranslation; // 0xc08
        struct FVector BreathTranslation_SilentWalk; // 0xc14
        struct FRotator BreathRotation; // 0xc20
        float RotationYaw; // 0xc2c
        float RotationPitch; // 0xc30
        float Yaw; // 0xc34
        float Pitch; // 0xc38
        float Roll; // 0xc3c
        struct FRotator ViewRotation_LastFrame; // 0xc40
        struct FRotator ViewRotation; // 0xc4c
        struct FRotator AORotation; // 0xc58
        struct FRotator AORotationWithWeaponSway; // 0xc64
        struct FRotator AORotationWithWeaponSway_OnlyYaw; // 0xc70
        struct FRotator AORotationWithWeaponSway_OnlyPitch; // 0xc7c
        struct FVector SpineOffset; // 0xc88
        struct FVector SpineOffsetWhenPitch; // 0xc94
        float WeaponSwayAlpha_Yaw; // 0xca0
        float WeaponSwayAlpha_Pitch; // 0xca4
        float WeaponSwayDelay_Yaw; // 0xca8
        float WeaponSwayDelay_Pitch; // 0xcac
        bool bShouldUseAO; // 0xcb0
        struct FRotator MeshRotationOffset; // 0xcb4
        struct FVector MeshLocationOffset; // 0xcc0
        struct FRotator MeshLegsRotationOffset; // 0xccc
        bool bUseOverrideInterpolationParam; // 0xcd8
        struct FInterpolationParameter OverrideInterpolationParam_X; // 0xcdc
        struct FInterpolationParameter OverrideInterpolationParam_Y; // 0xce4
        float WeaponShakeAlpha; // 0xcec
        float WeaponShakeType; // 0xcf0
        float RootBoneRotationYaw; // 0xcf4
        enum class ERootYawOffsetMode RootYawOffsetMode; // 0xcf8
        bool bIsJumping; // 0xcf9
        bool bIsFalling; // 0xcfa
        float FallingAnimType; // 0xcfc
        bool bIsInAir; // 0xd00
        bool bIsPreJump; // 0xd01
        bool bIsNotInAir; // 0xd02
        bool bIsLanding; // 0xd03
        bool bIsHighJump; // 0xd04
        bool bIsSprintJumping; // 0xd05
        bool bIsRunJumping; // 0xd06
        bool bIsSliding; // 0xd07
        float SlideAngle; // 0xd08
        float FallingAlpha; // 0xd0c
        float LandingAlpha; // 0xd10
        float LandPredictionAlpha; // 0xd14
        bool bTrigger_RunJump_Loop2End; // 0xd18
        bool bTrigger_IdleJump_Loop2End; // 0xd19
        struct FVector LandingTranslation_Ribcage; // 0xd1c
        struct FVector LandingTranslation_RCollarBone; // 0xd28
        struct FRotator LandingRotation_RPalm; // 0xd34
        float LeanRollOffset; // 0xd40
        struct FRotator LeanRotation_Ribcage; // 0xd44
        float LeanHorizontalOffset; // 0xd50
        struct FVector LeanTranslation_Spine1; // 0xd54
        float LeanDuration; // 0xd60
        bool bEnableAccelerationLean; // 0xd64
        float AccelerateLeanAmount_X; // 0xd68
        float AccelerateLeanAmount_Y; // 0xd6c
        float LeanLeftAOAdditiveRatio_3P; // 0xd70
        float LeanRightAOAdditiveRatio_3P; // 0xd74
        bool bIsRagdoll; // 0xd78
        struct FPoseSnapshot RagdollPose; // 0xd80
        float DeathDirection; // 0xdb8
        int32_t DeathStance; // 0xdbc
        int32_t DeathBodyPart; // 0xdc0
        class USGCharacterAnimInstanceBase* SGAnimInstance; // 0xdc8
        class USGCharacterLocomotionAnimInstance* SGLocomotionAnimInstance; // 0xdd0
        class ASGCharacter* SGCharacter; // 0xdd8
        class ASGWeapon* SGWeapon; // 0xde0
        class ASGWeapon* TacticalWeapon; // 0xde8
        class ASGWeapon* LastTacticalWeapon; // 0xdf0
        class USkeletalMeshComponent* SGOrnamentMesh; // 0xdf8
        bool bIsWeaponChange; // 0xe00
        bool bStanceChanged; // 0xe01
        bool bHasTransition; // 0xe02
        float TransitionType; // 0xe04
        bool bHasAnimStanceTransition; // 0xe08
        float AnimStanceTransitionType; // 0xe0c
        float SprintTransitionOutPlayRate; // 0xe10
        class USkeletalMeshComponent* CopyPoseFrom; // 0xe18
        float Current1PRelaxRemaingTime; // 0xe20
        float Shared1PRelaxRemaingTime; // 0xe24
        float CurrentIdle1PRelaxTriggerTime; // 0xe28
        float Idle1PRelaxAccTime; // 0xe2c
        struct FRotator MeleeRecoilRotation; // 0xe30
        float WeaponStabilityAlpha; // 0xe3c
        float AimingScale; // 0xe40
        struct FVector WeaponSwayTranslation_RPalm; // 0xe44
        struct FRotator WeaponSwayRotation_RPalm; // 0xe50
        struct FVector WeaponSwaySpringPivotOffset; // 0xe5c
        struct FRotator WeaponADSRotation_Shake; // 0xe68
        struct FVector WeaponADSLocation_Shake; // 0xe74
        struct FVector WeaponADSLocation_Shake_Camera; // 0xe80
        bool bShouldUseADSBreath; // 0xe8c
        bool bShouldUseFPPBreathCurve; // 0xe8d
        float bShouldUseFPPBreathAnimation; // 0xe90
        class UAnimSequence* FPPIdleBreathAnimation; // 0xe98
        struct FVector WeaponWithStockHoldingOffset; // 0xea0
        struct FVector WeaponGunTranslation; // 0xeac
        struct FRotator WeaponGunRotator; // 0xeb8
        struct FVector WeaponShakePivotOffset; // 0xec4
        struct FVector ADSWeaponGunTranslation; // 0xed0
        struct FRotator ADSWeaponGunRotator; // 0xedc
        struct FRotator ADSWeaponSightRotator; // 0xee8
        struct FVector ADSWeaponShakePivotOffset; // 0xef4
        struct FVector ADSWeaponSightShakePivotOffset; // 0xf00
        struct FRotator WeaponSwayRotation_ADS_RPalm; // 0xf0c
        struct FVector WeaponTraceLocationOffset_RightHand; // 0xf18
        struct FRotator WeaponTraceRotationOffset_RightHand; // 0xf24
        struct FVector WeaponTraceLocationOffset_LeftHand; // 0xf30
        struct FRotator WeaponTraceRotationOffset_LeftHand; // 0xf3c
        struct FRotator WeaponTraceRUpperArmRot; // 0xf48
        struct FRotator WeaponTraceRForeArm1Rot; // 0xf54
        struct FVector CameraOffsetForWeaponTrace; // 0xf60
        struct FRotator WeaponMovementSwayRotation; // 0xf6c
        float WeaponZoomTime; // 0xf78
        float WeaponUnZoomTime; // 0xf7c
        float WeaponZoomAnimRate; // 0xf80
        float WeaponUnZoomAnimRate; // 0xf84
        float ZoomingAlpha; // 0xf88
        float UnZoomingAlpha; // 0xf8c
        float ZoomingAnimTime; // 0xf90
        float UnZoomingAnimTime; // 0xf94
        float AlphaForZoomingBranch; // 0xf98
        float AlphaForUnzoomingBranch; // 0xf9c
        bool bCachedIsAiming; // 0xfa0
        bool bInitFromHipFiring; // 0xfa1
        bool bInitFromADS; // 0xfa2
        float HoldingWeaponAlpha; // 0xfa4
        struct FVector ZoomingOffset_Location_3P; // 0xfa8
        struct FVector ZoomingLagPivotOffset; // 0xfb4
        struct FVector ZoomingHandOffset; // 0xfc0
        struct FRotator ZoomingHandRotOffset; // 0xfcc
        struct FVector ZoomingIronSightOffset; // 0xff0
        struct FRotator ZoomingIronSightRotOffset; // 0xffc
        struct FVector CurrentZoomingHandOffset; // 0x1008
        struct FRotator CurrentZoomingHandRotOffset; // 0x1014
        struct FVector CurrentZoomingCameraOffset; // 0x1030
        struct FVector ZoomingCameraOffset; // 0x103c
        struct FVector UnZoomingHandOffset_X; // 0x1048
        bool bADSMoveCamera; // 0x1054
        float CameraPosBlendRatio; // 0x1058
        bool bExperimentalADS; // 0x105c
        bool bIsWeaponCollapsed; // 0x105d
        struct FSGAnimationBreathInfo BreathInfo; // 0x1084
        class UBlendSpace* TakeHitBlendSpace; // 0x10a0
        float TakeHitAnimationPlayRate; // 0x10a8
        bool bBlendShapeSwitch; // 0x10ac
        float TakeHitDirX; // 0x10b0
        float TakeHitDirY; // 0x10b4
        float TakeHitAlpha; // 0x10b8
        bool bIsTakingHit; // 0x10bc
        bool bIsProneTakingHit; // 0x10bd
        float StartPos; // 0x10c0
        bool bIsPoseCache; // 0x10c4
        struct FPoseSnapshot PoseCache; // 0x10c8
        float WeaponHandgripType; // 0x1100
        bool bHasIdleSeqBasePose; // 0x1104
        class UAnimSequence* IdleSeqBasePose; // 0x1108
        bool bHasIdleSeq; // 0x1110
        class UAnimSequence* IdleSeq; // 0x1118
        bool bHasIdleSeq_Additive; // 0x1120
        class UAnimSequence* IdleSeq_Additive; // 0x1128
        class UAnimSequence* ADS_IdleSeq_Additive; // 0x1130
        class UAnimSequence* ZoomInSeq_GripBased_Additive; // 0x1138
        class UAnimSequence* ZoomOutSeq_GripBased_Additive; // 0x1140
        bool bShouldUseZoomAnimation; // 0x1148
        bool bHasCasualIdleSeq; // 0x1149
        class UAnimSequence* CasualIdleSeq; // 0x1150
        struct FVector ForeGripOffset; // 0x1158
        class UBlendSpace1D* WeaponShakeBS; // 0x1168
        bool bHasWeaponShakeBS; // 0x1170
        struct FVector HandWeaponOffset_LeftHand; // 0x1174
        struct FVector HandWeaponOffset_RightHand_Location; // 0x1180
        struct FRotator HandWeaponOffset_RightHand_Rotation; // 0x118c
        struct FVector HandOffset_L_Location; // 0x1198
        float Enable_HandOffset_L_Alpha; // 0x11a4
        struct FVector HandOffset_R_Location; // 0x11a8
        float Enable_HandOffset_R_Alpha; // 0x11b4
        float WeaponReargripType; // 0x11b8
        class UBlendSpace1D* RearGripIdleBS; // 0x11c0
        class UBlendSpace1D* CasualRearGripIdleBS; // 0x11c8
        float Enable_RightHandGripPose; // 0x11d0
        bool bHasForegrip; // 0x11d4
        float WeaponForegripType; // 0x11d8
        float GripPoseAdjustmentAlpha; // 0x11dc
        class UBlendSpace1D* CasualGripAdjustmentBS; // 0x11e0
        struct FVector HandWeaponOffset; // 0x11e8
        struct FVector TPPWeaponOffsetCrouchMoving; // 0x11f4
        bool EnableTargetIK; // 0x1200
        struct FVector LeftHandTarget; // 0x1204
        struct FVector LeftHandTargetOffset; // 0x1210
        struct FVector LeftShoudlerLocation; // 0x121c
        struct FRotator LeftShoudlerRotation; // 0x1228
        float SprintWeaponOffsetRatio; // 0x1234
        struct FVector ProneMoveWeaponOffset; // 0x1238
        float ProneMoveWeaponOffsetRatio; // 0x1244
        struct FRotator DBNOMeshRotationOffset; // 0x1248
        struct FRotator WeaponSprintLeftArmRot; // 0x1254
        float Enable_AdaptiveWeaponTriggerAlpha; // 0x1260
        struct FVector HandOffset_R_AdaptiveWeaponTrigger; // 0x1264
        class UBlendSpace1D* AdjustGripIdleBS; // 0x1270
        class UBlendSpace1D* AICasualGripIdleBS; // 0x1278
        class UBlendSpace1D* CasualGripIdleBS; // 0x1280
        class UBlendSpace1D* GripIdleBS; // 0x1288
        bool bHasReargrip; // 0x1290
        class UBlendSpace1D* LFingerAdaptiveBS; // 0x1298
        float bEnableLFingerAdaptive; // 0x12a0
        float LFingerAdaptiveAlpha; // 0x12a4
        class UAnimSequence* FP_GripBase_Pose; // 0x12a8
        bool bShouldUse1PForeGripPose; // 0x12b0
        class UAnimSequence* GripPoseAdditive3P; // 0x12b8
        class UAnimSequence* GripPoseBase3P; // 0x12c0
        bool bEnableGripPoseAdditive3P; // 0x12c8
        float IsTransitioning; // 0x12cc
        float IsForbiddenFire; // 0x12d0
        float BlendLeftRightArmPose; // 0x12d4
        float Enable_Override_BlendPerBone; // 0x12d8
        float Override_UpperBody_MS; // 0x12dc
        float Override_UpperBody_LS; // 0x12e0
        float Override_Stand_Clavicle_L; // 0x12e4
        float Override_Clavicle_R; // 0x12e8
        float Override_Clavicle_L; // 0x12ec
        float Override_WeaponGrip_HandIKGun; // 0x12f0
        float Override_UpperBody; // 0x12f4
        float Override_UpperBody3P; // 0x12f8
        float Override_UpperBody_Spine; // 0x12fc
        float Override_RightHand; // 0x1300
        float Override_RightHand_PostAdditive; // 0x1304
        float Override_RightHand_PostAdditive_Force; // 0x1308
        float Override_RightHandIndex_PostAdditive; // 0x130c
        float Override_LeftHand_PostAdditive; // 0x1310
        float Override_LeftHand_GripAdditive; // 0x1314
        float Enable_CopyCameraIKBone; // 0x1318
        float Enable_WeaponTrace; // 0x131c
        float Enable_WeaponTraceClamped; // 0x1320
        float Enable_WeaponTraceSquard; // 0x1324
        float Enable_AO; // 0x1328
        float Enable_AO_1P; // 0x132c
        float Enable_HandIK; // 0x1330
        float Enable_AdaptiveWeaponHandGripPose; // 0x1334
        float Disable_AdditiveHandGripPose; // 0x1338
        float Enable_LeftHandGripPose; // 0x133c
        float Enable_BlendLeftHandGrip; // 0x1340
        float Enable_BlendRightHandGrip; // 0x1344
        float LeftHandIK_Offset; // 0x1348
        float RecoilUp; // 0x134c
        float RecoilBack; // 0x1350
        float Enable_CameraAnimated_Rotation; // 0x1354
        float Enable_UpperBodyClavicle; // 0x1358
        struct FRotator CameraRotationOffset; // 0x135c
        struct FRotator ScalableCameraRotationOffset; // 0x1368
        struct FVector ScalableCameraTranslationOffset; // 0x1374
        float Enable_CopyBone_Item_R_To_IK_Hand_Gun; // 0x1380
        float Enable_Additive; // 0x1384
        bool bEnable_AutoOverrideUpperbody; // 0x1388
        float AutoOverrideUpperbodyRatio; // 0x138c
        float Enable_Additive_BlendPerBone; // 0x1390
        float Enable_Pelvis_Additive; // 0x1394
        float Enable_Head_Additive; // 0x1398
        float Enable_RightArm_Additive; // 0x139c
        float Enable_RightHand_Additive; // 0x13a0
        float Enable_RightHandIK_Additive; // 0x13a4
        float Disable_IKHandGun_Additive; // 0x13a8
        float Enable_LeftArm_Additive; // 0x13ac
        float Enable_LeftHand_Additive; // 0x13b0
        float Enable_LeftHandIK_Additive; // 0x13b4
        float Enable_Additive_Montage_BlendPerBone; // 0x13b8
        float Enable_Pelvis_Additive_Montage; // 0x13bc
        float Enable_Head_Additive_Montage; // 0x13c0
        float Enable_RightArm_Additive_Montage; // 0x13c4
        float Enable_RightHand_Additive_Montage; // 0x13c8
        float Enable_RightHandIK_Additive_Montage; // 0x13cc
        float Enable_LeftArm_Additive_Montage; // 0x13d0
        float Enable_LeftHand_Additive_Montage; // 0x13d4
        float Enable_LeftHandIK_Additive_Montage; // 0x13d8
        float Override_Stand_Spine_03; // 0x13dc
        float Disable_Montage; // 0x13e0
        float FootLock_L; // 0x13e4
        float FootLock_R; // 0x13e8
        float Enable_LookAt; // 0x13ec
        float Enable_LookAt_RightHand; // 0x13f0
        float LookAtClamp; // 0x13f4
        float Enable_ADS; // 0x13f8
        struct FVector PostProcessHandTranslation; // 0x13fc
        float Spine_Montage_Blend_Ratio; // 0x1408
        float LeftHandFollowMagazineRatio; // 0x140c
        struct FVector LeftHandFollowMagazineOffset; // 0x1410
        float CurrentTurnYawWeight; // 0x141c
        float SmoothedEnableUpAORatio; // 0x1420
        float UpperBodyAnimRatio; // 0x1424
        bool bOverrideUpperBody; // 0x1428
        float WeaponStanceAlpha_Throwable; // 0x142c
        float WeaponStanceAlpha_Melle; // 0x1430
        float WeaponStanceAlpha_Unarmed; // 0x1434
        float WeaponStanceAlpha_Rifle; // 0x1438
        bool bIsProneMoving; // 0x143c
        bool bIsSilentWalkMoving; // 0x143e
        bool bIsSprintAiming; // 0x143f
        float SprintADSTime; // 0x1440
        float SprintADSAlpha; // 0x1444
        struct FVector SprintADSTranslation; // 0x1448
        struct FRotator SprintADSRotation; // 0x1454
        float ADSBlendTime; // 0x1460
        bool bIsSprintingLastTime_3P; // 0x1464
        bool bIsCrouchAndNotDBNO; // 0x1465
        bool bIsProneAndNotDBNO; // 0x1466
        bool bIsPlayingSlotAnimation_UpperBody_WhenInAir; // 0x1467
        bool bCanCallapseGun; // 0x1468
        float DisableUpperbodyLocomotion_3P; // 0x146c
        bool bEnableFPPWeaponLeanRotation; // 0x1470
        float PostProcessHandTranslationRatio; // 0x1474
        bool bDecreaseUpperBodyAnimRatio_3P; // 0x1478
        float PlayingUpperBodyAnimWithoutGunRatio; // 0x147c
        bool bMovingWithoutGunOrUpperbodyAnim; // 0x1480
        bool bIsCrouchAndMoving; // 0x1481
        bool bSprintingWithoutDualHandWeaponOrUpperbodyAnim; // 0x1482
        bool bMovingWithoutUpperbodyAnim; // 0x1483
        bool bSprintingWithoutGunOrUpperbodyAnim; // 0x1484
        bool bMovingWithMainWeapon; // 0x1485
        bool bSprintingWithoutUpperbodyAnim; // 0x1486
        struct FVector UpperarmL_Offset; // 0x1488
        struct FVector UpperarmLMiddleSlider1_Offset; // 0x1494
        bool bNoAdditiveMontage; // 0x14a0
        float UpperBodySlotAnimationRatio; // 0x14a4
        float CopyIKHandGunAfterMontageRatio; // 0x14a8
        float Enable_AO_3P; // 0x14ac
        float Enable_ADS_3P; // 0x14b0
        float Disable_ADS_HeadAdditive_3P; // 0x14b4
        float OverrideFootLWhenMovingStop; // 0x14b8
        float OverrideFootRWhenMovingStop; // 0x14bc
        float Disable_LeanPose_UpperBody; // 0x14c0
        float Disable_LeanPose_Spine; // 0x14c4
        bool bHasZoomInOutSeq; // 0x14c8
        bool bHasIdleAOSeq; // 0x14c9
        bool bIsStandAndNotMoving; // 0x14ca
        bool bIsCrouchOrMoving; // 0x14cb
        float RecoilRatio3P; // 0x14cc
        float RecoilPlayerRatio3P; // 0x14d0
        class UAnimSequence* FireAdditive_Seq; // 0x14d8
        bool bHasFireAdditive_Seq; // 0x14e0
        struct FRotator LookAroundOffset; // 0x14e4
        class UAimOffsetBlendSpace* LookAround_Head_AO_3P; // 0x14f0
        float FocalPointRatio; // 0x14f8
        struct FVector FocalPoint; // 0x14fc
        struct FVector WeaponOffset3P; // 0x1508
        struct FVector WeaponOffset3PAvoidSight; // 0x1514
        bool bEnableWeaponOffset3P; // 0x1520
        struct FVector FovCorrection; // 0x1524
        bool bIsAI; // 0x1530
        int32_t CurrentLOD; // 0x1534
        bool bPlayMontageAddjustAddjustGrip; // 0x154e
        float GripAdjustLeftHandBlendWeight; // 0x1550
        float GripAdjustRightHandBlendWeight; // 0x1554
        class USGCharacterAnimationSetsPerCharacterSex* CurrentCharacterAnimationSetsPerCharacterSex; // 0x1558
        class USGPerWeaponAnimationSets* CurrentPerWeaponAnimationSetsClass; // 0x1560
        class USGPerWeaponAnimationSets* CurrentPerWeaponAnimationSetsClass_Left; // 0x1568
        enum class EMovementStance FromMovementStance; // 0x1570
        enum class EMovementStance ToMovementStance; // 0x1571
        enum class EAnimStance FromAnimStance; // 0x1572
        enum class EAnimStance ToAnimStance; // 0x1573

    };

    struct FInterpolationParameter //ScriptStruct Engine.InterpolationParameter
    {
    //Children Prop Count (Fields): 2
    public:

        float InterpolationTime; // 0x0
        enum class EFilterInterpolationType InterpolationType; // 0x4

    };

    struct FSGCharacterAnimInstanceProxyLOD : FSGCharacterAnimInstanceProxyBase //ScriptStruct SGFramework.SGCharacterAnimInstanceProxyLOD
    {
    //Children Prop Count (Fields): 1
    public:

        float LocomotionHandIK_CurveValue_Scaler; // 0x15a8

    };

    struct FSGCharacterAnimInstanceProxy : FSGCharacterAnimInstanceProxyLOD //ScriptStruct SGFramework.SGCharacterAnimInstanceProxy
    {
    //Children Prop Count (Fields): 1
    public:

        class USGCharacterCastShadowComponent* CachedCastShadowComponent; // 0x15b8

    };

    struct FSpineOffsetPreset //ScriptStruct SGFramework.SpineOffsetPreset
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector TranslationOffset; // 0x0
        struct FVector TranslationOffsetAccordingToPitch; // 0xc

    };

    struct FSGTPPRecoilConfig //ScriptStruct SGFramework.SGTPPRecoilConfig
    {
    //Children Prop Count (Fields): 4
    public:

        class UCurveFloat* AccumulateCurve; // 0x0
        class UCurveFloat* BlendOutCurve; // 0x8
        struct FAlphaBlend Blend; // 0x10
        float CurrentValue; // 0x40

    };

    struct FSGCharacterAnimReducer_BasePose //ScriptStruct SGFramework.SGCharacterAnimReducer_BasePose
    {
    //Children Prop Count (Fields): 15
    public:

        bool bIsSwitchingPose; // 0x8
        class UAnimSequence* CurrentBasePose; // 0x10
        class UAnimSequence* TargetBasePose; // 0x18
        float BodyAlpha; // 0x20
        float LeftLegAlpha; // 0x24
        float RightLegAlpha; // 0x28
        float PelvisWeight; // 0x2c
        float LeftFootWeight; // 0x30
        float RightFootWeight; // 0x34
        float HandAlpha; // 0x38
        float SwitchPoseTime; // 0x3c
        class UCurveFloat* BodyAlphaCurve; // 0x40
        class UCurveFloat* LeftLegAlphaCurve; // 0x48
        class UCurveFloat* RightLegAlphaCurve; // 0x50
        class UCurveFloat* DistanceToMaxFootAdditiveWeightCurve; // 0x58

    };

    struct FHeadSubGroupInfo //ScriptStruct SGFramework.HeadSubGroupInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName SocketName; // 0x0
        enum class EHeadHitSubGroupType HeadHitSubGroupType; // 0x8

    };

    struct FAvatarPreloadAsset //ScriptStruct SGFramework.AvatarPreloadAsset
    {
    //Children Prop Count (Fields): 4
    public:

        bool bStaticMesh; // 0x0
        class UStreamableRenderAsset* StaticAsset; // 0x8
        class UStreamableRenderAsset* MaleAsset; // 0x10
        class UStreamableRenderAsset* FemaleAsset; // 0x18

    };

    struct FSGAvatarData //ScriptStruct SGFramework.SGAvatarData
    {
    //Children Prop Count (Fields): 3
    public:

        int64_t AvatarID; // 0x8
        class ASGInventory* AvatarClass; // 0x10
        int32_t bPutOnOrTakeOff; // 0x18

    };

    struct FRepTurnInPlaceAnimMontage //ScriptStruct SGFramework.RepTurnInPlaceAnimMontage
    {
    //Children Prop Count (Fields): 2
    public:

        class UAnimMontage* AnimMontage; // 0x0
        char ForcePlayBit; // 0x8

    };

    struct FSGTurnInPlaceAnimationConfig //ScriptStruct SGFramework.SGTurnInPlaceAnimationConfig
    {
    //Children Prop Count (Fields): 6
    public:

        class UAnimMontage* TurnLeft90; // 0x0
        class UAnimMontage* TurnRight90; // 0x8
        class UAnimMontage* TurnLeft90_Casual; // 0x10
        class UAnimMontage* TurnRight90_Casual; // 0x18
        class UAnimMontage* TurnLeft90_EmptyHands; // 0x20
        class UAnimMontage* TurnRight90_EmptyHands; // 0x28

    };

    struct FBadgeAttachInfo //ScriptStruct SGFramework.BadgeAttachInfo
    {
    //Children Prop Count (Fields): 2
    public:

        class USGInventoryEquipMeshComponent* AttachEquipMeshComp; // 0x0
        struct FTransform AttachOffset; // 0x10

    };

    struct FWeaponMeshWaitToAttach //ScriptStruct SGFramework.WeaponMeshWaitToAttach
    {
    //Children Prop Count (Fields): 1
    public:

        struct TMap<class ASGInventory*, class UMeshComponent*> WaitToAttachMap; // 0x0

    };

    struct FSGCharacterCaptureAnimInstanceProxy : FAnimInstanceProxy //ScriptStruct SGFramework.SGCharacterCaptureAnimInstanceProxy
    {
    //Children Prop Count (Fields): 20
    public:

        struct FVector HandWeaponOffset_LeftHand; // 0x860
        bool bIsEmptyHand; // 0x86c
        bool bHasCasualSeq; // 0x86d
        bool bHasReargrip; // 0x86e
        float GripPoseAdjustmentAlpha; // 0x870
        float CasualGripBSAplha; // 0x874
        float RearGripTypeAlpha; // 0x878
        float ForegripTypeAlpha; // 0x87c
        float Disable_LeftHandGripPose; // 0x880
        float Disable_LeftHandIK; // 0x884
        float Enable_AdaptiveWeaponHandGripPose; // 0x888
        float Enable_BothHandMeleeWeaponCasualGrip; // 0x88c
        struct FVector ForeGripOffset; // 0x890
        class UBlendSpace1D* RearGripCasualBS; // 0x8a0
        class UBlendSpace1D* CasualGripBS; // 0x8a8
        class UBlendSpace1D* CasualGripAdjustmentBS; // 0x8b0
        class UAnimSequence* CasualIdleSeq; // 0x8b8
        class USGCharacterCaptureAnimInstance* SGAnimInstance; // 0x8c0
        class ACharacter* OwnerCharacter; // 0x8c8
        class ASGCharacterCaptureActor* SGCaptureCharacter; // 0x8d0

    };

    struct FDebugPhysicsBodyInfos //ScriptStruct SGFramework.DebugPhysicsBodyInfos
    {
    //Children Prop Count (Fields): 5
    public:

        bool bEnable; // 0x0
        struct TArray<struct FDebugBoxBodyInfo> BoxBodies; // 0x8
        struct TArray<struct FDebugCapsuleBodyInfo> CapsuleBodies; // 0x18
        struct FVector ServerLocation; // 0x28
        struct FRotator ServerRotation; // 0x34

    };

    struct FDebugCapsuleBodyInfo //ScriptStruct SGFramework.DebugCapsuleBodyInfo
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector Center; // 0x0
        struct FQuat Rotation; // 0x10
        float Radius; // 0x20
        float HalfHeight; // 0x24

    };

    struct FDebugBoxBodyInfo //ScriptStruct SGFramework.DebugBoxBodyInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Center; // 0x0
        struct FQuat Rotation; // 0x10
        struct FVector BoxExtent; // 0x20

    };

    struct FDogTagCreateInfo //ScriptStruct SGFramework.DogTagCreateInfo
    {
    //Children Prop Count (Fields): 13
    public:

        struct FString PlayerName; // 0x0
        int32_t PlayerLevel; // 0x10
        uint64_t DeathTime; // 0x18
        struct FString KillerPlayerName; // 0x20
        uint64_t KillerPlayerWeaponID; // 0x30
        enum class ECharacterType KillerCharacterType; // 0x38
        bool IsSameTeam; // 0x39
        struct FString MapName; // 0x40
        int32_t DeathReason; // 0x50
        int32_t PlayerRank; // 0x54
        uint32_t GOpenID; // 0x58
        uint64_t GID; // 0x60
        int32_t NationalFlagIso; // 0x68

    };

    struct FCharacterDeathInfo //ScriptStruct SGFramework.CharacterDeathInfo
    {
    //Children Prop Count (Fields): 14
    public:

        bool bIsDead; // 0x0
        bool bForceDied; // 0x1
        float Timestamp; // 0x4
        int32_t DeathCount; // 0x8
        struct FVector DeathLocation; // 0xc
        struct FRotator DeathRotation; // 0x18
        class AActor* DamageCauser; // 0x28
        enum class ESGDamageCauserType DamageCauserType; // 0x30
        enum class ECharacterEnduranceType DeathBodyPart; // 0x31
        struct FVector Momentum; // 0x34
        bool bPenetrateArmor; // 0x40
        enum class EAnimStance DeathAnimationState; // 0x41
        enum class EHitGroupType HitGroup; // 0x42
        class UAnimMontage* DeathAnimation; // 0x48

    };

    struct FSGClientMoveInfo //ScriptStruct SGFramework.SGClientMoveInfo
    {
    //Children Prop Count (Fields): 2
    public:

        float ClientTimeStamp; // 0x0
        float DeltaTime; // 0x4

    };

    struct FSGServerMoveResult //ScriptStruct SGFramework.SGServerMoveResult
    {
    //Children Prop Count (Fields): 4
    public:

        float ClientTimeStamp; // 0x0
        float DeltaTime; // 0x4
        enum class EServerMoveResultType MoveResultType; // 0x8
        int32_t MoveType; // 0xc

    };

    struct FSGCharacterDebugMovementInfo //ScriptStruct SGFramework.SGCharacterDebugMovementInfo
    {
    //Children Prop Count (Fields): 16
    public:

        float MaxSpeed; // 0x0
        struct FVector Velocity; // 0x4
        struct FVector Acceleration; // 0x10
        struct FVector CharacterLocation; // 0x1c
        struct FRotator CharacterRotation; // 0x28
        float TotalWeaponMovementSpeedScale; // 0x34
        float ShootingSpeedScale; // 0x38
        float ReloadMovingScale; // 0x3c
        float ADSZoomMovingScale; // 0x40
        float MovementAbilitySpeedScale; // 0x44
        float OverweightMovingScale; // 0x48
        float EquipmentMovingScale; // 0x4c
        float JumpXYVelocityScale; // 0x50
        float JumpZVelocityScale; // 0x54
        bool IsSprinting; // 0x58
        enum class ECharacterSprintFailureReason SprintFailureReason; // 0x59

    };

    struct FDeliverCargosAnimConfTableRow : FTableRowBase //ScriptStruct SGFramework.DeliverCargosAnimConfTableRow
    {
    //Children Prop Count (Fields): 1
    public:

        struct FDeliverCargosRelevantAnimInfo DeliverCargosAnimInfo; // 0x8

    };

    struct FDeliverCargosRelevantAnimInfo //ScriptStruct SGFramework.DeliverCargosRelevantAnimInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<int32_t> RelevantIDArr; // 0x0
        struct FDeliverCargosAnimInfo AnimInfo; // 0x10

    };

    struct FSGCharacterEnduranceExtraCureContext //ScriptStruct SGFramework.SGCharacterEnduranceExtraCureContext
    {
    //Children Prop Count (Fields): 8
    public:

        float Vaule; // 0x0
        struct FGameplayAttribute TargetAttribute; // 0x8
        class AActor* TargetActor; // 0x40
        class AActor* SourceActor; // 0x48
        enum class EGameplayModOp ModifierOp; // 0x50
        class AActor* EffectCauser; // 0x58
        class UGameplayAbility* ContextGA; // 0x60
        int32_t LastCureCount; // 0x68

    };

    struct FCharacterEnduranceAbility //ScriptStruct SGFramework.CharacterEnduranceAbility
    {
    //Children Prop Count (Fields): 14
    public:

        struct FCharacterEnduranceDebuffAbility_Bleed BleedDebuffAbilitiesByChance; // 0x0
        struct FCharacterEnduranceDebuffAbility PainDebuffAbilitiesByChance; // 0x30
        struct FCharacterEnduranceDebuffAbility BoneBreakDebuffAbilitiesByChance; // 0x58
        struct FCharacterEnduranceDebuffAbility TunnelVisonDebuffAbilitiesByChance; // 0x80
        struct FCharacterEnduranceDebuffAbility FreshWoundDebuffAbilitiesByChance; // 0xa8
        struct FCharacterEnduranceDebuffAbility_Tinnitus TinnitusDebuffAbilities; // 0xd0
        struct FCharacterEnduranceDebuffAbility_Stun StunDebuffAbilities; // 0xf8
        class UGameplayAbility* AutoRecoverAbilityClass; // 0x120
        class UGameplayAbility* ForbiddenAutoRecoverByTakeDamageAbilityClass; // 0x128
        class UGameplayAbility* InfiniteForbiddenAutoRecoverByTakeDamageAbilityClass; // 0x130
        class UGameplayAbility* OutOfEnduranceAbilityClass; // 0x138
        bool bSpreadDamageToOthersWhenOutOfEndurance; // 0x140
        float SpreadDamageScale; // 0x144
        float EffectDuration; // 0x148

    };

    struct FCharacterEnduranceDebuffAbility //ScriptStruct SGFramework.CharacterEnduranceDebuffAbility
    {
    //Children Prop Count (Fields): 4
    public:

        float ChanceToTrigger; // 0x0
        class UGameplayAbility* DebuffAbilityClass; // 0x8
        class UCurveFloat* TriggerChanceCurve; // 0x10
        class UCurveFloat* DurationTimeCurve; // 0x18

    };

    struct FCharacterEnduranceDebuffAbility_Stun : FCharacterEnduranceDebuffAbility //ScriptStruct SGFramework.CharacterEnduranceDebuffAbility_Stun
    {
    public:


    };

    struct FCharacterEnduranceDebuffAbility_Tinnitus : FCharacterEnduranceDebuffAbility //ScriptStruct SGFramework.CharacterEnduranceDebuffAbility_Tinnitus
    {
    public:


    };

    struct FCharacterEnduranceDebuffAbility_Bleed : FCharacterEnduranceDebuffAbility //ScriptStruct SGFramework.CharacterEnduranceDebuffAbility_Bleed
    {
    //Children Prop Count (Fields): 2
    public:

        float TrapTriggerChance; // 0x28
        float BurnTriggerChance; // 0x2c

    };

    struct FSGCharacterFacialAnimationSetsPerCharacterSex //ScriptStruct SGFramework.SGCharacterFacialAnimationSetsPerCharacterSex
    {
    //Children Prop Count (Fields): 2
    public:

        struct TMap<struct FString, class UAnimMontage*> FacialAnimations; // 0x0
        struct TMap<struct FString, struct TSoftObjectPtr<UAnimSequence>> DTFacialAnimaSequences; // 0x50

    };

    struct FSGCharacterFacialAnimInstanceProxy : FAnimInstanceProxy //ScriptStruct SGFramework.SGCharacterFacialAnimInstanceProxy
    {
    //Children Prop Count (Fields): 10
    public:

        class UAnimSequence* FacialAnimeSeq; // 0x860
        float bShouldBlendMouth; // 0x868
        class USGCharacterFacialAnimInstance* SGAnimInstance; // 0x870
        class ASGCharacter* SGCharacter; // 0x878
        float StartTimeOffset; // 0x880
        float bIsEquipMask; // 0x884
        float ControlRigAimWeight; // 0x888
        struct FVector EyeAimPosition; // 0x88c
        struct FVector2D FaceAimControl; // 0x898
        bool bUseFacialAnimation; // 0x8a0

    };

    struct FFlashData //ScriptStruct SGFramework.FlashData
    {
    //Children Prop Count (Fields): 7
    public:

        float EffectInfulenceFactor; // 0x0
        float FlashDurationTime; // 0x4
        float FadeoutTime; // 0x8
        float FlashLightCircleFadeoutTime; // 0xc
        float DistortionFadeoutTime; // 0x10
        struct FVector FlashBangWorldLocation; // 0x14
        float TimeSeconds; // 0x20

    };

    struct FSoundSourceTypeFSoundInfluenceFactor //ScriptStruct SGFramework.SoundSourceTypeFSoundInfluenceFactor
    {
    //Children Prop Count (Fields): 1
    public:

        struct TMap<enum class ESoundSourceType, struct FSoundInfluenceFactor> SourceTypeInfluenceFactor; // 0x0

    };

    struct FSoundInfluenceFactor //ScriptStruct SGFramework.SoundInfluenceFactor
    {
    //Children Prop Count (Fields): 2
    public:

        float LevelInfluence; // 0x0
        float MaxDistanceInfluence; // 0x4

    };

    struct FFootAudioSettings //ScriptStruct SGFramework.FootAudioSettings
    {
    //Children Prop Count (Fields): 4
    public:

        float FootstepInterval; // 0x0
        class UAkAudioEvent* FootstepAudioEvent; // 0x8
        float FoleyDelay; // 0x10
        class UAkAudioEvent* FoleyAudioEvent; // 0x18

    };

    struct FSGCharacterFootIKAnimInstanceProxy : FAnimInstanceProxy //ScriptStruct SGFramework.SGCharacterFootIKAnimInstanceProxy
    {
    //Children Prop Count (Fields): 21
    public:

        struct FVector IKFoot_Root_Offset; // 0x860
        struct FRotator FootLock_L_Rotation; // 0x86c
        struct FVector FootLock_L_Location; // 0x878
        float FootLock_L_Alpha; // 0x884
        struct FRotator FootLock_R_Rotation; // 0x888
        struct FVector FootLock_R_Location; // 0x894
        float FootLock_R_Alpha; // 0x8a0
        struct FVector FootOffset_L_Location; // 0x8a4
        struct FRotator FootOffset_L_Rotation; // 0x8b0
        struct FVector FootOffset_R_Location; // 0x8bc
        struct FRotator FootOffset_R_Rotation; // 0x8c8
        struct FVector PelvisOffset_Location; // 0x8d4
        float FootIKAlpha; // 0x8e0
        struct FRotator ThighOffset_L_Rotation_WhenProne; // 0x8e4
        struct FRotator ThighOffset_R_Rotation_WhenProne; // 0x8f0
        bool bIsProne; // 0x8fc
        bool bShouldUpdateFootIK; // 0x8fd
        float bInOrTransTacticalPistolState; // 0x900
        class USGCharacterFootIKAnimInstance* SGAnimInstance; // 0x908
        class UAnimInstance* SGMainAnimInstance; // 0x910
        class ASGCharacter* SGCharacter; // 0x918

    };

    struct FThrowableWeaponBanInfo //ScriptStruct SGFramework.ThrowableWeaponBanInfo
    {
    //Children Prop Count (Fields): 7
    public:

        int32_t RowNum; // 0x0
        uint64_t GrenadeItemId; // 0x8
        uint32_t HitGroup; // 0x10
        float DamageThres; // 0x14
        int32_t DamageTimes; // 0x18
        struct TArray<int32_t> TimesThres; // 0x20
        uint64_t BanNumber; // 0x30

    };

    struct FScreenEffectConfArray //ScriptStruct SGFramework.ScreenEffectConfArray
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName ParameterName; // 0x0
        bool ApplyCurve; // 0x8
        float DefaultValue; // 0xc
        class UCurveFloat* Curve; // 0x10

    };

    struct FSGCharacterHandIKAnimInstanceProxy : FAnimInstanceProxy //ScriptStruct SGFramework.SGCharacterHandIKAnimInstanceProxy
    {
    //Children Prop Count (Fields): 48
    public:

        bool bShouldUpdateHandIK; // 0x860
        float Enable_LFingerAdaptive; // 0x864
        float Enable_LeftHandIK; // 0x868
        float Enable_RightHandIK; // 0x86c
        float Enable_HandIK; // 0x870
        float Enable_LeftArm_Offset; // 0x874
        float Enable_LeftArm_Adjust_Stretch; // 0x878
        float ArmStretch_AngleThreshold; // 0x894
        struct FVector ArmStretch_ExtraOffset; // 0x898
        struct FVector HandWeaponOffset_LeftHand; // 0x8a4
        struct FVector HandWeaponOffset_RightHand_Location; // 0x8b0
        struct FRotator HandWeaponOffset_RightHand_Rotation; // 0x8bc
        struct FVector LeftHandJointOffset; // 0x8c8
        struct FVector RightHandJointOffset; // 0x8d4
        struct FVector LeftArmOffset; // 0x8e0
        struct FVector RightHandOffset; // 0x8ec
        struct FVector RightArmAimOffset; // 0x8f8
        struct FVector HandOffset_L_Location; // 0x904
        float Enable_HandOffset_L_Alpha; // 0x910
        struct FVector HandOffset_R_Location; // 0x914
        bool bShouldModified_IK_Hand_L; // 0x920
        struct FVector ModifiedLocation_IK_Hand_L; // 0x924
        bool bShouldModified_IK_Hand_R; // 0x930
        bool bShouldModified_IK_Hand_Gun; // 0x931
        bool bDisableModified_IK_Hand_R_CopyBone; // 0x932
        struct FVector ModifiedLocation_IK_Hand_R; // 0x934
        struct FVector ModifiedLocation_IK_Hand_Gun; // 0x940
        float Enable_HandOffset_R_Alpha; // 0x94c
        float bShouldCopyRightToGun; // 0x950
        struct FVector LeftHandParentBoneSpaceOffset; // 0x954
        float LeftHandParentBoneSpaceAlpha; // 0x960
        struct FVector RightHandParentBoneSpaceOffset; // 0x964
        float RightHandParentBoneSpaceAlpha; // 0x970
        bool bIsPrviewCharacter; // 0x974
        enum class EWeaponType WeaponStance; // 0x975
        bool bIsUsingItem; // 0x976
        bool bIsRescuingTeammate; // 0x977
        float bTacticalPistol; // 0x978
        float bInOrTransTacticalPistolState; // 0x97c
        float bTacticalPistolAiming; // 0x980
        float bShouldTacticalPistolCopyItemr; // 0x984
        float TacticalPistolHandOffsetAlpha; // 0x988
        struct FVector TacticalLeftHandOffset; // 0x98c
        struct FVector TacticalRightHandOffset; // 0x998
        class USGCharacterHandIKAnimInstance* SGAnimInstance; // 0x9a8
        class USGCharacterAnimInstance* SGMainAnimInstance; // 0x9b0
        class ASGCharacter* SGCharacter; // 0x9b8
        class ASGWeapon* SGWeapon; // 0x9c0

    };

    struct FSGHoldInputRecord //ScriptStruct SGFramework.SGHoldInputRecord
    {
    public:


    };

    struct FSGHoldInputBehavior //ScriptStruct SGFramework.SGHoldInputBehavior
    {
    //Children Prop Count (Fields): 2
    public:

        struct FGameplayTagContainer TagsToWait; // 0x0
        struct TArray<struct FName> ActionsToOverride; // 0x20

    };

    struct FKeyDoorTagetInfo //ScriptStruct SGFramework.KeyDoorTagetInfo
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector DoorLocation; // 0x0
        struct FVector FaceDirection; // 0xc
        struct FVector LockLocation; // 0x18
        float MoveDuration; // 0x24

    };

    struct FKeyDoorIKInfo //ScriptStruct SGFramework.KeyDoorIKInfo
    {
    //Children Prop Count (Fields): 7
    public:

        bool EnableIK; // 0x0
        float KeyAttachDelayTime; // 0x4
        float KeyDetachDelayTime; // 0x8
        struct FVector LockLocation; // 0xc
        struct FVector ShoulderLocation; // 0x18
        struct FRotator ShoulderRotator; // 0x24
        struct TSoftObjectPtr<USkeletalMesh> KeySkeletalMeshTemplate; // 0x30

    };

    struct FPreOccupiedContainerList //ScriptStruct SGFramework.PreOccupiedContainerList
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class ASGInventory*> ContainerInvList; // 0x0

    };

    struct FSpawnActorInfo //ScriptStruct SGFramework.SpawnActorInfo
    {
    //Children Prop Count (Fields): 9
    public:

        class AActor* PreviewActor; // 0x0
        float PreviewDis; // 0x8
        float MinDisSquared; // 0xc
        class UObject* ActorToSpawnClass; // 0x10
        struct FVector BoxExtent; // 0x18
        float ActorLocUpTraceDis; // 0x24
        float ActorLocDownTraceDis; // 0x28
        struct FVector CameraLoc; // 0x2c
        struct FVector TargetLoc; // 0x38

    };

    struct FContainerSearchingInfo //ScriptStruct SGFramework.ContainerSearchingInfo
    {
    //Children Prop Count (Fields): 7
    public:

        class USGInventoryContainerSearchingComponent* ContainerSearchingCom; // 0x0
        bool IsPendingStartAutoSearch; // 0x8
        bool IsInAutoSearching; // 0x9
        float RoughSearchFinishTime; // 0xc
        class USGInventorySearchComponent* CurAutoSearchingInventorySearchCom; // 0x10
        float DetailSearchFinishTime; // 0x18
        int64_t BeginSeachTimeStamp; // 0x20

    };

    struct FProtectCacheComponent //ScriptStruct SGFramework.ProtectCacheComponent
    {
    //Children Prop Count (Fields): 4
    public:

        class UActorComponent* HiddenComponent; // 0x0
        bool bCastShadow; // 0x8
        bool bHiddenInGame; // 0x9
        bool bVisible; // 0xa

    };

    struct FSGCharacterLocomotionAnimInstanceProxy : FAnimInstanceProxy //ScriptStruct SGFramework.SGCharacterLocomotionAnimInstanceProxy
    {
    //Children Prop Count (Fields): 231
    public:

        class UAnimSequence* Stand_Idle; // 0x860
        class UAnimSequence* Idle_FixUpRightHand; // 0x868
        class UBlendSpace* Stand_Locomotion; // 0x870
        enum class ELocomotionType Stand_Locomotion_Type; // 0x878
        class UAnimSequence* Stand_Locomotion_HandSway; // 0x880
        class UBlendSpace* Stand_WalkLocomotion; // 0x888
        class UBlendSpace* Stand_RunLocomotion; // 0x890
        class UBlendSpace* Stand_SprintLocomotion; // 0x898
        class UAnimSequence* Crouch_Idle; // 0x8a0
        class UBlendSpace* Crouch_Locomotion; // 0x8a8
        class UBlendSpace* Crouch_WalkLocomotion; // 0x8b0
        class UBlendSpace* Crouch_RunLocomotion; // 0x8b8
        class UBlendSpace* Crouch_SprintLocomotion; // 0x8c0
        class UAnimSequence* Prone_Idle; // 0x8c8
        class UBlendSpace* Prone_Locomotion; // 0x8d0
        class UBlendSpace* Prone_WalkLocomotion; // 0x8d8
        class UBlendSpace* Prone_RunLocomotion; // 0x8e0
        class UBlendSpace* Prone_SprintLocomotion; // 0x8e8
        class UAnimSequence* DBNO_Idle; // 0x8f0
        class UBlendSpace* DBNO_Locomotion; // 0x8f8
        class UBlendSpace* DBNO_WalkLocomotion; // 0x900
        class UBlendSpace* DBNO_RunLocomotion; // 0x908
        class UBlendSpace* DBNO_SprintLocomotion; // 0x910
        class UAnimSequence* Current_Idle; // 0x918
        class UBlendSpace* TransitionAnimationSet; // 0x920
        class UAnimSequence* StandToCrouch; // 0x928
        class UAnimSequence* StandToProne; // 0x930
        class UAnimSequence* SprintToProne; // 0x938
        class UAnimSequence* CrouchToStand; // 0x940
        class UAnimSequence* CrouchToProne; // 0x948
        class UAnimSequence* ProneToStand; // 0x950
        class UAnimSequence* ProneToCrouch; // 0x958
        class UAnimSequence* StandToDBNO; // 0x960
        class UAnimSequence* SprintToDBNO; // 0x968
        class UAnimSequence* CrouchToDBNO; // 0x970
        class UAnimSequence* ProneToDBNO; // 0x978
        class UAnimSequence* DBNOToCrouch; // 0x980
        class UAnimSequence* DBNOToProne; // 0x988
        class UBlendSpace* StandToSprint; // 0x990
        class UBlendSpace* SprintToStand; // 0x998
        class UBlendSpace* SprintToCrouch; // 0x9a0
        class UAnimSequence* JumpStart; // 0x9a8
        class UAnimSequence* JumpLoop; // 0x9b0
        class UBlendSpace* JumpEnd; // 0x9b8
        class UBlendSpace* RunJumpStart; // 0x9c0
        class UBlendSpace* RunJumpLoop; // 0x9c8
        class UBlendSpace* RunJumpEnd; // 0x9d0
        class UAnimSequence* JumpHighEnd; // 0x9d8
        class UBlendSpace* RunJumpHighEnd; // 0x9e0
        class UAnimSequence* PreJump; // 0x9e8
        class UAnimSequence* SprintJumpStart; // 0x9f0
        class UAnimSequence* SprintJumpLoop; // 0x9f8
        class UAnimSequence* SprintJumpEnd; // 0xa00
        class UBlendSpace* SprintToRunJumpEnd; // 0xa08
        class UAnimSequence* RunToIdleJumpEnd; // 0xa10
        class UAnimSequence* SprintToIdleJumpEnd; // 0xa18
        class UAnimSequenceBase* DeathAnim; // 0xa20
        enum class EAnimStance Stance; // 0xa28
        enum class EWeaponType WeaponStance; // 0xa29
        bool bIsSprintingLastTime; // 0xa2a
        bool bIsSprintingLastUpdate; // 0xa2b
        bool bIsViewTargetLocomotion; // 0xa2c
        bool bIs1P; // 0xa2d
        float IdleBreathAlpha; // 0xa30
        float bIs1PAiming; // 0xa34
        float bIs1PTacticalPistolAiming; // 0xa38
        bool bLastLocationChanged; // 0xa3c
        bool bStanceChangedThisFrame; // 0xa3d
        float GroundDistance; // 0xa40
        bool bIsAiming; // 0xa44
        bool bIsAimingLastUpdate; // 0xa45
        bool bIsScoping; // 0xa46
        bool bIsSprintingLastTime_3P; // 0xa47
        bool bIsCrouchAndNotDBNO; // 0xa48
        bool bIsProneAndNotDBNO; // 0xa49
        bool bIsMovingOnGroundAndSprinting; // 0xa4a
        bool bIsMovingOnGroundAndSprintJumping; // 0xa4b
        bool bIsStand; // 0xa4c
        bool bIsCasual; // 0xa4d
        bool bIsCrouch; // 0xa4e
        bool bIsProne; // 0xa4f
        bool bIsDBNO; // 0xa50
        float PronePlayRate; // 0xa54
        bool bIsMoving; // 0xa58
        bool bWasMovingLastUpdate; // 0xa59
        bool bIsSilentWalk; // 0xa5a
        bool bIsMovingForward; // 0xa5b
        bool bIsMovingOnGround; // 0xa5c
        bool bIsSprinting; // 0xa5d
        float MovementStance; // 0xa60
        bool bIsUsingItem; // 0xa64
        bool bIsArmedWithGun; // 0xa65
        bool bIsArmedWithThrown; // 0xa66
        bool bIsArmedWithMainWeapon; // 0xa67
        bool bIsArmedWithAssistWeapon; // 0xa68
        bool bIsArmedWithDualHandWeapon; // 0xa69
        bool bIsJumping; // 0xa6a
        bool bIsSprintJumping; // 0xa6b
        bool bIsRunJumping; // 0xa6c
        bool bIsFalling; // 0xa6d
        float FallingAnimType; // 0xa70
        bool bIsInAir; // 0xa74
        bool bIsInAirChangeThisFrame; // 0xa75
        struct FRotator WorldRotation; // 0xa78
        struct FVector Acceleration; // 0xa84
        struct FVector LocalAcceleration2DNormalized; // 0xa90
        struct FVector Velocity; // 0xa9c
        bool bIsRunningIntoWall; // 0xaa8
        bool bAccelerationOpposeVelocity; // 0xaa9
        struct FRotator CurrentFloorSlopeWitnRootQuat; // 0xaac
        float MovementPlayRate; // 0xab8
        float MovementStartPosition; // 0xabc
        float MovementSpeedWarping; // 0xac0
        float DirectionBeforStop; // 0xac4
        bool bIsNotMoving; // 0xac8
        bool bIsNotSprinting; // 0xac9
        bool bIsNotInAir; // 0xaca
        bool bEnableSliding; // 0xacb
        bool bIsChangeActorRotation; // 0xacc
        bool bTurnLeft; // 0xacd
        bool bEnableTeleportTurnAnimation; // 0xace
        float TurnInPlaceMaxThreshold; // 0xad0
        bool bIsPreJump; // 0xad4
        bool bIsPreJumpAnimValid; // 0xad5
        bool bCanEnterPreJumpState; // 0xad6
        class UAnimSequence* SprintToRunAnimSeq; // 0xad8
        class UAnimSequence* RunToSprintAnimSeq; // 0xae0
        bool bCanEnterRunToSprintTransition; // 0xae8
        bool bCanEnterSprintToRunTransition; // 0xae9
        bool bNearlyMovingForward; // 0xaea
        bool bCanAnimStanceTransitionBlendOut; // 0xaeb
        float MovingDirection; // 0xaec
        float MovingDirectionWithOffset; // 0xaf0
        float MovingDirectionClamped; // 0xaf4
        float MovingDirectionCompensation; // 0xaf8
        float MovingDirectionOrientationWarpCopyBoneAlpha; // 0xafc
        int32_t CurrentMovingCardinalTP; // 0xb00
        float CurrentMovingOrientationWarpingAngle; // 0xb04
        float SmoothedMovingOrientationWarpingAngle; // 0xb08
        float MovingDirectionByCardinalTP; // 0xb0c
        class UAnimSequence* TurnInPlaceAnimationSequence; // 0xb10
        float TurnInPlaceAnimationTime; // 0xb18
        float RootBoneRotationYaw; // 0xb1c
        float NegRootBoneRotationYaw; // 0xb20
        float TurnYawWeight; // 0xb24
        enum class ETurnInPlaceState TurnInPlaceState; // 0xb28
        enum class ERootYawOffsetMode RootYawOffsetMode; // 0xb29
        bool bShouldTurnInIdle; // 0xb2a
        bool bShouldTurnInPlace; // 0xb2b
        bool bShouldTurnInPlaceRecvoery; // 0xb2c
        class USGCharacterLocomotionAnimInstance* SGAnimInstance; // 0xb30
        class USGCharacterAnimInstance* SGMainAnimInstance; // 0xb38
        class ASGCharacter* SGCharacter; // 0xb40
        class ASGWeapon* SGWeapon; // 0xb48
        bool bIsWeaponChange; // 0xb50
        bool bHasTransition; // 0xb51
        float TransitionType; // 0xb54
        bool bHasAnimStanceTransition; // 0xb58
        float AnimStanceTransitionType; // 0xb5c
        float StandToProneTransitionType; // 0xb60
        float SprintTransitionOutPlayRate; // 0xb64
        struct TArray<enum class EMovementStance> MovementStanceRingBuffer; // 0xb68
        class USkeletalMeshComponent* CopyPoseFrom; // 0xb80
        float FixedMovingDirection; // 0xb88
        int32_t FixedMovingDirectionPositive; // 0xb8c
        float FixedMovingDirectionWithOffset; // 0xb90
        float SmoothedFixedMovingDirection; // 0xb94
        class UBlendSpace* Stand_MovingStartBS; // 0xb98
        class UBlendSpace* Crouch_MovingStartBS; // 0xba0
        class UBlendSpace* Stand_MovingStopBS; // 0xba8
        class UBlendSpace* Crouch_MovingStopBS; // 0xbb0
        class UBlendSpace* Stand_MovingPivotBS; // 0xbb8
        class UBlendSpace* Crouch_MovingPivotBS; // 0xbc0
        class UAnimSequenceBase* MovingStartAnimSeq; // 0xbc8
        class UAnimSequenceBase* MovingStopAnimSeq; // 0xbd0
        bool bShouldMovingStart; // 0xbd8
        bool bShouldJumpToMoving; // 0xbd9
        bool bShouldJumpToMovingFast; // 0xbda
        bool bShouldMovingStop; // 0xbdb
        bool bShouldJumpToIdle; // 0xbdc
        bool bShouldJumpToStop; // 0xbdd
        bool bPivot; // 0xbde
        bool bPostPivot; // 0xbdf
        float AnimSeqMovingStartTime; // 0xbe0
        float MovingStartNormalizeTime; // 0xbe4
        float AnimSeqMovingStopTime; // 0xbe8
        float MovingStopNormalizeTime; // 0xbec
        float MovingStopDirection; // 0xbf0
        float MovingPivotNormalizeTime; // 0xbf4
        float MovingPivotDirection; // 0xbf8
        float MovingStartNormalizeSpeed; // 0xbfc
        float MovingStopNormalizeSpeed; // 0xc00
        bool bMovingStartInvalid; // 0xc04
        bool bMovingStopInvalid; // 0xc05
        float RootYawOffset; // 0xc40
        float TurnInPlaceAnimTime; // 0xc44
        class UAnimSequence* TurnInPlaceAnimSequence; // 0xc48
        bool bTurnInPlaceIdle; // 0xc50
        bool bTurnInPlaceRotation; // 0xc51
        bool bTurnInPlaceRecovery; // 0xc52
        float OrientationWarpingAngle; // 0xc54
        bool bMovingPerpendicularToInitialPivot; // 0xc5c
        bool bCanEnterPivotState; // 0xc5d
        bool bPivotBlendToStop; // 0xc5e
        bool bPivotBlendToCycle; // 0xc5f
        bool bPivotBlendToCycleDueToStanceChange; // 0xc60
        bool bShouldSwitchPivotState; // 0xc61
        struct FVector PivotStartingAcceleration; // 0xc64
        float TimeAtPivotStop; // 0xc70
        float LastPivotTime; // 0xc74
        class UAnimSequence* PivotAnimSequenceA; // 0xc78
        class UAnimSequence* PivotAnimSequenceB; // 0xc80
        float PivotAnimSequenceLength; // 0xc88
        float PivotSequencePlayerATime; // 0xc8c
        float PivotSequencePlayerBTime; // 0xc90
        bool bUsePivotStateMachineA; // 0xc94
        struct FVector SmoothLastUpdateLocalAccNormal2D; // 0xc98
        class UAnimSequence* JumpLand; // 0xcd0
        class UBlendSpace* RunJumpLand; // 0xcd8
        class UAnimSequence* SprintJumpLand; // 0xce0
        class UAnimSequence* JumpLandAnimation; // 0xce8
        float LandAnimPosition; // 0xcf0
        float LandAnimNormalizedTime; // 0xcf4
        bool bCanEnterLand; // 0xcf8
        class USGCharacterAnimationSetsPerCharacterSex* CurrentCharacterAnimationSetsPerCharacterSex; // 0xd00
        class USGPerWeaponAnimationSets* CurrentPerWeaponAnimationSetsClass; // 0xd08
        class USGPerWeaponAnimationSets* CurrentPerWeaponAnimationSetsClass_Left; // 0xd10
        enum class EMovementStance FromMovementStance; // 0xd18
        enum class EMovementStance ToMovementStance; // 0xd19
        enum class EAnimStance FromAnimStance; // 0xd1a
        enum class EAnimStance ToAnimStance; // 0xd1b

    };

    struct FSGCharacterGroundInfo //ScriptStruct SGFramework.SGCharacterGroundInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FHitResult GroundHitResult; // 0x8
        float GroundDistance; // 0xa0

    };

    struct FSGMaxSpeedFactorDiff //ScriptStruct SGFramework.SGMaxSpeedFactorDiff
    {
    //Children Prop Count (Fields): 3
    public:

        enum class ESGMaxSpeedFactor Factor; // 0x0
        float Client; // 0x4
        float Server; // 0x8

    };

    struct FLadderClimbingNetInfo //ScriptStruct SGFramework.LadderClimbingNetInfo
    {
    //Children Prop Count (Fields): 3
    public:

        enum class ELadderClimbingDirectionType DirectionType; // 0x0
        enum class ELadderClimbingInputType InputType; // 0x1
        enum class ELadderClimbingStateType StateType; // 0x2

    };

    struct FLadderClimbingMontage //ScriptStruct SGFramework.LadderClimbingMontage
    {
    //Children Prop Count (Fields): 3
    public:

        enum class ELadderClimbingInputType InputType; // 0x0
        enum class ELadderClimbingDirectionType DirectionType; // 0x1
        class UAnimMontage* CharacterMontage; // 0x8

    };

    struct FSGVaultAnimationConfig //ScriptStruct SGFramework.SGVaultAnimationConfig
    {
    //Children Prop Count (Fields): 13
    public:

        enum class EVaultChoice VaultChoice; // 0x0
        enum class EObstacleHeightLevel ObstacleHeightLevel; // 0x1
        float PassabilityMinRadius; // 0x4
        float PassabilityMinHalfHeight; // 0x8
        float PassabilityHeightOffset; // 0xc
        float ApexEdgeDistance; // 0x10
        float HoriMoveDistancePreJump; // 0x14
        float HoriMoveDistancePreApex; // 0x18
        float HoriMoveDistancePostApex; // 0x1c
        float HoriMoveDistancePostFall; // 0x20
        float VerticalMoveDistanceApex; // 0x24
        float PlayRateNormal; // 0x28
        float PlayRateOverWeight; // 0x2c

    };

    struct FVaultRepInfo //ScriptStruct SGFramework.VaultRepInfo
    {
    //Children Prop Count (Fields): 6
    public:

        enum class EVaultPhase VaultPhase; // 0x0
        enum class EVaultChoice VaultChoice; // 0x1
        enum class EObstacleHeightLevel ObstacleHeightLevel; // 0x2
        struct FVector CharacterForwardDiretion; // 0x4
        struct FVector CharacterTowardsObstacleDiretion; // 0x10
        struct TArray<struct FSGPredictPathNode> PathNodes; // 0x20

    };

    struct FSGPredictPathNode //ScriptStruct SGFramework.SGPredictPathNode
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector PredictLocation; // 0x0
        struct FRotator PredictRotation; // 0xc
        struct FName Name; // 0x18

    };

    struct FVaultResult //ScriptStruct SGFramework.VaultResult
    {
    //Children Prop Count (Fields): 19
    public:

        enum class EVaultFailReason VaultFailReason; // 0x0
        struct FVector CharacterWantsToVaultLocation; // 0x4
        struct FVector CharacterLocation; // 0x10
        struct FVector CharacterFloorLocation; // 0x1c
        struct FVector CharacterForwardDiretion; // 0x28
        struct FVector CharacterTowardsObstacleDiretion; // 0x34
        float CharacterTowardsObstacleDegree; // 0x40
        float CharacterVelocity_Horizontal; // 0x44
        struct FVector CharacterAcceleration; // 0x48
        float ForwardTraceDistance; // 0x54
        enum class EVaultChoice VaultChoice; // 0x58
        float FallHeight; // 0x5c
        float ObstacleHeight; // 0x60
        enum class EObstacleHeightLevel ObstacleHeightLevel; // 0x64
        struct FVector VaultApexPoint; // 0x68
        struct FVector ObstacleImpactPoint; // 0x74
        struct FVector ObstacleImpactNormal; // 0x80
        enum class EMovementMode MovementModeAfterVault; // 0x8c
        struct TArray<struct FSGPredictPathNode> PathNodes; // 0xa0

    };

    struct FSGCharacterPreviewAnimInstanceProxy : FAnimInstanceProxy //ScriptStruct SGFramework.SGCharacterPreviewAnimInstanceProxy
    {
    //Children Prop Count (Fields): 108
    public:

        bool bShouldUseFPPBreath; // 0x860
        bool bHasIdleSeq; // 0x861
        class UAnimSequence* IdleSeq; // 0x868
        class UAnimSequence* IdleSeqBasePose; // 0x870
        class UAnimSequence* IdleBreathAdditiveSeq; // 0x878
        bool bHasCasualIdleSeq; // 0x880
        float HasCasualIdleSeq; // 0x884
        class UAnimSequence* DTRandomIdleSeq; // 0x888
        float DTRandomIdleLength; // 0x890
        float DTRandomIdleTime; // 0x894
        bool bHasDTRandomIdleSeq; // 0x898
        bool bShouldUseCasualIdleSeq; // 0x899
        class UAnimSequence* CasualIdleSeq; // 0x8a0
        class UAnimSequence* DTCustomizeAnimeSeq; // 0x8a8
        class UAnimSequence* DefaultDTCustomAnimSeq; // 0x8b0
        float StartTimeOffset; // 0x8b8
        float WeaponHandgripType; // 0x8bc
        float Enable_AdaptiveWeaponHandGripPose; // 0x8c0
        float Enable_LeftHandGripPose; // 0x8c4
        float Enable_LeftHandGripOffset; // 0x8c8
        bool bIsPlayingSlotAnimation_LeftHand; // 0x8cc
        float Enable_BlendLeftHandGrip; // 0x8d0
        float Enable_BlendLeftHandGrip_FPGrip; // 0x8d4
        float Enable_Breath_Additive_FP; // 0x8d8
        class ASGWeapon* SGWeapon; // 0x8e0
        bool bIsWeaponChange; // 0x8e8
        bool bIsCharacterAnimationSetsChange; // 0x8e9
        enum class EWeaponType WeaponStance; // 0x8ea
        float FullBodySlotAnimationRatio; // 0x8ec
        bool bLockChangeAnimationSet; // 0x8f0
        bool bTeamUpCharacter; // 0x8f1
        bool bTeamUpScav; // 0x8f2
        bool bTeamPlatformCharacter; // 0x8f3
        bool bReady; // 0x8f4
        bool bNotReady; // 0x8f5
        struct FRotator RootBoneRotation; // 0x8f8
        struct FSGEnterLoopLeaveStateMachine ReadyOrNotStateMachine; // 0x904
        struct FName TeamPlatformTag; // 0x928
        class UAnimSequence* TeamPlatformIdleSeq; // 0x930
        class UAnimSequence* ReadyInSeq; // 0x938
        class UAnimSequence* ReadyLoopSeq; // 0x940
        class UAnimSequence* ReadyOutSeq; // 0x948
        class UBlendSpace1D* TeamPlatformCasualGripAdjustmentBS; // 0x950
        bool bZDSequenceValid; // 0x958
        struct FVector HandWeaponOffset_LeftHand; // 0x95c
        struct FVector HandWeaponOffset_RightHand_Location; // 0x968
        struct FRotator HandWeaponOffset_RightHand_Rotation; // 0x974
        struct FVector HandOffset_L_Location; // 0x980
        float Enable_HandOffset_L_Alpha; // 0x98c
        struct FVector HandOffset_R_Location; // 0x990
        struct FVector HandOffset_R_Trigger; // 0x99c
        float Enable_HandOffset_R_Alpha; // 0x9a8
        struct FVector ForeGripOffset; // 0x9ac
        float ZDIdleBasePoseBlendRatio; // 0x9b8
        struct FVector GripPoseAdjustmentOffset; // 0x9bc
        float Enable_GripPoseAdjust; // 0x9c8
        float Enable_DTGripPoseAdditive; // 0x9cc
        float WeaponReargripType; // 0x9d0
        class UBlendSpace1D* RearGripIdleBS; // 0x9d8
        class UBlendSpace1D* CasualRearGripIdleBS; // 0x9e0
        float Enable_RightHandGripPose; // 0x9e8
        bool bHasForegrip; // 0x9ec
        bool bPistolGrip; // 0x9ed
        bool bHasWeaponForegrip; // 0x9ee
        float WeaponForegripType; // 0x9f0
        float GripPoseAdjustmentAlpha; // 0x9f4
        class UBlendSpace1D* CasualGripAdjustmentBS; // 0x9f8
        class UBlendSpace1D* AdjustGripIdleBS; // 0xa00
        class UBlendSpace1D* ForeGripBS; // 0xa08
        class UBlendSpace1D* CasualGripIdleBS; // 0xa10
        class UBlendSpace1D* GripIdleBS; // 0xa18
        bool bHasReargrip; // 0xa20
        bool bHasLeftHandWeaponMesh; // 0xa21
        class UBlendSpace1D* LFingerAdaptiveBS; // 0xa28
        bool bEnableLFingerAdaptive; // 0xa30
        float LFingerAdaptiveAlpha; // 0xa34
        float Enable_AdaptiveWeaponTriggerPointAlpha; // 0xa38
        float AdaptiveLeftHandWeaponTriggerPointAlpha; // 0xa3c
        float AdaptiveRightHandWeaponTriggerPointAlpha; // 0xa40
        float Enable_BothHandMeleeWeaponCasualGrip; // 0xa44
        float Enable_RightHandCasualGripPose; // 0xa48
        float Enable_AdditiveAdjustmentPose; // 0xa4c
        float Enable_UseIdleRightHand; // 0xa50
        float DTAnimSequenceScaleRate; // 0xa58
        enum class ECharacterSex CharacterSex; // 0xa5c
        bool bIsMale; // 0xa5d
        class USGCharacterPreviewAnimInstance* SGAnimInstance; // 0xa60
        class ASGCharacter* SGCharacter; // 0xa68
        class USGCharacterPreviewComponent* CachedPreviewComponent; // 0xa70
        class USGCharacterAnimationSets* CharacterAnimationSetsClass; // 0xa78
        class USGPerWeaponAnimationSets* PerWeaponAnimationSetsClass; // 0xa80
        class USGCharacterAnimationSetsPerCharacterSex* CachedCharacterAnimationSets; // 0xa90
        bool bAnimSetReady; // 0xa98
        bool bPreviewCaptureCharacter; // 0xa9b
        bool bIsCasual; // 0xa9c
        bool bIs1P; // 0xa9d
        bool bAdditiveLeftHandGrip; // 0xa9e
        float ControlRigAimWeight; // 0xaa0
        struct FVector EyeAimPosition; // 0xaa4
        struct FVector2D FaceAimControl; // 0xab0
        class UAnimSequence* PreviewIdleAnim; // 0xab8
        class UBlendSpace1D* PreviewAdjustmentBS; // 0xac0
        class UAnimSequence* PreviewIdleAnimHandPose; // 0xac8
        class UAnimSequence* WeaponOrientPose; // 0xad0
        bool bShouldUseTeamHandPose; // 0xad8
        float Curve_LeftHandPose; // 0xadc
        float Curve_RightHandPose; // 0xae0
        float PreviewAnimFKGunPose; // 0xae4

    };

    struct FSGCharacterProgressAbility //ScriptStruct SGFramework.SGCharacterProgressAbility
    {
    //Children Prop Count (Fields): 3
    public:

        class UGameplayAbility* AbilityClass; // 0x0
        struct FGameplayAbilitySpecHandle AbilitySpecHandle; // 0x8
        class ACharacter* Owner; // 0x10

    };

    struct FSGCharacterProgressAbility_SetupC4 : FSGCharacterProgressAbility //ScriptStruct SGFramework.SGCharacterProgressAbility_SetupC4
    {
    //Children Prop Count (Fields): 2
    public:

        class AActor* CachedFillSource; // 0x18
        float CachedUseTime; // 0x20

    };

    struct FSGCharacterProgressAbility_ChangeMagazine : FSGCharacterProgressAbility //ScriptStruct SGFramework.SGCharacterProgressAbility_ChangeMagazine
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* CachedFillInventory; // 0x18

    };

    struct FSGCharacterProgressAbility_FillMagazineExtra : FSGCharacterProgressAbility //ScriptStruct SGFramework.SGCharacterProgressAbility_FillMagazineExtra
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* CachedTargetContainer; // 0x18

    };

    struct FSGCharacterRagdollAnimInstanceProxy : FAnimInstanceProxy //ScriptStruct SGFramework.SGCharacterRagdollAnimInstanceProxy
    {
    //Children Prop Count (Fields): 6
    public:

        class USGCharacterRagdollAnimInstance* AnimInstance; // 0x860
        class ASGCharacter* SGCharacter; // 0x868
        bool bIsDead; // 0x870
        bool bIsRagdoll; // 0x871
        float ForceSnapPelvisToRootAlpha; // 0x874
        struct FPoseSnapshot RagdollPose; // 0x878

    };

    struct FSGRagdollCriticalBoneInfo_HD //ScriptStruct SGFramework.SGRagdollCriticalBoneInfo_HD
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName BoneName; // 0x0
        float DisplacementTolerance; // 0x8
        int32_t LocationSampleNum; // 0xc

    };

    struct FSGRagdollBakedBoneInfo //ScriptStruct SGFramework.SGRagdollBakedBoneInfo
    {
    //Children Prop Count (Fields): 4
    public:

        enum class ESGRagdollStage ServerRagdollStage; // 0x0
        float ServerRagdollStartTime; // 0x4
        struct TArray<struct FSGPoseSnapshotRotationTranslation> BakedBoneRotationTranslations; // 0x8
        struct TArray<struct FName> SnapshotBoneNames; // 0x18

    };

    struct FSGPoseSnapshotRotationTranslation //ScriptStruct SGFramework.SGPoseSnapshotRotationTranslation
    {
    //Children Prop Count (Fields): 2
    public:

        struct FQuat Rotation; // 0x0
        struct FVector_NetQuantize Translation; // 0x10

    };

    struct FSGRagdollImpulseLinkInfo //ScriptStruct SGFramework.SGRagdollImpulseLinkInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Bone1; // 0x0
        struct FName Bone2; // 0x8
        float LinkRatio; // 0x10

    };

    struct FSGRagdollImpulseApplyInfo //ScriptStruct SGFramework.SGRagdollImpulseApplyInfo
    {
    //Children Prop Count (Fields): 4
    public:

        class AActor* DamageCauser; // 0x0
        struct FVector Momentum; // 0x8
        struct FVector HitLocation; // 0x14
        struct FName HitBoneName; // 0x20

    };

    struct FCharacterDefaultInventoryList //ScriptStruct SGFramework.CharacterDefaultInventoryList
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<class AActor*> DefaultPickupInventories; // 0x0
        struct TArray<class AActor*> DefaultPickupToBagInventories; // 0x10

    };

    struct FGameplayEffectHandleArrayWrap //ScriptStruct SGFramework.GameplayEffectHandleArrayWrap
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FActiveGameplayEffectHandle> GameplayEffectHandleList; // 0x0

    };

    struct FGameplayEffectArrayWrap //ScriptStruct SGFramework.GameplayEffectArrayWrap
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class UGameplayEffect*> GameplayEffectList; // 0x0

    };

    struct FSGCharacterShadowAnimInstanceProxy : FAnimInstanceProxy //ScriptStruct SGFramework.SGCharacterShadowAnimInstanceProxy
    {
    //Children Prop Count (Fields): 5
    public:

        class USGCharacterCastShadowComponent* CachedCastShadowComponent; // 0x860
        struct FRotator AORotationWithWeaponSway_OnlyYaw; // 0x868
        struct FRotator AORotationWithWeaponSway_OnlyPitch; // 0x874
        float Enable_AO_1P; // 0x880
        float bInOrTransTacticalPistolState; // 0x884

    };

    struct FSGCharacterComponentsSignificanceThresolds : FTableRowBase //ScriptStruct SGFramework.SGCharacterComponentsSignificanceThresolds
    {
    //Children Prop Count (Fields): 3
    public:

        class UActorComponent* ComponentClass; // 0x8
        int32_t DeviceQuality; // 0x10
        struct FSGCharacterComponentsSignificanceParams SignificanceParams; // 0x14

    };

    struct FSGCharacterComponentsSignificanceParams //ScriptStruct SGFramework.SGCharacterComponentsSignificanceParams
    {
    //Children Prop Count (Fields): 21
    public:

        struct FName ComponentName; // 0x0
        bool bMultiThreading; // 0x8
        bool bIgnoreLimitExceed; // 0x9
        int32_t SignificanceBias; // 0xc
        float MinTickInterval_3P; // 0x10
        float MinTickInterval_1P; // 0x14
        float CompSubSigLimitUpdateThreshold; // 0x18
        float CompSubSigLimitUpdateScale; // 0x1c
        float HighVelocity; // 0x20
        float HighVelocity_NoRender_LongDist; // 0x24
        int32_t HighVelocity_NoRender_LongDist_Significance; // 0x28
        int32_t HighVelocity_NoRender_ShortDist_Significance; // 0x2c
        int32_t HighVelocity_Render_HighURO; // 0x30
        int32_t HighVelocity_Render_HighURO_Significance; // 0x34
        int32_t HighVelocity_Render_LowURO_Significance; // 0x38
        float LowVelocity_NoRender_LongDist; // 0x3c
        int32_t LowVelocity_NoRender_LongDist_Significance; // 0x40
        int32_t LowVelocity_NoRender_ShortDist_Significance; // 0x44
        int32_t LowVelocity_Render_HighURO; // 0x48
        int32_t LowVelocity_Render_HighURO_Significance; // 0x4c
        int32_t LowVelocity_Render_LowURO_Significance; // 0x50

    };

    struct FUIOpStruct //ScriptStruct SGFramework.UIOpStruct
    {
    //Children Prop Count (Fields): 2
    public:

        enum class ESGUIOperationForSpectating Op; // 0x0
        bool bOpen; // 0x1

    };

    struct FSGCharacterSpringAnimInstanceProxy_HD : FAnimInstanceProxy //ScriptStruct SGFramework.SGCharacterSpringAnimInstanceProxy_HD
    {
    //Children Prop Count (Fields): 13
    public:

        bool bAiming; // 0x860
        bool bShouldAlignAroundPivot; // 0x861
        struct FVector HandTranslation; // 0x864
        struct FRotator HandRotation; // 0x870
        struct FRotator HandPivotRotation; // 0x87c
        struct FRotator RecoilPivotRotation; // 0x888
        struct FVector RecoilPivot; // 0x894
        struct FRotator WeaponSwayRotation; // 0x8a0
        struct FVector WeaponSwayPivot; // 0x8ac
        struct FVector AimingAlignPivot; // 0x8b8
        struct FTransform AimingTransform; // 0x8d0
        struct FVector CameraTranslation; // 0x900
        float AimingAlignSpeed; // 0x90c

    };

    struct FTacticalPistolRepInfo //ScriptStruct SGFramework.TacticalPistolRepInfo
    {
    //Children Prop Count (Fields): 6
    public:

        enum class ETacticalPistolStatus TacticalPistolStatus; // 0x0
        class ASGInventory* LeftHandWeapon; // 0x8
        class ASGInventory* RightHandWeapon; // 0x10
        bool UpdateWeaponEquipPos; // 0x18
        bool bPlayingMontage; // 0x19
        bool bUseFastTrans; // 0x1a

    };

    struct FRepTakeHitInfo //ScriptStruct SGFramework.RepTakeHitInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FTakeHitInfo TakeHitInfo; // 0x0
        struct FHitResult TakeHitResult; // 0x70

    };

    struct FTakeHitInfo //ScriptStruct SGFramework.TakeHitInfo
    {
    //Children Prop Count (Fields): 20
    public:

        float Damage; // 0x0
        struct FVector_NetQuantize RelHitLocation; // 0x4
        struct FVector_NetQuantize Momentum; // 0x10
        class UDamageType* DamageType; // 0x20
        char ShotDirPitch; // 0x28
        char ShotDirYaw; // 0x29
        struct FVector ShotDir; // 0x2c
        enum class EHitGroupType HitGroup; // 0x38
        bool bPenerateArmor; // 0x39
        bool bIsBestHit; // 0x3a
        char Count; // 0x3b
        uint64_t HitArmorItemID; // 0x40
        class AActor* Causer; // 0x48
        class AActor* DamageCauser; // 0x50
        char ShotIndex; // 0x58
        enum class EDamageTypeEnum DamageTypeEnum; // 0x59
        class AActor* AmmoClass; // 0x60
        float FlyDistance; // 0x68
        bool bTerminal; // 0x6c
        char HitFlags; // 0x6d

    };

    struct FSpectatingFlowData //ScriptStruct SGFramework.SpectatingFlowData
    {
    //Children Prop Count (Fields): 6
    public:

        int32_t eventId; // 0x0
        struct FString SpectatedOpenID; // 0x8
        struct FString SpectatedGUID; // 0x18
        float SpectatingTime; // 0x28
        float BattleTime; // 0x2c
        float AliveTime; // 0x30

    };

    struct FLastHitPlayerInfo //ScriptStruct SGFramework.LastHitPlayerInfo
    {
    //Children Prop Count (Fields): 14
    public:

        int64_t TakerGID; // 0x0
        int32_t bPenetrateArmor; // 0x8
        float PenetrateArmorProbability; // 0xc
        struct FString TakerName; // 0x10
        int64_t BulletID; // 0x20
        uint64_t ArmorId; // 0x28
        int32_t CurrentArmorDurability; // 0x30
        int32_t CurrentArmorDurabilityMax; // 0x34
        float TotalDamage; // 0x38
        float TotalArmorReduceDamage; // 0x3c
        bool bIsDBNO; // 0x40
        bool bIsDead; // 0x41
        struct FSGPlayerIconInfo PlayerIconInfo; // 0x48
        struct FSGPlayerShowInfo PlayerShowInfo; // 0x90

    };

    struct FDSWeaponValidateFail //ScriptStruct SGFramework.DSWeaponValidateFail
    {
    //Children Prop Count (Fields): 4
    public:

        struct FString WeaponId; // 0x0
        int32_t WeaponType; // 0x10
        struct FString FailType; // 0x18
        struct FString ReasonStr; // 0x28

    };

    struct FBroadcastOnGameHUDConfig //ScriptStruct SGFramework.BroadcastOnGameHUDConfig
    {
    //Children Prop Count (Fields): 6
    public:

        enum class EReportType ReportType; // 0x0
        int32_t OptionalMessageID; // 0x4
        struct FText OptionalText; // 0x8
        bool bNotClearQueue; // 0x20
        int32_t CheckServerTimeIndex; // 0x24
        bool bCheckOutOfTime; // 0x28

    };

    struct FTickSettingBaseOnURO //ScriptStruct SGFramework.TickSettingBaseOnURO
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FTickSettingPerURO> URO; // 0x0

    };

    struct FTickSettingPerURO //ScriptStruct SGFramework.TickSettingPerURO
    {
    //Children Prop Count (Fields): 3
    public:

        bool bEnableUpdate; // 0x0
        float TickInternal; // 0x4
        float TickAccumulate; // 0x8

    };

    struct FHitBulletHolesInfo //ScriptStruct SGFramework.HitBulletHolesInfo
    {
    //Children Prop Count (Fields): 8
    public:

        bool bPenetrateArmor; // 0x0
        float PenetrateArmorProbability; // 0x4
        struct FString TakerName; // 0x8
        int64_t BulletID; // 0x18
        uint64_t ArmorId; // 0x20
        int32_t CurrentArmorDurability; // 0x28
        int32_t CurrentArmorDurabilityMax; // 0x2c
        struct TArray<struct FBulletHolesInfo> BulletHolesInfos; // 0x30

    };

    struct FBulletHolesInfo //ScriptStruct SGFramework.BulletHolesInfo
    {
    //Children Prop Count (Fields): 15
    public:

        int64_t TakerGID; // 0x0
        float ArmorReduceDamage; // 0x8
        float RealDamage; // 0xc
        enum class EHitGroupType BodyPart; // 0x10
        enum class EHeadHitSubGroupType HeadSubGroupPart; // 0x11
        int32_t Timestamp; // 0x14
        struct FBodyPartEndurance BeforeEndurance; // 0x18
        struct FBodyPartEndurance CurrentEndurance; // 0x34
        struct FBodyPartEndurance MaxEndurance; // 0x50
        struct TArray<struct FBodyPartBuffInfo> BuffList; // 0x70
        uint64_t ArmorId; // 0x80
        int32_t CurrentArmorDurability; // 0x88
        int32_t CurrentArmorDurabilityMax; // 0x8c
        float PenetrateArmorProbability; // 0x90
        bool bPenetrateArmor; // 0x94

    };

    struct FBodyPartBuffInfo //ScriptStruct SGFramework.BodyPartBuffInfo
    {
    //Children Prop Count (Fields): 2
    public:

        enum class ECharacterEnduranceType EnduranceType; // 0x0
        struct TArray<int32_t> BuffList; // 0x8

    };

    struct FBodyPartEndurance //ScriptStruct SGFramework.BodyPartEndurance
    {
    //Children Prop Count (Fields): 7
    public:

        float HeadEndurance; // 0x0
        float ChestEndurance; // 0x4
        float StomachEndurance; // 0x8
        float LeftArmEndurance; // 0xc
        float RightArmEndurance; // 0x10
        float LeftLegEndurance; // 0x14
        float RightLegEndurance; // 0x18

    };

    struct FCharacterAbilityDebugInfo //ScriptStruct SGFramework.CharacterAbilityDebugInfo
    {
    //Children Prop Count (Fields): 5
    public:

        struct TArray<struct FString> ActiveAbiltiyNameList; // 0x0
        struct TArray<struct FString> ActiveGameEffectNameList; // 0x10
        struct TArray<struct FString> OwnedTagsList; // 0x20
        struct TArray<struct FString> BlockedTagsStringList; // 0x30
        struct TArray<struct FString> MinimalTagsList; // 0x40

    };

    struct FMontageTickCondition //ScriptStruct SGFramework.MontageTickCondition
    {
    //Children Prop Count (Fields): 4
    public:

        bool bShouldTickPose; // 0x0
        bool bNoSkeletonUpdate; // 0x1
        struct FString AnimScriptInstanceName; // 0x8
        struct FString VisibilityBasedAnimTickOptionName; // 0x18

    };

    struct FSGUsingInventoryRepAnimInfo //ScriptStruct SGFramework.SGUsingInventoryRepAnimInfo
    {
    //Children Prop Count (Fields): 8
    public:

        class UAnimMontage* CharacterMontage; // 0x0
        class UAnimMontage* InventoryMontage; // 0x8
        class USkeletalMesh* InventoryMesh; // 0x10
        float Rate; // 0x18
        struct FName StartSection; // 0x1c
        struct FName AttachSocket; // 0x24
        float StartTimeStamp; // 0x2c
        bool PlayBit; // 0x30

    };

    struct FWearableMesh //ScriptStruct SGFramework.WearableMesh
    {
    //Children Prop Count (Fields): 18
    public:

        bool bForceTickMeshComponent; // 0x0
        bool bSwitchPrefab; // 0x1
        struct FWearableMeshPrefab PrefabForMale; // 0x8
        struct FWearableMeshPrefab PrefabForFemale; // 0x188
        struct FName Tag; // 0x308
        struct TSoftObjectPtr<USkeletalMesh> SkeletalMesh; // 0x310
        struct TSoftObjectPtr<UStaticMesh> StaticMesh; // 0x338
        class UMeshComponent* MeshComponent; // 0x360
        class UAnimInstance* AnimInstance; // 0x368
        class UAnimInstance* AnimInstanceInGame; // 0x370
        class UAnimInstance* AnimInstanceInLobby; // 0x378
        enum class EAnimInstanceUseType AnimInstanceUseType; // 0x380
        struct FName AttachSocket; // 0x384
        struct FName SkeletalMeshAttachSocket; // 0x38c
        bool bUseLegacyPrefab; // 0x394
        bool bCastShadowInLobby; // 0x395
        char HiddenFlag; // 0x396
        char DisableTickFlag; // 0x397

    };

    struct FWearableMeshPrefab //ScriptStruct SGFramework.WearableMeshPrefab
    {
    //Children Prop Count (Fields): 9
    public:

        enum class EWearableEnablePolicy EnablePolicy; // 0x0
        struct FWearableMeshResource MeshResource; // 0x8
        struct TArray<struct FWearableMorphTarget> UnderMorphTargets; // 0xd0
        struct TArray<struct FWearableMorphTarget> UnderMorphTargetsSharing; // 0xe0
        struct TArray<struct FName> UnderHiddenTags; // 0xf0
        struct TArray<struct FWearableMaterialSection> UnderHiddenMaterialSectionTags; // 0x100
        struct TArray<struct FBackAttachSocketOffset> BackAttachingSocketOffsets; // 0x110
        struct TMap<enum class ESGBadgeAttach, struct FTransform> BadgeAttachingSocketOffsets; // 0x120
        struct TArray<enum class ESGWeaponType> HiddenOnBackWeapons; // 0x170

    };

    struct FBackAttachSocketOffset //ScriptStruct SGFramework.BackAttachSocketOffset
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString AttachSocketName; // 0x0
        struct FTransform AttachSocketOffset; // 0x10

    };

    struct FWearableMaterialSection //ScriptStruct SGFramework.WearableMaterialSection
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Tag; // 0x0
        int32_t MaterialID; // 0x8
        int32_t SectionIndex; // 0xc

    };

    struct FWearableMorphTarget //ScriptStruct SGFramework.WearableMorphTarget
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName MorphTargetName; // 0x0
        float MorphTargetValue; // 0x8

    };

    struct FWearableMeshResource //ScriptStruct SGFramework.WearableMeshResource
    {
    //Children Prop Count (Fields): 4
    public:

        struct TSoftObjectPtr<USkeletalMesh> SkeletalMeshInGame; // 0x0
        struct TSoftObjectPtr<USkeletalMesh> SkeletalMeshInLobby; // 0x28
        struct TSoftObjectPtr<UStaticMesh> StaticMesh; // 0x50
        struct TMap<int64_t, struct TSoftObjectPtr<USkeletalMesh>> AISkeletalMeshMap; // 0x78

    };

    struct FArmorConsumeStruct //ScriptStruct SGFramework.ArmorConsumeStruct
    {
    //Children Prop Count (Fields): 5
    public:

        float ArmorConsume; // 0x0
        float BlockDamage; // 0x4
        int64_t WeaponId; // 0x8
        int32_t BodyPart; // 0x10
        int64_t BulletID; // 0x18

    };

    struct FDebuffInfoStruct //ScriptStruct SGFramework.DebuffInfoStruct
    {
    //Children Prop Count (Fields): 7
    public:

        int64_t CauserId; // 0x0
        int64_t TakerId; // 0x8
        int64_t EventTime; // 0x10
        int32_t BodyPart; // 0x18
        int32_t DebuffType; // 0x1c
        int32_t GrantedFlag; // 0x20
        float EffectDuration; // 0x24

    };

    struct FArmorDamageStruct //ScriptStruct SGFramework.ArmorDamageStruct
    {
    //Children Prop Count (Fields): 3
    public:

        float BlockDamage; // 0x0
        int64_t DamageTime; // 0x8
        int64_t TakerId; // 0x10

    };

    struct FRealDamageOnBodyPartForTlog //ScriptStruct SGFramework.RealDamageOnBodyPartForTlog
    {
    //Children Prop Count (Fields): 7
    public:

        int32_t BodyPart; // 0x0
        float RealDamage; // 0x4
        int32_t ExtraFlag; // 0x8
        char TakerTeamType; // 0xc
        char CauserTeamType; // 0xd
        uint32_t BulletID; // 0x10
        int32_t DamageCauserType; // 0x14

    };

    struct FRealDamageOnBodyPartStruct //ScriptStruct SGFramework.RealDamageOnBodyPartStruct
    {
    //Children Prop Count (Fields): 23
    public:

        int64_t CauserId; // 0x0
        int64_t TakerId; // 0x8
        int32_t CauserTeamId; // 0x10
        int32_t TeamID; // 0x14
        char CauserTeamType; // 0x18
        char TakerTeamType; // 0x19
        int64_t DamageTime; // 0x20
        float AttackDamage; // 0x28
        float RealDamage; // 0x2c
        int64_t FireCounter; // 0x30
        int32_t BodyPart; // 0x38
        int32_t DetailBodyPart; // 0x3c
        int64_t DamageCauserID; // 0x40
        struct FVector DamagePosition; // 0x48
        struct FVector DamagedPosition; // 0x54
        float DamageDistance; // 0x60
        int32_t DamageCauserType; // 0x64
        int64_t BulletID; // 0x68
        int32_t bPenetrateArmor; // 0x70
        float PenetrateArmorProbability; // 0x74
        int32_t ExtraFlag; // 0x78
        struct FString CauserName; // 0x80
        float CauseArmorReduceDamage; // 0x90

    };

    struct FBulletPassStructDeprecated //ScriptStruct SGFramework.BulletPassStructDeprecated
    {
    //Children Prop Count (Fields): 7
    public:

        float Velocity; // 0x0
        struct FVector PassDir; // 0x4
        struct FVector PassLocation; // 0x10
        float BulletPassAngle; // 0x1c
        float TimeToReach; // 0x20
        struct FVector EnterPoint; // 0x34
        struct FVector LeavePoint; // 0x40

    };

    struct FEndurancePartInfo //ScriptStruct SGFramework.EndurancePartInfo
    {
    //Children Prop Count (Fields): 4
    public:

        enum class ECharacterEnduranceType EndurancePart; // 0x0
        float NowEndurance; // 0x4
        float MaxEndurance; // 0x8
        float EndurancePercent; // 0xc

    };

    struct FUAMLimit //ScriptStruct SGFramework.UAMLimit
    {
    public:


    };

    struct FUAMAnimVal //ScriptStruct SGFramework.UAMAnimVal
    {
    //Children Prop Count (Fields): 3
    public:

        class UCurveFloat* Curve; // 0x0
        float TimeShift; // 0x8
        struct TArray<struct FUAMVal> Vals; // 0x10

    };

    struct FUAMVal //ScriptStruct SGFramework.UAMVal
    {
    //Children Prop Count (Fields): 3
    public:

        enum class EUAMTarget To; // 0x0
        enum class SpringVecComponent Component; // 0x1
        float Intensity; // 0x4

    };

    struct FSGCharacterLadderClimbData //ScriptStruct SGFramework.SGCharacterLadderClimbData
    {
    //Children Prop Count (Fields): 13
    public:

        bool bIsClimbing; // 0x0
        bool bIsStartClimb; // 0x1
        bool bIsClimbFinish; // 0x2
        enum class ELadderClimbEnterType EnterType; // 0x3
        enum class ELadderClimbExitType ExitType; // 0x4
        class AActor* ClimbLadder; // 0x8
        float OriginGravityScale; // 0x10
        float TraceDistance; // 0x14
        float StartClimbTime; // 0x18
        float EndClimbTime; // 0x1c
        float LadderHalfHeight; // 0x20
        float LeaveGroundDistance; // 0x24
        float ClimbSpeed; // 0x28

    };

    struct FCharacterGameEffectTags //ScriptStruct SGFramework.CharacterGameEffectTags
    {
    //Children Prop Count (Fields): 8
    public:

        struct FGameplayTag AnyTag; // 0x0
        struct FGameplayTag HeadTag; // 0x8
        struct FGameplayTag ChestTag; // 0x10
        struct FGameplayTag StomachTag; // 0x18
        struct FGameplayTag LeftArmTag; // 0x20
        struct FGameplayTag RightArmTag; // 0x28
        struct FGameplayTag LeftLegTag; // 0x30
        struct FGameplayTag RightLegTag; // 0x38

    };

    struct FSGFreeGridQueryParams //ScriptStruct SGFramework.SGFreeGridQueryParams
    {
    //Children Prop Count (Fields): 5
    public:

        class AActor* IgnoreInventory; // 0x0
        class AActor* IgnoreInventory2; // 0x8
        bool bAllowMerge; // 0x10
        int64_t SelfItemID; // 0x18
        enum class ESearchingPrefer SearchingPrefer; // 0x20

    };

    struct FSGGlobalGridOccupyInfo //ScriptStruct SGFramework.SGGlobalGridOccupyInfo
    {
    //Children Prop Count (Fields): 3
    public:

        class ASGInventory* ContainerInventory; // 0x0
        int32_t ContainerIndex; // 0x8
        struct FSGGridOccupyInfo OccupyInfo; // 0x10

    };

    struct FSGGridOccupyInfo //ScriptStruct SGFramework.SGGridOccupyInfo
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t StartRow; // 0x0
        int32_t StartColumn; // 0x4
        int32_t EndRow; // 0x8
        int32_t EndColumn; // 0xc
        class ASGInventory* MergeTargetInventory; // 0x10

    };

    struct FSGCharacterVehicleReplicationData //ScriptStruct SGFramework.SGCharacterVehicleReplicationData
    {
    //Children Prop Count (Fields): 6
    public:

        enum class ESGCharacterVehicleSyncType SyncType; // 0x0
        class APawn* Vehicle; // 0x8
        int32_t SeatIndex; // 0x10
        struct FVector ExitLocation; // 0x14
        struct FRotator ExitRotation; // 0x20
        class APawn* LastVehicle; // 0x30

    };

    struct FSGUVStruct //ScriptStruct SGFramework.SGUVStruct
    {
    public:


    };

    struct FWeaponAttachInfoStruct //ScriptStruct SGFramework.WeaponAttachInfoStruct
    {
    //Children Prop Count (Fields): 3
    public:

        class ASGInventory* TargetWeapon; // 0x0
        int32_t SocketIndex; // 0x8
        struct FTransform OriginalTransform; // 0x10

    };

    struct FSGHandWeaponState //ScriptStruct SGFramework.SGHandWeaponState
    {
    //Children Prop Count (Fields): 5
    public:

        enum class ESGHandState HandState; // 0x0
        struct FSGSwitchWeaponIntent Intent; // 0x8
        struct FSGMontagePlayParams HandAnim; // 0x20
        struct FSGMontagePlayParams WeaponAnim; // 0x68
        bool bIntentFullFilled; // 0xb0

    };

    struct FSGSwitchToInventoryStatus //ScriptStruct SGFramework.SGSwitchToInventoryStatus
    {
    //Children Prop Count (Fields): 3
    public:

        class ASGWeapon* SourceWeapon; // 0x0
        class ASGInventory* DestInventory; // 0x8
        enum class ESwitchToInventoryStage Stage; // 0x10

    };

    struct FSGSwitchWeaponStatus //ScriptStruct SGFramework.SGSwitchWeaponStatus
    {
    //Children Prop Count (Fields): 3
    public:

        class ASGWeapon* SourceWeapon; // 0x0
        class ASGWeapon* DestWeapon; // 0x8
        enum class ESwitchWeaponStage Stage; // 0x10

    };

    struct FWeaponTraceRightHandOffsetParam //ScriptStruct SGFramework.WeaponTraceRightHandOffsetParam
    {
    //Children Prop Count (Fields): 3
    public:

        struct FRotator RotationOffset; // 0x0
        struct FVector LocationOffset_PullBack; // 0xc
        struct FVector LocationOffset_Fold; // 0x18

    };

    struct FAPIPlayerDynamicInfo //ScriptStruct SGFramework.APIPlayerDynamicInfo
    {
    //Children Prop Count (Fields): 6
    public:

        uint64_t GID; // 0x0
        uint64_t TakeOutAllValue; // 0x8
        uint64_t HarvestValue; // 0x10
        enum class ESGCompetitionStatusType AliveState; // 0x18
        uint32_t KillPMCNum; // 0x1c
        struct TArray<struct FAPIEquipmentInfo> AllTakeEquipmentArray; // 0x20

    };

    struct FAPIEquipmentInfo //ScriptStruct SGFramework.APIEquipmentInfo
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ItemID; // 0x0
        int32_t ItemValue; // 0x4
        uint32_t ItemNum; // 0x8

    };

    struct FCompetitionPlayerKillList //ScriptStruct SGFramework.CompetitionPlayerKillList
    {
    //Children Prop Count (Fields): 3
    public:

        uint64_t KillerGID; // 0x0
        class APlayerState* PS; // 0x8
        struct TArray<struct FCompetitionKillInfo> KillInfoArray; // 0x10

    };

    struct FPlayerStatusInfo //ScriptStruct SGFramework.PlayerStatusInfo
    {
    //Children Prop Count (Fields): 2
    public:

        uint64_t PlayerGID; // 0x0
        int32_t StatusValue; // 0x8

    };

    struct FSGCompSignificanceVolumeRelevantInfo //ScriptStruct SGFramework.SGCompSignificanceVolumeRelevantInfo
    {
    //Children Prop Count (Fields): 3
    public:

        enum class ESGCompSignificanceVolumeRelevantType Type; // 0x0
        struct TArray<class ASGCompSignificanceVolume*> GroupA; // 0x8
        struct TArray<class ASGCompSignificanceVolume*> GroupB; // 0x18

    };

    struct FAutoCaptureInvsFilter //ScriptStruct SGFramework.AutoCaptureInvsFilter
    {
    public:


    };

    struct FSGContainerEffectParam //ScriptStruct SGFramework.SGContainerEffectParam
    {
    //Children Prop Count (Fields): 2
    public:

        int64_t AllInventoryThresholdValue; // 0x0
        struct TSoftObjectPtr<UParticleSystem> ParticleSystemAsset; // 0x8

    };

    struct FContextMenuSlotSetting : FTableRowBase //ScriptStruct SGFramework.ContextMenuSlotSetting
    {
    //Children Prop Count (Fields): 3
    public:

        enum class ESlotEnum SlotType; // 0x8
        struct FText TextName; // 0x10
        class UTexture2D* SlotIcon; // 0x28

    };

    struct FItemRotatorConf : FTableRowBase //ScriptStruct SGFramework.ItemRotatorConf
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t ID; // 0x8
        struct FRotator Rotator; // 0xc
        struct FRotator WeaponBuildOverviewRotator; // 0x18

    };

    struct FColorLUTConf : FTableRowBase //ScriptStruct SGFramework.ColorLUTConf
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Name; // 0x8
        class UTexture2D* Image; // 0x18

    };

    struct FSGGAData : FTableRowBase //ScriptStruct SGFramework.SGGAData
    {
    public:


    };

    struct FInventoryGAData : FSGGAData //ScriptStruct SGFramework.InventoryGAData
    {
    //Children Prop Count (Fields): 26
    public:

        uint32_t ItemID; // 0x8
        struct FGameplayTagContainer InventoryTagType; // 0x10
        struct TSoftObjectPtr<USkeletalMesh> MeshAsset; // 0x30
        struct FSoftClassProperty MeshAnimInstace; // 0x58
        struct TSoftObjectPtr<UAnimMontage> MeshMontageToPlay; // 0x80
        struct TSoftObjectPtr<UAnimMontage> CharMontageToPlay; // 0xa8
        struct FName MontageStartSection; // 0xd0
        float PlayRate; // 0xd8
        bool bUseDynamicLoopCount; // 0xdc
        float Period; // 0xe0
        float CureValueOncePeriod; // 0xe4
        struct FGameplayTag AbilityGameplayTag; // 0xe8
        float GA_LoopEffect_DelayApplyTime; // 0xf0
        bool bApplyGEOneByOne; // 0xf4
        float GameplayEffectEndTime; // 0xf8
        struct FName AttachSocket; // 0xfc
        struct TArray<struct FSGGEDataLookupDT> GA_PreGamePlayEffectsRefList; // 0x108
        struct TArray<struct FSGGEDataLookupDT> GA_LoopGamePlayEffectsRefList; // 0x118
        struct TArray<struct FSGGEDataLookupDT> GA_EndGamePlayEffectsRefList; // 0x128
        int32_t PassivePriority; // 0x138
        struct TMap<struct FGameplayTag, struct FInventoryPassiveGEContainer> PassiveGameplayEffectsConfigMap; // 0x140
        float AttachSetupDuration; // 0x190
        float DetachSetupDuration; // 0x194
        bool bShowCancelButton; // 0x198
        struct TMap<uint32_t, float> SubInventoryProbabilityConfigMap; // 0x1a0
        struct FSGGEDataLookupDT SetupGERef; // 0x1f0

    };

    struct FSGGEDataLookupDT //ScriptStruct SGFramework.SGGEDataLookupDT
    {
    //Children Prop Count (Fields): 2
    public:

        class UDataTable* DataOwner; // 0x0
        uint32_t GEData_ID; // 0x8

    };

    struct FInventoryPassiveGEContainer //ScriptStruct SGFramework.InventoryPassiveGEContainer
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t MaxUsageNum; // 0x0
        int32_t DurabilityPerUsage; // 0x4
        struct TArray<struct FSGGEDataLookupDT> GameplayEffectsRefConfigList; // 0x8

    };

    struct FSGGEData : FTableRowBase //ScriptStruct SGFramework.SGGEData
    {
    //Children Prop Count (Fields): 13
    public:

        uint32_t OwnerItemID; // 0x8
        class UGameplayEffect* GameplayEffect; // 0x10
        struct TArray<struct FInventoryGEAttributeModifier> AttributeModifiers; // 0x18
        float Duration; // 0x28
        float Period; // 0x2c
        class UGameplayModMagnitudeCalculation* DurationCalcClass; // 0x30
        float Chance; // 0x38
        struct FGameplayTagContainer GrantedTags; // 0x40
        struct FGameplayTagContainer RemoveGEWithGameplayTag; // 0x60
        struct FGameplayTagContainer GEAssetGameplayTag; // 0x80
        bool bBodypartLimitUse; // 0xa0
        struct TArray<struct FSGGEDataLookupDT> PrematureExpirationGameplayEffectsRefList; // 0xa8
        struct TArray<struct FSGGEDataLookupDT> RoutineExpirationGameplayEffectsRefList; // 0xb8

    };

    struct FInventoryGEAttributeModifier //ScriptStruct SGFramework.InventoryGEAttributeModifier
    {
    //Children Prop Count (Fields): 10
    public:

        struct FGameplayAttribute ModifyAttribute; // 0x0
        float ModifyValue; // 0x38
        enum class EGameplayModOp ModifierOp; // 0x3c
        class UGameplayModMagnitudeCalculation* CalculationClassMagnitude; // 0x40
        float Coefficient; // 0x48
        char Priority; // 0x4c
        enum class EGameplayModsSelector ModsSelector; // 0x4d
        enum class EGameplayModEvaluationChannel ModChannel; // 0x4e
        struct FGameplayTagRequirements SourceTags; // 0x50
        struct FGameplayTagRequirements TargetTags; // 0x90

    };

    struct FInventoryGE : FSGGEData //ScriptStruct SGFramework.InventoryGE
    {
    public:


    };

    struct FSGGADataReference //ScriptStruct SGFramework.SGGADataReference
    {
    //Children Prop Count (Fields): 1
    public:

        class UObject* DataOwner; // 0x0

    };

    struct FServerKey2Text : FTableRowBase //ScriptStruct SGFramework.ServerKey2Text
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString ServerKey; // 0x8
        struct FText ServerText; // 0x18

    };

    struct FDoorDeferUpdateInfo //ScriptStruct SGFramework.DoorDeferUpdateInfo
    {
    //Children Prop Count (Fields): 4
    public:

        struct TWeakObjectPtr<struct ASGDoorBase> DoorWeakPtr; // 0x0
        struct FRotator TwoWayDoorPlankRotator; // 0x8
        float TwoSideILCUpdateFactor; // 0x14
        float DynamicILC; // 0x18

    };

    struct FRelightingPortalData //ScriptStruct SGFramework.RelightingPortalData
    {
    //Children Prop Count (Fields): 8
    public:

        struct FTransform Transfrom; // 0x0
        struct FTransform ReverseTransfrom; // 0x30
        bool bInjectSunLight; // 0x60
        bool bInjectSkyLight; // 0x61
        bool bInjectTransfer; // 0x62
        float Weight; // 0x64
        float SkyOcclusionBoost; // 0x68
        float TransferBoost; // 0x6c

    };

    struct FSGDoorMovementSyncInfo //ScriptStruct SGFramework.SGDoorMovementSyncInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FSGDoorMovementInfo MovementInfo; // 0x0
        int32_t Count; // 0x18

    };

    struct FSGDoorMovementInfo //ScriptStruct SGFramework.SGDoorMovementInfo
    {
    //Children Prop Count (Fields): 7
    public:

        bool bIsMoving; // 0x0
        float MovingProgress; // 0x4
        enum class ESGDoorState PreState; // 0x8
        enum class ESGDoorState NewState; // 0x9
        float MoveSpeed; // 0xc
        int32_t OptCount; // 0x10
        bool bInit; // 0x14

    };

    struct FSGThrowWeaponPerWeaponAnimSetDuplicateConfig //ScriptStruct SGFramework.SGThrowWeaponPerWeaponAnimSetDuplicateConfig
    {
    //Children Prop Count (Fields): 10
    public:

        class UObject* PerWeaponAnimSetToDuplicate; // 0x0
        struct FString OutPathSet; // 0x8
        struct FString OutPathHand; // 0x18
        struct FString OutPathWeapon; // 0x28
        bool bAutoSave; // 0x38
        struct FString BaseWeaponName; // 0x40
        struct FString TargetWeaponName; // 0x50
        struct FName SlotNameToUseOldAnim; // 0x60
        struct TMap<struct FName, class UAnimMontage*> SourceHandMontageByPropertyNameMap; // 0x68
        struct TMap<struct FName, class UAnimMontage*> SourceWeaponMontageByPropertyNameMap; // 0xb8

    };

    struct FSGPerWeaponAnimSetDuplicateConfig //ScriptStruct SGFramework.SGPerWeaponAnimSetDuplicateConfig
    {
    //Children Prop Count (Fields): 13
    public:

        class UObject* PerWeaponAnimSetToDuplicate; // 0x0
        struct FString OutPathSet; // 0x8
        struct FString OutPathHand; // 0x18
        struct FString OutPathWeapon; // 0x28
        struct TArray<struct FName> PropertiesToDuplicateHand; // 0x38
        struct TArray<struct FName> PropertiesToDuplicateWeapon; // 0x48
        struct TArray<struct FName> PropertiesNotToDuplicateHand; // 0x58
        struct TArray<struct FName> PropertiesNotToDuplicateWeapon; // 0x68
        bool bAutoSave; // 0x78
        bool bOverrideCurve; // 0x79
        struct FSGPerWeaponAnimSetAnimNotifyStateConfig NotifyStateConfig; // 0x80
        struct TMap<struct FName, class UAnimMontage*> ReplaceHandMontageByPropertyNameMap; // 0xd8
        struct TMap<struct FName, class UAnimMontage*> ReplaceWeaponMontageByPropertyNameMap; // 0x128

    };

    struct FSGPerWeaponAnimSetAnimNotifyStateConfig //ScriptStruct SGFramework.SGPerWeaponAnimSetAnimNotifyStateConfig
    {
    //Children Prop Count (Fields): 2
    public:

        class UAnimNotifyState* NotifyStateClass; // 0x0
        struct TMap<struct FName, float> PropertyNameToNotifyStateDuration; // 0x8

    };

    struct FCachedFirePassByInfo //ScriptStruct SGFramework.CachedFirePassByInfo
    {
    //Children Prop Count (Fields): 1
    public:

        struct TSet<class AActor*> CachedActors; // 0x10

    };

    struct FSGGameInfo //ScriptStruct SGFramework.SGGameInfo
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t MainModeID; // 0x0
        uint32_t SubModeID; // 0x4
        uint32_t MapID; // 0x8
        uint32_t Difficulty; // 0xc
        uint32_t SpecialID; // 0x10

    };

    struct FDeferredExecCmd //ScriptStruct SGFramework.DeferredExecCmd
    {
    //Children Prop Count (Fields): 1
    public:

        class UWorld* ExecWorld; // 0x0

    };

    struct FActivityRequireComponentInfo //ScriptStruct SGFramework.ActivityRequireComponentInfo
    {
    //Children Prop Count (Fields): 2
    public:

        class UActorComponent* ActivityGameStateComponent; // 0x0
        class UActorComponent* ActivityPlayerStateComponent; // 0x8

    };

    struct FGestureAnim //ScriptStruct SGFramework.GestureAnim
    {
    //Children Prop Count (Fields): 6
    public:

        bool bOneHand; // 0x0
        bool bFullBody; // 0x1
        enum class EGestureType GestureType; // 0x2
        struct TSoftObjectPtr<UAnimMontage> GestureRifle; // 0x8
        struct TSoftObjectPtr<UAnimMontage> GestureEmptyHand; // 0x30
        struct TSoftObjectPtr<UAnimMontage> GestureTwoHandsMelee; // 0x58

    };

    struct FSGGameplayAbilityTargetData_InteractActorInfo : FGameplayAbilityTargetData //ScriptStruct SGFramework.SGGameplayAbilityTargetData_InteractActorInfo
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t InteractIndex; // 0x8

    };

    struct FSGGameplayAbilityTargetData_SprayInfo : FGameplayAbilityTargetData //ScriptStruct SGFramework.SGGameplayAbilityTargetData_SprayInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString SprayTexturePath; // 0x8
        int32_t SprayItemID; // 0x18

    };

    struct FSGGameplayAbilityTargetData_GestureInfo : FGameplayAbilityTargetData //ScriptStruct SGFramework.SGGameplayAbilityTargetData_GestureInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t GestureItemID; // 0x8
        struct FRotator ActorRotation; // 0xc

    };

    struct FSGGameplayAbilityTargetData_FoldScope : FGameplayAbilityTargetData //ScriptStruct SGFramework.SGGameplayAbilityTargetData_FoldScope
    {
    //Children Prop Count (Fields): 1
    public:

        enum class EAdapterAnimationType AdapterAnimationType; // 0x8

    };

    struct FSGGameplayAbilityTargetData_MoveBlockedAvoidance : FGameplayAbilityTargetData //ScriptStruct SGFramework.SGGameplayAbilityTargetData_MoveBlockedAvoidance
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector TargetLocation; // 0x8
        float Duration; // 0x14

    };

    struct FSGGameplayAbilityTargetData_DeliverCargos : FGameplayAbilityTargetData //ScriptStruct SGFramework.SGGameplayAbilityTargetData_DeliverCargos
    {
    //Children Prop Count (Fields): 1
    public:

        struct FDeliverCargosAnimInfo AnimInfo; // 0x8

    };

    struct FSGGameplayAbilityTargetData_PreviewPlace : FGameplayAbilityTargetData //ScriptStruct SGFramework.SGGameplayAbilityTargetData_PreviewPlace
    {
    //Children Prop Count (Fields): 2
    public:

        class UObject* ActorToSpawnClass; // 0x8
        class AActor* ActorToUse; // 0x10

    };

    struct FSGGameplayAbilityTargetData_ClimbLadder : FGameplayAbilityTargetData //ScriptStruct SGFramework.SGGameplayAbilityTargetData_ClimbLadder
    {
    //Children Prop Count (Fields): 1
    public:

        struct FLadderClimbingNetInfo NetInfo; // 0x8

    };

    struct FSGGameplayAbilityTargetData_OpenBag : FGameplayAbilityTargetData //ScriptStruct SGFramework.SGGameplayAbilityTargetData_OpenBag
    {
    //Children Prop Count (Fields): 1
    public:

        enum class EUABagOperation Operation; // 0x8

    };

    struct FSGGameplayAbilityTargetData_InteractTriggerInfo : FGameplayAbilityTargetData //ScriptStruct SGFramework.SGGameplayAbilityTargetData_InteractTriggerInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector StartPos; // 0x8
        struct FVector EndPos; // 0x14
        struct FName LineTraceHitBoneName; // 0x20

    };

    struct FSGGameplayAbilityTargetData_ContainerGridInfo : FGameplayAbilityTargetData //ScriptStruct SGFramework.SGGameplayAbilityTargetData_ContainerGridInfo
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t ContainerIndex; // 0x8
        enum class EAttachPosition AttachPosition; // 0xc
        struct FItemGridInfo ItemGridInfo; // 0x10
        bool IsDoRotate; // 0x18

    };

    struct FSensitivityData //ScriptStruct SGFramework.SensitivityData
    {
    //Children Prop Count (Fields): 10
    public:

        int32_t NoGlass; // 0x0
        int32_t RedSpot; // 0x4
        int32_t Holographic; // 0x8
        int32_t MechinicalAim; // 0xc
        int32_t VSS; // 0x10
        int32_t Scale2; // 0x14
        int32_t Scale3; // 0x18
        int32_t Scale4; // 0x1c
        int32_t Scale6; // 0x20
        int32_t Scale8; // 0x24

    };

    struct FSpawnedAIInfoForDebug //ScriptStruct SGFramework.SpawnedAIInfoForDebug
    {
    //Children Prop Count (Fields): 13
    public:

        struct TWeakObjectPtr<struct AActor> Character; // 0x0
        float SpawnTime; // 0x8
        float DeadTime; // 0xc
        struct FVector position; // 0x10
        enum class EAIMainType AIType; // 0x1c
        bool IsAlive; // 0x1d
        int32_t DeadReason; // 0x20
        int32_t SquadID; // 0x24
        int32_t CurrentAllyNum; // 0x28
        int32_t MaxAllyNum; // 0x2c
        int32_t EquipmentID; // 0x30
        int32_t Difficulty; // 0x34
        struct FString AreaID; // 0x38

    };

    struct FScavInfo //ScriptStruct SGFramework.ScavInfo
    {
    //Children Prop Count (Fields): 18
    public:

        int32_t SquadID; // 0x0
        struct TArray<int32_t> MaxNum; // 0x8
        int32_t LimitMin; // 0x18
        int32_t LimitMax; // 0x1c
        int32_t ALiveNum; // 0x20
        int32_t DeadNum; // 0x24
        int32_t TotalNum; // 0x28
        int32_t BossNum; // 0x2c
        int32_t FollowerNum; // 0x30
        int32_t PMCNum; // 0x34
        struct TArray<struct FAIIDNum> AIIDNum; // 0x38
        struct TArray<struct FWaveInfo> WaveNum; // 0x48
        int32_t DestroyedNum; // 0x58
        float FirstSpawnTime; // 0x5c
        bool bIsPrioritySquad; // 0x60
        int32_t SquadType; // 0x64
        struct TArray<struct FPendingSpawnAIDebugInfo> PendingInfo; // 0x68
        struct TArray<struct TWeakObjectPtr<struct ASGAICharacter>> CharacterArray; // 0x78

    };

    struct FPendingSpawnAIDebugInfo //ScriptStruct SGFramework.PendingSpawnAIDebugInfo
    {
    //Children Prop Count (Fields): 6
    public:

        int32_t PendingIndex; // 0x0
        struct FName AIID; // 0x4
        struct FString SpawnArea; // 0x10
        struct FString SpawnPoint; // 0x20
        struct FString ContextString; // 0x30
        bool bSpawned; // 0x40

    };

    struct FWaveInfo //ScriptStruct SGFramework.WaveInfo
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t WaveIndex; // 0x0
        int32_t Total; // 0x4
        int32_t Dead; // 0x8
        int32_t Destroyed; // 0xc

    };

    struct FAIIDNum //ScriptStruct SGFramework.AIIDNum
    {
    //Children Prop Count (Fields): 8
    public:

        int32_t Handle; // 0x0
        int64_t AIID; // 0x8
        int32_t AIState; // 0x10
        int32_t AIPriority; // 0x14
        int32_t RemoveReason; // 0x18
        struct FString PriorityContextString; // 0x20
        struct FString RemoveContextString; // 0x30
        bool bIsPending; // 0x40

    };

    struct FTeammateCurseInfo //ScriptStruct SGFramework.TeammateCurseInfo
    {
    //Children Prop Count (Fields): 5
    public:

        uint64_t SelfGID; // 0x0
        struct TArray<uint64_t> CursedCharacters; // 0x8
        bool bAffectAllFaction; // 0x18
        uint64_t TeammateKillerGID; // 0x20
        struct TArray<uint64_t> TeammateGIDs; // 0x28

    };

    struct FDeferDestroyCharacterInFrameInfo //ScriptStruct SGFramework.DeferDestroyCharacterInFrameInfo
    {
    //Children Prop Count (Fields): 2
    public:

        class AActor* SpawningCharacter; // 0x0
        struct FVector DeathLocation; // 0x8

    };

    struct FDeferDestroyActorInFrameInfo //ScriptStruct SGFramework.DeferDestroyActorInFrameInfo
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* SpawningActor; // 0x0

    };

    struct FDeferUnreplicateActorInFrameInfo //ScriptStruct SGFramework.DeferUnreplicateActorInFrameInfo
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* UnreplicateActor; // 0x0

    };

    struct FEscapeInfo //ScriptStruct SGFramework.EscapeInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t TeamID; // 0x0
        struct TArray<class ASGVolume*> EscapeVolumes; // 0x8

    };

    struct FCharacterDeathGUIDInfo //ScriptStruct SGFramework.CharacterDeathGUIDInfo
    {
    public:


    };

    struct FSprayActors //ScriptStruct SGFramework.SprayActors
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class ASGSprayActor*> SprayActors; // 0x0

    };

    struct FMissionStatisData //ScriptStruct SGFramework.MissionStatisData
    {
    //Children Prop Count (Fields): 1
    public:

        struct TMap<int64_t, int64_t> DataMap; // 0x0

    };

    struct FStatisBattleIntensityExpectationSampleCollection //ScriptStruct SGFramework.StatisBattleIntensityExpectationSampleCollection
    {
    public:


    };

    struct FStatisBattleIntensityExpectationSample //ScriptStruct SGFramework.StatisBattleIntensityExpectationSample
    {
    public:


    };

    struct FAIProtectSafeBoxMessage //ScriptStruct SGFramework.AIProtectSafeBoxMessage
    {
    //Children Prop Count (Fields): 13
    public:

        int64_t AIID; // 0x0
        int64_t PGID; // 0x8
        bool bAIRLUsed; // 0x10
        bool bSurvived; // 0x11
        float ProtectionDuration; // 0x14
        int32_t EnterBattleTimes; // 0x18
        int32_t LeaveBattleTimes_TargetLost; // 0x1c
        float TotalBattleDuration; // 0x20
        int32_t TotalFireCount; // 0x24
        int32_t TotalHitCount; // 0x28
        int32_t TotalHitPlayerCount; // 0x2c
        int32_t TotalKillPlayerCount; // 0x30
        float TotalMoveDuration; // 0x34

    };

    struct FAICommonStatis //ScriptStruct SGFramework.AICommonStatis
    {
    //Children Prop Count (Fields): 11
    public:

        bool bAIRLUsed; // 0x0
        float SpawnTime; // 0x4
        float SpawnTime_GameTime; // 0x8
        float ReadyTime; // 0xc
        float ReadyTime_GameTime; // 0x10
        float LeaveTime; // 0x14
        float LeaveTime_GameTime; // 0x18
        enum class ELeaveGameReason LeaveReason; // 0x1c
        struct TArray<float> FireTimes; // 0x20
        struct TArray<struct FAICommonStatis_HitInfo> HitInfos; // 0x30
        struct TArray<struct FAICommonStatis_MarkBattleInfo> MarkBattleInfos; // 0x40

    };

    struct FAICommonStatis_MarkBattleInfo //ScriptStruct SGFramework.AICommonStatis_MarkBattleInfo
    {
    public:


    };

    struct FAICommonStatis_HitInfo //ScriptStruct SGFramework.AICommonStatis_HitInfo
    {
    //Children Prop Count (Fields): 6
    public:

        int64_t ID; // 0x0
        float Time; // 0x8
        float ArmorDamage; // 0xc
        float RealDamage; // 0x10
        enum class ECharacterType CharacterType; // 0x14
        bool bKilled; // 0x15

    };

    struct FAIGameAchieveMessage //ScriptStruct SGFramework.AIGameAchieveMessage
    {
    //Children Prop Count (Fields): 16
    public:

        int64_t AIID; // 0x0
        int64_t PGID; // 0x8
        float ReadyTime; // 0x10
        float LeaveTime; // 0x14
        float SurvivalTime; // 0x18
        int32_t LeaveReason; // 0x1c
        int32_t BattleCount; // 0x20
        int32_t FireCount; // 0x24
        int32_t HitCount; // 0x28
        float RealDamage; // 0x2c
        float ArmorDamage; // 0x30
        int32_t KillPlayerNum; // 0x34
        int32_t HitPlayerNum; // 0x38
        int32_t PeekCount; // 0x3c
        int32_t CallUpReason; // 0x40
        int32_t CallUpResult; // 0x44

    };

    struct FAICausePVPMessage //ScriptStruct SGFramework.AICausePVPMessage
    {
    //Children Prop Count (Fields): 8
    public:

        int64_t AIID; // 0x0
        int64_t PGID; // 0x8
        float TimePartA; // 0x10
        float DistancePartA1; // 0x14
        float DistancePartA2; // 0x18
        float TimePartB; // 0x1c
        float DistancePartB1; // 0x20
        float DistancePartB2; // 0x24

    };

    struct FPlayerFightInfo //ScriptStruct SGFramework.PlayerFightInfo
    {
    //Children Prop Count (Fields): 3
    public:

        float LastTimeFightAgainstOtherPlayer; // 0x0
        struct FVector LastLocationFightAgainstOtherPlayer; // 0x4
        struct TArray<struct FPlayerFightInfo_KilledAIInfo> KilledAIs; // 0x10

    };

    struct FPlayerFightInfo_KilledAIInfo //ScriptStruct SGFramework.PlayerFightInfo_KilledAIInfo
    {
    //Children Prop Count (Fields): 5
    public:

        int64_t AIID; // 0x0
        int64_t PGID; // 0x8
        float Time; // 0x10
        struct FVector AILocation; // 0x14
        struct FVector PlayerLocation; // 0x20

    };

    struct FHighOutputMultiPlayerGameEndReportInfo //ScriptStruct SGFramework.HighOutputMultiPlayerGameEndReportInfo
    {
    //Children Prop Count (Fields): 20
    public:

        int32_t MediateTriggeredTime; // 0x0
        int32_t SinglePMCTriggeredTime; // 0x4
        int32_t SingleScavTriggeredTime; // 0x8
        bool GroupOneTriggered; // 0xc
        bool GroupTwoTriggered; // 0xd
        int32_t MediateSignedTime; // 0x10
        int32_t SinglePMCSignedTime; // 0x14
        int32_t SingleScavSignedTime; // 0x18
        bool GroupOneSigned; // 0x1c
        bool GroupTwoSigned; // 0x1d
        int32_t GroupGetLastHitNumber; // 0x20
        int32_t GroupFinalReceiveNumber; // 0x24
        bool SubsistanceTriggered; // 0x28
        int32_t PlayerNumber; // 0x2c
        int32_t ScavRefreshTime; // 0x30
        int32_t PMC_FeedActions; // 0x34
        int32_t MediateStopReason; // 0x38
        int32_t EscapeBefore10Min; // 0x3c
        int32_t EscapeBefore20Min; // 0x40
        int32_t Backup; // 0x44

    };

    struct FAIRLReportData //ScriptStruct SGFramework.AIRLReportData
    {
    //Children Prop Count (Fields): 5
    public:

        int64_t AIID; // 0x0
        int64_t PGID; // 0x8
        float AIRL_SumTime; // 0x10
        bool AIRL_SwitchToNormal; // 0x14
        bool AIRL_Survival; // 0x15

    };

    struct FHighOutputGameEndReportData //ScriptStruct SGFramework.HighOutputGameEndReportData
    {
    //Children Prop Count (Fields): 14
    public:

        bool WeaponBoxIsOpened; // 0x0
        bool MovingTriggered; // 0x1
        bool StaticTriggered; // 0x2
        bool ScavOrderDelivered; // 0x3
        bool ScavOrderSigned; // 0x4
        bool PMCOrderDelivered; // 0x5
        bool PMCOrderSigned; // 0x6
        bool MediateOrderSigned; // 0x7
        bool CloseForNoWeapon; // 0x8
        bool CloseScavOrder; // 0x9
        bool CloseMovingTheater; // 0xa
        int32_t ScavRefreshTimes; // 0xc
        int32_t PMC_FeedActions; // 0x10
        int32_t MediateStopReason; // 0x14

    };

    struct FAIDieOrKillBattleInfo //ScriptStruct SGFramework.AIDieOrKillBattleInfo
    {
    //Children Prop Count (Fields): 19
    public:

        float KillerElapsedTimeSinceReady; // 0x0
        float KillerBattleDuration; // 0x4
        float KillerFoundTargetDuration; // 0x8
        float KillerShootTargetDuration; // 0xc
        float KillerFirstHitDuration; // 0x10
        int32_t KillerCumulativeHitTimes; // 0x14
        int32_t KillerTeamCumulativeHitTimes; // 0x18
        bool KillerHasGoal; // 0x1c
        bool KillerIsKilledMyGoal; // 0x1d
        float KilledFirstTakeHitDuration; // 0x20
        int32_t KilledCumulativeTakeHitTimes; // 0x24
        float KilledElapsedTimeSinceReady; // 0x28
        float KilledBattleDuration; // 0x2c
        float KilledFoundTargetDuration; // 0x30
        float KilledShootTargetDuration; // 0x34
        float KilledFirstHitDuration; // 0x38
        int32_t KilledCumulativeHitTimes; // 0x3c
        bool KilledHasGoal; // 0x40
        bool KilledIsKillerMyGoal; // 0x41

    };

    struct FItemDetailedSourceInfo //ScriptStruct SGFramework.ItemDetailedSourceInfo
    {
    //Children Prop Count (Fields): 1
    public:

        struct TMap<struct FItemDetailKeyInfo, int32_t> DetailedNumMap; // 0x0

    };

    struct FItemDetailKeyInfo //ScriptStruct SGFramework.ItemDetailKeyInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t SpawnTypeID; // 0x0
        int32_t FactionType; // 0x4

    };

    struct FThunderInfo //ScriptStruct SGFramework.ThunderInfo
    {
    //Children Prop Count (Fields): 6
    public:

        struct FDateTime StartTimeStamp; // 0x0
        float FirstStageTime; // 0x8
        float SecondStageTime; // 0xc
        float ThirdStageTime; // 0x10
        int32_t ThunderTypeIndex; // 0x14
        enum class EThunderstormStage CurrentState; // 0x18

    };

    struct FModeThunderTimeInfo //ScriptStruct SGFramework.ModeThunderTimeInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<int32_t> ThunderTypeIndexWeightArray; // 0x0
        float MinPlayTime; // 0x10
        float MaxPlayTime; // 0x14

    };

    struct FPlayerStartGroup //ScriptStruct SGFramework.PlayerStartGroup
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t GroupIndex; // 0x0
        struct TArray<class AActor*> PlayerStarts; // 0x8

    };

    struct FSGRandomDistributionCurve //ScriptStruct SGFramework.SGRandomDistributionCurve
    {
    //Children Prop Count (Fields): 1
    public:

        class UCurveFloat* ParameterCurve; // 0x0

    };

    struct FFollowCharacterWidgetInfo //ScriptStruct SGFramework.FollowCharacterWidgetInfo
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t WidgetIndex; // 0x0
        struct FString PlayerName; // 0x8
        int32_t MentorPupilType; // 0x18
        bool bIsTeammate; // 0x1c

    };

    struct FChaseActivityAvatarInfo //ScriptStruct SGFramework.ChaseActivityAvatarInfo
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t AvatarItemID; // 0x0
        float ScanningRange; // 0x4
        float ScanningInterval; // 0x8
        int32_t ScanningIntervalScale; // 0xc

    };

    struct FSafeZoneCache //ScriptStruct SGFramework.SafeZoneCache
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t SafeZonePadX; // 0x0
        int32_t SafeZonePadY; // 0x4
        int32_t SafeZonePadEX; // 0x8
        int32_t SafeZonePadEY; // 0xc

    };

    struct FConfigUpdateItem //ScriptStruct SGFramework.ConfigUpdateItem
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t ConfigType; // 0x0
        int32_t ConfigOperate; // 0x4
        struct FString ConfigName; // 0x8
        struct FString ConfigSection; // 0x18
        struct TArray<struct FConfigUpdateItemKeyValue> ConfigKeyValues; // 0x28

    };

    struct FConfigUpdateItemKeyValue //ScriptStruct SGFramework.ConfigUpdateItemKeyValue
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t ValueType; // 0x0
        struct FString Key; // 0x8
        struct FString Value; // 0x18

    };

    struct FSGMonitorData //ScriptStruct SGFramework.SGMonitorData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector2D PrevPosition; // 0x60
        struct FIntPoint PrevResolution; // 0x68

    };

    struct FBenchmarkQualityLevels //ScriptStruct SGFramework.BenchmarkQualityLevels
    {
    //Children Prop Count (Fields): 11
    public:

        int32_t ResolutionQuality; // 0x0
        int32_t ViewDistanceQuality; // 0x4
        int32_t AntiAliasingQuality; // 0x8
        int32_t ShadowQuality; // 0xc
        int32_t PostProcessQuality; // 0x10
        int32_t TextureQuality; // 0x14
        int32_t EffectsQuality; // 0x18
        int32_t FoliageQuality; // 0x1c
        int32_t ShadingQuality; // 0x20
        float CPUBenchmarkResults; // 0x24
        float GPUBenchmarkResults; // 0x28

    };

    struct FGameUserDefaultSettings : FTableRowBase //ScriptStruct SGFramework.GameUserDefaultSettings
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Name; // 0x8
        enum class ESettingValueType Type; // 0x10
        struct FString Value; // 0x18

    };

    struct FGashaponSpawnPoint //ScriptStruct SGFramework.GashaponSpawnPoint
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector SpawnLocation; // 0x0
        struct FRotator SpawnRotation; // 0xc

    };

    struct FGashaponSpawnInfo //ScriptStruct SGFramework.GashaponSpawnInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FGashaponSpawnItemInfo> SpawnItemList; // 0x0
        int32_t Weight; // 0x10

    };

    struct FGashaponSpawnItemInfo //ScriptStruct SGFramework.GashaponSpawnItemInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t SpawnItemID; // 0x0
        int32_t SpawnCount; // 0x4

    };

    struct FGlobalEventMessage_CharacterDestroyActor //ScriptStruct SGFramework.GlobalEventMessage_CharacterDestroyActor
    {
    //Children Prop Count (Fields): 2
    public:

        class ACharacter* Character; // 0x0
        class AActor* Target; // 0x8

    };

    struct FGlobalEventMessage_StartLoot //ScriptStruct SGFramework.GlobalEventMessage_StartLoot
    {
    //Children Prop Count (Fields): 2
    public:

        class ACharacter* Character; // 0x0
        class AActor* Container; // 0x8

    };

    struct FGlobalEventMessage_StartSearchingContainer //ScriptStruct SGFramework.GlobalEventMessage_StartSearchingContainer
    {
    //Children Prop Count (Fields): 2
    public:

        class ACharacter* SearchingPlayer; // 0x0
        class AActor* Container; // 0x8

    };

    struct FGlobalEventMessage_MComHappenUpLoad //ScriptStruct SGFramework.GlobalEventMessage_MComHappenUpLoad
    {
    //Children Prop Count (Fields): 2
    public:

        class AActor* Instigator; // 0x0
        class AActor* InteractActor; // 0x8

    };

    struct FGlobalEventMessage_FSMStateChange //ScriptStruct SGFramework.GlobalEventMessage_FSMStateChange
    {
    //Children Prop Count (Fields): 4
    public:

        class ASGGameState* Instigator; // 0x0
        class AActor* Target; // 0x8
        struct FString NewFlowState; // 0x10
        struct FString OldFlowState; // 0x20

    };

    struct FGlobalEventMessage_SceneEventCompleted //ScriptStruct SGFramework.GlobalEventMessage_SceneEventCompleted
    {
    //Children Prop Count (Fields): 3
    public:

        class ASGGameState* Instigator; // 0x0
        class UAISceneEventMessage* AISceneEvent; // 0x8
        class ACharacter* Character; // 0x10

    };

    struct FGlobalEventMessage_SceneEventRemoved //ScriptStruct SGFramework.GlobalEventMessage_SceneEventRemoved
    {
    //Children Prop Count (Fields): 2
    public:

        class ASGGameState* Instigator; // 0x0
        class UAISceneEventMessage* AISceneEvent; // 0x8

    };

    struct FGlobalEventMessage_SceneEventExpired //ScriptStruct SGFramework.GlobalEventMessage_SceneEventExpired
    {
    //Children Prop Count (Fields): 2
    public:

        class ASGGameState* Instigator; // 0x0
        class UAISceneEventMessage* AISceneEvent; // 0x8

    };

    struct FGlobalEventMessage_SceneEventTrigger //ScriptStruct SGFramework.GlobalEventMessage_SceneEventTrigger
    {
    //Children Prop Count (Fields): 2
    public:

        class ASGGameState* Instigator; // 0x0
        class UAISceneEventMessage* AISceneEvent; // 0x8

    };

    struct FGlobalEventMessage_FactionScoreUpdate //ScriptStruct SGFramework.GlobalEventMessage_FactionScoreUpdate
    {
    //Children Prop Count (Fields): 3
    public:

        class ASGFaction* Instigator; // 0x0
        enum class EFactionType FactionType; // 0x8
        int32_t IntCount; // 0xc

    };

    struct FGlobalEventMessage_OpenItemDetail //ScriptStruct SGFramework.GlobalEventMessage_OpenItemDetail
    {
    //Children Prop Count (Fields): 3
    public:

        class ACharacter* Instigator; // 0x0
        bool bool; // 0x8
        int32_t ItemID; // 0xc

    };

    struct FGlobalEventMessage_OpenPPT //ScriptStruct SGFramework.GlobalEventMessage_OpenPPT
    {
    //Children Prop Count (Fields): 3
    public:

        class ACharacter* Instigator; // 0x0
        bool bool; // 0x8
        int32_t WidgetID; // 0xc

    };

    struct FGlobalEventMessage_InspectItemClick //ScriptStruct SGFramework.GlobalEventMessage_InspectItemClick
    {
    //Children Prop Count (Fields): 1
    public:

        class ACharacter* Instigator; // 0x0

    };

    struct FGlobalEventMessage_BagTabClick //ScriptStruct SGFramework.GlobalEventMessage_BagTabClick
    {
    //Children Prop Count (Fields): 2
    public:

        class ACharacter* Instigator; // 0x0
        int32_t BagTabType; // 0x8

    };

    struct FGlobalEventMessage_BigMapDetailBoardShow //ScriptStruct SGFramework.GlobalEventMessage_BigMapDetailBoardShow
    {
    //Children Prop Count (Fields): 5
    public:

        class ACharacter* Instigator; // 0x0
        int32_t DetailBoardType; // 0x8
        int32_t ItemID; // 0xc
        int32_t TaskId; // 0x10
        bool bool; // 0x14

    };

    struct FGlobalEventMessage_BagStateChange //ScriptStruct SGFramework.GlobalEventMessage_BagStateChange
    {
    //Children Prop Count (Fields): 4
    public:

        class ACharacter* Instigator; // 0x0
        bool bool; // 0x8
        int32_t BagType; // 0xc
        class AActor* Container; // 0x10

    };

    struct FGlobalEventMessage_VolumeBeginOverlap //ScriptStruct SGFramework.GlobalEventMessage_VolumeBeginOverlap
    {
    //Children Prop Count (Fields): 2
    public:

        int64_t VolumeID; // 0x0
        class AActor* InteractActor; // 0x8

    };

    struct FGlobalEventMessage_MoveInventory //ScriptStruct SGFramework.GlobalEventMessage_MoveInventory
    {
    //Children Prop Count (Fields): 3
    public:

        class ACharacter* Instigator; // 0x0
        class ASGInventory* Inventory; // 0x8
        enum class EAttachPosition AttachPosition; // 0x10

    };

    struct FGlobalEventMessage_WeaponAssemble //ScriptStruct SGFramework.GlobalEventMessage_WeaponAssemble
    {
    //Children Prop Count (Fields): 3
    public:

        class ACharacter* Instigator; // 0x0
        class ASGInventory* Weapon; // 0x8
        class ASGInventory* ChildInventory; // 0x10

    };

    struct FGlobalEventMessage_WeaponCheck //ScriptStruct SGFramework.GlobalEventMessage_WeaponCheck
    {
    //Children Prop Count (Fields): 1
    public:

        class ACharacter* Instigator; // 0x0

    };

    struct FGlobalEventMessage_MapSign //ScriptStruct SGFramework.GlobalEventMessage_MapSign
    {
    //Children Prop Count (Fields): 6
    public:

        class ACharacter* Instigator; // 0x0
        enum class EMapSignType SignType; // 0x8
        struct FVector2D Sign_EscapePointPos; // 0xc
        int32_t Sign_EscapePointID; // 0x14
        int32_t TaskId; // 0x18
        struct FVector2D Sign_PlayerPos; // 0x1c

    };

    struct FGlobalEventMessage_ClickItem //ScriptStruct SGFramework.GlobalEventMessage_ClickItem
    {
    //Children Prop Count (Fields): 2
    public:

        class ACharacter* Instigator; // 0x0
        class ASGInventory* Inventory; // 0x8

    };

    struct FGlobalEventMessage_PlayerBeginGame //ScriptStruct SGFramework.GlobalEventMessage_PlayerBeginGame
    {
    //Children Prop Count (Fields): 1
    public:

        class APlayerController* Instigator; // 0x0

    };

    struct FGlobalEventMessage_LocationReport //ScriptStruct SGFramework.GlobalEventMessage_LocationReport
    {
    //Children Prop Count (Fields): 2
    public:

        class ACharacter* Instigator; // 0x0
        float MoveDistance; // 0x8

    };

    struct FGlobalEventMessage_LootContainer //ScriptStruct SGFramework.GlobalEventMessage_LootContainer
    {
    //Children Prop Count (Fields): 2
    public:

        class ACharacter* Instigator; // 0x0
        class ASGInventory* Inventory; // 0x8

    };

    struct FGlobalEventMessage_AIEscaped //ScriptStruct SGFramework.GlobalEventMessage_AIEscaped
    {
    //Children Prop Count (Fields): 2
    public:

        class ACharacter* Instigator; // 0x0
        class AActor* EscapeVolume; // 0x8

    };

    struct FGlobalEventMessage_AIActived //ScriptStruct SGFramework.GlobalEventMessage_AIActived
    {
    //Children Prop Count (Fields): 1
    public:

        class ACharacter* Instigator; // 0x0

    };

    struct FGlobalEventMessageBase //ScriptStruct SGFramework.GlobalEventMessageBase
    {
    public:


    };

    struct FGlobalEventMessage_VolumeActorChanged : FGlobalEventMessageBase //ScriptStruct SGFramework.GlobalEventMessage_VolumeActorChanged
    {
    //Children Prop Count (Fields): 2
    public:

        struct FMFGlobalEventTag EventTag; // 0x0
        int64_t VolumeID; // 0x8

    };

    struct FGlobalEventMessage_PushBullet //ScriptStruct SGFramework.GlobalEventMessage_PushBullet
    {
    //Children Prop Count (Fields): 3
    public:

        class ACharacter* Instigator; // 0x0
        class ASGInventory* Inventory; // 0x8
        int32_t IntCount; // 0x10

    };

    struct FGlobalEventMessage_ModifyInventoryTotalCount //ScriptStruct SGFramework.GlobalEventMessage_ModifyInventoryTotalCount
    {
    //Children Prop Count (Fields): 4
    public:

        class ACharacter* Instigator; // 0x0
        class ASGInventory* Inventory; // 0x8
        int32_t IntOldCount; // 0x10
        int32_t IntNewCount; // 0x14

    };

    struct FGlobalEventMessage_UnfillContainer //ScriptStruct SGFramework.GlobalEventMessage_UnfillContainer
    {
    //Children Prop Count (Fields): 2
    public:

        class ACharacter* Character; // 0x0
        class ASGInventory* Inventory; // 0x8

    };

    struct FGlobalEventMessage_OnOneShotEnd //ScriptStruct SGFramework.GlobalEventMessage_OnOneShotEnd
    {
    //Children Prop Count (Fields): 3
    public:

        class ACharacter* Character; // 0x0
        class ASGInventory* Inventory; // 0x8
        struct FStackableItemSourceInfo StackableItemSourceInfo; // 0x18

    };

    struct FGlobalEventMessage_CharacterCostBullet //ScriptStruct SGFramework.GlobalEventMessage_CharacterCostBullet
    {
    //Children Prop Count (Fields): 3
    public:

        class ACharacter* Instigator; // 0x0
        class ASGInventory* Inventory; // 0x8
        struct TArray<struct FStackableItemSourceInfo> FromPlayerInfos; // 0x20

    };

    struct FGlobalEventMessage_ThrowableProjectileSpawn //ScriptStruct SGFramework.GlobalEventMessage_ThrowableProjectileSpawn
    {
    //Children Prop Count (Fields): 3
    public:

        class ACharacter* Instigator; // 0x0
        class ASGThrowableProjectile* ThrowableProjectile; // 0x8
        class ASGInventory* Inventory; // 0x10

    };

    struct FGlobalEventMessage_SwitchWeaponCompleted //ScriptStruct SGFramework.GlobalEventMessage_SwitchWeaponCompleted
    {
    //Children Prop Count (Fields): 2
    public:

        class ACharacter* Instigator; // 0x0
        class ASGInventory* Inventory; // 0x8

    };

    struct FGlobalEventMessage_ContainerInteractChanged //ScriptStruct SGFramework.GlobalEventMessage_ContainerInteractChanged
    {
    //Children Prop Count (Fields): 3
    public:

        class ACharacter* Instigator; // 0x0
        class ASGInventory* Inventory; // 0x8
        bool bInteract; // 0x10

    };

    struct FGlobalEventMessage_AttachPositionChanged //ScriptStruct SGFramework.GlobalEventMessage_AttachPositionChanged
    {
    //Children Prop Count (Fields): 2
    public:

        class ACharacter* Instigator; // 0x0
        class ASGInventory* Inventory; // 0x8

    };

    struct FGlobalEventMessage_GameplayEffectApplied //ScriptStruct SGFramework.GlobalEventMessage_GameplayEffectApplied
    {
    //Children Prop Count (Fields): 3
    public:

        class ACharacter* Instigator; // 0x0
        enum class ECharacterEnduranceType EnduranceType; // 0x8
        enum class ECharacterGameEffectType GameEffectType; // 0x9

    };

    struct FGlobalEventMessage_UseRecoveryInventory //ScriptStruct SGFramework.GlobalEventMessage_UseRecoveryInventory
    {
    //Children Prop Count (Fields): 3
    public:

        class ACharacter* Instigator; // 0x0
        class ASGInventory* Inventory; // 0x8
        enum class EUseInventoryPhase UseInventoryPhase; // 0x10

    };

    struct FGlobalEventMessage_AttractAI //ScriptStruct SGFramework.GlobalEventMessage_AttractAI
    {
    //Children Prop Count (Fields): 3
    public:

        class ACharacter* Instigator; // 0x0
        class AActor* Trigger; // 0x8
        class ACharacter* AttractAI; // 0x10

    };

    struct FGlobalEventMessage_PrePlayerFinishGame //ScriptStruct SGFramework.GlobalEventMessage_PrePlayerFinishGame
    {
    //Children Prop Count (Fields): 3
    public:

        class APlayerController* Instigator; // 0x0
        enum class EPlayerEndGameType EndGameType; // 0x8
        class AActor* EscapeVolume; // 0x10

    };

    struct FGlobalEventMessage_InventoryRemoved //ScriptStruct SGFramework.GlobalEventMessage_InventoryRemoved
    {
    //Children Prop Count (Fields): 2
    public:

        class ACharacter* Instigator; // 0x0
        class ASGInventory* Inventory; // 0x8

    };

    struct FGlobalEventMessage_InventoryAdded //ScriptStruct SGFramework.GlobalEventMessage_InventoryAdded
    {
    //Children Prop Count (Fields): 2
    public:

        class ACharacter* Instigator; // 0x0
        class ASGInventory* Inventory; // 0x8

    };

    struct FGlobalEventMessage_TakeInItem //ScriptStruct SGFramework.GlobalEventMessage_TakeInItem
    {
    //Children Prop Count (Fields): 2
    public:

        class APlayerController* Instigator; // 0x0
        class ASGInventory* Inventory; // 0x8

    };

    struct FGlobalEventMessage_FlowStateChange //ScriptStruct SGFramework.GlobalEventMessage_FlowStateChange
    {
    //Children Prop Count (Fields): 3
    public:

        class APlayerController* Instigator; // 0x0
        struct FName NewFlowState; // 0x8
        struct FName OldFlowState; // 0x10

    };

    struct FGlobalEventMessage_Interact //ScriptStruct SGFramework.GlobalEventMessage_Interact
    {
    //Children Prop Count (Fields): 3
    public:

        class ACharacter* Instigator; // 0x0
        class AActor* InteractActor; // 0x8
        enum class EInteractEventType InteractEventType; // 0x10

    };

    struct FGlobalEventMessage_HitTarget //ScriptStruct SGFramework.GlobalEventMessage_HitTarget
    {
    //Children Prop Count (Fields): 6
    public:

        class ACharacter* Instigator; // 0x0
        class ACharacter* DamageTakePlayer; // 0x8
        class AActor* DamageCauser; // 0x10
        enum class ESGArmorType ArmorType; // 0x18
        enum class ECharacterEnduranceType EnduranceType; // 0x19
        class UDamageEventObject* DamageInfo; // 0x20

    };

    struct FGlobalEventMessage_Killed //ScriptStruct SGFramework.GlobalEventMessage_Killed
    {
    //Children Prop Count (Fields): 6
    public:

        class AController* Instigator; // 0x0
        class AController* KilledPlayer; // 0x8
        class AActor* KillerWeapon; // 0x10
        float KillDistance; // 0x18
        enum class ECharacterEnduranceType EnduranceType; // 0x1c
        class UDamageEventObject* DamageInfo; // 0x20

    };

    struct FGlobalEventMessage_ReadyToPlay //ScriptStruct SGFramework.GlobalEventMessage_ReadyToPlay
    {
    //Children Prop Count (Fields): 1
    public:

        class ACharacter* Instigator; // 0x0

    };

    struct FGlobalEventMessage_Pair //ScriptStruct SGFramework.GlobalEventMessage_Pair
    {
    //Children Prop Count (Fields): 2
    public:

        class AActor* Instigator; // 0x0
        class AActor* Target; // 0x8

    };

    struct FGlobalEventMessage_Target //ScriptStruct SGFramework.GlobalEventMessage_Target
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* Target; // 0x0

    };

    struct FGlobalEventMessage_Instigator //ScriptStruct SGFramework.GlobalEventMessage_Instigator
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* Instigator; // 0x0

    };

    struct FGlobalEventMessage_GameBegin : FGlobalEventMessageBase //ScriptStruct SGFramework.GlobalEventMessage_GameBegin
    {
    //Children Prop Count (Fields): 2
    public:

        struct FMFGlobalEventTag EventTag; // 0x0
        class AGameState* Instigator; // 0x8

    };

    struct FLootContainerUnLockInfo //ScriptStruct SGFramework.LootContainerUnLockInfo
    {
    //Children Prop Count (Fields): 6
    public:

        int32_t LootPointID; // 0x0
        struct TArray<uint64_t> UnLockPlayerGIDs; // 0x8
        float UnLockTime; // 0x18
        float LootExtendTime; // 0x1c
        float LootExtendValidTime; // 0x20
        bool bIsBlock; // 0x24

    };

    struct FTestActivityInfo //ScriptStruct SGFramework.TestActivityInfo
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t ActivityID; // 0x0
        int32_t DisplayOrder; // 0x4
        int32_t ActivityType; // 0x8

    };

    struct FPlayerAuthInfo //ScriptStruct SGFramework.PlayerAuthInfo
    {
    //Children Prop Count (Fields): 3
    public:

        int64_t GID; // 0x0
        struct FString Token; // 0x8
        int32_t Level; // 0x18

    };

    struct FWeatherInfo //ScriptStruct SGFramework.WeatherInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t Time; // 0x0
        struct TArray<int32_t> WeatherList; // 0x8

    };

    struct FActivityInfo //ScriptStruct SGFramework.ActivityInfo
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t ActivityID; // 0x0
        int32_t DisplayOrder; // 0x4
        int32_t ActivityType; // 0x8

    };

    struct FPendingLoadHUDClassInfo //ScriptStruct SGFramework.PendingLoadHUDClassInfo
    {
    //Children Prop Count (Fields): 1
    public:

        class USGUserWidget* Class; // 0x18

    };

    struct FWidgetCountDebugInfo //ScriptStruct SGFramework.WidgetCountDebugInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t InstNum; // 0x0
        int32_t TotalChildNum; // 0x4

    };

    struct FSGViewTable : FTableRowBase //ScriptStruct SGFramework.SGViewTable
    {
    //Children Prop Count (Fields): 7
    public:

        int32_t WidgetViewId; // 0x8
        struct FSoftClassProperty TemplateUMG_Resource; // 0x10
        enum class EHUDHierarchy Hierachy; // 0x38
        struct FVector2D position; // 0x3c
        struct FAnchors Anchor; // 0x44
        struct FVector2D Alignment; // 0x54
        bool SizeToContent; // 0x5c

    };

    struct FImpactEffectNamedParameters //ScriptStruct SGFramework.ImpactEffectNamedParameters
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FParticleSysParam> ParticleParams; // 0x0

    };

    struct FParticleSysParam //ScriptStruct Engine.ParticleSysParam
    {
    //Children Prop Count (Fields): 9
    public:

        struct FName Name; // 0x0
        enum class EParticleSysParamType ParamType; // 0x8
        float Scalar; // 0xc
        float Scalar_Low; // 0x10
        struct FVector Vector; // 0x14
        struct FVector Vector_Low; // 0x20
        struct FColor Color; // 0x2c
        class AActor* Actor; // 0x30
        class UMaterialInterface* Material; // 0x38

    };

    struct FRicochetConfig_HD //ScriptStruct SGFramework.RicochetConfig_HD
    {
    //Children Prop Count (Fields): 2
    public:

        float MinIncidenceAngle; // 0x0
        struct FVector2D ProbabilityRange; // 0x4

    };

    struct FImpactAudioResource_HD //ScriptStruct SGFramework.ImpactAudioResource_HD
    {
    //Children Prop Count (Fields): 3
    public:

        class UAkAudioEvent* AudioEvent; // 0x0
        class UAkAudioEvent* AudioEvent_3P; // 0x8
        float MaterialAudioCoolDown; // 0x10

    };

    struct FImpactEffectResource_HD //ScriptStruct SGFramework.ImpactEffectResource_HD
    {
    //Children Prop Count (Fields): 2
    public:

        struct FImpactParticleResource_HD ParticleResource; // 0x0
        struct FImpactDecalResource_HD DecalResource; // 0x18

    };

    struct FImpactDecalResource_HD //ScriptStruct SGFramework.ImpactDecalResource_HD
    {
    //Children Prop Count (Fields): 6
    public:

        class UMaterialInterface* DecalMaterial; // 0x0
        struct FInt32Range RandomFrameIndex; // 0x8
        struct FFloatRange RandomSize; // 0x18
        struct FFloatRange RandomRotation; // 0x28
        struct FFloatRange RandomAlpha; // 0x38
        float LifeSpan; // 0x48

    };

    struct FImpactParticleResource_HD //ScriptStruct SGFramework.ImpactParticleResource_HD
    {
    //Children Prop Count (Fields): 3
    public:

        class UFXSystemAsset* ParticleTemplate; // 0x0
        class UCurveFloat* ScaleCurveByDistance; // 0x8
        class UCurveFloat* ScaleCurveByFOV; // 0x10

    };

    struct FPooledImpactEffectBind //ScriptStruct SGFramework.PooledImpactEffectBind
    {
    //Children Prop Count (Fields): 5
    public:

        class UPhysicalMaterial* PhysicalMaterial; // 0x0
        struct FPooledImpactEffectResource EffectResouce; // 0x8
        struct FPooledImpactEffectResource EffectResouce_3P; // 0xe0
        struct FPooledImpactEffectResource MeleeEffectResource; // 0x1b8
        struct FPooledImpactEffectResource MeleeEffectResource_3P; // 0x290

    };

    struct FPooledImpactEffectResource //ScriptStruct SGFramework.PooledImpactEffectResource
    {
    //Children Prop Count (Fields): 13
    public:

        class UFXSystemAsset* ParticleTemplate; // 0x0
        class UParticleSystem* ParticleNegagiveTemplate; // 0x8
        class UAkAudioEvent* AudioEvent; // 0x10
        struct FMeleeAudioEvent MeleeAudioEvent; // 0x18
        class UStaticMesh* StaticMeshTemplate; // 0x28
        class UStaticMesh* NegagiveStaticMeshTemplate; // 0x30
        class UMaterialInterface* DecalOverridenMaterial; // 0x38
        class UMaterialInterface* NegagiveDecalOverridenMaterial; // 0x40
        struct FDecalImpactEffectResource DecalResource; // 0x48
        struct FVector DecalScale; // 0xa8
        class UCurveFloat* ScaleCurveByDistance; // 0xb8
        class UCurveFloat* ScaleCurveByFOV; // 0xc0
        float LifeSpan; // 0xd4

    };

    struct FDecalImpactEffectResource //ScriptStruct SGFramework.DecalImpactEffectResource
    {
    //Children Prop Count (Fields): 8
    public:

        class UMaterialInterface* DecalMaterial; // 0x0
        struct FInt32Range RandomFrameIndex; // 0x8
        struct FFloatRange RandomSize; // 0x18
        struct FFloatRange RandomRotation; // 0x28
        struct FFloatRange RandomAlpha; // 0x38
        struct FName DecalRandomTextureParamName; // 0x48
        struct FName DecalRandomRotationParamName; // 0x50
        struct FName DecalRandomAlphaParamName; // 0x58

    };

    struct FMeleeAudioEvent //ScriptStruct SGFramework.MeleeAudioEvent
    {
    //Children Prop Count (Fields): 2
    public:

        class UAkAudioEvent* BluntMeleeAudioEvent; // 0x0
        class UAkAudioEvent* SharpMeleeAudioEvent; // 0x8

    };

    struct FInteractableItemTable : FTableRowBase //ScriptStruct SGFramework.InteractableItemTable
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t ID; // 0x8
        struct FString Name; // 0x10
        struct FString exe_func; // 0x20

    };

    struct FInteractConfig //ScriptStruct SGFramework.InteractConfig
    {
    //Children Prop Count (Fields): 5
    public:

        float KeyAttachDelayTime; // 0x0
        float KeyDetachDelayTime; // 0x4
        float TriggerFinishTime; // 0x8
        int64_t KeyItemID; // 0x10
        struct FString AnimMontageName; // 0x18

    };

    struct FUserWidgetPopInfo //ScriptStruct SGFramework.UserWidgetPopInfo
    {
    //Children Prop Count (Fields): 8
    public:

        class USGInteractUserWidget* UserWidgetClass; // 0x0
        class UObject* DisplaySprite; // 0x8
        struct FText DisplayText; // 0x10
        struct FText UsingDisplayText; // 0x28
        struct FVector2D PopAnchors; // 0x40
        struct FVector2D PopPosition; // 0x48
        float InteractRequireTime; // 0x50
        int32_t InteractionType; // 0x54

    };

    struct FInteractInventoryInfo //ScriptStruct SGFramework.InteractInventoryInfo
    {
    //Children Prop Count (Fields): 5
    public:

        int64_t ItemID; // 0x0
        class ASGInventory* InventoryClass; // 0x8
        int32_t Count; // 0x10
        enum class ESGInteractCostType CostType; // 0x14
        bool OnlyCheck; // 0x15

    };

    struct FSGInteractiveObjectGrid //ScriptStruct SGFramework.SGInteractiveObjectGrid
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t GridX; // 0x0
        int32_t GridY; // 0x4
        int32_t GridZ; // 0x8
        struct TArray<struct TScriptInterface<ISGInteractiveObjectInterface>> InteractiveObjects; // 0x10
        char bIsVisible; // 0x20

    };

    struct FManualNetRelevantFollowOnwerInfo //ScriptStruct SGFramework.ManualNetRelevantFollowOnwerInfo
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* CachedOwner; // 0x8

    };

    struct FSGInventoryAnimInstanceProxy : FAnimInstanceProxy //ScriptStruct SGFramework.SGInventoryAnimInstanceProxy
    {
    //Children Prop Count (Fields): 3
    public:

        bool bIs1P; // 0x860
        bool bIsOwnerCharacterProne; // 0x861
        class USGInventoryAnimInstance* AnimInstance; // 0x868

    };

    struct FSightBlockArea //ScriptStruct SGFramework.SightBlockArea
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Offset; // 0x0
        float Radius; // 0xc

    };

    struct FAssembleParentInfo //ScriptStruct SGFramework.AssembleParentInfo
    {
    //Children Prop Count (Fields): 2
    public:

        class AActor* ParentItem; // 0x0
        int32_t OffsetIndex; // 0x8

    };

    struct FAttachInvInfo //ScriptStruct SGFramework.AttachInvInfo
    {
    //Children Prop Count (Fields): 2
    public:

        class ASGInventory* AttachmentClass; // 0x0
        int32_t Num; // 0x8

    };

    struct FBeUsedRecord //ScriptStruct SGFramework.BeUsedRecord
    {
    //Children Prop Count (Fields): 2
    public:

        class AActor* User; // 0x0
        int32_t UsedTimes; // 0x8

    };

    struct FSubCameraInfo //ScriptStruct SGFramework.SubCameraInfo
    {
    //Children Prop Count (Fields): 35
    public:

        int32_t ScopeLevel; // 0x0
        float ZoomingSensitivity; // 0x4
        float ShoulderZoomingSensitivity; // 0x8
        float NormalFireSensitivity; // 0xc
        float ZoomFOV; // 0x10
        float HoldingBreathZoomFOV; // 0x14
        struct FVector FiringZoomInVector; // 0x18
        float BlurRadius; // 0x24
        float BlurThresHold; // 0x28
        float FiringAnimTranslationWeight; // 0x2c
        float FiringAnimRotationWeight; // 0x30
        struct FName AimingBase; // 0x34
        struct FName AimingPivotSocket; // 0x3c
        struct FName AimingDOF; // 0x44
        enum class EAdapterAnimationType SwitchAnim; // 0x4c
        float CameraGunkickWeight; // 0x50
        struct FVector AimingBaseOffset; // 0x54
        int32_t ScopeMaterialElementIndex; // 0x60
        struct TSoftObjectPtr<UMaterialInterface> InnerScopeBlurMaterial; // 0x68
        struct FVector4 LocalScopeParamAndRadius; // 0x90
        class UMaterialInstanceDynamic* BackupScopeMI; // 0xa0
        class UMaterialInstanceDynamic* InnerScopeBlurMI; // 0xa8
        float LensDistortionImageScale; // 0xb0
        float Magnification; // 0xb4
        class UMaterialInterface* BlurMaterial; // 0xb8
        class UMaterialInterface* LensDistortMaterial; // 0xc0
        float ZeroingDistance; // 0xc8
        bool bIsIronSight; // 0xcc
        struct FText DisplayName; // 0xd0
        bool bUsingScopeSceneCapture; // 0xe8
        class UTexture* ScopeReticleTexture; // 0xf0
        float ScopeReticleScale; // 0xf8
        struct TArray<struct FCrossHairTexInfo> ScopeReticleList; // 0x100
        int32_t ScopeMaterialIndex; // 0x110
        class UAnimSequenceBase* SwitchMagnificationAnim; // 0x118

    };

    struct FCrossHairTexInfo //ScriptStruct SGFramework.CrossHairTexInfo
    {
    //Children Prop Count (Fields): 3
    public:

        class UTexture2D* Tex; // 0x0
        float Scale; // 0x8
        class UAnimSequenceBase* SwitchMagnificationAnim; // 0x10

    };

    struct FWeaponScopeScaleConfigTableRow : FTableRowBase //ScriptStruct SGFramework.WeaponScopeScaleConfigTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint64_t ID; // 0x8
        struct TArray<struct FWeaponScopeScaleSG> WeaponScopeScale; // 0x10

    };

    struct FWeaponScopeScaleSG //ScriptStruct SGFramework.WeaponScopeScaleSG
    {
    //Children Prop Count (Fields): 5
    public:

        uint64_t ID; // 0x0
        struct FText WeaponName; // 0x8
        float RoScale; // 0x20
        float LoScale; // 0x24
        float ADSGunKickScale; // 0x28

    };

    struct FInventoryContainerBase_PreOccupiedActorInfoMap //ScriptStruct SGFramework.InventoryContainerBase_PreOccupiedActorInfoMap
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FGridPreOccupiedInfo> PreOccupiedActorInfoMap; // 0x0

    };

    struct FGridPreOccupiedInfo //ScriptStruct SGFramework.GridPreOccupiedInfo
    {
    //Children Prop Count (Fields): 2
    public:

        class AActor* OccupyKeyInventory; // 0x0
        struct FSGGridOccupyInfo GridOccupyInfo; // 0x8

    };

    struct FInventoryTempleteClass //ScriptStruct SGFramework.InventoryTempleteClass
    {
    //Children Prop Count (Fields): 1
    public:

        struct FSoftClassProperty TempleteClass; // 0x0

    };

    struct FInventoryIdClass //ScriptStruct SGFramework.InventoryIdClass
    {
    //Children Prop Count (Fields): 3
    public:

        uint64_t ID; // 0x0
        struct FSoftClassProperty Class; // 0x8
        struct FSoftClassProperty TempleteClass; // 0x30

    };

    struct FFlashlightInfo_HD //ScriptStruct SGFramework.FlashlightInfo_HD
    {
    //Children Prop Count (Fields): 2
    public:

        class ULightComponent* LightComponent; // 0x0
        struct FVector LocationOffset; // 0x8

    };

    struct FRPCS_ClientRemoved //ScriptStruct SGFramework.RPCS_ClientRemoved
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t ReplicateIndex; // 0x0

    };

    struct FRPCS_ClientAddToCharacter //ScriptStruct SGFramework.RPCS_ClientAddToCharacter
    {
    //Children Prop Count (Fields): 2
    public:

        bool bAutoActivateInput; // 0x0
        int32_t ReplicateIndex; // 0x4

    };

    struct FInventoryLockInfo //ScriptStruct SGFramework.InventoryLockInfo
    {
    //Children Prop Count (Fields): 2
    public:

        class ASGCharacter* LockedByCharacter; // 0x0
        struct TArray<enum class EInventoryLockType> LockTypeArray; // 0x8

    };

    struct FItemSkinInfo //ScriptStruct SGFramework.ItemSkinInfo
    {
    //Children Prop Count (Fields): 6
    public:

        int32_t SkinID; // 0x0
        int32_t ItemID; // 0x4
        bool bIsStaticMesh; // 0x8
        struct TSoftObjectPtr<UStreamableRenderAsset> MeshPath_Game; // 0x10
        struct TSoftObjectPtr<UStreamableRenderAsset> MeshPath_Lobby; // 0x38
        struct TArray<struct FOverrideMaterialInfo> OverrideMaterials; // 0x60

    };

    struct FOverrideMaterialInfo //ScriptStruct SGFramework.OverrideMaterialInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t Index; // 0x0
        struct TSoftObjectPtr<UMaterialInterface> OverrideMaterial; // 0x8

    };

    struct FSGMovableArmorDamageScaleMap //ScriptStruct SGFramework.SGMovableArmorDamageScaleMap
    {
    public:


    };

    struct FSGMovableArmorDamageScale //ScriptStruct SGFramework.SGMovableArmorDamageScale
    {
    public:


    };

    struct FDuplicatedInventoryMesh //ScriptStruct SGFramework.DuplicatedInventoryMesh
    {
    //Children Prop Count (Fields): 1
    public:

        class UPrimitiveComponent* DupInventoryMesh; // 0x0

    };

    struct FLoosePointInfo //ScriptStruct SGFramework.LoosePointInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString LoosePointName; // 0x0
        uint32_t LoosePointDetailID; // 0x10

    };

    struct FLastCharacterOwnerInfo //ScriptStruct SGFramework.LastCharacterOwnerInfo
    {
    //Children Prop Count (Fields): 2
    public:

        class ASGCharacter* LastOwner; // 0x0
        int64_t RemoveFrame; // 0x8

    };

    struct FTacticalInvStateInfo //ScriptStruct SGFramework.TacticalInvStateInfo
    {
    //Children Prop Count (Fields): 7
    public:

        struct FGameplayTag TacticTag; // 0x0
        struct TArray<class USGInventoryTacticComponent*> AttachedTacticalComponents; // 0x8
        bool bShouldEnableSwitch; // 0x18
        bool bSwitchStateOn; // 0x19
        bool bTacticalInvsActive; // 0x1a
        bool bCachedSwitchStateOn; // 0x1b
        bool bCachedShouldEnableSwitch; // 0x1c

    };

    struct FScopeRangeForTeammateIcon //ScriptStruct SGFramework.ScopeRangeForTeammateIcon
    {
    //Children Prop Count (Fields): 3
    public:

        struct FBox2D ShowRangeForScopePosition; // 0x0
        struct FBox2D HideRangeForWorldPosition; // 0x14
        float ShowRadius; // 0x28

    };

    struct FScopeZoomParamOnMaterials //ScriptStruct SGFramework.ScopeZoomParamOnMaterials
    {
    //Children Prop Count (Fields): 3
    public:

        class USGInventoryMeshComponent* ScopeMeshComponent; // 0x8
        class ASGInventory* ScopeInv; // 0x10
        bool bIsCameraPrepared; // 0x18

    };

    struct FInvGiveExtraParams //ScriptStruct SGFramework.InvGiveExtraParams
    {
    //Children Prop Count (Fields): 14
    public:

        enum class EAttachPosition Pos; // 0x0
        class ASGInventory* ParentInv; // 0x8
        int32_t ContainerIndex; // 0x10
        struct FName SocketName; // 0x14
        bool bDestroyItem; // 0x1c
        struct FItemGridInfo DropPosition; // 0x20
        int32_t Durability; // 0x28
        int64_t InstId; // 0x30
        int64_t TakeInPlayerGID; // 0x38
        int32_t InsureType; // 0x40
        int32_t SkinID; // 0x44
        class ASGInventory* MergeTargetInventory; // 0x48
        int32_t PendantID; // 0x50
        struct TArray<struct FStackableItemSourceInfo> ItemSourceInfo; // 0x58

    };

    struct FEquipmentSkinInfo //ScriptStruct SGFramework.EquipmentSkinInfo
    {
    //Children Prop Count (Fields): 7
    public:

        int32_t SkinID; // 0x0
        int32_t ItemID; // 0x4
        bool bIsStaticMesh; // 0x8
        struct TSoftObjectPtr<UStreamableRenderAsset> MeshPath_Game; // 0x10
        struct TSoftObjectPtr<UStreamableRenderAsset> MeshPath_Lobby; // 0x38
        struct TArray<struct FOverrideMaterialInfo> OverrideMaterials_Game; // 0x60
        struct TArray<struct FOverrideMaterialInfo> OverrideMaterials_Lobby; // 0x70

    };

    struct FInventorySpawnSourceInfo //ScriptStruct SGFramework.InventorySpawnSourceInfo
    {
    //Children Prop Count (Fields): 6
    public:

        enum class ESGInventorySpawnSourceType SpawnSourceType; // 0x0
        enum class ECharacterType FromCharacterType; // 0x1
        int64_t FromPlayerGID; // 0x8
        int32_t FromTeamIndex; // 0x10
        struct FVector SpawnLocation; // 0x14
        struct FRotator SpawnRotation; // 0x20

    };

    struct FInventoryContainer //ScriptStruct SGFramework.InventoryContainer
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class ASGInventory*> InventoryArray; // 0x0

    };

    struct FInventorySourceInfo //ScriptStruct SGFramework.InventorySourceInfo
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t InventoryID; // 0x0
        int64_t FromPlayerGID; // 0x8
        int32_t InventoryCount; // 0x10
        enum class ECharacterType FromCharacterType; // 0x14
        enum class ESGInventorySpawnSourceType InventorySourceType; // 0x15

    };

    struct FSGThermalImagerParams //ScriptStruct SGFramework.SGThermalImagerParams
    {
    //Children Prop Count (Fields): 5
    public:

        enum class ESGThermalImagerType Type; // 0x0
        float ThermalModeParameter; // 0x4
        float BloomIntensity; // 0x8
        float BloomThreshold; // 0xc
        float ChromaticAberrationIntensity; // 0x10

    };

    struct FInventoryOperationRepInfo //ScriptStruct SGFramework.InventoryOperationRepInfo
    {
    //Children Prop Count (Fields): 11
    public:

        int32_t OldParentInvRuntimeID; // 0x0
        int32_t NewParentInvRuntimeID; // 0x4
        int32_t NewContainerIndex; // 0x8
        struct TArray<class UActorComponent*> OldParentGridBaseTraceList; // 0x10
        class AActor* OldParentInv; // 0x20
        class AActor* NewParentInv; // 0x28
        enum class EAttachPosition OldAttachPosition; // 0x30
        enum class EAttachPosition AttachPosition; // 0x31
        struct FItemGridInfo StartGridPosition; // 0x34
        int32_t Count; // 0x3c
        struct FVector OperationLoc; // 0x40

    };

    struct FInventoryInteractionRepInfo //ScriptStruct SGFramework.InventoryInteractionRepInfo
    {
    //Children Prop Count (Fields): 2
    public:

        enum class EInventoryInteractionType InvInteractType; // 0x0
        struct TArray<class ASGInventory*> InteractInvList; // 0x8

    };

    struct FDropTransformInfo //ScriptStruct SGFramework.DropTransformInfo
    {
    //Children Prop Count (Fields): 5
    public:

        struct FTransform DropTransform; // 0x0
        bool bShouldDrop; // 0x30
        int32_t Count; // 0x34
        struct FVector Momentum; // 0x38
        bool bWithPhysics; // 0x44

    };

    struct FPendingAttachData //ScriptStruct SGFramework.PendingAttachData
    {
    //Children Prop Count (Fields): 2
    public:

        class USceneComponent* ChildComponent; // 0x0
        class USceneComponent* ParentComponent; // 0x8

    };

    struct FBoneModifyInfo //ScriptStruct SGFramework.BoneModifyInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName BoneName; // 0x0
        float BoneScale; // 0x8

    };

    struct FSearchContainerInfo //ScriptStruct SGFramework.SearchContainerInfo
    {
    //Children Prop Count (Fields): 2
    public:

        bool ContainerSearchState; // 0x0
        int32_t UnSearchItemCount; // 0x4

    };

    struct FConversionContainerInfo //ScriptStruct SGFramework.ConversionContainerInfo
    {
    //Children Prop Count (Fields): 2
    public:

        class AActor* ChildActorClass; // 0x0
        int32_t StackCount; // 0x8

    };

    struct FWeaponAssembleEnvironmentInfo //ScriptStruct SGFramework.WeaponAssembleEnvironmentInfo
    {
    //Children Prop Count (Fields): 16
    public:

        struct FName SocketName; // 0x0
        int32_t SocketIndex; // 0x8
        struct FAssembleSocketInfo SocketInfo; // 0x10
        class UStaticMeshComponent* StaticMeshComp; // 0x90
        class USkeletalMeshComponent* SkeletalMeshComp; // 0x98
        class UStaticMeshComponent* ParentStaticMeshComp; // 0xa0
        class USkeletalMeshComponent* ParentSkeletalMeshComp; // 0xa8
        class ASGInventory* AttachedInv; // 0xb0
        class ASGInventory* ParentInv; // 0xb8
        bool bStatic; // 0xc0
        class USkeletalMeshComponent* StaticMeshComp_Rollup; // 0xc8
        struct TArray<class UFXSystemComponent*> OwnedParticleSystemComponents; // 0xd0
        struct FVector SocketLocation; // 0xe4
        struct FVector SocketPrimitiveLocation; // 0xf0
        struct FVector SocketLocalLocation; // 0xfc
        int64_t ParentItemID; // 0x108

    };

    struct FAssembleSocketInfo //ScriptStruct SGFramework.AssembleSocketInfo
    {
    //Children Prop Count (Fields): 10
    public:

        struct FName SocketName; // 0x0
        struct FGameplayTagContainer SupportAdapterTagList; // 0x8
        bool bDisplaySocket; // 0x28
        struct FVector UIStartOffest; // 0x2c
        struct FVector UIEndOffest; // 0x38
        struct FText UIPartName; // 0x48
        class ASGInventory* AttachedInventory; // 0x60
        struct TArray<struct FSocketOffsetInfo> SocketOffsetInfo; // 0x68
        bool bPlaceHolderInventory; // 0x78
        uint32_t FakeID; // 0x7c

    };

    struct FSocketOffsetInfo //ScriptStruct SGFramework.SocketOffsetInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName OffsetName; // 0x0
        struct FVector OffsetLoc; // 0x8

    };

    struct FContainerInfo //ScriptStruct SGFramework.ContainerInfo
    {
    //Children Prop Count (Fields): 4
    public:

        class AActor* ContainActorClass; // 0x0
        int32_t MaxStackCount; // 0x8
        int32_t StackCount; // 0xc
        enum class EAttachPosition AttachPos; // 0x10

    };

    struct FItemSizeModifyInfo //ScriptStruct SGFramework.ItemSizeModifyInfo
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t Up; // 0x0
        int32_t Down; // 0x4
        int32_t Left; // 0x8
        int32_t Right; // 0xc

    };

    struct FInventoryDogTagInfo //ScriptStruct SGFramework.InventoryDogTagInfo
    {
    //Children Prop Count (Fields): 13
    public:

        struct FString RecordedDeathCharacterName; // 0x0
        int32_t RecordedDeathCharacterLevel; // 0x10
        uint32_t RecordedDeathCharacterGOpenID; // 0x14
        uint64_t RecordedDeathCharacterGID; // 0x18
        uint64_t RecordedDeathCharacterTime; // 0x20
        struct FString RecordedDeathCauserName; // 0x28
        uint64_t RecordedDeathCauserWeaponID; // 0x38
        struct FString RecordedDeathMapName; // 0x40
        int32_t RecordedDeathCauserCharacterType; // 0x50
        int32_t RecordedDeathReason; // 0x54
        bool RecordedDeathCauserIsTeamMate; // 0x58
        int32_t RecordedDeathCharacterRankLevel; // 0x5c
        int32_t RecordedDeathCharacterNationalFlagIso; // 0x60

    };

    struct FSGLinearMotionSimulationCurrentParameters //ScriptStruct SGFramework.SGLinearMotionSimulationCurrentParameters
    {
    //Children Prop Count (Fields): 6
    public:

        int32_t CurrentStageIndex; // 0x0
        float CurrentStageSpeed; // 0x4
        float CurrentStageDistance; // 0x8
        float CurrentStageTime; // 0xc
        enum class ESGLinearMotionSimulationStageEndConditionType OverrideEndConditionType; // 0x10
        float OverrideEndConditionValue; // 0x14

    };

    struct FSGLinearMotionSimulationStage //ScriptStruct SGFramework.SGLinearMotionSimulationStage
    {
    //Children Prop Count (Fields): 6
    public:

        enum class ESGLinearMotionSimulationStageInitialSpeedType InitialSpeedType; // 0x0
        float InitialSpeed; // 0x4
        float Acceleration; // 0x8
        struct FVector MotionDirection; // 0xc
        enum class ESGLinearMotionSimulationStageEndConditionType EndConditionType; // 0x18
        float EndConditionValue; // 0x1c

    };

    struct FMissionReplicateDataChangedEvent //ScriptStruct SGFramework.MissionReplicateDataChangedEvent
    {
    //Children Prop Count (Fields): 3
    public:

        enum class EMFMissionDataChangeType changeType; // 0x0
        struct FMFMissionReplicateData ReplicateData; // 0x8
        class ACharacter* SharerCharacter; // 0x60

    };

    struct FMissionFlowReplicateDataChangedEvent //ScriptStruct SGFramework.MissionFlowReplicateDataChangedEvent
    {
    //Children Prop Count (Fields): 3
    public:

        enum class EMFMissionDataChangeType changeType; // 0x0
        struct FMFMissionFlowReplicateData ReplicateData; // 0x8
        struct TArray<struct FMFMissionReplicateData> MissionReplicateDataList; // 0x28

    };

    struct FMissionActorReferenceButton //ScriptStruct SGFramework.MissionActorReferenceButton
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t Placeholder; // 0x0

    };

    struct FMissionActorReference //ScriptStruct SGFramework.MissionActorReference
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName RefStr; // 0x0
        class AActor* RefActor; // 0x8
        struct FName RefLevelName; // 0x10

    };

    struct FModeTableRowBase : FTableRowBase //ScriptStruct SGFramework.ModeTableRowBase
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t MainModeID; // 0x8
        int32_t SubModeID; // 0xc
        int32_t MapID; // 0x10
        int32_t SpecialID; // 0x14
        int32_t Difficulty; // 0x18

    };

    struct FSGTakeOutReplaceTable : FModeTableRowBase //ScriptStruct SGFramework.SGTakeOutReplaceTable
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FSGTakeOutReplaceRaw> ReplaceRuleArr; // 0x20

    };

    struct FSGTakeOutReplaceRaw //ScriptStruct SGFramework.SGTakeOutReplaceRaw
    {
    //Children Prop Count (Fields): 5
    public:

        enum class ESGTakeOutReplaceType ReplaceType; // 0x0
        enum class EFactionType Faction; // 0x1
        uint64_t FromItemID; // 0x8
        uint64_t ToItemID; // 0x10
        uint64_t ToItemNum; // 0x18

    };

    struct FSGModeDogTagReplaceTable : FModeTableRowBase //ScriptStruct SGFramework.SGModeDogTagReplaceTable
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FSGModeDogTagReplaceRaw> ModeDogTagReplaceArr; // 0x20
        struct TArray<struct FSGModeAIDogTagReplaceRaw> AIDogTagReplaceArr; // 0x30

    };

    struct FSGModeAIDogTagReplaceRaw //ScriptStruct SGFramework.SGModeAIDogTagReplaceRaw
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<int64_t> AIID; // 0x0
        enum class EFactionType FactionType; // 0x10
        uint64_t ReplaceItemID; // 0x18

    };

    struct FSGModeDogTagReplaceRaw //ScriptStruct SGFramework.SGModeDogTagReplaceRaw
    {
    //Children Prop Count (Fields): 2
    public:

        enum class EFactionType FactionType; // 0x0
        uint64_t ReplaceItemID; // 0x8

    };

    struct FUAGameBigMapConfigModeTable : FModeTableRowBase //ScriptStruct SGFramework.UAGameBigMapConfigModeTable
    {
    //Children Prop Count (Fields): 2
    public:

        struct FSoftClassProperty BigMapInfoActor; // 0x20
        struct FSoftObjectPath BigMapEffectDataTablePath; // 0x48

    };

    struct FSGModePreloadClassTable : FModeTableRowBase //ScriptStruct SGFramework.SGModePreloadClassTable
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FSoftClassProperty> PreloadClass; // 0x20
        struct TArray<struct FSoftClassProperty> DevPreloadClass; // 0x30

    };

    struct FSGModeActorPoolTable : FModeTableRowBase //ScriptStruct SGFramework.SGModeActorPoolTable
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FPoolActorInfo> PoolActorInfoList; // 0x20
        struct TMap<uint64_t, struct FPoolInventoryInfo> PoolInventoryInfoList; // 0x30

    };

    struct FPoolInventoryInfo //ScriptStruct SGFramework.PoolInventoryInfo
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t MaxPoolCount; // 0x0
        int32_t CurrPoolCount; // 0x4
        int32_t Priority; // 0x8
        bool bIsUsing; // 0xc
        int32_t LimitFlag; // 0x10

    };

    struct FPoolActorInfo //ScriptStruct SGFramework.PoolActorInfo
    {
    //Children Prop Count (Fields): 5
    public:

        struct FSoftClassProperty PoolActorClass; // 0x0
        int32_t MaxPoolCount; // 0x28
        int32_t CurrPoolCount; // 0x2c
        int32_t Priority; // 0x30
        int32_t LimitFlag; // 0x34

    };

    struct FUAGameModeReplayTable : FModeTableRowBase //ScriptStruct SGFramework.UAGameModeReplayTable
    {
    //Children Prop Count (Fields): 1
    public:

        bool OpenReplay; // 0x20

    };

    struct FUAThunderDetailTable : FTableRowBase //ScriptStruct SGFramework.UAThunderDetailTable
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t ThunderTypeIndex; // 0x8
        float FirstStageTime; // 0xc
        float SecondStageTime; // 0x10
        float ThirdStageTime; // 0x14

    };

    struct FUAModeThunderTable : FModeTableRowBase //ScriptStruct SGFramework.UAModeThunderTable
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t ThunderCount; // 0x20
        struct TArray<struct FModeThunderTimeInfo> PlayThunderTimeInfoArray; // 0x28

    };

    struct FUAModeAIDifficultyTable : FModeTableRowBase //ScriptStruct SGFramework.UAModeAIDifficultyTable
    {
    //Children Prop Count (Fields): 4
    public:

        struct FString AIPathLevelName; // 0x20
        struct FString AISpawnLevelName; // 0x30
        class UDataTable* AIPortraitToAIID; // 0x40
        int32_t AISpawnConfigID; // 0x48

    };

    struct FMotionWarpingNetSyncPoint //ScriptStruct SGFramework.MotionWarpingNetSyncPoint
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Name; // 0x0
        struct FMotionWarpingSyncPoint SyncPoint; // 0x10

    };

    struct FSGNPCAINameTableRow : FTableRowBase //ScriptStruct SGFramework.SGNPCAINameTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        struct FText NameText; // 0x8
        int32_t NamePoolID; // 0x20
        int32_t Level; // 0x24

    };

    struct FSGNPCAIFactionTableRow : FTableRowBase //ScriptStruct SGFramework.SGNPCAIFactionTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct TSoftObjectPtr<UNPCAIFactionPlugin>> MustPlugin; // 0x8
        struct TArray<struct TSoftObjectPtr<UNPCAIFactionPlugin>> ExtraPlugin; // 0x18
        struct TArray<struct TSoftObjectPtr<UNPCAIFactionPlugin>> SwitchPlugin; // 0x28

    };

    struct FSGNPCSpawnConfigTableRow : FTableRowBase //ScriptStruct SGFramework.SGNPCSpawnConfigTableRow
    {
    //Children Prop Count (Fields): 11
    public:

        struct FString AIDisplayName; // 0x8
        int32_t MaxEquipSuiteCount; // 0x18
        int32_t PullPriority; // 0x1c
        int32_t NamePoolID; // 0x20
        struct FSoftClassProperty AICharacterClass; // 0x28
        struct TMap<enum class EFactionType, struct FSGAICampPerformances> AIFactionPerformances; // 0x50
        struct FSoftClassProperty AIControllerClass; // 0xa0
        struct FSoftClassProperty FactionClass; // 0xc8
        struct FSoftClassProperty RoleClass; // 0xf0
        struct TSoftObjectPtr<UBehaviorTree> ArchetypeTemplate; // 0x118
        struct FName FactionName; // 0x140

    };

    struct FSGAICampPerformances //ScriptStruct SGFramework.SGAICampPerformances
    {
    //Children Prop Count (Fields): 1
    public:

        struct TMap<int32_t, enum class EAIPerformance> AIPerformances; // 0x0

    };

    struct FSGAIEventAvatarTableRow : FTableRowBase //ScriptStruct SGFramework.SGAIEventAvatarTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t eventId; // 0x8
        struct TArray<int32_t> AIIDs; // 0x10
        struct TSoftObjectPtr<UDataTable> SoundData; // 0x20
        struct TArray<struct FSoftClassProperty> AvatarInventories; // 0x48

    };

    struct FSGAIPerformanceTableRow : FTableRowBase //ScriptStruct SGFramework.SGAIPerformanceTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        enum class EAIPerformance AIPerformance; // 0x8
        struct TArray<struct TSoftObjectPtr<UDataTable>> SoundDatas; // 0x10
        struct FSoftClassProperty DeathBoxClass; // 0x20
        struct TArray<struct FSGAIAvatarInventories> AvatarInventoriesGroup; // 0x48

    };

    struct FSGAIAvatarInventories //ScriptStruct SGFramework.SGAIAvatarInventories
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FSoftClassProperty> AvatarInventories; // 0x0

    };

    struct FSGOrnamentAnimInstanceProxy : FAnimInstanceProxy //ScriptStruct SGFramework.SGOrnamentAnimInstanceProxy
    {
    //Children Prop Count (Fields): 5
    public:

        class USGOrnamentAnimInstance* AnimInstance; // 0x860
        enum class EOrnamentSimulateMethod ActiveSimulateMethod; // 0x868
        struct FTransform ExternalCollisionTransform; // 0x870
        struct FVector ExternalCollisionExtend; // 0x8a0
        class USkeletalMeshComponent* ExternalCollisionTarget; // 0x8b0

    };

    struct FSGParadropConfigTableRow : FModeTableRowBase //ScriptStruct SGFramework.SGParadropConfigTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        struct TArray<int32_t> ActIDs; // 0x20
        struct FName CachedRowName; // 0x30
        struct FString LevelName; // 0x38
        struct TArray<struct FName> ParadropWaveConfigTableRowNames; // 0x48
        struct FName CalledParadropWaveConfigTableRowName; // 0x58
        struct TArray<struct FSGParadropBigGroupInfo> BigGroupInfos; // 0x60

    };

    struct FSGParadropBigGroupInfo //ScriptStruct SGFramework.SGParadropBigGroupInfo
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t BigGroup; // 0x0
        int32_t Priority; // 0x4
        int32_t PriorityReduction; // 0x8
        struct TArray<struct FSGParadropGroupInfo> GroupInfos; // 0x10

    };

    struct FSGParadropGroupInfo //ScriptStruct SGFramework.SGParadropGroupInfo
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t GroupIndex; // 0x0
        int32_t Weight; // 0x4
        int32_t WeightReduction; // 0x8

    };

    struct FSGParadropWaveInfo : FTableRowBase //ScriptStruct SGFramework.SGParadropWaveInfo
    {
    //Children Prop Count (Fields): 20
    public:

        int32_t Probability; // 0x8
        int32_t MinTime; // 0xc
        int32_t MaxTime; // 0x10
        int32_t MinNum; // 0x14
        int32_t MaxNum; // 0x18
        struct TArray<int32_t> ValidGroupIndexs; // 0x20
        int32_t SpecialReplaceProbability; // 0x30
        struct TArray<struct FSGParadropDetailInfo> NormalParadropDetail; // 0x38
        struct TArray<struct FSGParadropDetailInfo> SpecialParadropDetail; // 0x48
        struct FSoftClassProperty PlaneClass; // 0x58
        int32_t Radius; // 0x80
        int32_t Height; // 0x84
        int32_t AdjustmentHeight; // 0x88
        int32_t PlaneSpeed; // 0x8c
        struct TSoftObjectPtr<UAkAudioEvent> PlaneEndAudioEvent; // 0x90
        struct TSoftObjectPtr<UAkAudioEvent> PlaneStartAudioEvent; // 0xb8
        int32_t Pre_PassivityTraceConfigID; // 0xe0
        enum class ESGParadropState PassivityTarceParadropState; // 0xe4
        int32_t PassivityTaraceConfigID; // 0xe8
        struct TMap<enum class ESGParadropState, struct FBroadcastOnGameHUDConfig> BroadcastConfig; // 0xf0

    };

    struct FSGParadropDetailInfo //ScriptStruct SGFramework.SGParadropDetailInfo
    {
    //Children Prop Count (Fields): 5
    public:

        struct FSoftClassProperty ParadropBaseClass; // 0x0
        struct FSoftClassProperty ParadropCarrierClass; // 0x28
        struct FSoftClassProperty ParadropPayloadClass; // 0x50
        float ParadropRequiredFallingChannelRadius; // 0x78
        float ParadropRequiredFlatGroundRadius; // 0x7c

    };

    struct FGlobalEventMessage_ParadropStateChange //ScriptStruct SGFramework.GlobalEventMessage_ParadropStateChange
    {
    //Children Prop Count (Fields): 3
    public:

        class AGameState* Instigator; // 0x0
        class ASGParadropBase* Target; // 0x8
        enum class ESGParadropState ParadropState; // 0x10

    };

    struct FPSCInfo //ScriptStruct SGFramework.PSCInfo
    {
    //Children Prop Count (Fields): 1
    public:

        class UParticleSystem* Template; // 0x0

    };

    struct FAutoAimFrameRecord //ScriptStruct SGFramework.AutoAimFrameRecord
    {
    //Children Prop Count (Fields): 29
    public:

        float Distance; // 0x0
        float FOV; // 0x4
        float BaseStartRangeH; // 0x8
        float Distance2StartRangeScaleH; // 0xc
        float FOV2StartRangeScaleH; // 0x10
        float ModifiedStartRangeH; // 0x14
        float BaseEndRangeH; // 0x18
        float Distance2EndRangeScaleH; // 0x1c
        float FOV2EndRangeScaleH; // 0x20
        float ModifiedEndRangeH; // 0x24
        float BaseSpeedH; // 0x28
        float BaseAngularSpeedH; // 0x2c
        float Distance2SpeedScaleH; // 0x30
        float FOV2SpeedScaleH; // 0x34
        float RecoilTime2SpeedScaleH; // 0x38
        float RectDist2SpeedScaleH; // 0x3c
        float HorizontalRecoil2SpeedScaleH; // 0x40
        float SpeedDampingScale; // 0x44
        float SlideScreenSpeedDamp; // 0x48
        float FireCount2SpeedScale; // 0x4c
        float SelfMovePenaltyScale; // 0x50
        float TargetMovePenaltyScale; // 0x54
        float ModifiedAngularSpeedH; // 0x58
        float ModifiedAngularSpeedV; // 0x5c
        struct FVector TargetVelocity; // 0x60
        float MoveCompensateRatioScale; // 0x6c
        float TargetMovingCompensateRatioScaled; // 0x70
        struct FVector MoveCompensateVelocityScaled; // 0x74
        float MoveCompensateAngularSpeedH; // 0x80

    };

    struct FAutoAimRangeCheckResult //ScriptStruct SGFramework.AutoAimRangeCheckResult
    {
    //Children Prop Count (Fields): 2
    public:

        enum class ETargetNotInRangeReason TargetNotInFollowRangeReason; // 0x0
        float MoveCompensateScale; // 0x4

    };

    struct FAutoAimTargetBoneList //ScriptStruct SGFramework.AutoAimTargetBoneList
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FAutoAimTargetBone> BaseConfigs; // 0x0
        struct TArray<struct FAutoAimTargetBone> FireStateConfigs; // 0x10
        bool bFireStateOverride; // 0x20

    };

    struct FAutoAimTargetBone //ScriptStruct SGFramework.AutoAimTargetBone
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName BoneName; // 0x0
        float RadiusBias; // 0x8
        float HalfLengthBias; // 0xc
        struct FAutoAimFloat StartRange; // 0x10

    };

    struct FAutoAimFloat //ScriptStruct SGFramework.AutoAimFloat
    {
    //Children Prop Count (Fields): 7
    public:

        float BaseValue; // 0x0
        float FireStateValue; // 0x4
        bool bFireStateOverride; // 0x8
        float SlideScreenValue; // 0xc
        bool bSlideScreenOverride; // 0x10
        float AdsValue; // 0x14
        bool bAdsOverride; // 0x18

    };

    struct FAutoAimFloatCurve //ScriptStruct SGFramework.AutoAimFloatCurve
    {
    //Children Prop Count (Fields): 7
    public:

        class UCurveFloat* BaseCurve; // 0x0
        class UCurveFloat* FireCurve; // 0x8
        bool bFireStateOverride; // 0x10
        class UCurveFloat* SlideScreenCurve; // 0x18
        bool bSlideScreenOverride; // 0x20
        class UCurveFloat* AdsCurve; // 0x28
        bool bAdsOverride; // 0x30

    };

    struct FAutoAimContext //ScriptStruct SGFramework.AutoAimContext
    {
    //Children Prop Count (Fields): 8
    public:

        bool bFiring; // 0x0
        bool bADS; // 0x1
        bool bSlidingScreen; // 0x2
        struct FVector2D SlideScreenDirAvg; // 0x4
        struct FVector ViewLocation; // 0xc
        struct FVector ViewDirection; // 0x18
        float CurrentTime; // 0x24
        float CurrentFOV; // 0x28

    };

    struct FBehaviorControlData //ScriptStruct SGFramework.BehaviorControlData
    {
    //Children Prop Count (Fields): 2
    public:

        bool bLockInput; // 0x0
        bool bLockMove; // 0x1

    };

    struct FCombatTargetInfo_HD //ScriptStruct SGFramework.CombatTargetInfo_HD
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName TargetName; // 0x0
        int32_t FireCount; // 0x8
        int32_t HitCount; // 0xc
        float FirstHitTime; // 0x10
        float DeadlyHitTime; // 0x14

    };

    struct FCombatRecord_HD //ScriptStruct SGFramework.CombatRecord_HD
    {
    //Children Prop Count (Fields): 5
    public:

        struct FSGFireRepInfo FireInfo; // 0x0
        float Timestamp; // 0x60
        struct FCombatDamageInfo_HD DamageInfo; // 0x68
        struct FCombatDamageInfo_HD ThroughBodyDamageInfo; // 0xb8
        bool bValidationFailed; // 0x108

    };

    struct FCombatDamageInfo_HD //ScriptStruct SGFramework.CombatDamageInfo_HD
    {
    //Children Prop Count (Fields): 19
    public:

        struct FSGBulletID BulletID; // 0x0
        struct FName TargetName; // 0x10
        bool bTargetDead; // 0x18
        enum class EHitGroupType HitGroup; // 0x19
        enum class EHeadHitSubGroupType HeadHitSubGroup; // 0x1a
        int32_t ArmorLevel; // 0x1c
        float ArmorDurability; // 0x20
        float ArmorDurabilityMax; // 0x24
        bool bPenetrateArmor; // 0x28
        bool bBrokenBullet; // 0x29
        float Damage; // 0x2c
        float HeadEndurance; // 0x30
        float ChestEndurance; // 0x34
        float StomachEndurance; // 0x38
        float LeftArmEndurance; // 0x3c
        float RightArmEndurance; // 0x40
        float LeftLegEndurance; // 0x44
        float RightLegEndurance; // 0x48
        bool bThroughBody; // 0x4c

    };

    struct FSGInputControlStruct //ScriptStruct SGFramework.SGInputControlStruct
    {
    //Children Prop Count (Fields): 3
    public:

        bool BCanMove; // 0x0
        bool bCanTurn; // 0x1
        bool bCanSprint; // 0x2

    };

    struct FCAActionBlockingSettingUnit //ScriptStruct SGFramework.CAActionBlockingSettingUnit
    {
    public:


    };

    struct FPCReportStatisInfo //ScriptStruct SGFramework.PCReportStatisInfo
    {
    //Children Prop Count (Fields): 9
    public:

        int32_t ClientReconnectTimes; // 0x0
        int32_t ClientMaxFps; // 0x4
        int32_t ClientMinFps; // 0x8
        int32_t ClientAverFps; // 0xc
        int32_t ClientPingTimes; // 0x10
        int32_t ClientPingLoseTimes; // 0x14
        int32_t ClientPullTimes; // 0x18
        int32_t ClientPullDiffDistance; // 0x1c
        int32_t ClientPullAvgPing; // 0x20

    };

    struct FStatisDefaultParams //ScriptStruct SGFramework.StatisDefaultParams
    {
    //Children Prop Count (Fields): 6
    public:

        float FrameRateJitterThreshold; // 0x0
        float APMReportPeriod; // 0x4
        float MaxLocDiff; // 0x8
        float Max3PLocDiff; // 0xc
        float FrameRateJitterLagerWaveRate; // 0x10
        float SpawnActorMaxMilliseconds; // 0x14

    };

    struct FSGWatchGameSettleData //ScriptStruct SGFramework.SGWatchGameSettleData
    {
    //Children Prop Count (Fields): 12
    public:

        struct FString MurderName; // 0x0
        uint64_t MurderID; // 0x10
        bool MurderIsAI; // 0x18
        int32_t Result; // 0x1c
        int32_t TeamType; // 0x20
        int32_t GameTime; // 0x24
        int32_t game_mode; // 0x28
        bool bHas_Teammate; // 0x2c
        int32_t KillerTeamtype; // 0x30
        int32_t MurderNationalFlagIso; // 0x34
        int32_t KillerWeaponId; // 0x38
        struct FSGWatchShowData WatchShowData; // 0x40

    };

    struct FSGWatchShowData //ScriptStruct SGFramework.SGWatchShowData
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t KillPMCNum; // 0x0
        int32_t KillEnemyNum; // 0x4
        int32_t TakeOutValue; // 0x8
        enum class ECharacterType MurderCharacterType; // 0xc
        struct FSGPlayerIconInfo MurderIconInfo; // 0x10

    };

    struct FMagFOVRaw //ScriptStruct SGFramework.MagFOVRaw
    {
    //Children Prop Count (Fields): 2
    public:

        enum class ESGMagType MagType; // 0x0
        float FOV; // 0x4

    };

    struct FMagnificationSensitivitySetting //ScriptStruct SGFramework.MagnificationSensitivitySetting
    {
    //Children Prop Count (Fields): 3
    public:

        struct TMap<enum class ESGMagType, float> SensitivityNormal; // 0x0
        struct TMap<enum class ESGMagType, float> SensitivityOnFire; // 0x50
        struct TMap<enum class ESGMagType, float> SensitivityGyro; // 0xa0

    };

    struct FPlayerTags //ScriptStruct SGFramework.PlayerTags
    {
    //Children Prop Count (Fields): 1
    public:

        struct TSet<class USGPlayerTag*> Tags; // 0x0

    };

    struct FGuranteedItemLimitInfo //ScriptStruct SGFramework.GuranteedItemLimitInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t GuranteedTotalNum; // 0x0
        int32_t CurGuranteedProgress; // 0x4

    };

    struct FBrilliantTimeReplayInfo //ScriptStruct SGFramework.BrilliantTimeReplayInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<int32_t> TypeIndexList; // 0x0
        struct TArray<struct FDateTime> StartTimeList; // 0x10
        struct TArray<struct FDateTime> EndTimeList; // 0x20

    };

    struct FOwnedActivityInventoryInfo //ScriptStruct SGFramework.OwnedActivityInventoryInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<class ASGInventory*> Inventories; // 0x0
        struct TArray<int32_t> InventoryHandles; // 0x10
        int32_t LastReportInventoryCount; // 0x20

    };

    struct FActivityInventoryStateChangeInfo //ScriptStruct SGFramework.ActivityInventoryStateChangeInfo
    {
    //Children Prop Count (Fields): 2
    public:

        enum class EActivityInventoryState PreviousState; // 0x0
        enum class EActivityInventoryState CurrentState; // 0x1

    };

    struct FActivityReportConfigArray //ScriptStruct SGFramework.ActivityReportConfigArray
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FActivityReportConfig> ReportInfos; // 0x0

    };

    struct FActivityReportConfig //ScriptStruct SGFramework.ActivityReportConfig
    {
    //Children Prop Count (Fields): 5
    public:

        enum class EReportType ReportType; // 0x0
        enum class EChaseActivityReportCondition ReportCondition; // 0x1
        int32_t OptionalMessageID; // 0x4
        struct FText OptionalText; // 0x8
        int32_t CheckServerTimeIndex; // 0x20

    };

    struct FPlayerInvDetectInfo //ScriptStruct SGFramework.PlayerInvDetectInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FVector> PlayerDetectedInvPosList; // 0x0
        bool IsInvDetecting; // 0x10

    };

    struct FMonitorToggleInputSimple //ScriptStruct SGFramework.MonitorToggleInputSimple
    {
    //Children Prop Count (Fields): 7
    public:

        struct FString ToggleSprint; // 0x0
        struct FString ToggleCrouch; // 0x10
        struct FString ToggleProne; // 0x20
        struct FString ToggleJump; // 0x30
        struct FString ToggleLean; // 0x40
        struct FString ToggleUseItem; // 0x50
        struct FString ToggleAds; // 0x60

    };

    struct FMonitorToggleInputAfterThrow //ScriptStruct SGFramework.MonitorToggleInputAfterThrow
    {
    //Children Prop Count (Fields): 7
    public:

        struct TArray<int32_t> ToggleSprint; // 0x0
        struct TArray<int32_t> ToggleCrouch; // 0x10
        struct TArray<int32_t> ToggleProne; // 0x20
        struct TArray<int32_t> ToggleJump; // 0x30
        struct TArray<int32_t> ToggleLean; // 0x40
        struct TArray<int32_t> ToggleUseItem; // 0x50
        struct TArray<int32_t> ToggleAds; // 0x60

    };

    struct FHitStatis //ScriptStruct SGFramework.HitStatis
    {
    //Children Prop Count (Fields): 4
    public:

        float HitTime; // 0x0
        int32_t HitCount; // 0x4
        bool IsAI; // 0x8
        int64_t TakerId; // 0x10

    };

    struct FKillStatis //ScriptStruct SGFramework.KillStatis
    {
    //Children Prop Count (Fields): 2
    public:

        float KillTime; // 0x0
        bool IsAI; // 0x4

    };

    struct FDBNOStatis //ScriptStruct SGFramework.DBNOStatis
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t DBNOCount; // 0x0
        int32_t RescuedCount; // 0x4
        int32_t RescueCount; // 0x8
        struct TArray<uint64_t> RescuerGIDList; // 0x10

    };

    struct FSGBusinessmanInfo //ScriptStruct SGFramework.SGBusinessmanInfo
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t BusinessmanID; // 0x0
        int32_t Reputation; // 0x4
        int32_t Level; // 0x8
        bool bisUnlock; // 0xc
        int32_t StageId; // 0x10

    };

    struct FSGZonePlayerInfo //ScriptStruct SGFramework.SGZonePlayerInfo
    {
    //Children Prop Count (Fields): 39
    public:

        uint64_t PlayerId; // 0x0
        uint64_t roomid; // 0x8
        uint32_t TeamIndex; // 0x10
        uint32_t TeamPos; // 0x14
        struct FString PlayerName; // 0x18
        uint32_t Level; // 0x28
        uint32_t ZoneId; // 0x2c
        bool HasEscapeSaveEquip; // 0x30
        struct FSGPlayerEquipInfo PlayerEquipInfo; // 0x38
        struct FZoneSettleSiteInfo SettleSiteInfo; // 0x78
        uint32_t HeadEndurance; // 0xa0
        uint32_t ChestEndurance; // 0xa4
        uint32_t StomchEndurance; // 0xa8
        uint32_t LeftArmEndurance; // 0xac
        uint32_t RightArmEndurance; // 0xb0
        uint32_t LeftLegEndurance; // 0xb4
        uint32_t RightLegEndurance; // 0xb8
        uint32_t Food; // 0xbc
        uint32_t Water; // 0xc0
        struct TArray<class USGPlayerDebuffInfoBase*> BuffList; // 0xc8
        uint64_t CliVersion; // 0xd8
        uint32_t ranked_Level; // 0xe0
        uint32_t ranked_Score; // 0xe4
        uint32_t ranking; // 0xe8
        uint32_t pranking; // 0xec
        uint32_t ranked_rd; // 0xf0
        uint32_t Rank; // 0xf4
        uint32_t PrivilegeLevel; // 0xf8
        uint32_t PlatPrivilegeType; // 0xfc
        struct TArray<struct FSGWishListItemInfo> PlayerWishList; // 0x100
        struct TArray<int32_t> NewInspectedItemIDs; // 0x110
        int32_t DogTagType; // 0x120
        int32_t HeadBoxID; // 0x124
        uint32_t title_id; // 0x128
        uint32_t title_num; // 0x12c
        uint32_t title_rank; // 0x130
        uint32_t NationalFlagIso; // 0x134
        uint32_t EnterDsZone; // 0x138
        uint32_t IdealDsZone; // 0x13c

    };

    struct FSGWishListItemInfo //ScriptStruct SGFramework.SGWishListItemInfo
    {
    //Children Prop Count (Fields): 6
    public:

        int32_t ItemID; // 0x0
        int32_t HaveNum; // 0x4
        int32_t RequireNum; // 0x8
        int32_t CurrentOwnedNum; // 0xc
        int32_t SellItemID; // 0x10
        int32_t LastReduceFromFulfillFrame; // 0x14

    };

    struct FZoneSettleSiteInfo //ScriptStruct SGFramework.ZoneSettleSiteInfo
    {
    //Children Prop Count (Fields): 6
    public:

        uint64_t svr_id; // 0x0
        uint32_t cmd_begin; // 0x8
        uint32_t cmd_over; // 0xc
        uint32_t business_id; // 0x10
        uint64_t GID; // 0x18
        uint32_t ZoneId; // 0x20

    };

    struct FSGPlayerEquipInfo //ScriptStruct SGFramework.SGPlayerEquipInfo
    {
    //Children Prop Count (Fields): 5
    public:

        struct TArray<class USGPlayerItemInfoBase*> EquipPlayeritemList; // 0x0
        enum class ECharacterSex AvatarGender; // 0x10
        struct TArray<struct FSGAvatarInfo> AvatarItems; // 0x18
        uint32_t bBodyStatus; // 0x28
        struct TArray<struct FSGBadgeInfo> BadgeItems; // 0x30

    };

    struct FHighOutput_PlayerInfo //ScriptStruct SGFramework.HighOutput_PlayerInfo
    {
    //Children Prop Count (Fields): 10
    public:

        struct TArray<class APawn*> TeamMate; // 0x0
        struct TArray<float> DistanceToOthers; // 0x10
        struct FVector StartLoc; // 0x20
        bool HasWeapon; // 0x2c
        enum class ENPCCourierOrderState ScripState; // 0x2d
        int32_t DistanceState; // 0x30
        struct TMap<enum class ENPCCourierCourierType, enum class ENPCCourierOrderState> CourierMap; // 0x38
        float LootScore; // 0x88
        struct TArray<int32_t> PathIDsIn5m; // 0x90
        struct TArray<int32_t> PathIDsIn10m; // 0xa0

    };

    struct FTeamPlayerOrderInfo //ScriptStruct SGFramework.TeamPlayerOrderInfo
    {
    //Children Prop Count (Fields): 3
    public:

        class APlayerState* PlayerState; // 0x0
        struct FString Name; // 0x8
        char Order; // 0x18

    };

    struct FDamageBlackborad //ScriptStruct SGFramework.DamageBlackborad
    {
    //Children Prop Count (Fields): 16
    public:

        class AActor* DamageCauser; // 0x0
        enum class EHitGroupType HitGroup; // 0x8
        enum class EHeadHitSubGroupType HitHeadPart; // 0x9
        struct FVector Momentum; // 0xc
        struct FVector HitLocation; // 0x18
        int64_t FireCounter; // 0x28
        class AActor* HitArmor; // 0x30
        struct FName HitBoneName; // 0x38
        bool bPenetrateArmor; // 0x40
        float PenetrateArmorProbability; // 0x44
        float Damage; // 0x48
        int64_t BulletID; // 0x50
        int32_t DamageCauserType; // 0x58
        int8_t bHitFace; // 0x5c
        struct FString BullentName; // 0x68
        uint32_t BulletItemID; // 0x78

    };

    struct FRoomSettleSiteInfo //ScriptStruct SGFramework.RoomSettleSiteInfo
    {
    //Children Prop Count (Fields): 8
    public:

        uint64_t svr_id; // 0x0
        uint32_t cmd_begin; // 0x8
        uint32_t cmd_over; // 0xc
        uint32_t room_id; // 0x10
        uint32_t room_type; // 0x14
        uint32_t team_id; // 0x18
        uint64_t GID; // 0x20
        uint32_t ZoneId; // 0x28

    };

    struct FSGPlayerRoomSettleSiteInfo //ScriptStruct SGFramework.SGPlayerRoomSettleSiteInfo
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t room_id; // 0x0
        uint64_t room_svr_id; // 0x8
        uint32_t room_type; // 0x10
        uint32_t room_bus_type; // 0x14
        uint32_t cmd_begin; // 0x18
        uint32_t cmd_over; // 0x1c

    };

    struct FSGPlayerZoneSettleSiteInfo //ScriptStruct SGFramework.SGPlayerZoneSettleSiteInfo
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t business_id; // 0x0
        uint64_t svr_id; // 0x8
        uint32_t cmd_begin; // 0x10
        uint32_t cmd_over; // 0x14

    };

    struct FSGPlayerSeparatedItemInfos //ScriptStruct SGFramework.SGPlayerSeparatedItemInfos
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<class USGPlayerItemInfoBase*> SelfItemList; // 0x0
        struct TArray<struct FSGBringOutTeamItemInfo> TeammateItemList; // 0x10
        struct TArray<class USGPlayerItemInfoBase*> SelfSeparatedItemList; // 0x20

    };

    struct FSGBringOutTeamItemInfo //ScriptStruct SGFramework.SGBringOutTeamItemInfo
    {
    //Children Prop Count (Fields): 2
    public:

        uint64_t TeammateGID; // 0x0
        struct TArray<class USGPlayerItemInfoBase*> EquipPlayeritemList; // 0x8

    };

    struct FCharacterDeathVictimStatics //ScriptStruct SGFramework.CharacterDeathVictimStatics
    {
    //Children Prop Count (Fields): 8
    public:

        int32_t VictimGID; // 0x0
        struct FString VictimName; // 0x8
        struct TArray<struct FBulletHolesInfo> BulletHoles; // 0x18
        struct FCharacterDeathStatics DeathStatics; // 0x28
        struct TArray<struct FCharacterHealthStaticsWhenDead> AllHealthStaticsWhenDead; // 0x190
        struct FSGPlayerIconInfo VictimIconInfo; // 0x1a0
        struct FSGPlayerShowInfo PlayerShowInfo; // 0x1e8
        struct TArray<struct FSGClientShowItemInfo> MurderWeapon; // 0x228

    };

    struct FSGVaultRepInfo //ScriptStruct SGFramework.SGVaultRepInfo
    {
    //Children Prop Count (Fields): 6
    public:

        struct FSGVaultType TargetVaultType; // 0x0
        enum class EClimbVaultChoice TargetVaultChoice; // 0x2
        struct FVector TargetWallFaceDir; // 0x4
        struct FVector TargetVaultStartPoint; // 0x10
        struct FVector TargetVaultApexPoint; // 0x1c
        struct FVector TargetVaultEndPoint; // 0x28

    };

    struct FSGVaultType //ScriptStruct SGFramework.SGVaultType
    {
    //Children Prop Count (Fields): 2
    public:

        enum class EObstacleHeightType VaultHeightType; // 0x0
        enum class EVaultAnimType VaultAnimType; // 0x1

    };

    struct FSGPredictCamDistNode //ScriptStruct SGFramework.SGPredictCamDistNode
    {
    //Children Prop Count (Fields): 2
    public:

        float PredictCameraDistance; // 0x0
        float PredictTime; // 0x4

    };

    struct FSGVaultInfo //ScriptStruct SGFramework.SGVaultInfo
    {
    //Children Prop Count (Fields): 9
    public:

        struct FSGVaultType VaultType; // 0x0
        class UAnimSequence* VaultAnimation; // 0x8
        float VaultAnimationPlayRate; // 0x10
        float AnimLengthToApex; // 0x14
        float AnimLengthToActualLand; // 0x18
        float AnimLengthToFalling; // 0x1c
        float HoriMoveDistancePreApex; // 0x20
        float HoriMoveDistancePostApex; // 0x24
        float VerticalMoveDistanceApex; // 0x28

    };

    struct FCharacterBuffInfo //ScriptStruct SGFramework.CharacterBuffInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t EnduranceType; // 0x0
        struct TArray<int32_t> BuffList; // 0x8

    };

    struct FCharacterDeathMurderStatics //ScriptStruct SGFramework.CharacterDeathMurderStatics
    {
    //Children Prop Count (Fields): 20
    public:

        class ASGPlayerState* MurderPS; // 0x0
        int32_t MurderTeamType; // 0x8
        int32_t MurderTeamIndex; // 0xc
        struct FString MurderName; // 0x10
        struct FString MurderInstantName; // 0x20
        int64_t MurderID; // 0x30
        int32_t MurderLevel; // 0x38
        int32_t MurderRanking; // 0x3c
        int32_t MurderPRanking; // 0x40
        int32_t MurderRanked_Rd; // 0x44
        int32_t MurderRankLevel; // 0x48
        int32_t MurderRankScore; // 0x4c
        int32_t MurderRank; // 0x50
        int64_t MurderWeaponId; // 0x58
        struct TArray<struct FSGClientShowItemInfo> MurderWeapon; // 0x60
        bool MurderIsAI; // 0x70
        int32_t MurderNetGUIDForReplay; // 0x74
        struct FVector MurderPos; // 0x78
        uint32_t MurderNationalFlagIso; // 0x84
        struct FSGPlayerIconInfo MurderIconInfo; // 0x88

    };

    struct FSGCharacterRescuedByTeammateInfo //ScriptStruct SGFramework.SGCharacterRescuedByTeammateInfo
    {
    //Children Prop Count (Fields): 2
    public:

        double StartRescueTime; // 0x0
        class ASGCharacter* KindlyTeammate; // 0x8

    };

    struct FSGCharacterDBNOInfo //ScriptStruct SGFramework.SGCharacterDBNOInfo
    {
    //Children Prop Count (Fields): 1
    public:

        float InitialDBNOHealth; // 0x0

    };

    struct FStunGrenadeEffectInfo //ScriptStruct SGFramework.StunGrenadeEffectInfo
    {
    //Children Prop Count (Fields): 4
    public:

        char bHasDeafEffect; // 0x0
        float DeafDuration; // 0x4
        char bHasFlashedEffect; // 0x8
        float FlashedDuration; // 0xc

    };

    struct FWeaponMergeMeshShareInfo //ScriptStruct SGFramework.WeaponMergeMeshShareInfo
    {
    //Children Prop Count (Fields): 7
    public:

        struct TArray<struct FString> ModularMeshList; // 0x0
        struct TArray<struct FString> SpecialMeshNameList; // 0x10
        class UStaticMesh* MergedWeaponMesh; // 0x20
        struct FString DebugInfo; // 0x28
        int32_t SharedCount; // 0x38
        bool bValid; // 0x3c
        char MergeStatus; // 0x3d

    };

    struct FAvatarMergeMeshShareInfo //ScriptStruct SGFramework.AvatarMergeMeshShareInfo
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<struct FString> ModularMeshList; // 0x0
        struct FLinearColor SkinType; // 0x10
        bool b1PUse; // 0x20
        class USkeletalMesh* MergedMesh; // 0x28

    };

    struct FHitPartInfo //ScriptStruct SGFramework.HitPartInfo
    {
    //Children Prop Count (Fields): 3
    public:

        class UPhysicalMaterial* HitMaterial; // 0x0
        float DamageScale; // 0x8
        enum class EHitGroupType HitGroup; // 0xc

    };

    struct FBloodDecalInfo //ScriptStruct SGFramework.BloodDecalInfo
    {
    //Children Prop Count (Fields): 3
    public:

        class UMaterialInterface* Material; // 0x0
        struct FVector2D BaseScale; // 0x8
        struct FVector2D ScaleMultRange; // 0x10

    };

    struct FInteractionTriggerPosInfo //ScriptStruct SGFramework.InteractionTriggerPosInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector StartPos; // 0x0
        struct FVector EndPos; // 0xc
        struct FName LineTraceHitBoneName; // 0x24

    };

    struct FSGFireShot //ScriptStruct SGFramework.SGFireShot
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector_NetQuantize ShotLocation; // 0x0
        struct FVector_NetQuantizeNormal ShotDirection; // 0xc

    };

    struct FBulletTraceParams //ScriptStruct SGFramework.BulletTraceParams
    {
    //Children Prop Count (Fields): 2
    public:

        float BaseTraceRadius; // 0x0
        class UCurveFloat* TraceRadiusScaleByDistanceCurve; // 0x8

    };

    struct FCachedDamageInfo //ScriptStruct SGFramework.CachedDamageInfo
    {
    //Children Prop Count (Fields): 3
    public:

        class AActor* DamageTaker; // 0x0
        float HitDistance; // 0x8
        struct FVector ProjileLocation; // 0xc

    };

    struct FFlashDisConf //ScriptStruct SGFramework.FlashDisConf
    {
    //Children Prop Count (Fields): 6
    public:

        float MinDistance; // 0x0
        float MaxDistance; // 0x4
        float DurationTime; // 0x8
        float FadeoutTime; // 0xc
        float FlashLightCircleFadeoutTime; // 0x10
        float DistortionFadeoutTime; // 0x14

    };

    struct FirePositionPair //ScriptStruct SGFramework.irePositionPair
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector position; // 0x0
        struct FVector ImpactNormal; // 0xc

    };

    struct FBeamSegmentData //ScriptStruct SGFramework.BeamSegmentData
    {
    public:


    };

    struct FEffectDistanceConfArray //ScriptStruct SGFramework.EffectDistanceConfArray
    {
    //Children Prop Count (Fields): 4
    public:

        float MinDistance; // 0x0
        float MaxDistance; // 0x4
        class UMaterialInstance* StunEffectIns; // 0x8
        float DurationTime; // 0x10

    };

    struct FSGSingleChatContent //ScriptStruct SGFramework.SGSingleChatContent
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Name; // 0x0
        struct FString Content; // 0x10

    };

    struct FRadialDamageEvent : FDamageEvent //ScriptStruct Engine.RadialDamageEvent
    {
    //Children Prop Count (Fields): 3
    public:

        struct FRadialDamageParams Params; // 0x10
        struct FVector Origin; // 0x24
        struct TArray<struct FHitResult> ComponentHits; // 0x30

    };

    struct FRadialDamageParams //ScriptStruct Engine.RadialDamageParams
    {
    //Children Prop Count (Fields): 5
    public:

        float BaseDamage; // 0x0
        float MinimumDamage; // 0x4
        float InnerRadius; // 0x8
        float OuterRadius; // 0xc
        float DamageFalloff; // 0x10

    };

    struct FSGRadialDamageEvent : FRadialDamageEvent //ScriptStruct SGFramework.SGRadialDamageEvent
    {
    //Children Prop Count (Fields): 4
    public:

        float BaseMomentumMag; // 0x40
        bool bScaleMomentum; // 0x44
        uint32_t SceneItemID; // 0x48
        float ProjectilePenetrationFactor; // 0x4c

    };

    struct FSGLocalFileKillCamInfo //ScriptStruct SGFramework.SGLocalFileKillCamInfo
    {
    //Children Prop Count (Fields): 12
    public:

        float DeathDemoTime; // 0x0
        int64_t VictimGID; // 0x8
        struct FString VictimName; // 0x10
        int64_t KillerGID; // 0x20
        struct FString KillerName; // 0x28
        int32_t VictimNetGUID; // 0x38
        struct FVector VictimLocation; // 0x3c
        int32_t KillerNetGUID; // 0x48
        struct FVector KillerLocation; // 0x4c
        float ReplayDemoStartTime; // 0x58
        float ReplayDemoEndTime; // 0x5c
        struct FString ReplayFileName; // 0x60

    };

    struct FSGKillCamInfo //ScriptStruct SGFramework.SGKillCamInfo
    {
    //Children Prop Count (Fields): 4
    public:

        float RecordStartTime; // 0x0
        float TimeOfDeath; // 0x4
        float PlaybackStart; // 0x8
        float PlaybackLength; // 0xc

    };

    struct FSGReplayInfo //ScriptStruct SGFramework.SGReplayInfo
    {
    //Children Prop Count (Fields): 7
    public:

        struct FName ReplayType; // 0x0
        float StartTime; // 0x8
        struct FString OnFinish; // 0x10
        class ASGReplayController* ObserverControllerClass; // 0x20
        int32_t ObserverPlayerControllerId; // 0x28
        struct FString ReplayFileName; // 0x30
        bool bIsInBattleDownload; // 0x40

    };

    struct FSkeletalMeshMergeParams //ScriptStruct SGFramework.SkeletalMeshMergeParams
    {
    //Children Prop Count (Fields): 15
    public:

        struct TArray<struct FSkelMeshMergeSectionMapping_BP> MeshSectionMappings; // 0x0
        struct TArray<struct FSkelMeshMergeUVTransformMappingTK> UVTransformsPerMesh; // 0x10
        struct TArray<class USkeletalMesh*> MeshesToMerge; // 0x20
        int32_t StripTopLODS; // 0x30
        char bNeedsCpuAccess; // 0x34
        char bSkeletonBefore; // 0x34
        class USkeleton* Skeleton; // 0x38
        class USkeletalMesh* ReferenceSkeletalMesh; // 0x40
        struct FName MergedMeshName; // 0x48
        bool bNeverStream; // 0x50
        class UMaterialInterface* CommonMaterial; // 0x58
        struct FLinearColor SkinType; // 0x60
        bool b1PUse; // 0x70
        bool bMergeMorphTarget; // 0x71
        bool bUseSingleUVMultiSectionUVTransform; // 0x72

    };

    struct FSkelMeshMergeUVTransformMappingTK //ScriptStruct SGFramework.SkelMeshMergeUVTransformMappingTK
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FSkelMeshMergeUVTransform> UVTransformsPerMesh; // 0x0

    };

    struct FSkelMeshMergeUVTransform //ScriptStruct SGFramework.SkelMeshMergeUVTransform
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FTransform> UVTransforms; // 0x0

    };

    struct FSkelMeshMergeSectionMapping_BP //ScriptStruct SGFramework.SkelMeshMergeSectionMapping_BP
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<int32_t> SectionIDs; // 0x0

    };

    struct FSmoothDamper //ScriptStruct SGFramework.SmoothDamper
    {
    //Children Prop Count (Fields): 1
    public:

        float SmoothTime; // 0x0

    };

    struct FValueTracker //ScriptStruct SGFramework.ValueTracker
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t TrackSize; // 0x0

    };

    struct FSinRandom //ScriptStruct SGFramework.SinRandom
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector2D AmplitudeRange; // 0x0
        float Period; // 0x8

    };

    struct FValueNoise //ScriptStruct SGFramework.ValueNoise
    {
    //Children Prop Count (Fields): 2
    public:

        float Amplitude; // 0x0
        float FrequencyScale; // 0x4

    };

    struct FSGTextureMerge //ScriptStruct SGFramework.SGTextureMerge
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<class UTexture2D*> InputTextures; // 0x0
        class UTexture2D* PackedTexture; // 0x10

    };

    struct FSGTextureMergeNode //ScriptStruct SGFramework.SGTextureMergeNode
    {
    public:


    };

    struct FSGThrowableProjectileInfo //ScriptStruct SGFramework.SGThrowableProjectileInfo
    {
    //Children Prop Count (Fields): 13
    public:

        class ASGWeapon* OwnerWeapon; // 0x0
        struct FVector InitSpeed; // 0x8
        float MaxSpeed; // 0x14
        float LifeSpan; // 0x18
        float PlayEffectTime; // 0x1c
        bool bFiredByOvertime; // 0x20
        bool bGoThrowBody; // 0x21
        int32_t Count; // 0x24
        bool bHasPlayedEffect; // 0x28
        class ACharacter* SpawnCharacter; // 0x30
        struct FHitResult ImpactResult; // 0x38
        float ZWhenGenrated; // 0xd0
        float ServerSpawnTime; // 0xd4

    };

    struct FImpactResultWrapper //ScriptStruct SGFramework.ImpactResultWrapper
    {
    //Children Prop Count (Fields): 3
    public:

        struct FHitResult HitResult; // 0x0
        bool bFirstCreate; // 0x98
        bool bEffectLifeExpired; // 0x99

    };

    struct FTripMineReplaceInfo //ScriptStruct SGFramework.TripMineReplaceInfo
    {
    //Children Prop Count (Fields): 2
    public:

        class ASGTripMineBase* ReplacedTripMineClass; // 0x0
        float Probability; // 0x8

    };

    struct FTripMineStateInfo //ScriptStruct SGFramework.TripMineStateInfo
    {
    //Children Prop Count (Fields): 7
    public:

        bool bIsReadyForExplode; // 0x0
        bool bIsLootead; // 0x1
        bool bNeedReplcaceInit; // 0x2
        struct FVector WorldPos; // 0x4
        struct FRotator WorldRot; // 0x10
        struct FVector Pillar1Pos; // 0x1c
        struct FVector Pillar2Pos; // 0x28

    };

    struct FSGUAMAnimProcess //ScriptStruct SGFramework.SGUAMAnimProcess
    {
    //Children Prop Count (Fields): 2
    public:

        struct FUAMAnimVal Values; // 0x0
        struct TArray<struct FSGUAMAnimProcessInternal> Processors; // 0x30

    };

    struct FSGUAMAnimProcessInternal //ScriptStruct SGFramework.SGUAMAnimProcessInternal
    {
    //Children Prop Count (Fields): 3
    public:

        struct FUAMVal Val_1; // 0x0
        float Intensity; // 0xc
        struct FSGUAMAnimSpring Spring_1; // 0x10

    };

    struct FSGUAMAnimSpring //ScriptStruct SGFramework.SGUAMAnimSpring
    {
    //Children Prop Count (Fields): 22
    public:

        struct FVector Zero; // 0x8
        float InputIntensity; // 0x14
        float ReturnSpeed; // 0x18
        float Damping; // 0x1c
        struct FVector Min; // 0x20
        struct FVector Max; // 0x2c
        float AccelerationMax; // 0x38
        float LimitZValue; // 0x3c
        class UCurveFloat* CurveLimitX; // 0x40
        class UCurveFloat* CurveLimitY; // 0x48
        class UCurveFloat* CurveLimitZ; // 0x50
        float CurveTime; // 0x58
        bool Refrash; // 0x5c
        float Softness; // 0x60
        enum class SpringVecComponent X; // 0x64
        enum class SpringVecComponent Y; // 0x65
        enum class SpringVecComponent Z; // 0x66
        struct FVector Velocity; // 0x68
        struct FVector Current; // 0x74
        struct FVector ForceAccumulator; // 0x80
        struct FVector ForceAccumulatorLimitless; // 0x8c
        bool bUpdate; // 0x98

    };

    struct FSGUAMRecoilSpring : FSGUAMAnimSpring //ScriptStruct SGFramework.SGUAMRecoilSpring
    {
    //Children Prop Count (Fields): 1
    public:

        class UCurveFloat* ReturnSpeedCurve; // 0xa0

    };

    struct FCachedPose //ScriptStruct SGFramework.CachedPose
    {
    public:


    };

    struct FGMCommandMap //ScriptStruct SGFramework.GMCommandMap
    {
    //Children Prop Count (Fields): 3
    public:

        struct TMap<struct FString, struct FString> CommandMap; // 0x0
        struct TMap<struct FString, struct FString> TooltipMap; // 0x50
        struct TMap<struct FString, struct FString> OptionalParamsMap; // 0xa0

    };

    struct FWheelDustTypeByPhysicsMaterial //ScriptStruct SGFramework.WheelDustTypeByPhysicsMaterial
    {
    //Children Prop Count (Fields): 4
    public:

        enum class EPhysicalSurface PhysMaterial; // 0x0
        class UParticleSystem* WheelEffect; // 0x8
        float ActiveThresholdSpeed; // 0x10
        struct FName MaterialName; // 0x14

    };

    struct FSGVehicleParams : FTableRowBase //ScriptStruct SGFramework.SGVehicleParams
    {
    //Children Prop Count (Fields): 23
    public:

        struct FString VehicleName; // 0x8
        bool bUseBPDefault; // 0x18
        float MaxHealth; // 0x1c
        float ExplodeDamage; // 0x20
        float ExplodeDamageRadius; // 0x24
        float HitPawnDamageVelocityThreshold; // 0x28
        float HitWallDamageVelocityThreshold; // 0x2c
        struct FRuntimeFloatCurve HitWallPassengerHurtDamageCurve; // 0x30
        struct FRuntimeFloatCurve HitWallVehicleHurtDamageCurve; // 0xb8
        float HitWallDamageMaxPitch; // 0x140
        struct FRuntimeFloatCurve OverlapCarForceCurve; // 0x148
        struct FRuntimeFloatCurve OverlapCarDamageCurve; // 0x1d0
        struct FRuntimeFloatCurve JumpCarDamageCurve; // 0x258
        float FuelAmountMax; // 0x2e0
        float FuelConsumeNormalPerMinute; // 0x2e4
        float FuelConsumeAccelPerMinute; // 0x2e8
        float RandFuelRateMin; // 0x2ec
        float RandFuelRateMax; // 0x2f0
        float Broken1WheelSpeedFactor; // 0x2f4
        float Broken2WheelSpeedFactor; // 0x2f8
        float Broken3WheelSpeedFactor; // 0x2fc
        float Broken4WheelSpeedFactor; // 0x300
        float FinalRatio; // 0x304

    };

    struct FVehicleHitRepInfo //ScriptStruct SGFramework.VehicleHitRepInfo
    {
    //Children Prop Count (Fields): 4
    public:

        bool bHitPlayer; // 0x0
        bool bTurnOver; // 0x1
        bool ToggleRep; // 0x2
        class AActor* OtherActor; // 0x8

    };

    struct FVehicleHitSoundConfig //ScriptStruct SGFramework.VehicleHitSoundConfig
    {
    //Children Prop Count (Fields): 2
    public:

        class UAkAudioEvent* GrassSoundAk; // 0x0
        class UAkAudioEvent* ConcreteSoundAk; // 0x8

    };

    struct FVehicleSpawnWeightData //ScriptStruct SGFramework.VehicleSpawnWeightData
    {
    //Children Prop Count (Fields): 2
    public:

        enum class ESGVehicleType VehicleType; // 0x0
        float Weight; // 0x4

    };

    struct FSGAdapterInfo //ScriptStruct SGFramework.SGAdapterInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName AdapterItemID; // 0x0
        struct FSGWeaponAdapterInfo AdapterType; // 0x8
        class USGWeaponAdapterItem* AdapterClass; // 0x28

    };

    struct FSGWeaponAdapterInfo //ScriptStruct SGFramework.SGWeaponAdapterInfo
    {
    //Children Prop Count (Fields): 4
    public:

        enum class EAdapterType AdapterSocketType; // 0x0
        enum class ESGWeapAdapterItemType AdapterSubType; // 0x1
        struct FString AdapterString; // 0x8
        bool bDisplaySocket; // 0x18

    };

    struct FWeaponAdapterAttchingInfo //ScriptStruct SGFramework.WeaponAdapterAttchingInfo
    {
    //Children Prop Count (Fields): 3
    public:

        class USGWeaponAdapterItem* AdapterClass; // 0x0
        float AttachingScale_1P; // 0x8
        float AttachingScale_3P; // 0xc

    };

    struct FSGWeaponInventoryTagToGripType //ScriptStruct SGFramework.SGWeaponInventoryTagToGripType
    {
    //Children Prop Count (Fields): 2
    public:

        struct FGameplayTag InventoryTag; // 0x0
        enum class ESGWeaponForegripType GripType; // 0x8

    };

    struct FSGWeaponSwayADSInfo //ScriptStruct SGFramework.SGWeaponSwayADSInfo
    {
    //Children Prop Count (Fields): 13
    public:

        float SmoothAngularVelocityInterpSpeed; // 0x0
        struct FVector2D AngularVelocityNormalizedRange_Yaw; // 0x4
        struct FVector2D AngularVelocityNormalizedRange_Pitch; // 0xc
        struct FVector2D ADSWeaponSwayClamp_Yaw; // 0x14
        struct FVector2D ADSWeaponSwayClamp_Pitch; // 0x1c
        float WeaponSwayDelay_Yaw; // 0x24
        float WeaponSwayDelay_Pitch; // 0x28
        float WeaponSwayOffsetScaler_ADS; // 0x2c
        class UCurveFloat* WeaponSwayADSScaler_Yaw; // 0x30
        class UCurveFloat* WeaponSwayADSScaler_Pitch; // 0x38
        class UCurveFloat* WeaponSwayADSScaler_FOV; // 0x40
        class UCurveFloat* WeaponSwayClampCurve_Yaw; // 0x48
        class UCurveFloat* WeaponSwayClampCurve_Pitch; // 0x50

    };

    struct FSGWeaponSwaySpringInfo //ScriptStruct SGFramework.SGWeaponSwaySpringInfo
    {
    //Children Prop Count (Fields): 7
    public:

        float SpringStiffness; // 0x0
        float SpringDamping; // 0x4
        float SpringClamp; // 0x8
        float SpringAlpha; // 0xc
        float SpringInterpSpeed; // 0x10
        struct FVector SpringPivotOffset; // 0x14
        float AngularVelocityToMaxWeaponShake; // 0x20

    };

    struct FSGWeaponRepStopAnimInfo //ScriptStruct SGFramework.SGWeaponRepStopAnimInfo
    {
    //Children Prop Count (Fields): 4
    public:

        struct FSGMontagePlayParams CharacterMontageParams; // 0x0
        struct FSGMontagePlayParams WeaponMontageParams; // 0x48
        float Timestamp; // 0x90
        float BlendOutTime; // 0x94

    };

    struct FSGWeaponRepAnimInfo //ScriptStruct SGFramework.SGWeaponRepAnimInfo
    {
    //Children Prop Count (Fields): 7
    public:

        struct FSGMontagePlayParams CharacterMontageParams; // 0x0
        struct FSGMontagePlayParams WeaponMontageParams; // 0x48
        float Timestamp; // 0x90
        float BlendOutTime; // 0x94
        char PlayBit; // 0x98
        char bJumpSection; // 0x98
        struct FSGMontagePlayConfig PlayConfig; // 0x9c

    };

    struct FSGWeaponLocalAnimInfo //ScriptStruct SGFramework.SGWeaponLocalAnimInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FSGMontagePlayParams CharacterMontageParams; // 0x0
        struct FSGMontagePlayParams WeaponMontageParams; // 0x48
        bool PlayBit; // 0x90

    };

    struct FSGWeaponAnimInstanceProxy : FAnimInstanceProxy //ScriptStruct SGFramework.SGWeaponAnimInstanceProxy
    {
    //Children Prop Count (Fields): 19
    public:

        class USGWeaponAnimInstance* AnimInstance; // 0x860
        bool bAutoFireMode; // 0x868
        bool bBurstFireMode; // 0x869
        bool bIsHammerReady; // 0x86a
        float HammerStateBlendWeight; // 0x86c
        float HoldOpenAlpha; // 0x870
        float LostCatchAlpha; // 0x874
        float UnloadedAlpha; // 0x878
        float ChamberingAlpha; // 0x87c
        bool bIs1PWeapon; // 0x880
        bool bIsOwnerCharacterProne; // 0x881
        float Enalbe_Weapon_L_Hand_Marker; // 0x884
        struct FVector Translation_Hand_L; // 0x888
        struct FRotator Rotation_Hand_L; // 0x894
        bool bCharacterOwnerIs1P; // 0x8a0
        struct FVector Translation_Magazine; // 0x8a4
        struct FRotator Rotation_Magazine; // 0x8b0
        bool Enable_Magazine_Follows_Hand_L; // 0x8bc
        struct FSGWeaponAnimReducer_Bore AnimReducer_Bore; // 0x8c0

    };

    struct FSGWeaponAnimReducer_Bore //ScriptStruct SGFramework.SGWeaponAnimReducer_Bore
    {
    //Children Prop Count (Fields): 1
    public:

        float BoreOpenRatio; // 0x8

    };

    struct FShellEffectInfo_HD //ScriptStruct SGFramework.ShellEffectInfo_HD
    {
    //Children Prop Count (Fields): 5
    public:

        struct FVector InitVelocityMin; // 0x0
        struct FVector InitVelocityMax; // 0xc
        struct FVector InitAngularVelocityMin; // 0x18
        struct FVector InitAngularVelocityMax; // 0x24
        float LifeSpan; // 0x30

    };

    struct FShellParticleInfo //ScriptStruct SGFramework.ShellParticleInfo
    {
    //Children Prop Count (Fields): 16
    public:

        struct FVector ShellParticleAccMin; // 0x0
        struct FVector ShellParticleAccMax; // 0xc
        struct FVector ShellParticleVelocityMin; // 0x18
        struct FVector ShellParticleVelocityMax; // 0x24
        struct FVector ShellParticleRateMin; // 0x30
        struct FVector ShellParticleRateMax; // 0x3c
        struct FVector ShellParticleLocationMin; // 0x48
        struct FVector ShellParticleLocationMax; // 0x54
        struct FVector ShellParticleRotaMin; // 0x60
        struct FVector ShellParticleRotaMax; // 0x6c
        struct FVector ShellParticleSizeMin; // 0x78
        struct FVector ShellParticleSizeMax; // 0x84
        float ShellParticleLifeTimeMin; // 0x90
        float ShellParticleLifeTimeMax; // 0x94
        float ShellParticleDragMin; // 0x98
        float ShellParticleDragMax; // 0x9c

    };

    struct FCachePooledEffectActorQueueInfo //ScriptStruct SGFramework.CachePooledEffectActorQueueInfo
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class ASGPooledFireEffect*> AlivePooledEffectActorsQueue; // 0x0

    };

    struct FSGBulletTranInfo //ScriptStruct SGFramework.SGBulletTranInfo
    {
    public:


    };

    struct FSGWeaponMeshRes //ScriptStruct SGFramework.SGWeaponMeshRes
    {
    //Children Prop Count (Fields): 8
    public:

        struct FName MeshAttachSocket; // 0x0
        struct FName MeshAttachSocket_Left; // 0x8
        struct FName MeshAttachSocket_Hang; // 0x10
        struct FSoftObjectPath MeshResouceRef; // 0x18
        class UAnimInstance* MeshAnimClass; // 0x30
        bool bNeedBlockBullet; // 0x38
        struct TArray<class UMaterialInterface*> Material1P; // 0x40
        struct TArray<class UMaterialInterface*> Material3P; // 0x50

    };

    struct FSightGroup //ScriptStruct SGFramework.SightGroup
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t MostNegativeErgonomic; // 0x0
        class ASGInventory* RootSight; // 0x8
        struct TArray<class ASGInventory*> SightList; // 0x10

    };

    struct FFireRequireInfo //ScriptStruct SGFramework.FireRequireInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FGameplayTag FireTag; // 0x0
        class ASGInventory* TagInv; // 0x8

    };

    struct FSGWeaponCaptureSizeTableRow : FTableRowBase //ScriptStruct SGFramework.SGWeaponCaptureSizeTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint64_t ID; // 0x8
        int32_t Column; // 0x10
        int32_t Row; // 0x14
        float Width; // 0x18
        float Height; // 0x1c
        float ColumnWidthRatio; // 0x20
        float RowHeightRatio; // 0x24

    };

    struct FCachedRTInfo //ScriptStruct SGFramework.CachedRTInfo
    {
    //Children Prop Count (Fields): 3
    public:

        class UMaterialInstanceDynamic* MaterialInst; // 0x0
        int32_t ReferenceCount; // 0x8
        float LastAddReferenceTime; // 0xc

    };

    struct FImageToSet //ScriptStruct SGFramework.ImageToSet
    {
    //Children Prop Count (Fields): 3
    public:

        class UImage* TargetImage; // 0x0
        class UObject* LocalTexture; // 0x8
        struct FString UniqueID; // 0x10

    };

    struct FImageWaitCap //ScriptStruct SGFramework.ImageWaitCap
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<class UObject*> Images; // 0x0
        struct FRotator TargetRot; // 0x14

    };

    struct FFocusPartConfig //ScriptStruct SGFramework.FocusPartConfig
    {
    //Children Prop Count (Fields): 11
    public:

        struct FRotator FocusRot; // 0x0
        float TouchRotateSpeed; // 0xc
        float MaxPitch; // 0x10
        float MaxYaw; // 0x14
        float MaxRoll; // 0x18
        float MinPitch; // 0x1c
        float MinYaw; // 0x20
        float MinRoll; // 0x24
        float PinchSpeed; // 0x28
        float MinPinchDisPercent; // 0x2c
        float MaxPinchDisPercent; // 0x30

    };

    struct FPreviewAdapterInfo //ScriptStruct SGFramework.PreviewAdapterInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t X; // 0x0
        struct FString Y; // 0x8

    };

    struct FSGWeaponRepInfo //ScriptStruct SGFramework.SGWeaponRepInfo
    {
    //Children Prop Count (Fields): 4
    public:

        float RepCount; // 0x0
        enum class ESGInnerWeaponEvent EventType; // 0x4
        class UObject* EventObject; // 0x8
        float RepTime; // 0x10

    };

    struct FBoreInfo //ScriptStruct SGFramework.BoreInfo
    {
    //Children Prop Count (Fields): 4
    public:

        class AActor* BoreBullet; // 0x0
        bool bCurrent; // 0x8
        bool bTriggered; // 0x9
        struct FStackableItemSourceInfo FromPlayerInfo; // 0x10

    };

    struct FBulletContainerInfo //ScriptStruct SGFramework.BulletContainerInfo
    {
    //Children Prop Count (Fields): 2
    public:

        uint64_t BulletItemID; // 0x0
        int32_t StackCount; // 0x8

    };

    struct FWeaponDamageInfo //ScriptStruct SGFramework.WeaponDamageInfo
    {
    //Children Prop Count (Fields): 19
    public:

        enum class ESGWeaponFireMode FireModeType; // 0x0
        int32_t Damage; // 0x4
        int32_t DamageMin; // 0x8
        float DamageModifyZeroDistance; // 0xc
        float DamageDistanceModifier; // 0x10
        float BulletBeginDropDistance; // 0x14
        float DistanceBulletDropZ; // 0x18
        float DamageScale_Head; // 0x1c
        float DamageScale_Arms; // 0x20
        float DamageScale_Stomach; // 0x24
        float DamageScale_Chest; // 0x28
        float DamageScale_Legs; // 0x2c
        float TraceRange; // 0x30
        float TraceHalfAngle; // 0x34
        class UDamageType* DamageType; // 0x38
        float Momentum; // 0x40
        struct FVector ImpluseRange; // 0x44
        int32_t SubWeaponWallID; // 0x50
        float BleedTriggerChance; // 0x54

    };

    struct FJamBreakSoundConfig //ScriptStruct SGFramework.JamBreakSoundConfig
    {
    //Children Prop Count (Fields): 2
    public:

        enum class ESGGunWeaponSubType Type; // 0x0
        class UAkAudioEvent* SoundEvent; // 0x8

    };

    struct FExtraHitDeltaRotators //ScriptStruct SGFramework.ExtraHitDeltaRotators
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FRotator> Rotators; // 0x0

    };

    struct FWeaponMeleeHitInfo //ScriptStruct SGFramework.WeaponMeleeHitInfo
    {
    //Children Prop Count (Fields): 7
    public:

        struct TArray<float> Damage; // 0x0
        float TraceRange; // 0x10
        float TraceHalfAngle; // 0x14
        class UDamageType* DamageType; // 0x18
        float Momentum; // 0x20
        int32_t SubWeaponType; // 0x24
        struct FVector2D CheckRangeYZ; // 0x28

    };

    struct FMeleeTraceConf //ScriptStruct SGFramework.MeleeTraceConf
    {
    //Children Prop Count (Fields): 2
    public:

        float TraceDis; // 0x0
        struct FRotator TraceRotationAdjustment; // 0x4

    };

    struct FSGServerHitInfo //ScriptStruct SGFramework.SGServerHitInfo
    {
    //Children Prop Count (Fields): 19
    public:

        float Timestamp; // 0x0
        struct FSGBulletID BulletID; // 0x8
        struct FVector ShotDirection; // 0x18
        class AActor* HitActor; // 0x28
        class UPrimitiveComponent* Component; // 0x30
        struct FVector HitActorLocation; // 0x38
        struct FVector FireEndLocation; // 0x44
        struct FVector ImpactNormal; // 0x50
        class UPhysicalMaterial* PhysMaterial; // 0x60
        enum class EHitGroupType HitGroup; // 0x68
        enum class EHeadHitSubGroupType HeadHitSubGroup; // 0x69
        struct FName BoneName; // 0x6c
        struct TArray<struct FVector> ImportantLocations; // 0x78
        enum class ESGZoomType CaptureWeaponZoomType; // 0x88
        class ASGInventory* HitMovableArmor; // 0x90
        char HitFlags; // 0x98
        char bIsBestHit; // 0x99
        char bTakerIsCrouchClient; // 0x99
        char bTakerIsProneClient; // 0x99

    };

    struct FSGFireRepInfo3P //ScriptStruct SGFramework.SGFireRepInfo3P
    {
    //Children Prop Count (Fields): 10
    public:

        int64_t FireID; // 0x0
        struct FSGFireShots Shots; // 0x8
        class AActor* AmmoClass; // 0x30
        char FireMode; // 0x38
        float ExpiredTimeOnServer; // 0x3c
        char bFireEnd; // 0x40
        char bIsReadyForNextFire; // 0x40
        enum class ESGWeaponShootingMode ShootingMode; // 0x41
        char FireIntervalShotNum; // 0x42
        class ASGThrowableProjectile* ProjcetileClass; // 0x48

    };

    struct FImapctRepInfo //ScriptStruct SGFramework.ImapctRepInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FHitResult Hit; // 0x0
        float DecalRollOffset; // 0x98

    };

    struct FMeleeImpactProperty //ScriptStruct SGFramework.MeleeImpactProperty
    {
    //Children Prop Count (Fields): 2
    public:

        struct FHitResult MeleeHitTargetResult; // 0x0
        struct FVector MeleeHitVector; // 0x98

    };

    struct FImpactMaterialAndAudioEvent //ScriptStruct SGFramework.ImpactMaterialAndAudioEvent
    {
    //Children Prop Count (Fields): 1
    public:

        struct FText MaterialName; // 0x0

    };

    struct FSGWeaponParamsTable //ScriptStruct SGFramework.SGWeaponParamsTable
    {
    //Children Prop Count (Fields): 5
    public:

        struct FSGWeaponMovingRatioParams SpreadAccuracyRatios; // 0x0
        struct FSGWeaponMovingRatioParams CrosshairAccuracyRatios; // 0x30
        struct FSGWeaponSpreadParams SpreadParamTable; // 0x60
        struct FSGWeaponRecoilParams RecoilParamTable; // 0x88
        struct FSGWeaponCameraParams CameraRecoilParamTable; // 0xac

    };

    struct FSGWeaponCameraParams //ScriptStruct SGFramework.SGWeaponCameraParams
    {
    //Children Prop Count (Fields): 12
    public:

        float CameraRecoilExpandTime; // 0x0
        float CameraRecoilRecoverTime; // 0x4
        float CameraRecoilBase; // 0x8
        float CameraRecoilModifier; // 0xc
        float CameraRecoilMax; // 0x10
        float CameraRecoilZoomInitSpeed; // 0x14
        float CameraRecoilZoomDampingRate; // 0x18
        float CameraRecoilZoomFrictionRate; // 0x1c
        float CameraStretchMin; // 0x20
        float CameraStretchMax; // 0x24
        float CameraStretchMin_FPP; // 0x28
        float CameraStretchMax_FPP; // 0x2c

    };

    struct FSGWeaponRecoilParams //ScriptStruct SGFramework.SGWeaponRecoilParams
    {
    //Children Prop Count (Fields): 9
    public:

        float RecoilTime; // 0x0
        float RecoilUpMin; // 0x4
        float RecoilUpModifier; // 0x8
        float RecoilUpMax; // 0xc
        float RecoilUpTotalMax; // 0x10
        float RecoilSideMin; // 0x14
        float RecoilSideModifier; // 0x18
        float RecoilSideMax; // 0x1c
        float RecoilSideRange; // 0x20

    };

    struct FSGWeaponSpreadParams //ScriptStruct SGFramework.SGWeaponSpreadParams
    {
    //Children Prop Count (Fields): 10
    public:

        float SpreadMin; // 0x0
        float SpreadMax; // 0x4
        float SpreadModifierBase; // 0x8
        float SpreadModifierInc; // 0xc
        float SpreadModifierMax; // 0x10
        float SpreadIncreaseSpeed; // 0x14
        float SpreadIncreaseSpeed_Firing; // 0x18
        float SpreadDecreaseSpeed; // 0x1c
        float SpreadDecreaseSpeed_Firing; // 0x20
        float SpreadDelayRecoverTime; // 0x24

    };

    struct FSGWeaponMovingRatioParams //ScriptStruct SGFramework.SGWeaponMovingRatioParams
    {
    //Children Prop Count (Fields): 12
    public:

        float AccuracyRatio_Jump; // 0x0
        float AccuracyRatio_Prone; // 0x4
        float AccuracyRatio_ProneWalk; // 0x8
        float AccuracyRatio_Stand; // 0xc
        float AccuracyRatio_StandWalk; // 0x10
        float AccuracyRatio_Sprint; // 0x14
        float AccuracyRatio_Crouch; // 0x18
        float AccuracyRatio_CrouchWalk; // 0x1c
        float AccuracyRatio_StandBlindFire; // 0x20
        float AccuracyRatio_CrouchBlindFire; // 0x24
        float AccuracyRatio_SlientWalkFire; // 0x28
        float AccuracyRatio_SlientCrouchWalkFire; // 0x2c

    };

    struct FSGWeaponPostAnimInstanceProxy : FAnimInstanceProxy //ScriptStruct SGFramework.SGWeaponPostAnimInstanceProxy
    {
    //Children Prop Count (Fields): 1
    public:

        class USGWeaponPostAnimInstance* AnimInstance; // 0x860

    };

    struct FWeaponRecoilRecoverParams //ScriptStruct SGFramework.WeaponRecoilRecoverParams
    {
    //Children Prop Count (Fields): 8
    public:

        float BeginRecoverTime; // 0x0
        enum class ESGRecoilRecoverAlgorithm RecoverAlgorithm; // 0x4
        float ConfigDisturbRecoverSpeed; // 0x8
        float RecoverScale; // 0xc
        float ConfigRecoverTime; // 0x10
        float MinBeginRecoverSpeed_Yaw; // 0x14
        float MinBeginRecoverSpeed_Pitch; // 0x18
        class UCurveFloat* RecoverSpeedCurve; // 0x20

    };

    struct FWeaponRecoilRepInfo //ScriptStruct SGFramework.WeaponRecoilRepInfo
    {
    //Children Prop Count (Fields): 6
    public:

        int32_t ShotNum; // 0x0
        struct FRotator FireRecoil; // 0x4
        float BulletHorzRecoil; // 0x10
        float BulletVertRecoil; // 0x14
        struct FRotator RotatorDelta; // 0x18
        struct FRotator TargetRecoil; // 0x24

    };

    struct FWeaponRecoilAnimConfigInstance //ScriptStruct SGFramework.WeaponRecoilAnimConfigInstance
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FWeaponRecoilAnimParamsInstance> RecoilAnimParamInstances; // 0x0

    };

    struct FWeaponRecoilAnimParamsInstance //ScriptStruct SGFramework.WeaponRecoilAnimParamsInstance
    {
    public:


    };

    struct FWeaponRecoilAnimConfig //ScriptStruct SGFramework.WeaponRecoilAnimConfig
    {
    //Children Prop Count (Fields): 10
    public:

        struct TArray<struct FWeaponRecoilAnimParams> RecoilAnimParams; // 0x0
        struct FName PivotSocket; // 0x10
        struct FVector PivotSocketOffset; // 0x18
        class UCurveFloat* Curve_FOVWeight; // 0x28
        float WAR_RotRollOffsetMin; // 0x30
        float WAR_RotRollOffsetMax; // 0x34
        float WAR_RotPitchoffsetMin; // 0x38
        float WAR_RotPitchOffsetMax; // 0x3c
        float WAR_RotYawOffsetMin; // 0x40
        float WAR_RotYawOffsetMax; // 0x44

    };

    struct FWeaponRecoilAnimParams //ScriptStruct SGFramework.WeaponRecoilAnimParams
    {
    //Children Prop Count (Fields): 30
    public:

        bool bSingleInstance; // 0x0
        bool bKeepCurrentValueOnReset; // 0x1
        bool bSkipFirstShot; // 0x2
        enum class EWeapAnimRecoil WeapAnimRecoilType; // 0x3
        enum class EAnimOffsetType AnimOffsetType; // 0x4
        enum class EAxis Axis; // 0x5
        class UCurveVector* WeaponAnimRecoilCurve; // 0x8
        struct FRandomNumberGenerationParam RandomRecoilValueGenerationParam; // 0x10
        enum class EInitialOscillatorOffset InitialOffsetType; // 0x20
        float Duration; // 0x24
        enum class EOscillatorWaveform Waveform; // 0x28
        float WaveAmplitude; // 0x2c
        float WavePeriod; // 0x30
        float PowerBaseValue; // 0x34
        float PowerFrequency; // 0x38
        float BlendInTime; // 0x3c
        class UCurveFloat* BlendInProgressCurve; // 0x40
        float BlendOutTime; // 0x48
        class UCurveFloat* BlendOutProgressCurve; // 0x50
        bool bTimeSyncWithFire; // 0x58
        class UCurveFloat* Curve_FOVWeight; // 0x60
        float InterpSpeed; // 0x68
        class UCurveFloat* Curve_Interp; // 0x70
        float MaxSpringSpeed; // 0x78
        float SpringAccel; // 0x7c
        float SpeedDecay; // 0x80
        float StaticDecay; // 0x84
        float ResetMinSpeedThresh; // 0x88
        float MinKickValue; // 0x8c
        float MaxKickValue; // 0x90

    };

    struct FRandomNumberGenerationParam //ScriptStruct SGFramework.RandomNumberGenerationParam
    {
    //Children Prop Count (Fields): 2
    public:

        float FlipSideChance; // 0x0
        class UCurveFloat* Seed2DistributionMap; // 0x8

    };

    struct FAdapterInfo //ScriptStruct SGFramework.AdapterInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t X; // 0x0
        struct FString Y; // 0x8

    };

    struct FTakeDamageRecord //ScriptStruct SGFramework.TakeDamageRecord
    {
    //Children Prop Count (Fields): 4
    public:

        int64_t PlayerGID; // 0x0
        float Damage; // 0x8
        char HitGroup; // 0xc
        float ServerTime; // 0x10

    };

    struct FBulletDisplayInfoOB //ScriptStruct SGFramework.BulletDisplayInfoOB
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString SimpleDisplayName; // 0x0
        int32_t PenetrateLevel; // 0x10

    };

    struct FBulletPassStruct //ScriptStruct SGFramework.BulletPassStruct
    {
    //Children Prop Count (Fields): 7
    public:

        struct FVector PassDir; // 0x0
        struct FVector PassLocation; // 0xc
        float BulletPassAngle; // 0x18
        float TimeToReach; // 0x1c
        struct FVector EnterPoint; // 0x20
        struct FVector LeavePoint; // 0x2c
        struct TArray<int64_t> SoundEmitterIDs; // 0x38

    };

    struct FCachePSCQueueInfo //ScriptStruct SGFramework.CachePSCQueueInfo
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class UParticleSystemComponent*> AlivePSCQueue; // 0x0

    };

    struct FEffectParticleInfo //ScriptStruct SGFramework.EffectParticleInfo
    {
    //Children Prop Count (Fields): 6
    public:

        struct TSoftObjectPtr<UFXSystemAsset> PSTemplate; // 0x0
        struct FName SocketName; // 0x28
        struct FRotator PSRotation; // 0x30
        float PSScale; // 0x3c
        class UCurveFloat* PSScaleCurveByDistance; // 0x40
        float PSLifeTime; // 0x48

    };

    struct FProjectileHitInfo //ScriptStruct SGFramework.ProjectileHitInfo
    {
    //Children Prop Count (Fields): 4
    public:

        float MinDamage; // 0x0
        float MaxDamage; // 0x4
        float DamageRange; // 0x8
        float Momentum; // 0xc

    };

    struct FFireIdInfo //ScriptStruct SGFramework.FireIdInfo
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<int64_t> FireIds; // 0x0

    };

    struct FSGMagazinedAmmoInfo //ScriptStruct SGFramework.SGMagazinedAmmoInfo
    {
    //Children Prop Count (Fields): 2
    public:

        class ASGInventory* RelatedMagazine; // 0x0
        class ASGInventory* AmmoInventory; // 0x8

    };

    struct FSGWeaponOverrideRecoilInfo //ScriptStruct SGFramework.SGWeaponOverrideRecoilInfo
    {
    //Children Prop Count (Fields): 3
    public:

        char ShotCount; // 0x0
        float ModifyRecoil_Vertical; // 0x4
        float ModifyRecoil_Horizontal; // 0x8

    };

    struct FWeaponRepInfo //ScriptStruct SGFramework.WeaponRepInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FSGWeaponRepInfoInner WeaponRepInfoInner; // 0x0
        int32_t Count; // 0x18

    };

    struct FSGWeaponRepInfoInner //ScriptStruct SGFramework.SGWeaponRepInfoInner
    {
    //Children Prop Count (Fields): 3
    public:

        bool bShouldReserveLastWeapon; // 0x0
        class ASGInventory* CurrentWeapon; // 0x8
        int32_t Count; // 0x10

    };

    struct FWeaponDamageStruct //ScriptStruct SGFramework.WeaponDamageStruct
    {
    //Children Prop Count (Fields): 59
    public:

        struct FString WeaponName; // 0x0
        struct FString BulletName; // 0x10
        uint32_t BulletID; // 0x20
        struct FString WeaponType; // 0x28
        int32_t VestLevel; // 0x38
        int32_t VestId; // 0x3c
        int32_t HelmetId; // 0x40
        struct FString VestName; // 0x48
        int32_t HelmetLevel; // 0x58
        struct FString HelmetName; // 0x60
        struct FString DamageHitType; // 0x70
        int32_t DamageHitTypeInt; // 0x80
        float ShootDistance; // 0x84
        float BaseDamage; // 0x88
        float PenetrateDamage; // 0x8c
        float ResultDamage; // 0x90
        float ArmorConsume; // 0x94
        bool bPenetrateArmor; // 0x98
        float PenetrationProbability; // 0x9c
        bool bBrokenBullet; // 0xa0
        float CharacterAllEndurance; // 0xa4
        struct FString HitArmorName; // 0xa8
        float CurWeaponADSTime; // 0xb8
        float CurWeaponFireInterval; // 0xbc
        float ValidAimTime; // 0xc0
        float ArmorReduceDamage; // 0xc4
        int32_t HitSubEndurance; // 0xc8
        int64_t HitArmorId; // 0xd0
        float VerticalRecoil; // 0xd8
        float HorizontalRecoil; // 0xdc
        struct FString SightName; // 0xe0
        int32_t WeaponId; // 0xf0
        int32_t MapID; // 0xf4
        int32_t Weatherid; // 0xf8
        int32_t EnemyRoleType; // 0xfc
        struct FString EnemyRoleID; // 0x100
        struct FString EnemyUserName; // 0x110
        int32_t HurtTime; // 0x120
        int32_t HurtType; // 0x124
        int32_t DamageStart; // 0x128
        int32_t DamageReduce; // 0x12c
        int32_t HPstart; // 0x130
        int32_t HPEnd; // 0x134
        int32_t HelmetHPStart; // 0x138
        int32_t HelmetHPEnd; // 0x13c
        int32_t ArmorHPStart; // 0x140
        int32_t ArmorHPEnd; // 0x144
        int32_t FallHeight; // 0x148
        int32_t PlayerKilled; // 0x14c
        struct FString DebuffStartList; // 0x150
        struct FString DebuffEndList; // 0x160
        struct FVector HitPosition; // 0x170
        int64_t HitMovableArmorID; // 0x180
        float MovableArmorConsume; // 0x188
        float MovableArmorBlockDamage; // 0x18c
        uint32_t TargetVestArmorID; // 0x190
        uint32_t TargetHelmetArmorID; // 0x194
        uint32_t TargetFaceShieldID; // 0x198
        uint32_t TargetThighArmorID; // 0x19c

    };

    struct FWeapAdapterRepInfo //ScriptStruct SGFramework.WeapAdapterRepInfo
    {
    //Children Prop Count (Fields): 5
    public:

        char AdapterSocketRep_Muzzle; // 0x0
        char AdapterSocketRep_UpperRail; // 0x1
        char AdapterSocketRep_Magazines; // 0x2
        char AdapterSocketRep_LowerRail; // 0x3
        char AdapterSocketRep_Stocks; // 0x4

    };

    struct FWeaponEventRepInfo //ScriptStruct SGFramework.WeaponEventRepInfo
    {
    //Children Prop Count (Fields): 2
    public:

        char WeaponRepStateEventType; // 0x0
        char WeapRepContTimes; // 0x1

    };

    struct FZoomingState //ScriptStruct SGFramework.ZoomingState
    {
    public:


    };

    struct FWeaponSwitchScopeParams //ScriptStruct SGFramework.WeaponSwitchScopeParams
    {
    //Children Prop Count (Fields): 5
    public:

        enum class EAnimOffsetType AnimOffsetType; // 0x0
        enum class EAxis Axis; // 0x1
        float MinValue; // 0x4
        float MaxValue; // 0x8
        class UCurveFloat* Curve_ScaleInterp; // 0x10

    };

    struct FVehicleColorData //ScriptStruct SGFramework.VehicleColorData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FLinearColor VehicleColor; // 0x0
        float RandomWeight; // 0x10

    };

    struct FInventoryLoadQueueInfoStruct //ScriptStruct SGFramework.InventoryLoadQueueInfoStruct
    {
    //Children Prop Count (Fields): 1
    public:

        class ASGInventory* Inventory; // 0x0

    };

    struct FTimedImpactEffect //ScriptStruct SGFramework.TimedImpactEffect
    {
    //Children Prop Count (Fields): 4
    public:

        class USceneComponent* EffectComp; // 0x0
        float CreationTime; // 0x8
        float LifetimeScaling; // 0xc
        float FadeMultiplier; // 0x10

    };

    struct FSimpHelicopterMovementRepData //ScriptStruct SGFramework.SimpHelicopterMovementRepData
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Acceleration; // 0x0
        float YawAcceleration; // 0xc
        float YawVelocity; // 0x10

    };

    struct FWearableMeshAssetData //ScriptStruct SGFramework.WearableMeshAssetData
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FWearableMorphTarget> UnderMorphTargets; // 0x0
        struct TArray<struct FName> UnderHiddenTags; // 0x10

    };

    struct FAlternativeMaterialInfo //ScriptStruct SGFramework.AlternativeMaterialInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct TMap<struct FName, struct TSoftObjectPtr<UMaterialInterface>> SoftRefMaterialList; // 0x0
        struct TMap<struct FName, class UMaterialInterface*> MaterialList; // 0x50

    };

    struct FMorphTargetPositionOffsetInfo //ScriptStruct SGFramework.MorphTargetPositionOffsetInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t BadgeIndex; // 0x0
        struct TMap<struct FName, struct FMorphDeltaInfo> MorphTargetDeltaList; // 0x8

    };

    struct FMorphDeltaInfo //ScriptStruct SGFramework.MorphDeltaInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector PositionOffset; // 0x0
        struct FVector TangentZDelta; // 0xc

    };

    struct FSoundIndicatorTLogData //ScriptStruct SGFramework.SoundIndicatorTLogData
    {
    //Children Prop Count (Fields): 3
    public:

        float Score; // 0x0
        float Distance; // 0x4
        bool bIsDead; // 0x8

    };

    struct FSoundIndicatorReportInfo //ScriptStruct SGFramework.SoundIndicatorReportInfo
    {
    //Children Prop Count (Fields): 6
    public:

        float TriggerTime; // 0x0
        float CurrentTime; // 0x4
        float CurrentScore; // 0x8
        float Distance; // 0xc
        class AActor* SourceActor; // 0x10
        struct TSet<enum class ESoundIndicatorReportScoreType> BehaviorCachedSet; // 0x18

    };

    struct FSoundDiffusionFactorConfTableRow : FTableRowBase //ScriptStruct SGFramework.SoundDiffusionFactorConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        float SoundDiffusionLevelFactor; // 0x8
        float SoundDiffusionMaxDistanceFactor; // 0xc
        float SuppressorSoundScale; // 0x10

    };

    struct FGunSilencerInfluenceParamsArray //ScriptStruct SGFramework.GunSilencerInfluenceParamsArray
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FGunSilencerInfluenceParams> GunSilencerInfluenceArray; // 0x0

    };

    struct FGunSilencerInfluenceParams //ScriptStruct SGFramework.GunSilencerInfluenceParams
    {
    //Children Prop Count (Fields): 2
    public:

        enum class ESGGunSilencerType SilencerType; // 0x0
        struct FSoundInfluenceFactor InfluenceFactor; // 0x4

    };

    struct FSoundInfluenceAdditiveParams //ScriptStruct SGFramework.SoundInfluenceAdditiveParams
    {
    //Children Prop Count (Fields): 2
    public:

        struct TSet<enum class ESoundSourceType> SoundSourceTypeSet; // 0x0
        struct TMap<enum class ESGGunWeaponSubType, struct FSoundIndicatorAdditive> SoundInfluenceAdditiveMap; // 0x50

    };

    struct FSoundIndicatorAdditive //ScriptStruct SGFramework.SoundIndicatorAdditive
    {
    //Children Prop Count (Fields): 4
    public:

        float BaseLevelAdditive; // 0x0
        float DurationAdditive; // 0x4
        float FadeTimeAdditive; // 0x8
        float MaxDistanceAdditive; // 0xc

    };

    struct FSoundSourceTypeSet //ScriptStruct SGFramework.SoundSourceTypeSet
    {
    //Children Prop Count (Fields): 1
    public:

        struct TSet<enum class ESoundSourceType> SoundSourceTypeSet; // 0x0

    };

    struct FSoundIndicatorIntervalAdditive //ScriptStruct SGFramework.SoundIndicatorIntervalAdditive
    {
    //Children Prop Count (Fields): 2
    public:

        struct TSet<enum class ESoundSourceType> SoundTypes; // 0x0
        float Factor; // 0x50

    };

    struct FSoundSourceActorParam //ScriptStruct SGFramework.SoundSourceActorParam
    {
    //Children Prop Count (Fields): 2
    public:

        enum class ESoundSourceActorType ActorType; // 0x0
        class AActor* SourceActor; // 0x8

    };

    struct FSoundIndicatorConfig //ScriptStruct SGFramework.SoundIndicatorConfig
    {
    //Children Prop Count (Fields): 17
    public:

        float BaseLevel; // 0x0
        float Duration; // 0x4
        float FadeTime; // 0x8
        int32_t IconIndex; // 0xc
        float Interval; // 0x10
        float MaxDistance; // 0x14
        float Frequency; // 0x18
        class UCurveFloat* OpacityCurve; // 0x20
        class UCurveFloat* AnimSpeedCurve; // 0x28
        class UCurveFloat* SoundWaveHeightCurve; // 0x30
        class UCurveFloat* HeightSideContrast; // 0x38
        class UCurveFloat* LevelFactor; // 0x40
        class UMaterialInterface* MatUpper; // 0x48
        class UMaterialInterface* MatMiddle; // 0x50
        class UMaterialInterface* MatLower; // 0x58
        struct FLinearColor WaveColor; // 0x60
        int32_t Priority; // 0x70

    };

    struct FVehicleLowHealthEffect //ScriptStruct SGFramework.VehicleLowHealthEffect
    {
    //Children Prop Count (Fields): 6
    public:

        float HealthPercent; // 0x0
        bool IsTriggered; // 0x4
        bool IsAttached; // 0x5
        struct FName BoneNmae; // 0x8
        class UParticleSystem* PS; // 0x10
        class USoundCue* Sound; // 0x18

    };

    struct FVehicleTireData //ScriptStruct SGFramework.VehicleTireData
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t FLTireHP; // 0x0
        int32_t FRTireHP; // 0x4
        int32_t RLTireHP; // 0x8
        int32_t RRTireHP; // 0xc

    };

    struct FVehicleSeatRepData //ScriptStruct SGFramework.VehicleSeatRepData
    {
    //Children Prop Count (Fields): 7
    public:

        class ASGCharacter* FirstSeatChar; // 0x0
        class ASGCharacter* SecondSeatChar; // 0x8
        class ASGCharacter* ThirdSeatChar; // 0x10
        class ASGCharacter* ForthSeatChar; // 0x18
        class ASGCharacter* FiveSeatChar; // 0x20
        class ASGCharacter* SixSeatChar; // 0x28
        int32_t CurrentPlayerCount; // 0x30

    };

    struct FCharacterVehicleRepData //ScriptStruct SGFramework.CharacterVehicleRepData
    {
    //Children Prop Count (Fields): 6
    public:

        class APawn* Vehicle; // 0x0
        int32_t SeatIndex; // 0x8
        struct FVector ExitLocation; // 0xc
        struct FRotator ExitFaceRotation; // 0x18
        bool bIsSwitchSeatSync; // 0x24
        class APawn* LastVehicle; // 0x28

    };

    struct FVehicleSeatData //ScriptStruct SGFramework.VehicleSeatData
    {
    //Children Prop Count (Fields): 5
    public:

        struct TArray<struct FOneSeatData> SeatDataList; // 0x0
        int32_t MaxSeatCount; // 0x14
        bool bSeatPlayerVisible; // 0x18
        struct TArray<struct FName> SeatSockets; // 0x20
        struct TArray<struct FName> LeaveVehicleSockets; // 0x30

    };

    struct FOneSeatData //ScriptStruct SGFramework.OneSeatData
    {
    //Children Prop Count (Fields): 1
    public:

        class ASGCharacter* SeatCharacter; // 0x0

    };

    struct FVehicleDamageScale //ScriptStruct SGFramework.VehicleDamageScale
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName BoneName; // 0x0
        float DamageScale; // 0x8

    };

    struct FSyncVehilceStopData //ScriptStruct SGFramework.SyncVehilceStopData
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector ServerLocation; // 0x0
        struct FRotator ServerRotation; // 0xc
        bool bVehicleStopped; // 0x18

    };

    struct FAIRuntimeMonitorStatInfo //ScriptStruct MFNPCAI.AIRuntimeMonitorStatInfo
    {
    //Children Prop Count (Fields): 11
    public:

        float HistoryIncAvg; // 0x0
        float HistoryIncMax; // 0x4
        int32_t HistoryMaxCallCount; // 0x8
        float HistoryAvgCallCount; // 0xc
        int32_t TotalIncCount; // 0x10
        float TotalIncExeTime; // 0x14
        int32_t TotalSavedNum; // 0x18
        uint32_t NowFrame32; // 0x1c
        int32_t NowFrameCallCount; // 0x20
        float NowFrameExeUseTime; // 0x24
        float WarningTopCost; // 0x28

    };

    struct FAISGDoorUsed //ScriptStruct MFNPCAI.AISGDoorUsed
    {
    //Children Prop Count (Fields): 4
    public:

        class AActor* SGDoor; // 0x0
        class ACharacter* AIPawn; // 0x8
        float UsedTime; // 0x10
        char WaitPersons; // 0x14

    };

    struct FNPCAIActivityAIIDModifierTableRow : FTableRowBase //ScriptStruct MFNPCAI.NPCAIActivityAIIDModifierTableRow
    {
    //Children Prop Count (Fields): 11
    public:

        int64_t ActivityID; // 0x10
        int32_t Priority; // 0x18
        int32_t SourceCategory; // 0x1c
        int32_t SourceCareer; // 0x20
        int32_t SourceTendency; // 0x24
        int32_t SourceDifficulty; // 0x28
        int32_t TargetCategory; // 0x2c
        int32_t TargetCareer; // 0x30
        int32_t TargetTendency; // 0x34
        int32_t TargetDifficulty; // 0x38
        int32_t TargetEquipPoolID; // 0x3c

    };

    struct FNPCAIAsyncTask //ScriptStruct MFNPCAI.NPCAIAsyncTask
    {
    //Children Prop Count (Fields): 3
    public:

        class AActor* AIPawn; // 0x0
        enum class ENPCAIAsyncTaskType Type; // 0x8
        class UNPCAIAsyncTaskBase* AsyncTask; // 0x10

    };

    struct FAIDataProviderValue //ScriptStruct AIModule.AIDataProviderValue
    {
    //Children Prop Count (Fields): 2
    public:

        class UAIDataProvider* DataBinding; // 0x10
        struct FName DataField; // 0x18

    };

    struct FAIDataProviderTypedValue : FAIDataProviderValue //ScriptStruct AIModule.AIDataProviderTypedValue
    {
    //Children Prop Count (Fields): 1
    public:

        class UObject* PropertyType; // 0x20

    };

    struct FAIDataProviderFVectorValue : FAIDataProviderTypedValue //ScriptStruct MFNPCAI.AIDataProviderFVectorValue
    {
    //Children Prop Count (Fields): 1
    public:

        struct FVector DefaultValue; // 0x30

    };

    struct FAIDoorSingleSafetyPoint //ScriptStruct MFNPCAI.AIDoorSingleSafetyPoint
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Location; // 0x0
        float DangerValue; // 0xc

    };

    struct FAISafetyOpenDoorResp //ScriptStruct MFNPCAI.AISafetyOpenDoorResp
    {
    //Children Prop Count (Fields): 3
    public:

        class AActor* SGDoor; // 0x0
        struct FVector NavLinkPoint; // 0x8
        struct FVector SafetyWaitPoint; // 0x14

    };

    struct FNPCAIProfileCover //ScriptStruct MFNPCAI.NPCAIProfileCover
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<char> Ars; // 0x0
        struct FString CoverName; // 0x18

    };

    struct FNPCAIProfileCoverTag //ScriptStruct MFNPCAI.NPCAIProfileCoverTag
    {
    //Children Prop Count (Fields): 3
    public:

        class UNPCAIPropertyProfile* ProfileClass; // 0x0
        enum class EAIProfileType ProfileType; // 0x8
        struct FName VarName; // 0xc

    };

    struct FAIProtectTreasureBox //ScriptStruct MFNPCAI.AIProtectTreasureBox
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* BoxInstance; // 0x0

    };

    struct FAIEnemyInfo //ScriptStruct MFNPCAI.AIEnemyInfo
    {
    //Children Prop Count (Fields): 4
    public:

        float FireTime; // 0x0
        float TimeInterval; // 0x4
        struct FVector FireLocation; // 0x8
        struct FVector FireDirection; // 0x14

    };

    struct FAIGlobalCacheActors //ScriptStruct MFNPCAI.AIGlobalCacheActors
    {
    //Children Prop Count (Fields): 2
    public:

        float LastTimeSeconds; // 0x0
        struct TArray<struct TWeakObjectPtr<struct AActor>> CacheActors; // 0x8

    };

    struct FGraphAStarPolicy //ScriptStruct MFNPCAI.GraphAStarPolicy
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t NodePoolSize; // 0x0
        int32_t OpenSetSize; // 0x4
        int32_t MaxPathNodeCount; // 0x8
        bool bReuseNodePoolInSubsequentSearches; // 0xc

    };

    struct FHNavSearchInfo //ScriptStruct MFNPCAI.HNavSearchInfo
    {
    public:


    };

    struct FHNavSettings //ScriptStruct MFNPCAI.HNavSettings
    {
    //Children Prop Count (Fields): 13
    public:

        bool bAutoBuildAfterNavigationGenerationFinished; // 0x0
        bool bBuildIntermediateGraph; // 0x1
        bool bRemoveIntermediateGraph; // 0x2
        bool bIntraPathOnlyInSelfNode; // 0x3
        bool bCombineMultiEdges; // 0x4
        bool bEnableEdgeWeight; // 0x5
        bool bBreakNavLinkConnection; // 0x6
        int32_t MaxGraphLevel; // 0x8
        int32_t PartitionSize; // 0xc
        int32_t ForceBuildForTopK; // 0x10
        int32_t MinNodeCountToBuild; // 0x14
        int32_t MaxSearchNode; // 0x18
        struct FMetisOptions MetisOptions; // 0x1c

    };

    struct FMetisOptions //ScriptStruct MFNPCAI.MetisOptions
    {
    //Children Prop Count (Fields): 10
    public:

        bool bUseDefault; // 0x0
        enum class EMETIS_OBJTYPE ObjectiveType; // 0x4
        enum class EMETIS_CTYPE CoarsenType; // 0x8
        enum class EMETIS_IPTYPE InitialPartitioningType; // 0xc
        enum class EMETIS_RTYPE RifinementType; // 0x10
        int32_t NCuts; // 0x14
        int32_t IterateTimes; // 0x18
        bool bMinimizeMaximumConnectivity; // 0x1c
        bool bNo2Hop; // 0x1d
        bool bForcesContiguousPartitions; // 0x1e

    };

    struct FHNavGraph //ScriptStruct MFNPCAI.HNavGraph
    {
    //Children Prop Count (Fields): 18
    public:

        int32_t Level; // 0x0
        int32_t NodeCount; // 0x4
        bool bIntermediate; // 0x8
        struct TArray<int32_t> ParentIndices; // 0x10
        struct TArray<int32_t> ChildIndexOffsets; // 0x40
        struct TArray<int32_t> ChildIndices; // 0x50
        struct TArray<int32_t> PortalEdgeOffsets; // 0x60
        struct TArray<struct FPortalEdge> PortalEdges; // 0x70
        struct TArray<int32_t> IntraPathOffsets; // 0x80
        struct TArray<struct FIntraPath> IntraPaths; // 0x90
        struct TArray<int32_t> IntraPathSourceIndexOffsets; // 0xa0
        struct TArray<int32_t> IntraPathSourceIndices; // 0xb0
        struct TArray<int32_t> IntraPathTargetIndexOffsets; // 0xc0
        struct TArray<uint64_t> IntraPathCounts; // 0xe0
        struct TArray<int32_t> IntraPathPolyRefOffsets; // 0xf0
        struct TArray<uint64_t> IntraPathPolyRefs; // 0x100
        struct TArray<float> IntraPathCosts; // 0x110
        struct TArray<float> IntraPathLengths; // 0x120

    };

    struct FIntraPath //ScriptStruct MFNPCAI.IntraPath
    {
    //Children Prop Count (Fields): 4
    public:

        uint64_t PackedData; // 0x0
        struct TArray<uint64_t> Nodes; // 0x8
        float Length; // 0x18
        float Cost; // 0x1c

    };

    struct FPortalEdge //ScriptStruct MFNPCAI.PortalEdge
    {
    //Children Prop Count (Fields): 1
    public:

        uint64_t PackedData; // 0x0

    };

    struct FNPCAIIDModifierTableRow : FTableRowBase //ScriptStruct MFNPCAI.NPCAIIDModifierTableRow
    {
    //Children Prop Count (Fields): 1
    public:

        int64_t TargetAIID; // 0x8

    };

    struct FAIRoundPathFindingNodes //ScriptStruct MFNPCAI.AIRoundPathFindingNodes
    {
    //Children Prop Count (Fields): 6
    public:

        float LastTimeCheckUpdate; // 0x0
        int32_t CheckUpdateCount; // 0x4
        float RoundPathLength; // 0x8
        float RadiusReCalcRoundPathNodes; // 0xc
        int64_t CurrentPolyId; // 0x10
        struct FVector LastLocationCalcRoundPathNodes; // 0x18

    };

    struct FAIArmorAttributeModifier //ScriptStruct MFNPCAI.AIArmorAttributeModifier
    {
    //Children Prop Count (Fields): 5
    public:

        float DurabilityConsumeScale_Blocked; // 0x0
        float DurabilityConsumeScale_Penetrated; // 0x4
        float AntiPenetrationFactor; // 0x8
        float DamageScaleForPenetration; // 0xc
        float DamageScaleForBlock; // 0x10

    };

    struct FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonBuildStage
    {
    public:


    };

    struct FNPCAINavSkeletonAddRegionConnectionStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonAddRegionConnectionStage
    {
    public:


    };

    struct FNPCAINavSkeletonBuilder //ScriptStruct MFNPCAI.NPCAINavSkeletonBuilder
    {
    //Children Prop Count (Fields): 5
    public:

        class UObject* WorldContextObject; // 0x0
        class UWorld* World; // 0xb8
        class ARecastNavMesh* MainNavData; // 0xc8
        class ANPCAINavMeshManager* NavMeshManager; // 0xd0
        struct TArray<class ANPCAINavLinkProxy*> LinkProxies; // 0xe0

    };

    struct FNPCAINavSkeletonCalculateCoverageStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonCalculateCoverageStage
    {
    public:


    };

    struct FNPCAINavSkeletonCalculateDivergenceStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonCalculateDivergenceStage
    {
    public:


    };

    struct FNPCAINavSkeletonCalculateGradientStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonCalculateGradientStage
    {
    public:


    };

    struct FNPCAINavSkeletonCalculateSymmetricAttributeStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonCalculateSymmetricAttributeStage
    {
    public:


    };

    struct FNPCAINavSkeletonCalculateMovingStage : FNPCAINavSkeletonCalculateSymmetricAttributeStage //ScriptStruct MFNPCAI.NPCAINavSkeletonCalculateMovingStage
    {
    public:


    };

    struct FNPCAINavSkeletonCalculateOutdoorsStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonCalculateOutdoorsStage
    {
    public:


    };

    struct FNPCAINavSkeletonCalculateProtectionStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonCalculateProtectionStage
    {
    public:


    };

    struct FNPCAINavSkeletonCalculateThrowingStage : FNPCAINavSkeletonCalculateSymmetricAttributeStage //ScriptStruct MFNPCAI.NPCAINavSkeletonCalculateThrowingStage
    {
    public:


    };

    struct FNPCAINavSkeletonCalculateVisibilityStage : FNPCAINavSkeletonCalculateSymmetricAttributeStage //ScriptStruct MFNPCAI.NPCAINavSkeletonCalculateVisibilityStage
    {
    public:


    };

    struct FNPCAINavSkeletonCalculateWallDistanceStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonCalculateWallDistanceStage
    {
    public:


    };

    struct FNPCAINavSkeletonCheckEdgeOnNavMeshStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonCheckEdgeOnNavMeshStage
    {
    public:


    };

    struct FNPCAINavSkeletonCollectConnectionInfoStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonCollectConnectionInfoStage
    {
    public:


    };

    struct FNPCAINavSkeletonCollectNeighbourInfoStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonCollectNeighbourInfoStage
    {
    public:


    };

    struct FNPCAINavSkeletonFindPathForUnstableSegmentStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonFindPathForUnstableSegmentStage
    {
    public:


    };

    struct FNPCAINavSkeletonFindWallsInNeighbourhoodStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonFindWallsInNeighbourhoodStage
    {
    public:


    };

    struct FNPCAINavSkeletonGeneratePolylineStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonGeneratePolylineStage
    {
    public:


    };

    struct FNPCAINavSkeletonGenerateRawPointStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonGenerateRawPointStage
    {
    public:


    };

    struct FNavSkeletonPathFindingQueue //ScriptStruct MFNPCAI.NavSkeletonPathFindingQueue
    {
    //Children Prop Count (Fields): 1
    public:

        struct TMap<struct TWeakObjectPtr<struct UObject>, struct FNavSkeletonPathFindingRequest> QuerierToRequest; // 0x18

    };

    struct FNavSkeletonPathFindingRequest //ScriptStruct MFNPCAI.NavSkeletonPathFindingRequest
    {
    public:


    };

    struct FNavSkeletonGraphAStarFilter //ScriptStruct MFNPCAI.NavSkeletonGraphAStarFilter
    {
    //Children Prop Count (Fields): 8
    public:

        struct TWeakObjectPtr<struct UObject> WeakOwner; // 0x0
        int32_t MaxSearchNodes; // 0x8
        float CostLimit; // 0xc
        float TimeLimit; // 0x10
        bool bShouldIncludeStartNodeInPath; // 0x14
        struct TSet<int32_t> UnreachablePointIDs; // 0x18
        bool bOnTryBestToIncludePointIDs; // 0x68
        struct TSet<int32_t> TryBestToIncludePointIDs; // 0x70

    };

    struct FNPCAINavSkeletonInitializePointExtraAttributeStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonInitializePointExtraAttributeStage
    {
    public:


    };

    struct FNPCAINavSkeletonLabelNavMeshStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonLabelNavMeshStage
    {
    public:


    };

    struct FNPCAINavSkeletonPrunePointStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonPrunePointStage
    {
    public:


    };

    struct FNPCAINavSkeletonRemoveIsolatedPointStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonRemoveIsolatedPointStage
    {
    public:


    };

    struct FNPCAINavSkeletonRemoveTriangleConnectionStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonRemoveTriangleConnectionStage
    {
    public:


    };

    struct FNPCAINavSkeletonSavePointStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonSavePointStage
    {
    public:


    };

    struct FNPCAINavSkeletonSetupPointBattleIntensityExpectation : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonSetupPointBattleIntensityExpectation
    {
    public:


    };

    struct FNPCAINavSkeletonSetupPointBattleVolumeStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonSetupPointBattleVolumeStage
    {
    public:


    };

    struct FNPCAINavSkeletonSetupPointKindStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonSetupPointKindStage
    {
    public:


    };

    struct FNPCAINavSkeletonSimplifyPolylineStage : FNPCAINavSkeletonBuildStage //ScriptStruct MFNPCAI.NPCAINavSkeletonSimplifyPolylineStage
    {
    public:


    };

    struct FNavSkeletonMoveSettings //ScriptStruct MFNPCAI.NavSkeletonMoveSettings
    {
    //Children Prop Count (Fields): 1
    public:

        bool bWantPathOptimization; // 0x0

    };

    struct FNavSkeletonData //ScriptStruct MFNPCAI.NavSkeletonData
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FNavSkeletonPoint> Points; // 0x0
        struct TMap<uint64_t, struct FNavSkeletonPatchedPath> UnstableSegmentPatchPaths; // 0x10

    };

    struct FNavSkeletonPatchedPath //ScriptStruct MFNPCAI.NavSkeletonPatchedPath
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FNavSkeletonPathPoint> PathPoints; // 0x0

    };

    struct FNavSkeletonPathPoint //ScriptStruct MFNPCAI.NavSkeletonPathPoint
    {
    //Children Prop Count (Fields): 5
    public:

        struct FVector Location; // 0x0
        uint64_t NodeRef; // 0x10
        uint32_t Flags; // 0x18
        uint32_t CustomLinkId; // 0x1c
        struct FNavLinkId CustomNavLinkId; // 0x20

    };

    struct FNavLinkId //ScriptStruct Engine.NavLinkId
    {
    //Children Prop Count (Fields): 1
    public:

        uint64_t ID; // 0x0

    };

    struct FNavSkeletonPoint : FActionPointData //ScriptStruct MFNPCAI.NavSkeletonPoint
    {
    //Children Prop Count (Fields): 14
    public:

        bool Outdoors; // 0x10
        float Radius; // 0x14
        float EffectiveRange; // 0x18
        int32_t LinkID; // 0x1c
        uint64_t AtPolyRef; // 0x20
        struct FVector ProtectionDirection; // 0x28
        float ProtectionHalfAngle; // 0x34
        int32_t BattleIntensityExpectation; // 0x38
        struct TArray<int32_t> NeighbourIndices; // 0x40
        struct TArray<float> NeighbourDistances; // 0x50
        struct TArray<int32_t> VisibleIndices; // 0x60
        struct TArray<int32_t> ThrowableIndices; // 0x70
        struct TArray<int32_t> MovableIndices; // 0x80
        struct TArray<int32_t> FriendIndices; // 0x90

    };

    struct FNavSkeletonPolyline //ScriptStruct MFNPCAI.NavSkeletonPolyline
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<int32_t> PointIDs; // 0x0
        float PolylineLength; // 0x10

    };

    struct FNavSkeletonBuildSettings //ScriptStruct MFNPCAI.NavSkeletonBuildSettings
    {
    //Children Prop Count (Fields): 49
    public:

        struct FVector NavQueryExtent; // 0x0
        float SampleSpacing; // 0xc
        float DeltaLength; // 0x10
        int32_t GradientNeighbourRadius; // 0x14
        float DivergenceFilterThreshold; // 0x18
        float DivergenceNeighbourRadius; // 0x1c
        float CoarseCoverageNeighbourRadius; // 0x20
        float RefinedCoverageNeighbourRadius; // 0x24
        float PolylineSimplificationDistanceThreshold; // 0x28
        bool bUseNewBuilder; // 0x30
        bool bCheckEdgeOnNavMesh; // 0x31
        bool bRemoveUnreachablePoints; // 0x32
        bool bHintProjection2D; // 0x33
        bool bAddRegionConnection; // 0x34
        bool bEnableCollapseShortPolylines; // 0x35
        bool bEnableParallelFindWallsInNeighbourhood; // 0x36
        bool bEnableParallelCalculateWallDistance; // 0x37
        bool bEnableParallelGenerateRawPoints; // 0x38
        bool bEnableParallelCalculateGradient; // 0x39
        bool bEnableParallelCalculateDivergence; // 0x3a
        bool bEnableParallelCalculateOutdoors; // 0x3b
        bool bEnableParallelPruneSamplePoints; // 0x3c
        bool bEnableParallelCalculateProtection; // 0x3d
        bool bEnableParallelCalculateVisibility; // 0x3e
        bool bEnableParallelCalculateThrowing; // 0x3f
        bool bEnableParallelCalculateMoving; // 0x40
        bool bEnablePruneSamplePoints; // 0x41
        bool bEnableRemoveTooCloseMainPointAtCoverageStage; // 0x42
        bool bEnableRefineCoverage; // 0x43
        bool bEnablePruneEndBranch; // 0x44
        bool bEnableCalculateVisibilityStage; // 0x45
        bool bEnableCalculateThrowingStage; // 0x46
        enum class ENavSkeletonDivergenceMethod DivergenceMethod; // 0x47
        float FindWallInRadius; // 0x48
        int32_t MaxWallCount; // 0x4c
        float PolylineLengthLowerBound; // 0x50
        float RegionConnectionDistanceTolerance; // 0x54
        float VisiblityQueryZExtent; // 0x58
        float VisiblityTraceZOffset; // 0x5c
        float VisiblityMaxRange; // 0x60
        float ProtectionTraceAngleStep; // 0x64
        float ProtectionTraceZOffset; // 0x68
        float ProtectionTraceMaxRange; // 0x6c
        float EndpointProtectionLowerBound; // 0x70
        float ThrowingInitialSpeed; // 0x74
        float ThrowingMaxRange; // 0x78
        float MovingMaxRange; // 0x7c
        float CheckOutdoorsRadius; // 0x84
        float CheckOutdoorsHeight; // 0x88

    };

    struct FNavSkeletonSamplePoint //ScriptStruct MFNPCAI.NavSkeletonSamplePoint
    {
    public:


    };

    struct FNavSkeletonSamplePolyline //ScriptStruct MFNPCAI.NavSkeletonSamplePolyline
    {
    public:


    };

    struct FNavCostModifierSharedPointer //ScriptStruct MFNPCAI.NavCostModifierSharedPointer
    {
    public:


    };

    struct FNavCostModifier //ScriptStruct MFNPCAI.NavCostModifier
    {
    //Children Prop Count (Fields): 6
    public:

        enum class ENPCAIPerceptibleTile Kind; // 0x0
        struct TWeakObjectPtr<struct UObject> Instigator; // 0x4
        float BeginTime; // 0xc
        float EndTime; // 0x10
        struct FBox Boundary; // 0x14
        struct TArray<uint64_t> AffectedPolyRefs; // 0x30

    };

    struct FNavCostDescriptor //ScriptStruct MFNPCAI.NavCostDescriptor
    {
    public:


    };

    struct FNavPolyRefArray //ScriptStruct MFNPCAI.NavPolyRefArray
    {
    public:


    };

    struct FNavConnectivityInfo //ScriptStruct MFNPCAI.NavConnectivityInfo
    {
    public:


    };

    struct FSoAStorage //ScriptStruct MFNPCAI.SoAStorage
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<int32_t> Offsets; // 0x0

    };

    struct FPortalEdgeStorage : FSoAStorage //ScriptStruct MFNPCAI.PortalEdgeStorage
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FPortalEdge> Items; // 0x10

    };

    struct FUInt64Storage : FSoAStorage //ScriptStruct MFNPCAI.UInt64Storage
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<uint64_t> Items; // 0x10

    };

    struct FInt32Storage : FSoAStorage //ScriptStruct MFNPCAI.Int32Storage
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<int32_t> Items; // 0x10

    };

    struct FNavLinkInfo //ScriptStruct MFNPCAI.NavLinkInfo
    {
    //Children Prop Count (Fields): 10
    public:

        bool bValid; // 0x0
        bool bEnabled; // 0x1
        char Direction; // 0x2
        enum class ENavLinkType LinkType; // 0x3
        uint32_t LinkID; // 0x4
        int32_t LinkIndex; // 0x8
        int32_t LeftIndex; // 0xc
        int32_t RightIndex; // 0x10
        int32_t LeftRegionIndex; // 0x14
        int32_t RightRegionIndex; // 0x18

    };

    struct FCoverPointPathLengthResult //ScriptStruct MFNPCAI.CoverPointPathLengthResult
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t PointID; // 0x0
        float PathLength; // 0x4

    };

    struct FAICandidateStandPosition //ScriptStruct MFNPCAI.AICandidateStandPosition
    {
    //Children Prop Count (Fields): 2
    public:

        float PathLength; // 0x0
        struct FVector Location; // 0x4

    };

    struct FAIGrassOctreeElement //ScriptStruct MFNPCAI.AIGrassOctreeElement
    {
    public:


    };

    struct FAIGrassOctreeData //ScriptStruct MFNPCAI.AIGrassOctreeData
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t GrassBlockIndex; // 0x0
        struct FVector Location; // 0x4

    };

    struct FAINearGrassBounds //ScriptStruct MFNPCAI.AINearGrassBounds
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Center; // 0x0
        float Radius; // 0xc
        struct TArray<int32_t> GrassIndexs; // 0x10

    };

    struct FAIGrassClusterInfo //ScriptStruct MFNPCAI.AIGrassClusterInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FBox Bounds; // 0x0
        struct TArray<struct FBox> BoxList; // 0x20

    };

    struct FAIGrassGrayBMP //ScriptStruct MFNPCAI.AIGrassGrayBMP
    {
    //Children Prop Count (Fields): 10
    public:

        int32_t BMPWidth; // 0x0
        int32_t BMPHeight; // 0x4
        struct TArray<struct FColor> Colors; // 0x8
        struct FVector2D ZeroPoint; // 0x18
        float ScaleValue; // 0x20
        int32_t MinLine; // 0x24
        int32_t MaxLine; // 0x28
        int32_t MinRow; // 0x2c
        int32_t MaxRow; // 0x30
        struct FBox OriginBoundBox; // 0x34

    };

    struct FAILandscapeGrassBlock //ScriptStruct MFNPCAI.AILandscapeGrassBlock
    {
    //Children Prop Count (Fields): 2
    public:

        struct FBox Bounds; // 0x0
        struct FVector Location; // 0x1c

    };

    struct FAIGrassBlock : FAILandscapeGrassBlock //ScriptStruct MFNPCAI.AIGrassBlock
    {
    //Children Prop Count (Fields): 6
    public:

        struct FName AIGrassName; // 0x28
        char Density; // 0x30
        struct TArray<struct FAIGrassBox> GrassBoxList; // 0x38
        struct TArray<struct FAIGrassCylinder> GrassCylinderList; // 0x48
        bool bSlowDownCharacter; // 0x58
        struct FBox SlowDownBounds; // 0x5c

    };

    struct FAIGrassCylinder //ScriptStruct MFNPCAI.AIGrassCylinder
    {
    //Children Prop Count (Fields): 4
    public:

        float ZCenter; // 0x0
        float HalfHeight; // 0x4
        float Radius; // 0x8
        struct TArray<char> PartsDensities; // 0x10

    };

    struct FAIGrassBox //ScriptStruct MFNPCAI.AIGrassBox
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Center; // 0x0
        struct FVector Extent; // 0xc
        float Density; // 0x18

    };

    struct FAIGrassEditorBlock : FAIGrassBlock //ScriptStruct MFNPCAI.AIGrassEditorBlock
    {
    //Children Prop Count (Fields): 1
    public:

        class UStaticMesh* StaticMesh; // 0x78

    };

    struct FAIFoliageGrassBlock //ScriptStruct MFNPCAI.AIFoliageGrassBlock
    {
    //Children Prop Count (Fields): 7
    public:

        int32_t Index; // 0x0
        struct FBox Bounds; // 0x4
        struct FVector Location; // 0x20
        float RotatonYaw; // 0x2c
        char Density; // 0x30
        float ScaleValue; // 0x34
        bool bSlowDownCharacter; // 0x38

    };

    struct FAIGrassMapInfo //ScriptStruct MFNPCAI.AIGrassMapInfo
    {
    //Children Prop Count (Fields): 19
    public:

        struct FString MapName; // 0x0
        float MapTopX; // 0x10
        float MapTopY; // 0x14
        float MapSizeX; // 0x18
        float MapSizeY; // 0x1c
        int32_t MapLandscapeGrassCellCountX; // 0x20
        int32_t MapLandscapeGrassCellCountY; // 0x24
        float LandscapeGrassCellSize; // 0x28
        int32_t MinLandscapeGrassCountInCell; // 0x2c
        float MinCellCoverPercent; // 0x30
        float MinLandscapeGrassHeight; // 0x34
        float LandscapeGrassZGapLimit; // 0x38
        float MinGrassHeight; // 0x3c
        float AverageDensityLimit; // 0x40
        struct FString IgnoreFoliageTags; // 0x48
        bool bIsGenerateMeshGrass; // 0x58
        struct FString MeshGrassTags; // 0x60
        struct FString SaveLevelName; // 0x70
        bool bShouldSkipMainLevel; // 0x80

    };

    struct FAISenseFlashBlock //ScriptStruct MFNPCAI.AISenseFlashBlock
    {
    //Children Prop Count (Fields): 11
    public:

        struct FVector StartPos; // 0x8
        struct FVector Dir; // 0x14
        float FarDim; // 0x20
        float NearDim; // 0x24
        float ZoneAngle; // 0x28
        float FaceAngle; // 0x2c
        float SevereDebuffDistance; // 0x30
        float ModerateDebuffDistance; // 0x34
        float MildDebuffDistance; // 0x38
        float Height; // 0x3c
        float MaxHeight; // 0x40

    };

    struct FAIBlockArea //ScriptStruct MFNPCAI.AIBlockArea
    {
    //Children Prop Count (Fields): 10
    public:

        enum class ENPCAIPerceptibleTile TileType; // 0x0
        struct FBox BlockBox; // 0x4
        struct FBox EffectiveBox; // 0x20
        struct FVector Center; // 0x3c
        float Radius; // 0x48
        float Heigh; // 0x4c
        float StartTime; // 0x50
        float EndTime; // 0x54
        float BlockStartTime; // 0x58
        float BlockEndTime; // 0x5c

    };

    struct FNPCAIPortraitToIDTableRow : FTableRowBase //ScriptStruct MFNPCAI.NPCAIPortraitToIDTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        struct FSoftClassProperty PortraitClass; // 0x8
        int64_t AIID; // 0x30

    };

    struct FAIMindGoalEnemyAngleMultiple //ScriptStruct MFNPCAI.AIMindGoalEnemyAngleMultiple
    {
    //Children Prop Count (Fields): 3
    public:

        float Angle; // 0x0
        float ScoreMultiple; // 0x4
        float AngleCos; // 0x8

    };

    struct FNPCAISceneEventInfo //ScriptStruct MFNPCAI.NPCAISceneEventInfo
    {
    //Children Prop Count (Fields): 8
    public:

        int32_t UniqueID; // 0x0
        enum class ENPCAISceneEventID eventId; // 0x4
        float StartTime; // 0x8
        float EndTime; // 0xc
        float ValidScope; // 0x10
        struct FVector TriggerLocation; // 0x14
        struct TArray<int64_t> AIIDs; // 0x20
        struct TArray<int64_t> AIPathGroupIDs; // 0x30

    };

    struct FNPCAISceneEventTableRow : FTableRowBase //ScriptStruct MFNPCAI.NPCAISceneEventTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        enum class ENPCAISceneEventID eventId; // 0x8
        float ValidTime; // 0xc
        float ValidScope; // 0x10
        struct TArray<int64_t> AIIDs; // 0x18
        struct TArray<int64_t> PathGroupIDs; // 0x28
        struct FString Comments; // 0x38

    };

    struct FNPCAIComingExplosionEvent //ScriptStruct MFNPCAI.NPCAIComingExplosionEvent
    {
    //Children Prop Count (Fields): 5
    public:

        struct FVector ExplosionLocation; // 0x4
        float Damage; // 0x10
        float MaxRange; // 0x14
        class AActor* Instigator; // 0x18
        struct FName Tag; // 0x20

    };

    struct FAIDamageEvent //ScriptStruct AIModule.AIDamageEvent
    {
    //Children Prop Count (Fields): 6
    public:

        float Amount; // 0x0
        struct FVector Location; // 0x4
        struct FVector HitLocation; // 0x10
        class AActor* DamagedActor; // 0x20
        class AActor* Instigator; // 0x28
        struct FName Tag; // 0x30

    };

    struct FNPCAIDamageEvent : FAIDamageEvent //ScriptStruct MFNPCAI.NPCAIDamageEvent
    {
    public:


    };

    struct FAINoiseEvent //ScriptStruct AIModule.AINoiseEvent
    {
    //Children Prop Count (Fields): 6
    public:

        struct FVector NoiseLocation; // 0x4
        float Loudness; // 0x10
        float MaxRange; // 0x14
        class AActor* Instigator; // 0x18
        class AActor* NoiseRelator; // 0x20
        struct FName Tag; // 0x28

    };

    struct FNPCAINoiseEvent : FAINoiseEvent //ScriptStruct MFNPCAI.NPCAINoiseEvent
    {
    public:


    };

    struct FNPCAISteepZoneDeleteStage //ScriptStruct MFNPCAI.NPCAISteepZoneDeleteStage
    {
    public:


    };

    struct FNPCAISteepZoneCalculatePointNormalStage : FNPCAISteepZoneDeleteStage //ScriptStruct MFNPCAI.NPCAISteepZoneCalculatePointNormalStage
    {
    public:


    };

    struct FNPCAISteepZoneCalculatePointSteepDensityStage : FNPCAISteepZoneDeleteStage //ScriptStruct MFNPCAI.NPCAISteepZoneCalculatePointSteepDensityStage
    {
    public:


    };

    struct FNPCAISteepZoneCalculatePolyNormalStage : FNPCAISteepZoneDeleteStage //ScriptStruct MFNPCAI.NPCAISteepZoneCalculatePolyNormalStage
    {
    public:


    };

    struct FNPCAISteepZoneCollectNavMeshPolyStage : FNPCAISteepZoneDeleteStage //ScriptStruct MFNPCAI.NPCAISteepZoneCollectNavMeshPolyStage
    {
    public:


    };

    struct FNPCAISteepZoneDeleter //ScriptStruct MFNPCAI.NPCAISteepZoneDeleter
    {
    //Children Prop Count (Fields): 4
    public:

        class UObject* WorldContextObject; // 0x0
        class UWorld* World; // 0x20
        class ARecastNavMesh* MainNavData; // 0x30
        class ANPCAINavMeshManager* NavMeshManager; // 0x38

    };

    struct FNPCAISteepZoneGenerateSamplePointStage : FNPCAISteepZoneDeleteStage //ScriptStruct MFNPCAI.NPCAISteepZoneGenerateSamplePointStage
    {
    public:


    };

    struct FNPCAISteepZoneModifyTileCacheStage : FNPCAISteepZoneDeleteStage //ScriptStruct MFNPCAI.NPCAISteepZoneModifyTileCacheStage
    {
    public:


    };

    struct FNPCAISteepZoneRebuildNavMeshStage : FNPCAISteepZoneDeleteStage //ScriptStruct MFNPCAI.NPCAISteepZoneRebuildNavMeshStage
    {
    public:


    };

    struct FSteepZoneSamplePoint //ScriptStruct MFNPCAI.SteepZoneSamplePoint
    {
    public:


    };

    struct FSteepZoneNavMeshPoly //ScriptStruct MFNPCAI.SteepZoneNavMeshPoly
    {
    public:


    };

    struct FSteepZoneDetailTriangle //ScriptStruct MFNPCAI.SteepZoneDetailTriangle
    {
    public:


    };

    struct FSteepZoneDeleteSettings //ScriptStruct MFNPCAI.SteepZoneDeleteSettings
    {
    //Children Prop Count (Fields): 15
    public:

        struct FVector NavQueryExtent; // 0x0
        bool bHintProjection2D; // 0xc
        float SampleSpacing; // 0x10
        float TraceRadius; // 0x14
        float IncludedAngleTolerance; // 0x18
        float WalkableFloorAngle; // 0x1c
        float DensityQuerySize; // 0x20
        enum class ECollisionChannel TraceChannel; // 0x2c
        bool bTraceComplex; // 0x2d
        bool bParallelCollectNavMeshPoly; // 0x2e
        bool bParallelCalculatePolyNormal; // 0x2f
        bool bParallelGenerateSamplePoint; // 0x30
        bool bParallelCalculatePointNormal; // 0x31
        bool bParallelCalculateSteepDensity; // 0x32
        bool bParallelModifyTileCache; // 0x33

    };

    struct FAIGroupAllyDeathInfo //ScriptStruct MFNPCAI.AIGroupAllyDeathInfo
    {
    //Children Prop Count (Fields): 3
    public:

        float DeathTime; // 0x0
        struct FVector DeathLocation; // 0x4
        struct FVector KillerLocation; // 0x10

    };

    struct FAITrackLOGTemplateForDataTable : FTableRowBase //ScriptStruct MFNPCAI.AITrackLOGTemplateForDataTable
    {
    //Children Prop Count (Fields): 2
    public:

        enum class EAITrackLOGType LogType; // 0x8
        struct FString Template; // 0x10

    };

    struct FAITrackLOG //ScriptStruct MFNPCAI.AITrackLOG
    {
    //Children Prop Count (Fields): 3
    public:

        enum class EAITrackLOGType LogType; // 0x0
        int64_t LOGTime; // 0x8
        struct FString LOGKValues; // 0x10

    };

    struct FAILocationMonitor //ScriptStruct MFNPCAI.AILocationMonitor
    {
    //Children Prop Count (Fields): 3
    public:

        struct TWeakObjectPtr<struct APawn> Target; // 0x0
        float MonitoringInterval; // 0x8
        float MaxTimeAllowOutOfNavmesh; // 0xc

    };

    struct FAILocationRecord //ScriptStruct MFNPCAI.AILocationRecord
    {
    public:


    };

    struct FAIDebugLineStruct //ScriptStruct MFNPCAI.AIDebugLineStruct
    {
    //Children Prop Count (Fields): 6
    public:

        int32_t ID; // 0x0
        struct FVector StartLocation; // 0x4
        struct FVector EndLocation; // 0x10
        struct FColor Color; // 0x1c
        float DurationTime; // 0x20
        float EndTime; // 0x24

    };

    struct FAIDebugDrawSphereInfo //ScriptStruct MFNPCAI.AIDebugDrawSphereInfo
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector Loc; // 0x0
        float Radius; // 0xc
        struct FLinearColor LineColor; // 0x10
        float Duration; // 0x20

    };

    struct FAIDebugDrawLineInfo //ScriptStruct MFNPCAI.AIDebugDrawLineInfo
    {
    //Children Prop Count (Fields): 5
    public:

        struct FVector StartLoc; // 0x0
        struct FVector EndLoc; // 0xc
        struct FLinearColor LineColor; // 0x18
        float Duration; // 0x28
        float Thickness; // 0x2c

    };

    struct FAIShotCountStat //ScriptStruct MFNPCAI.AIShotCountStat
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t Count; // 0x0
        float LastTime; // 0x4
        float FirstTime; // 0x8
        float IntervalToClear; // 0xc

    };

    struct FPMCAISpawnInfo_ForSearchPath //ScriptStruct MFNPCAI.PMCAISpawnInfo_ForSearchPath
    {
    //Children Prop Count (Fields): 3
    public:

        class AActor* SourcePoint; // 0x0
        float TotalCost; // 0x8
        bool Checked; // 0xc

    };

    struct FCheckCoverPointFinder //ScriptStruct MFNPCAI.CheckCoverPointFinder
    {
    //Children Prop Count (Fields): 5
    public:

        class AActor* AIPawn; // 0x0
        float CheckPathLength; // 0x8
        int32_t IndexFind; // 0xc
        float LastTimestamp; // 0x10
        struct TArray<struct FCoverPointOctreeElement> Elements; // 0x18

    };

    struct FCoverPointOctreeElement //ScriptStruct AIActionPointGeneratorRuntime.CoverPointOctreeElement
    {
    public:


    };

    struct FAIBackUpCoverPointFinder //ScriptStruct MFNPCAI.AIBackUpCoverPointFinder
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector AIPosistion; // 0x0
        struct FVector EnemyPosition; // 0xc
        float LastTime; // 0x18

    };

    struct FAICoverPointInfo //ScriptStruct MFNPCAI.AICoverPointInfo
    {
    //Children Prop Count (Fields): 12
    public:

        int32_t ID; // 0x0
        bool IsFree; // 0x4
        class AActor* OwnerActor; // 0x8
        struct FVector Location; // 0x10
        struct FVector ToWallVector; // 0x1c
        enum class EAIPose ProtectedStance; // 0x28
        bool IsSafe; // 0x29
        float LastSpottedTime; // 0x2c
        struct FVector FirePosition; // 0x30
        enum class EAIPose FireStance; // 0x3c
        enum class EAILeanType TiltType; // 0x3d
        float BaseWeight; // 0x40

    };

    struct FAICharacterConfig //ScriptStruct MFNPCAI.AICharacterConfig
    {
    //Children Prop Count (Fields): 2
    public:

        float FireInterval; // 0x0
        float PerBurstReduce; // 0x4

    };

    struct FAIIDSegInfo //ScriptStruct MFNPCAI.AIIDSegInfo
    {
    //Children Prop Count (Fields): 4
    public:

        struct FAIIDSegInfoData MainCategory; // 0x0
        struct FAIIDSegInfoData Career; // 0x10
        struct FAIIDSegInfoData Tendency; // 0x20
        struct FAIIDSegInfoData Difficulty; // 0x30

    };

    struct FAIIDSegInfoData //ScriptStruct MFNPCAI.AIIDSegInfoData
    {
    //Children Prop Count (Fields): 2
    public:

        int64_t Div; // 0x0
        int64_t Mod; // 0x8

    };

    struct FAIStackGunRecord //ScriptStruct MFNPCAI.AIStackGunRecord
    {
    //Children Prop Count (Fields): 8
    public:

        bool CanStackGun; // 0x0
        struct FVector MyPosition; // 0x4
        struct FVector EnemyPosition; // 0x10
        enum class EAILeanType AILean; // 0x1c
        enum class EAIPose AIPose; // 0x1d
        struct FVector GunPoint; // 0x20
        struct FVector EeyPoint; // 0x2c
        struct FVector ShootPoint; // 0x38

    };

    struct FNPCAIRollDecisionStruct : FTableRowBase //ScriptStruct MFNPCAI.NPCAIRollDecisionStruct
    {
    //Children Prop Count (Fields): 3
    public:

        enum class ENPCAIDecision Decision; // 0x8
        float BaseTendency; // 0xc
        float BasePerceive; // 0x10

    };

    struct FAIMoveRequest //ScriptStruct AIModule.AIMoveRequest
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* GoalActor; // 0x0

    };

    struct FNPCAIMoveRequest : FAIMoveRequest //ScriptStruct MFNPCAI.NPCAIMoveRequest
    {
    public:


    };

    struct FNPCAIFireSetting //ScriptStruct MFNPCAI.NPCAIFireSetting
    {
    //Children Prop Count (Fields): 14
    public:

        struct FVector Location; // 0x0
        class AActor* EnemyTarget; // 0x10
        bool bCalcSight; // 0x18
        bool bCalcShoot; // 0x19
        float FireInterval; // 0x1c
        bool bIgnoreAimingTime; // 0x20
        bool bEnabledHitRateControl; // 0x21
        bool bEnabledRecoilControl; // 0x22
        enum class EAIBodyPartType ShootPartID; // 0x23
        enum class EAIBodyPartType LastShootPartID; // 0x24
        bool bPressureAim; // 0x25
        float WaitEndtime; // 0x28
        struct FVector LastFireLocation; // 0x2c
        class UNPCAITargetInfo* EnemyInfo; // 0x38

    };

    struct FNPCAIFireOrder //ScriptStruct MFNPCAI.NPCAIFireOrder
    {
    //Children Prop Count (Fields): 7
    public:

        bool bValidOrder; // 0x0
        struct FVector FirePoint; // 0x4
        enum class EAIBodyPartType HitPart; // 0x10
        bool IsUsingPredestined; // 0x11
        bool IsHit; // 0x12
        bool bShotLimited; // 0x13
        bool bFakeShot; // 0x14

    };

    struct FAIBodyPartVisibilityInfo //ScriptStruct MFNPCAI.AIBodyPartVisibilityInfo
    {
    //Children Prop Count (Fields): 7
    public:

        enum class EAIBodyPartType BodyPartType; // 0x0
        bool bIsVisible; // 0x1
        bool bCanShoot; // 0x2
        float LastCanSeeTime; // 0x4
        int32_t GrassWeight; // 0x8
        int32_t ShootCalculateCount; // 0xc
        enum class ENPCAISenseBarrier Barrier; // 0x10

    };

    struct FAIBodyPartHitInfo //ScriptStruct MFNPCAI.AIBodyPartHitInfo
    {
    //Children Prop Count (Fields): 5
    public:

        enum class EAIBodyPartType BodyPartType; // 0x0
        float HitDurationStartTime; // 0x4
        float HitDurationValues; // 0x8
        float FirstHitTime; // 0xc
        float LastHitTime; // 0x10

    };

    struct FAIBodyBulkAimingChoice //ScriptStruct MFNPCAI.AIBodyBulkAimingChoice
    {
    //Children Prop Count (Fields): 3
    public:

        enum class EAIBodyBulkType BodyBulk; // 0x0
        float Weight; // 0x4
        struct TArray<struct FAIBodyPartAimingChoice> BodyParts; // 0x8

    };

    struct FAIBodyPartAimingChoice //ScriptStruct MFNPCAI.AIBodyPartAimingChoice
    {
    //Children Prop Count (Fields): 2
    public:

        enum class EAIBodyPartType BodyPart; // 0x0
        float Weight; // 0x4

    };

    struct FAINoiseMakerInfo //ScriptStruct MFNPCAI.AINoiseMakerInfo
    {
    //Children Prop Count (Fields): 4
    public:

        float lasttime_footstep; // 0x0
        float lasttime_gunfire; // 0x4
        float lasttime_bulletfire; // 0x8
        float lasttime_bullethit; // 0xc

    };

    struct FAIVisibleResult //ScriptStruct MFNPCAI.AIVisibleResult
    {
    //Children Prop Count (Fields): 3
    public:

        bool IsVisible; // 0x0
        int32_t BlockWeight; // 0x4
        enum class ENPCAISenseBarrier Barrier; // 0x8

    };

    struct FAISenseSightNormal //ScriptStruct MFNPCAI.AISenseSightNormal
    {
    //Children Prop Count (Fields): 6
    public:

        float Angle; // 0x0
        float VisionRadius; // 0x4
        float LostVisionRadius; // 0x8
        float AngleCos; // 0xc
        float VisionRadiusSqr; // 0x10
        float LostVisionRadiusSqr; // 0x14

    };

    struct FNPCAIWeaponConfigTableRow : FTableRowBase //ScriptStruct MFNPCAI.NPCAIWeaponConfigTableRow
    {
    //Children Prop Count (Fields): 13
    public:

        struct FString WeaponBlueprintName; // 0x8
        int64_t WeaponId; // 0x18
        float WeaponBaseSpread; // 0x20
        float WeaponBaseRecoil; // 0x24
        int32_t RecalcMustTimeMin; // 0x28
        int32_t RecalcMustTimeMax; // 0x2c
        float FireDistanceMin; // 0x30
        float FireDistanceMax; // 0x34
        float FireIntervalMin; // 0x38
        float FireIntervalMax; // 0x3c
        int32_t ReloadCountMin; // 0x40
        int32_t ReloadCountMax; // 0x44
        struct FSoftClassProperty DefaultBulletClass; // 0x48

    };

    struct FComponentInfo //ScriptStruct MFNPCAI.ComponentInfo
    {
    //Children Prop Count (Fields): 1
    public:

        class UActorComponent* Component; // 0x0

    };

    struct FDoorPointTmpBuildData //ScriptStruct AIActionPointGeneratorRuntime.DoorPointTmpBuildData
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector Location; // 0x0
        bool IsSafety; // 0xc
        int32_t RelevanceIndex; // 0x10
        int32_t DangerValue; // 0x14

    };

    struct FCoverPointOctreeData //ScriptStruct AIActionPointGeneratorRuntime.CoverPointOctreeData
    {
    //Children Prop Count (Fields): 6
    public:

        int32_t CoverID; // 0x0
        enum class EActionPointType PointType; // 0x4
        struct FVector Location; // 0x10
        struct FVector Direction; // 0x1c
        struct FVector RightDirection; // 0x28
        struct TArray<struct FCoverPoseData> PoseData; // 0x38

    };

    struct FCoverPoseData //ScriptStruct AIActionPointGeneratorRuntime.CoverPoseData
    {
    //Children Prop Count (Fields): 9
    public:

        enum class ENPCPoseType PoseType; // 0x0
        char bLShootable; // 0x1
        char bRShootable; // 0x1
        char bMShootable; // 0x1
        struct FVector Location; // 0x4
        struct FVector Direction; // 0x10
        float DefenceRatio; // 0x1c
        float LDefenceAngle; // 0x20
        float RDefenceAngle; // 0x24

    };

    struct FTakeCoverPointIDListInfo //ScriptStruct AIActionPointGeneratorRuntime.TakeCoverPointIDListInfo
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<int32_t> List; // 0x0

    };

    struct FCoverPointRuntimeInfo //ScriptStruct AIActionPointGeneratorRuntime.CoverPointRuntimeInfo
    {
    //Children Prop Count (Fields): 4
    public:

        struct TWeakObjectPtr<struct AActor> TakenActor; // 0x0
        float TakenBeginTime; // 0x8
        float NextAvailableTime; // 0xc
        float LastSpottedTime; // 0x10

    };

    struct FNavMeshCoverPointPoseSamplingConfig //ScriptStruct AIActionPointGeneratorRuntime.NavMeshCoverPointPoseSamplingConfig
    {
    //Children Prop Count (Fields): 6
    public:

        enum class ENPCPoseType PoseType; // 0x0
        float DefenceHeight; // 0x4
        float DefenceRatio; // 0x8
        float FireHeight; // 0xc
        float RequiredMinimumDefenceAngle; // 0x10
        float LimitedMaximumDefenceAngle; // 0x14

    };

    struct FDebugArrow //ScriptStruct AIActionPointGeneratorRuntime.DebugArrow
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector Start; // 0x0
        struct FVector End; // 0xc
        struct FColor Color; // 0x18
        bool bGenericOrUnitDebugData; // 0x1c

    };

    struct FDebugPoint //ScriptStruct AIActionPointGeneratorRuntime.DebugPoint
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Location; // 0x0
        struct FColor Color; // 0xc
        bool bGenericOrUnitDebugData; // 0x10

    };

    struct FNavMeshEdgeCoverDataEditor //ScriptStruct AIActionPointGeneratorRuntime.NavMeshEdgeCoverDataEditor
    {
    public:


    };

    struct FDTOCoverDataEditor //ScriptStruct AIActionPointGeneratorRuntime.DTOCoverDataEditor
    {
    public:


    };

    struct FDTOCoverData : FActionPointData //ScriptStruct AIActionPointGeneratorRuntime.DTOCoverData
    {
    //Children Prop Count (Fields): 11
    public:

        uint64_t NavPolyRef; // 0x10
        int32_t EdgeIndex; // 0x18
        char bCustomized; // 0x1c
        char bMarked; // 0x1c
        char bAddable; // 0x1c
        char bLMovable; // 0x1c
        char bRMovable; // 0x1c
        float BaseWeight; // 0x20
        struct FRotator Rotation; // 0x24
        struct FVector RightDir; // 0x30
        struct TArray<struct FCoverPoseData> PoseData; // 0x40

    };

    struct FNavMeshTacticPointSampleData : FDTOCoverData //ScriptStruct AIActionPointGeneratorRuntime.NavMeshTacticPointSampleData
    {
    public:


    };

    struct FKeyRouteSkeletonEditPoint //ScriptStruct AIActionPointGeneratorRuntime.KeyRouteSkeletonEditPoint
    {
    //Children Prop Count (Fields): 7
    public:

        int32_t UniqueID; // 0x8
        struct FVector Location; // 0xc
        float DistanceToWall; // 0x18
        bool bDistanceToWallSmall; // 0x1c
        int32_t ConnectionCount; // 0x20
        float Score; // 0x24
        bool IsJunction; // 0x28

    };

    struct FNavMeshTacticPointBuilder //ScriptStruct AIActionPointGeneratorRuntime.NavMeshTacticPointBuilder
    {
    //Children Prop Count (Fields): 3
    public:

        class ACoverSystemActor* CoverSystemActor; // 0x0
        class UWorld* World; // 0x28
        class ARecastNavMesh* MainNavData; // 0x30

    };

    struct FNavMeshTacticPointBuildStage //ScriptStruct AIActionPointGeneratorRuntime.NavMeshTacticPointBuildStage
    {
    public:


    };

    struct FNavMeshTacticPointCalculatePointDefenceAngleStage : FNavMeshTacticPointBuildStage //ScriptStruct AIActionPointGeneratorRuntime.NavMeshTacticPointCalculatePointDefenceAngleStage
    {
    public:


    };

    struct FNavMeshTacticPointCalculatePointDefenceRatioStage : FNavMeshTacticPointBuildStage //ScriptStruct AIActionPointGeneratorRuntime.NavMeshTacticPointCalculatePointDefenceRatioStage
    {
    public:


    };

    struct FNavMeshTacticPointCollectBoundaryEdgeStage : FNavMeshTacticPointBuildStage //ScriptStruct AIActionPointGeneratorRuntime.NavMeshTacticPointCollectBoundaryEdgeStage
    {
    public:


    };

    struct FNavMeshTacticPointGenerateEdgeDefenceMapStage : FNavMeshTacticPointBuildStage //ScriptStruct AIActionPointGeneratorRuntime.NavMeshTacticPointGenerateEdgeDefenceMapStage
    {
    public:


    };

    struct FNavMeshTacticPointGenerateSamplePointStage : FNavMeshTacticPointBuildStage //ScriptStruct AIActionPointGeneratorRuntime.NavMeshTacticPointGenerateSamplePointStage
    {
    public:


    };

    struct FNavMeshTacticPointMergeParallelEdgeStage : FNavMeshTacticPointBuildStage //ScriptStruct AIActionPointGeneratorRuntime.NavMeshTacticPointMergeParallelEdgeStage
    {
    public:


    };

    struct FNavMeshTacticPointRemoveTooClosePointStage : FNavMeshTacticPointBuildStage //ScriptStruct AIActionPointGeneratorRuntime.NavMeshTacticPointRemoveTooClosePointStage
    {
    public:


    };

    struct FNavMeshTacticPointSetupEdgeDataStage : FNavMeshTacticPointBuildStage //ScriptStruct AIActionPointGeneratorRuntime.NavMeshTacticPointSetupEdgeDataStage
    {
    public:


    };

    struct FSeekANode //ScriptStruct AIActionPointGeneratorRuntime.SeekANode
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t Index; // 0x0
        int32_t ParentIndex; // 0x4
        float NowCost; // 0x8
        float CostFromBot; // 0xc
        float CostEstimate; // 0x10

    };

    struct FTacticPointData : FActionPointData //ScriptStruct AIActionPointGeneratorRuntime.TacticPointData
    {
    //Children Prop Count (Fields): 15
    public:

        enum class ETacticPointType TacticPointType; // 0x10
        int32_t PointID; // 0x14
        float Interval; // 0x18
        bool AlwaysActivated; // 0x1c
        bool ShouldCrouch; // 0x1d
        struct TArray<struct FTacticPointGuardTargetAndDirection> GuardTargetAndDirections; // 0x20
        bool FieldTrace; // 0x30
        float Radius; // 0x34
        char bCustomized; // 0x38
        uint32_t ActorID; // 0x3c
        int8_t IndRelatedToActor; // 0x40
        float CustomValue; // 0x44
        struct FVector CustomVector; // 0x48
        struct FRotator Rotation; // 0x54
        struct TArray<struct FActionPointRadianSafe> OrientSafetys; // 0x60

    };

    struct FTacticPointGuardTargetAndDirection //ScriptStruct AIActionPointGeneratorRuntime.TacticPointGuardTargetAndDirection
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Location; // 0x0
        struct FRotator Direction; // 0xc

    };

    struct FTacticPointTypeColor //ScriptStruct AIActionPointGeneratorRuntime.TacticPointTypeColor
    {
    //Children Prop Count (Fields): 13
    public:

        struct FLinearColor None_Color; // 0x0
        struct FLinearColor FlashBag_Color; // 0x10
        struct FLinearColor Smoke_Color; // 0x20
        struct FLinearColor HighValue_Color; // 0x30
        struct FLinearColor FatalGate_Color; // 0x40
        struct FLinearColor Escape_Color; // 0x50
        struct FLinearColor Trap_Color; // 0x60
        struct FLinearColor OverWatch_Color; // 0x70
        struct FLinearColor Prone_Color; // 0x80
        struct FLinearColor Window_Color; // 0x90
        struct FLinearColor Door_Color; // 0xa0
        struct FLinearColor Retreat_Color; // 0xb0
        struct FLinearColor Transfer_Color; // 0xc0

    };

    struct FInAppPurchaseReceiptInfo //ScriptStruct OnlineSubsystemUtils.InAppPurchaseReceiptInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString ItemName; // 0x0
        struct FString ItemID; // 0x10
        struct FString ValidationInfo; // 0x20

    };

    struct FInAppPurchaseProductInfo2 //ScriptStruct OnlineSubsystemUtils.InAppPurchaseProductInfo2
    {
    //Children Prop Count (Fields): 12
    public:

        struct FString Identifier; // 0x0
        struct FString TransactionIdentifier; // 0x10
        struct FString DisplayName; // 0x20
        struct FString DisplayDescription; // 0x30
        struct FString DisplayPrice; // 0x40
        float RawPrice; // 0x50
        struct FString CurrencyCode; // 0x58
        struct FString CurrencySymbol; // 0x68
        struct FString DecimalSeparator; // 0x78
        struct FString GroupingSeparator; // 0x88
        struct FString ReceiptData; // 0x98
        struct TMap<struct FString, struct FString> DynamicFields; // 0xa8

    };

    struct FInAppPurchaseProductRequest2 //ScriptStruct OnlineSubsystemUtils.InAppPurchaseProductRequest2
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString ProductIdentifier; // 0x0
        bool bIsConsumable; // 0x10

    };

    struct FPlayerReservation //ScriptStruct OnlineSubsystemUtils.PlayerReservation
    {
    //Children Prop Count (Fields): 5
    public:

        struct FUniqueNetIdRepl UniqueID; // 0x0
        struct FString ValidationStr; // 0x28
        struct FString Platform; // 0x38
        bool bAllowCrossplay; // 0x48
        float ElapsedTime; // 0x4c

    };

    struct FPIELoginSettingsInternal //ScriptStruct OnlineSubsystemUtils.PIELoginSettingsInternal
    {
    //Children Prop Count (Fields): 4
    public:

        struct FString ID; // 0x0
        struct FString Token; // 0x10
        struct FString Type; // 0x20
        struct TArray<char> TokenBytes; // 0x30

    };

    struct FPartyReservation //ScriptStruct OnlineSubsystemUtils.PartyReservation
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t TeamNum; // 0x0
        struct FUniqueNetIdRepl PartyLeader; // 0x8
        struct TArray<struct FPlayerReservation> PartyMembers; // 0x30
        struct TArray<struct FPlayerReservation> RemovedPartyMembers; // 0x40

    };

    struct FSpectatorReservation //ScriptStruct OnlineSubsystemUtils.SpectatorReservation
    {
    //Children Prop Count (Fields): 2
    public:

        struct FUniqueNetIdRepl SpectatorId; // 0x0
        struct FPlayerReservation Spectator; // 0x28

    };

    struct FNamedInterfaceDef //ScriptStruct OnlineSubsystem.NamedInterfaceDef
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName InterfaceName; // 0x0
        struct FString InterfaceClassName; // 0x8

    };

    struct FNamedInterface //ScriptStruct OnlineSubsystem.NamedInterface
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName InterfaceName; // 0x0
        class UObject* InterfaceObject; // 0x8

    };

    struct FInAppPurchaseProductRequest //ScriptStruct OnlineSubsystem.InAppPurchaseProductRequest
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString ProductIdentifier; // 0x0
        bool bIsConsumable; // 0x10

    };

    struct FQuestState //ScriptStruct MFQuestSystem.QuestState
    {
    //Children Prop Count (Fields): 2
    public:

        enum class EQuestStatus CurrQuestStatus; // 0x0
        enum class EQuestStatus OldQuestStatus; // 0x1

    };

    struct FQuestContextPairConfig //ScriptStruct MFQuestSystem.QuestContextPairConfig
    {
    //Children Prop Count (Fields): 2
    public:

        class UMFQuestContextSourceBase* ContextSourceClass; // 0x0
        class UMFQuestContextBase* ContextClass; // 0x8

    };

    struct FQuestDistributerBlackboard //ScriptStruct MFQuestSystem.QuestDistributerBlackboard
    {
    //Children Prop Count (Fields): 4
    public:

        struct TMap<struct FGameplayTag, int32_t> IntMap; // 0x0
        struct TMap<struct FGameplayTag, struct FNestedIntArray> IntArrayMap; // 0x50
        struct TMap<struct FGameplayTag, struct FNestedObjectArray> ObjectArrayMap; // 0xa0
        struct TMap<struct FGameplayTag, class UObject*> ObjectMap; // 0xf0

    };

    struct FNestedObjectArray //ScriptStruct MFQuestSystem.NestedObjectArray
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class UObject*> ObjectArray; // 0x0

    };

    struct FNestedIntArray //ScriptStruct MFQuestSystem.NestedIntArray
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<int32_t> IntArray; // 0x0

    };

    struct FQuestGraphConnection //ScriptStruct MFQuestSystem.QuestGraphConnection
    {
    public:


    };

    struct FGlassBoxCollisionInfo //ScriptStruct MFPropsDestruction.GlassBoxCollisionInfo
    {
    //Children Prop Count (Fields): 1
    public:

        bool bBroken; // 0x0

    };

    struct FMFGlassCachedImpact //ScriptStruct MFPropsDestruction.MFGlassCachedImpact
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t ColorID; // 0x0
        int8_t WeaponType; // 0x4
        struct FVector Location; // 0x8
        struct FVector Normal; // 0x14

    };

    struct FMFGlassImpact //ScriptStruct MFPropsDestruction.MFGlassImpact
    {
    //Children Prop Count (Fields): 3
    public:

        int8_t WeaponType; // 0x0
        struct FVector Location; // 0x4
        struct FVector Normal; // 0x10

    };

    struct FGlassHitEffectInfo //ScriptStruct MFPropsDestruction.GlassHitEffectInfo
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<int32_t> IDList; // 0x0
        struct TArray<struct FVector> DirList; // 0x10
        struct TArray<int32_t> WeaponTypeList; // 0x20
        int32_t Count; // 0x30

    };

    struct FGlassBreakParam //ScriptStruct MFDestructionCommon.GlassBreakParam
    {
    //Children Prop Count (Fields): 10
    public:

        struct FVector Pos; // 0x0
        struct FVector Dir; // 0xc
        struct FVector Size; // 0x18
        class UObject* StaticMesh; // 0x28
        int32_t TriStartIndex; // 0x30
        int32_t TriEndIndex; // 0x34
        struct FVector VelocityDir; // 0x38
        int8_t EffectType; // 0x44
        int8_t WeaponType; // 0x45
        class UPhysicalMaterial* PhysMat; // 0x48

    };

    struct FDestructibleObjParamBind //ScriptStruct MFDestructionCommon.DestructibleObjParamBind
    {
    //Children Prop Count (Fields): 2
    public:

        class UPhysicalMaterial* PhysicalMaterial; // 0x0
        struct FDestructibleObjParam Param; // 0x8

    };

    struct FDestructibleObjParam //ScriptStruct MFDestructionCommon.DestructibleObjParam
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t DestructibleLevel; // 0x0
        float ChunkLife; // 0x4
        float ChunkLife5; // 0x8

    };

    struct FInputRotationInfo //ScriptStruct MFMobileJoystick.InputRotationInfo
    {
    public:


    };

    struct FObjPool //ScriptStruct MFPreload.ObjPool
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class UObject*> ObjPool; // 0x0

    };

    struct FReplayEvent //ScriptStruct MFReplaySystem.ReplayEvent
    {
    //Children Prop Count (Fields): 4
    public:

        struct FString eventId; // 0x0
        struct FString Group; // 0x10
        int32_t TimeInMs; // 0x20
        class UReplayDataObject* Data; // 0x28

    };

    struct FReplayFragmentServerSendInfo //ScriptStruct MFReplaySystem.ReplayFragmentServerSendInfo
    {
    public:


    };

    struct FReplayObjectData //ScriptStruct MFReplaySystem.ReplayObjectData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Name; // 0x0
        class UObject* Value; // 0x10

    };

    struct FReplayTransformData //ScriptStruct MFReplaySystem.ReplayTransformData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Name; // 0x0
        struct FTransform Value; // 0x10

    };

    struct FReplayRotatorData //ScriptStruct MFReplaySystem.ReplayRotatorData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Name; // 0x0
        struct FRotator Value; // 0x10

    };

    struct FReplayVectorData //ScriptStruct MFReplaySystem.ReplayVectorData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Name; // 0x0
        struct FVector Value; // 0x10

    };

    struct FReplayTextData //ScriptStruct MFReplaySystem.ReplayTextData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Name; // 0x0
        struct FText Value; // 0x10

    };

    struct FReplayStringData //ScriptStruct MFReplaySystem.ReplayStringData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Name; // 0x0
        struct FString Value; // 0x10

    };

    struct FReplayNameData //ScriptStruct MFReplaySystem.ReplayNameData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Name; // 0x0
        struct FName Value; // 0x10

    };

    struct FReplayFloatData //ScriptStruct MFReplaySystem.ReplayFloatData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Name; // 0x0
        float Value; // 0x10

    };

    struct FReplayInt64Data //ScriptStruct MFReplaySystem.ReplayInt64Data
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Name; // 0x0
        int64_t Value; // 0x10

    };

    struct FReplayIntData //ScriptStruct MFReplaySystem.ReplayIntData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Name; // 0x0
        int32_t Value; // 0x10

    };

    struct FReplayByteData //ScriptStruct MFReplaySystem.ReplayByteData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Name; // 0x0
        struct TArray<char> Value; // 0x10

    };

    struct FReplayBoolData //ScriptStruct MFReplaySystem.ReplayBoolData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Name; // 0x0
        bool Value; // 0x10

    };

    struct FBlendSettings //ScriptStruct MFReplaySystem.BlendSettings
    {
    //Children Prop Count (Fields): 4
    public:

        float BlendTime; // 0x0
        enum class EViewTargetBlendFunction BlendFunction; // 0x4
        float BlendExponent; // 0x8
        bool bLockOutgoing; // 0xc

    };

    struct FReplayInfo //ScriptStruct MFReplaySystem.ReplayInfo
    {
    //Children Prop Count (Fields): 5
    public:

        struct FString FriendlyName; // 0x0
        struct FString ActualName; // 0x10
        struct FDateTime RecordDate; // 0x20
        int32_t LengthInMS; // 0x28
        float SizeInMb; // 0x2c

    };

    struct FMFSceneryStreamingAsset //ScriptStruct MFSceneryRuntime.MFSceneryStreamingAsset
    {
    //Children Prop Count (Fields): 2
    public:

        class UTextureRenderTarget2DArray* StreamingTexture; // 0x0
        class ULandscapeComponentDataBase* StreamingTextureType; // 0x8

    };

    struct FReflectionVoxel //ScriptStruct MFVoxelReflectionRuntime.ReflectionVoxel
    {
    //Children Prop Count (Fields): 5
    public:

        struct TArray<int32_t> ReflectionCaptureIDs; // 0x0
        uint32_t CornerNeighbourFlags; // 0x10
        uint32_t CornerInteriorFlags; // 0x14
        uint32_t CornerSkyLightFlags; // 0x18
        uint32_t CornerInteriorFlagsAmbientGI; // 0x1c

    };

    struct FReflectionVoxelTreeNode //ScriptStruct MFVoxelReflectionRuntime.ReflectionVoxelTreeNode
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ChildMaskL; // 0x0
        uint32_t ChildMaskH; // 0x4
        uint32_t ChildStartIndex; // 0x8

    };

    struct FMFVoxelEnvCoverLocation //ScriptStruct MFVoxelEnv.MFVoxelEnvCoverLocation
    {
    //Children Prop Count (Fields): 3
    public:

        class AActor* Actor; // 0x0
        struct FVector Location; // 0x8
        struct FVector Normal; // 0x14

    };

    struct FMFVoxelEnvPathPointFindingConfig //ScriptStruct MFVoxelEnv.MFVoxelEnvPathPointFindingConfig
    {
    //Children Prop Count (Fields): 5
    public:

        float EstimateWeight; // 0x0
        float NodeSizePreference; // 0x4
        enum class EMFVoxelEnvHeuristic Heuristic; // 0x8
        enum class EMFVoxelEnvPathPruning PathPruning; // 0x9
        int32_t PathSmoothing; // 0xc

    };

    struct FMFVoxelEnvDebugLocation //ScriptStruct MFVoxelEnv.MFVoxelEnvDebugLocation
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Location; // 0x0
        struct FColor Colour; // 0xc
        float LineScale; // 0x10

    };

    struct FMFVoxelEnvDebugPath //ScriptStruct MFVoxelEnv.MFVoxelEnvDebugPath
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FVector> Points; // 0x0
        struct FColor Colour; // 0x10
        float LineScale; // 0x14

    };

    struct FMFVoxelEnvPath //ScriptStruct MFVoxelEnv.MFVoxelEnvPath
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FMFVoxelEnvPathPoint> Points; // 0x0

    };

    struct FMFVoxelEnvPathPoint //ScriptStruct MFVoxelEnv.MFVoxelEnvPathPoint
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Location; // 0x0
        int32_t Layer; // 0xc

    };

    struct FUStructLog //ScriptStruct UFix.UStructLog
    {
    //Children Prop Count (Fields): 7
    public:

        struct FName SocketName; // 0x0
        bool bDisplaySocket; // 0x8
        struct FVector UIStartOffest; // 0xc
        struct FVector UIEndOffest; // 0x18
        struct FText UIPartName; // 0x28
        bool bPlaceHolderInventory; // 0x40
        uint32_t FakeID; // 0x44

    };

    struct FVectorParameterSetting //ScriptStruct UAGraphicsCommonRuntime.VectorParameterSetting
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString Name; // 0x0
        struct FLinearColor Value; // 0x10
        struct FLinearColor ResetValue; // 0x20

    };

    struct FScalarParameterSetting //ScriptStruct UAGraphicsCommonRuntime.ScalarParameterSetting
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString Name; // 0x0
        float Value; // 0x10
        float ResetValue; // 0x14

    };

    struct FCubemapDataCollection //ScriptStruct UAMFClimateRuntime.CubemapDataCollection
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t ConfigID; // 0x0
        struct TArray<struct FCubemapData> DataArray; // 0x8

    };

    struct FCubemapData //ScriptStruct UAMFClimateRuntime.CubemapData
    {
    //Children Prop Count (Fields): 4
    public:

        float TODTime; // 0x0
        struct TSoftObjectPtr<UTextureCube> CubemapTexture; // 0x8
        float AverageBrightness; // 0x30
        struct TArray<float> IrradianceEnvironmentMapFloats; // 0x38

    };

    struct FDawnInteriorVolumePlaneGroup //ScriptStruct DawnRuntimeComponents.DawnInteriorVolumePlaneGroup
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<struct FDawnInteriorVolumePlane> Planes; // 0x0
        struct TArray<struct FVector> LocalVertices; // 0x10
        struct TArray<int32_t> Indices; // 0x20
        struct FBox LocalBounds; // 0x30

    };

    struct FDawnInteriorVolumePlane //ScriptStruct DawnRuntimeComponents.DawnInteriorVolumePlane
    {
    //Children Prop Count (Fields): 7
    public:

        int32_t Index0; // 0x0
        int32_t Index1; // 0x4
        int32_t Index2; // 0x8
        float ExtraBrickTextureUVBias; // 0xc
        float BrickTextureUVBias; // 0x10
        enum class EDawnInteriorVolumePlaneBiasMode OverrideBiasMode; // 0x14
        char bEnableBias; // 0x15

    };

    struct FMotoSynthRuntimeSettings //ScriptStruct MotoSynth.MotoSynthRuntimeSettings
    {
    //Children Prop Count (Fields): 22
    public:

        bool bSynthToneEnabled; // 0x0
        float SynthToneVolume; // 0x4
        float SynthToneFilterFrequency; // 0x8
        int32_t SynthOctaveShift; // 0xc
        bool bGranularEngineEnabled; // 0x10
        float GranularEngineVolume; // 0x14
        float GranularEnginePitchScale; // 0x18
        int32_t NumSamplesToCrossfadeBetweenGrains; // 0x1c
        int32_t NumGrainTableEntriesPerGrain; // 0x20
        int32_t GrainTableRandomOffsetForConstantRPMs; // 0x24
        int32_t GrainCrossfadeSamplesForConstantRPMs; // 0x28
        class UMotoSynthSource* AccelerationSource; // 0x30
        class UMotoSynthSource* DecelerationSource; // 0x38
        bool bStereoWidenerEnabled; // 0x40
        float StereoDelayMsec; // 0x44
        float StereoFeedback; // 0x48
        float StereoWidenerWetlevel; // 0x4c
        float StereoWidenerDryLevel; // 0x50
        float StereoWidenerDelayRatio; // 0x54
        bool bStereoWidenerFilterEnabled; // 0x58
        float StereoWidenerFilterFrequency; // 0x5c
        float StereoWidenerFilterQ; // 0x60

    };

    struct FGrainTableEntry //ScriptStruct MotoSynth.GrainTableEntry
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t SampleIndex; // 0x0
        float RPM; // 0x4

    };

    struct FGrassHDCompKey //ScriptStruct LandscapeGrassHDRuntime.GrassHDCompKey
    {
    public:


    };

    struct FMagicLeapARPinQuery //ScriptStruct MagicLeapARPin.MagicLeapARPinQuery
    {
    //Children Prop Count (Fields): 5
    public:

        struct TSet<enum class EMagicLeapARPinType> Types; // 0x0
        int32_t MaxResults; // 0x50
        struct FVector TargetPoint; // 0x54
        float Radius; // 0x60
        bool bSorted; // 0x64

    };

    struct FMagicLeapARPinObjectIdList //ScriptStruct MagicLeapARPin.MagicLeapARPinObjectIdList
    {
    //Children Prop Count (Fields): 1
    public:

        struct TSet<struct FString> ObjectIdList; // 0x0

    };

    struct FMagicLeapSharedWorldSharedData //ScriptStruct MagicLeapSharedWorld.MagicLeapSharedWorldSharedData
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FGuid> PinIDs; // 0x0

    };

    struct FMagicLeapSharedWorldAlignmentTransforms //ScriptStruct MagicLeapSharedWorld.MagicLeapSharedWorldAlignmentTransforms
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FTransform> AlignmentTransforms; // 0x0

    };

    struct FMagicLeapSharedWorldLocalData //ScriptStruct MagicLeapSharedWorld.MagicLeapSharedWorldLocalData
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FMagicLeapSharedWorldPinData> LocalPins; // 0x0

    };

    struct FMagicLeapSharedWorldPinData //ScriptStruct MagicLeapSharedWorld.MagicLeapSharedWorldPinData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FGuid PinId; // 0x0
        struct FMagicLeapARPinState PinState; // 0x10

    };

    struct FActorLayer //ScriptStruct ActorLayerUtilities.ActorLayer
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName Name; // 0x0

    };

    struct FAnimNode_WheelHandler : FAnimNode_SkeletalControlBase //ScriptStruct PhysXVehicles.AnimNode_WheelHandler
    {
    public:


    };

    struct FTireConfigMaterialFriction //ScriptStruct PhysXVehicles.TireConfigMaterialFriction
    {
    //Children Prop Count (Fields): 2
    public:

        class UPhysicalMaterial* PhysicalMaterial; // 0x0
        float FrictionScale; // 0x8

    };

    struct FVehicleAnimInstanceProxy : FAnimInstanceProxy //ScriptStruct PhysXVehicles.VehicleAnimInstanceProxy
    {
    public:


    };

    struct FVehicleInputRate //ScriptStruct PhysXVehicles.VehicleInputRate
    {
    //Children Prop Count (Fields): 2
    public:

        float RiseRate; // 0x0
        float FallRate; // 0x4

    };

    struct FReplicatedVehicleState //ScriptStruct PhysXVehicles.ReplicatedVehicleState
    {
    //Children Prop Count (Fields): 5
    public:

        float SteeringInput; // 0x0
        float ThrottleInput; // 0x4
        float BrakeInput; // 0x8
        float HandbrakeInput; // 0xc
        int32_t CurrentGear; // 0x10

    };

    struct FWheelSetup //ScriptStruct PhysXVehicles.WheelSetup
    {
    //Children Prop Count (Fields): 4
    public:

        class UVehicleWheel* WheelClass; // 0x0
        struct FName BoneName; // 0x8
        struct FVector AdditionalOffset; // 0x10
        bool bDisableSteering; // 0x1c

    };

    struct FVehicleTransmissionData //ScriptStruct PhysXVehicles.VehicleTransmissionData
    {
    //Children Prop Count (Fields): 8
    public:

        bool bUseGearAutoBox; // 0x0
        float GearSwitchTime; // 0x4
        float GearAutoBoxLatency; // 0x8
        float FinalRatio; // 0xc
        struct TArray<struct FVehicleGearData> ForwardGears; // 0x10
        float ReverseGearRatio; // 0x20
        float NeutralGearUpRatio; // 0x24
        float ClutchStrength; // 0x28

    };

    struct FVehicleGearData //ScriptStruct PhysXVehicles.VehicleGearData
    {
    //Children Prop Count (Fields): 3
    public:

        float Ratio; // 0x0
        float DownRatio; // 0x4
        float UpRatio; // 0x8

    };

    struct FVehicleEngineData //ScriptStruct PhysXVehicles.VehicleEngineData
    {
    //Children Prop Count (Fields): 6
    public:

        struct FRuntimeFloatCurve TorqueCurve; // 0x0
        float MaxRPM; // 0x88
        float MOI; // 0x8c
        float DampingRateFullThrottle; // 0x90
        float DampingRateZeroThrottleClutchEngaged; // 0x94
        float DampingRateZeroThrottleClutchDisengaged; // 0x98

    };

    struct FVehicleDifferential4WData //ScriptStruct PhysXVehicles.VehicleDifferential4WData
    {
    //Children Prop Count (Fields): 7
    public:

        enum class EVehicleDifferential4W DifferentialType; // 0x0
        float FrontRearSplit; // 0x4
        float FrontLeftRightSplit; // 0x8
        float RearLeftRightSplit; // 0xc
        float CentreBias; // 0x10
        float FrontBias; // 0x14
        float RearBias; // 0x18

    };

    struct FWxGameShareConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WxGameShareConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t sys_id; // 0x8
        uint32_t Type; // 0xc
        uint32_t act_id; // 0x10
        uint32_t content_id; // 0x14
        struct TArray<struct FWxGameShareRewardConf> share_reward; // 0x18

    };

    struct FWxGameShareRewardConf //ScriptStruct UADataTableModule.WxGameShareRewardConf
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4
        uint32_t is_black; // 0x8

    };

    struct FWhiteListConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WhiteListConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint64_t GOpenID; // 0x8
        uint32_t Type; // 0x10

    };

    struct FWeeklyTaskRefreshConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WeeklyTaskRefreshConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t week_id; // 0x8
        struct TArray<struct FWeeklyTaskSet> task_set; // 0x10

    };

    struct FWeeklyTaskSet //ScriptStruct UADataTableModule.WeeklyTaskSet
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<uint32_t> task_ids; // 0x0

    };

    struct FWeeklyTakeOutItemConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WeeklyTakeOutItemConfTableRow
    {
    //Children Prop Count (Fields): 14
    public:

        uint32_t task_id; // 0x8
        uint32_t target_id; // 0xc
        struct TArray<uint32_t> mode_ids; // 0x10
        struct TArray<uint32_t> map_ids; // 0x20
        struct TArray<uint32_t> rule_ids; // 0x30
        struct TArray<uint32_t> difficulties; // 0x40
        uint32_t instigator_charactertype; // 0x50
        uint32_t CountDownStartSeconds; // 0x54
        uint32_t ChangeValueToCount; // 0x58
        struct TArray<uint32_t> TakeOutItemIDs; // 0x60
        uint32_t Istakein; // 0x70
        struct FText instigator_stayvolume; // 0x78
        uint32_t EquipItemType; // 0x90
        struct TArray<uint32_t> EquipItemIDs; // 0x98

    };

    struct FWeeklyKillTargetConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WeeklyKillTargetConfTableRow
    {
    //Children Prop Count (Fields): 19
    public:

        uint32_t task_id; // 0x8
        uint32_t target_id; // 0xc
        struct TArray<uint32_t> mode_ids; // 0x10
        struct TArray<uint32_t> map_ids; // 0x20
        struct TArray<uint32_t> rule_ids; // 0x30
        struct TArray<uint32_t> difficulties; // 0x40
        uint32_t instigator_charactertype; // 0x50
        uint32_t CountDownStartSeconds; // 0x54
        struct TArray<uint32_t> killedplayer_charactertypes; // 0x58
        struct FText instigator_stayvolume; // 0x68
        struct FText killedplayer_stayvolume; // 0x80
        struct TArray<uint32_t> KillerWeaponIDs; // 0x98
        struct TArray<uint32_t> RequireAdaptersIDs; // 0xa8
        uint32_t EquipItemType; // 0xb8
        struct TArray<uint32_t> EquipItemIDs; // 0xc0
        uint32_t MinDistance; // 0xd0
        uint32_t MaxDistance; // 0xd4
        struct TArray<uint32_t> EnduranceTypes; // 0xd8
        uint32_t WeaponZoomTpye; // 0xe8

    };

    struct FWeeklyCollectItemConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WeeklyCollectItemConfTableRow
    {
    //Children Prop Count (Fields): 14
    public:

        uint32_t task_id; // 0x8
        uint32_t target_id; // 0xc
        struct TArray<uint32_t> mode_ids; // 0x10
        struct TArray<uint32_t> map_ids; // 0x20
        struct TArray<uint32_t> rule_ids; // 0x30
        struct TArray<uint32_t> difficulties; // 0x40
        uint32_t instigator_charactertype; // 0x50
        uint32_t CountDownStartSeconds; // 0x54
        uint32_t CollectionType; // 0x58
        struct TArray<uint32_t> CollectItemIDs; // 0x60
        uint32_t Istakein; // 0x70
        struct FText instigator_stayvolume; // 0x78
        uint32_t EquipItemType; // 0x90
        struct TArray<uint32_t> EquipItemIDs; // 0x98

    };

    struct FWeeklyClearVirtualItemConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WeeklyClearVirtualItemConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t item_id; // 0x8
        uint32_t remain_num; // 0xc

    };

    struct FWeaponSkinConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WeaponSkinConfTableRow
    {
    //Children Prop Count (Fields): 9
    public:

        uint32_t SkinID; // 0x8
        uint32_t ItemID; // 0xc
        uint32_t SkinAssemble; // 0x10
        bool IsStaticMesh; // 0x14
        struct FSoftObjectPath MeshPathGame; // 0x18
        struct FSoftObjectPath MeshPathLobby; // 0x30
        struct TArray<struct FSkinMaterialInfo> OverrideMaterials; // 0x48
        struct FSoftObjectPath OverrideCheckWeaponHand; // 0x58
        struct FSoftObjectPath OverrideCheckWeaponGun; // 0x70

    };

    struct FSkinMaterialInfo //ScriptStruct UADataTableModule.SkinMaterialInfo
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t Index; // 0x0
        struct FSoftObjectPath OverrideMaterial; // 0x8

    };

    struct FWeaponRuleWDCFTableRow : FTableRowBase //ScriptStruct UADataTableModule.WeaponRuleWDCFTableRow
    {
    //Children Prop Count (Fields): 41
    public:

        uint32_t ItemID; // 0x8
        struct FText BulletSize; // 0x10
        uint32_t AmmoCapacity; // 0x28
        struct TArray<uint32_t> size_ext; // 0x30
        uint32_t CanFold; // 0x40
        struct FString AssembleTag; // 0x48
        struct FString SubAssembleTag; // 0x58
        uint64_t slot_type; // 0x68
        uint64_t sub_slot_type; // 0x70
        struct TArray<struct FWeaponSocket> Sockets; // 0x78
        struct TArray<uint32_t> ConflictedItemIds; // 0x88
        float Engonomics; // 0x98
        float Accuracy; // 0x9c
        float MoaScale; // 0xa0
        float AdsMoaX; // 0xa4
        float AdsMoaY; // 0xa8
        float HorizontalRecoil; // 0xac
        float VerticalRecoil; // 0xb0
        float SightRange; // 0xb4
        float MuzzleVelocity; // 0xb8
        uint32_t RaceStrategy; // 0xbc
        float MaxCount; // 0xc0
        float Recoil; // 0xc4
        float ZeroDropDistance; // 0xc8
        struct FText TypesOfFire; // 0xd0
        struct FText Caliber; // 0xe8
        struct FString FireRate; // 0x100
        struct FString EffectiveDistance; // 0x110
        struct TArray<struct FString> FireRequireTags; // 0x120
        struct TArray<struct FWeaponTag> fi_require_tags; // 0x130
        struct TArray<struct FString> AdapterFireRequireTags; // 0x140
        struct TArray<struct FWeaponTag> ad_require_tags; // 0x150
        struct FString FireRequireTagsDecrease; // 0x160
        struct TArray<struct FWeaponTag> de_require_tags; // 0x170
        int8_t ShouldReloadByOne; // 0x180
        struct FString AccessoryType; // 0x188
        float AdapterAdjustDamage; // 0x198
        struct FString Scope; // 0x1a0
        float ReloadSpeedRatio; // 0x1b0
        float ADSMoveSpeedRatio; // 0x1b4
        float MoveSpeedRatio; // 0x1b8

    };

    struct FWeaponTag //ScriptStruct UADataTableModule.WeaponTag
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<uint64_t> masks; // 0x0
        struct TArray<uint64_t> Types; // 0x10

    };

    struct FWeaponSocket //ScriptStruct UADataTableModule.WeaponSocket
    {
    //Children Prop Count (Fields): 5
    public:

        struct FString SocketName; // 0x0
        struct FText PartName; // 0x10
        struct TArray<struct FString> SupportAdapterTagList; // 0x28
        struct TArray<uint64_t> masks; // 0x38
        struct TArray<uint64_t> Types; // 0x48

    };

    struct FWeaponRuleWDCTableRow : FTableRowBase //ScriptStruct UADataTableModule.WeaponRuleWDCTableRow
    {
    //Children Prop Count (Fields): 41
    public:

        uint32_t ItemID; // 0x8
        struct FText BulletSize; // 0x10
        uint32_t AmmoCapacity; // 0x28
        struct TArray<uint32_t> size_ext; // 0x30
        uint32_t CanFold; // 0x40
        struct FString AssembleTag; // 0x48
        struct FString SubAssembleTag; // 0x58
        uint64_t slot_type; // 0x68
        uint64_t sub_slot_type; // 0x70
        struct TArray<struct FWeaponSocket> Sockets; // 0x78
        struct TArray<uint32_t> ConflictedItemIds; // 0x88
        float Engonomics; // 0x98
        float Accuracy; // 0x9c
        float MoaScale; // 0xa0
        float AdsMoaX; // 0xa4
        float AdsMoaY; // 0xa8
        float HorizontalRecoil; // 0xac
        float VerticalRecoil; // 0xb0
        float SightRange; // 0xb4
        float MuzzleVelocity; // 0xb8
        uint32_t RaceStrategy; // 0xbc
        float MaxCount; // 0xc0
        float Recoil; // 0xc4
        float ZeroDropDistance; // 0xc8
        struct FText TypesOfFire; // 0xd0
        struct FText Caliber; // 0xe8
        struct FString FireRate; // 0x100
        struct FString EffectiveDistance; // 0x110
        struct TArray<struct FString> FireRequireTags; // 0x120
        struct TArray<struct FWeaponTag> fi_require_tags; // 0x130
        struct TArray<struct FString> AdapterFireRequireTags; // 0x140
        struct TArray<struct FWeaponTag> ad_require_tags; // 0x150
        struct FString FireRequireTagsDecrease; // 0x160
        struct TArray<struct FWeaponTag> de_require_tags; // 0x170
        int8_t ShouldReloadByOne; // 0x180
        struct FString AccessoryType; // 0x188
        float AdapterAdjustDamage; // 0x198
        struct FString Scope; // 0x1a0
        float ReloadSpeedRatio; // 0x1b0
        float ADSMoveSpeedRatio; // 0x1b4
        float MoveSpeedRatio; // 0x1b8

    };

    struct FWeaponRuleConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WeaponRuleConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t base_id; // 0x8
        struct TArray<struct FRuleConf> rules; // 0x10

    };

    struct FRuleConf //ScriptStruct UADataTableModule.RuleConf
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t cond; // 0x0
        struct TArray<uint32_t> cond_ids; // 0x8

    };

    struct FWeaponRecommendWeaponConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WeaponRecommendWeaponConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        uint32_t max_num; // 0xc

    };

    struct FWeaponRecommendConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WeaponRecommendConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<struct FRecommendWeaponItemConf> Items; // 0x10

    };

    struct FRecommendWeaponItemConf //ScriptStruct UADataTableModule.RecommendWeaponItemConf
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4
        uint32_t slot_index; // 0x8
        uint32_t Parent; // 0xc
        uint32_t parent_idx; // 0x10

    };

    struct FWeaponRecommendArgConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WeaponRecommendArgConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        struct TArray<uint32_t> Blacklist; // 0x10
        uint32_t design_prob; // 0x20
        uint32_t ds_out_prob; // 0x24

    };

    struct FWeaponPresetConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WeaponPresetConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint64_t ID; // 0x8
        struct FText Name; // 0x10
        uint32_t isSuper; // 0x28
        uint32_t baseId; // 0x2c

    };

    struct FWeaponNumConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WeaponNumConfTableRow
    {
    public:


    };

    struct FWeaponFilterItemsConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WeaponFilterItemsConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct FText Name; // 0x10
        struct TArray<uint32_t> arr; // 0x28

    };

    struct FWeaponDetailValueToAttributeTableRow : FTableRowBase //ScriptStruct UADataTableModule.WeaponDetailValueToAttributeTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString DetailValueName; // 0x8
        struct FString AttributeName; // 0x18
        uint32_t ModOp; // 0x28

    };

    struct FWeaponDetailConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WeaponDetailConfTableRow
    {
    //Children Prop Count (Fields): 57
    public:

        uint32_t ItemID; // 0x8
        struct FText BulletSize; // 0x10
        struct TArray<uint32_t> size_ext; // 0x28
        struct FText TypesOfFire; // 0x38
        struct FString FireRate; // 0x50
        float MuzzleVelocity; // 0x60
        float AdapterAdjustDamage; // 0x64
        struct FText FiringPowerDisplay; // 0x68
        float Engonomics; // 0x80
        float Accuracy; // 0x84
        float ZeroDropDistance; // 0x88
        float MoaScale; // 0x8c
        float AdsMoaX; // 0x90
        float AdsMoaY; // 0x94
        float HorizontalRecoil; // 0x98
        float VerticalRecoil; // 0x9c
        float Recoil; // 0xa0
        struct FString EffectiveDistance; // 0xa8
        float ADSMoveSpeedRatio; // 0xb8
        float MoveSpeedRatio; // 0xbc
        float CheckMagRatio; // 0xc0
        struct FText SuppressorSoundShow; // 0xc8
        char SilencerType; // 0xe0
        float RunSpeedRatio; // 0xe4
        float SprintSpeedRatio; // 0xe8
        float SilentWalkSpeedRatio; // 0xec
        float AccuracyPunishRatio; // 0xf0
        float LeanRatio; // 0xf4
        int8_t ShouldReloadByOne; // 0xf8
        uint32_t CanFold; // 0xfc
        struct FString Scope; // 0x100
        uint32_t AmmoCapacity; // 0x110
        uint32_t RaceStrategy; // 0x114
        struct FString LightIntensityDisplay; // 0x118
        float EnergyCostPerFire; // 0x128
        struct FString AdapterArmorLevel; // 0x130
        struct FText Caliber; // 0x140
        struct FString AccessoryType; // 0x158
        float ReloadSpeedRatio; // 0x168
        float MaxCount; // 0x16c
        float SightRange; // 0x170
        float SprintToIdle; // 0x174
        struct TArray<struct FString> FireRequireTags; // 0x178
        struct TArray<struct FWeaponTag> fi_require_tags; // 0x188
        struct TArray<struct FString> AdapterFireRequireTags; // 0x198
        struct TArray<struct FWeaponTag> ad_require_tags; // 0x1a8
        struct FString FireRequireTagsDecrease; // 0x1b8
        struct TArray<struct FWeaponTag> de_require_tags; // 0x1c8
        struct FString AssembleTag; // 0x1d8
        struct FString SubAssembleTag; // 0x1e8
        struct TArray<uint32_t> ConflictedItemIds; // 0x1f8
        uint64_t slot_type; // 0x208
        uint64_t sub_slot_type; // 0x210
        struct FString DurabilityAccuracyCurvePath; // 0x218
        struct FString DurabilityMalfunctionCurvePath; // 0x228
        struct FString DurabilityMoaCurvePath; // 0x238
        struct TArray<struct FWeaponSocket> Sockets; // 0x248

    };

    struct FWeaponClassifyConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WeaponClassifyConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        struct FString iconPath; // 0x10
        struct FText Name; // 0x20
        uint32_t ItemType; // 0x38

    };

    struct FWeaponBulletMatchConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WeaponBulletMatchConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t item_id; // 0x8
        struct TArray<struct FBulletTag> bullet_tags; // 0x10

    };

    struct FBulletTag //ScriptStruct UADataTableModule.BulletTag
    {
    //Children Prop Count (Fields): 1
    public:

        struct FString bullet_tag; // 0x0

    };

    struct FWeaponAvatarSetCfgTableRow : FTableRowBase //ScriptStruct UADataTableModule.WeaponAvatarSetCfgTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct TArray<uint32_t> avatar_set; // 0x10
        uint32_t SkinAssemble; // 0x20

    };

    struct FWeaponAssembleConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WeaponAssembleConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t ID; // 0x8
        uint32_t col_size; // 0xc
        uint32_t row_size; // 0x10
        struct FString unique_id; // 0x18
        uint32_t can_fire; // 0x28
        struct TArray<struct FWeaponItemConf> Items; // 0x30

    };

    struct FWeaponItemConf //ScriptStruct UADataTableModule.WeaponItemConf
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4
        uint32_t slot_index; // 0x8
        uint32_t Parent; // 0xc
        uint32_t parent_idx; // 0x10
        uint32_t spray_item_id; // 0x14

    };

    struct FWealthTagConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WealthTagConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t wealth_conf_type; // 0x8
        int64_t Param; // 0x10
        int32_t possibility; // 0x18

    };

    struct FWarmScoreConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WarmScoreConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t score_type; // 0x8
        uint32_t Val; // 0xc

    };

    struct FWarmProfitConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WarmProfitConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        int32_t profit_rate; // 0xc
        int32_t profit_score; // 0x10

    };

    struct FWarmLossConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WarmLossConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        int32_t loss_rate; // 0xc
        int32_t loss_score; // 0x10

    };

    struct FWarmLevelConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WarmLevelConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t Level; // 0xc
        uint32_t add_level_rate; // 0x10
        uint32_t del_level_rate; // 0x14

    };

    struct FWarmExpConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WarmExpConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t Exp; // 0xc
        uint32_t add_exp_rate; // 0x10
        uint32_t del_exp_rate; // 0x14

    };

    struct FWarmContinuousLoseConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.WarmContinuousLoseConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t continuous_lose; // 0xc
        uint32_t add_continuous_lose_rate; // 0x10
        uint32_t del_continuous_lose_rate; // 0x14
        int32_t extra_score; // 0x18

    };

    struct FVoiceIconSoundTableRow : FTableRowBase //ScriptStruct UADataTableModule.VoiceIconSoundTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        int32_t ItemID; // 0x8
        struct FString VoiceIconPath; // 0x10
        struct FText VoiceDescription; // 0x20
        struct TArray<struct FString> VoiceSoundPaths; // 0x38
        struct TArray<struct FString> WanderVoiceSoundPaths; // 0x48
        struct TArray<uint32_t> jump_goto; // 0x58
        struct FText no_source_description; // 0x68
        uint32_t ActiveStatus; // 0x80

    };

    struct FValueDistributionConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ValueDistributionConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t ID; // 0x8
        uint32_t Inclination; // 0xc
        uint32_t Gun; // 0x10
        uint32_t ContainerArmor; // 0x14
        uint32_t head; // 0x18
        uint32_t Bullet; // 0x1c
        uint32_t Consumables; // 0x20

    };

    struct FUserTagVarParamTableRow : FTableRowBase //ScriptStruct UADataTableModule.UserTagVarParamTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        struct FText ID; // 0x8
        uint32_t Param_2; // 0x20
        uint32_t Param_3; // 0x24
        uint32_t Param_4; // 0x28

    };

    struct FUserTagTableRow : FTableRowBase //ScriptStruct UADataTableModule.UserTagTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t tag_id; // 0x8
        uint32_t tag_type; // 0xc
        struct FText tag_name; // 0x10
        uint32_t tag_priority; // 0x28
        uint32_t tag_param; // 0x2c
        struct TArray<struct FConditionItem> Conditions; // 0x30

    };

    struct FConditionItem //ScriptStruct UADataTableModule.ConditionItem
    {
    //Children Prop Count (Fields): 3
    public:

        struct FText expresion; // 0x0
        uint32_t Op; // 0x18
        uint32_t Value; // 0x1c

    };

    struct FUpgradeUnlockTableRow : FTableRowBase //ScriptStruct UADataTableModule.UpgradeUnlockTableRow
    {
    //Children Prop Count (Fields): 14
    public:

        uint32_t ID; // 0x8
        uint32_t Type; // 0xc
        uint32_t function_control_id; // 0x10
        uint32_t preview_level; // 0x14
        uint32_t sort; // 0x18
        uint32_t sys_id; // 0x1c
        struct FText unlock_tip; // 0x20
        struct FText preview_label; // 0x38
        struct FText preview_desc; // 0x50
        struct FText label; // 0x68
        struct FText desc1; // 0x80
        struct FString image_path; // 0x98
        struct FString small_image_path; // 0xa8
        struct FText robot_help_key; // 0xb8

    };

    struct FTrialCardConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TrialCardConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t avatar_id; // 0xc
        uint32_t expire_time; // 0x10

    };

    struct FTraderScaleConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TraderScaleConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        float DistancePercentA; // 0xc

    };

    struct FTradeItemClassifyConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TradeItemClassifyConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        uint32_t bussinessman_id; // 0xc
        struct FText icon_path; // 0x10
        struct FText Name; // 0x28
        struct TArray<uint64_t> item_types; // 0x40
        uint32_t classify_type; // 0x50
        uint32_t is_act_classify; // 0x54
        uint32_t show_classify; // 0x58

    };

    struct FTradeHeadIconTableRow : FTableRowBase //ScriptStruct UADataTableModule.TradeHeadIconTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t businessman_id; // 0xc
        struct FString BusinessHead_Path; // 0x10
        struct TArray<struct FBusinessHeadConf> stage_head_vec; // 0x20

    };

    struct FBusinessHeadConf //ScriptStruct UADataTableModule.BusinessHeadConf
    {
    //Children Prop Count (Fields): 13
    public:

        struct FString Path_2; // 0x0
        struct FString Path_3; // 0x10
        struct FString Path_4; // 0x20
        struct FString Path_5; // 0x30
        struct FString Path_6; // 0x40
        struct FString Path_7; // 0x50
        struct FString Path_8; // 0x60
        struct FString Path_9; // 0x70
        struct FString Path_10; // 0x80
        struct FString Path_11; // 0x90
        struct FString Path_12; // 0xa0
        struct FString Path_13; // 0xb0
        struct FString Path_14; // 0xc0

    };

    struct FTradeDialogVoiceConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TradeDialogVoiceConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t businessman_id; // 0xc
        struct FString DialogTypeDef; // 0x10
        struct FString AudioSourceName; // 0x20

    };

    struct FTradeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TradeConfTableRow
    {
    //Children Prop Count (Fields): 21
    public:

        uint32_t ID; // 0x8
        uint32_t businessman_id; // 0xc
        uint32_t classify_id; // 0x10
        uint32_t seq; // 0x14
        uint32_t loyalty_level; // 0x18
        struct FText lock_desc; // 0x20
        uint32_t is_hide; // 0x38
        uint32_t task_id; // 0x3c
        uint32_t businessman_reputation; // 0x40
        uint32_t Level; // 0x44
        uint32_t have_item; // 0x48
        uint32_t buy_limit; // 0x4c
        struct FDateTime refresh_begin_time; // 0x50
        uint32_t refresh_period; // 0x58
        struct FDateTime limit_refresh_begin_time; // 0x60
        uint32_t limit_refresh_period; // 0x68
        uint32_t sell_item_id; // 0x6c
        uint32_t sell_num; // 0x70
        uint32_t is_faction; // 0x74
        struct FText sellItemName; // 0x78
        struct TArray<struct FExchangeItemConf> exchange_item_vec; // 0x90

    };

    struct FExchangeItemConf //ScriptStruct UADataTableModule.ExchangeItemConf
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4

    };

    struct FTpnsPushConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TpnsPushConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        struct FString Title; // 0x10
        struct FString Content; // 0x20
        struct FString ios_subtitle; // 0x30

    };

    struct FTitleItemConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TitleItemConfTableRow
    {
    //Children Prop Count (Fields): 11
    public:

        uint32_t ID; // 0x8
        struct FDateTime start_time; // 0x10
        struct FDateTime end_time; // 0x18
        uint32_t JumpId; // 0x20
        struct FText JumpDesc; // 0x28
        struct FText CannotGetDesc; // 0x40
        uint32_t MaxAddStarNum; // 0x58
        uint32_t ShowNormalGetPanel; // 0x5c
        uint32_t is_off_sale; // 0x60
        uint32_t can_add_star; // 0x64
        uint32_t show_get_time; // 0x68

    };

    struct FTicketConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TicketConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t item_id; // 0xc
        uint32_t cast_num; // 0x10
        int32_t tip_id; // 0x14

    };

    struct FThrowableWeaponDetailTableRow : FTableRowBase //ScriptStruct UADataTableModule.ThrowableWeaponDetailTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint64_t ItemID; // 0x8
        struct TArray<float> DelayEffect; // 0x10
        struct FText EffectRange; // 0x20
        float EffectTime; // 0x38
        struct FText ArmorDamage; // 0x40
        struct FText Penetration; // 0x58
        struct FText PieceCount; // 0x70
        struct FText PieceType; // 0x88

    };

    struct FTeamVoiceTableRow : FTableRowBase //ScriptStruct UADataTableModule.TeamVoiceTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        int32_t ItemID; // 0x8
        struct FText VoiceDesc; // 0x10
        struct FString VoicePath; // 0x28
        struct FText VoiceContent; // 0x38
        struct FString WanderPath; // 0x50
        struct FString WanderContent; // 0x60
        int32_t VoiceType; // 0x70

    };

    struct FTeamVersionConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TeamVersionConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t env_id; // 0x8
        struct TArray<struct FTeamConfVersionRange> version_ranges; // 0x10

    };

    struct FTeamConfVersionRange //ScriptStruct UADataTableModule.TeamConfVersionRange
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString min_version; // 0x0
        struct FString max_version; // 0x10

    };

    struct FTeamTargetConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TeamTargetConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct FText target_name; // 0x10

    };

    struct FTeamStyleConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TeamStyleConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct FText style_name; // 0x10

    };

    struct FTeamRatingCommConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TeamRatingCommConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t conf_type; // 0x8
        int64_t Val; // 0x10

    };

    struct FTeamRatingBattleConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TeamRatingBattleConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t ID; // 0x8
        uint32_t group_id; // 0xc
        uint32_t Weight; // 0x10
        int64_t rating_change; // 0x18
        int64_t rating_limit_change; // 0x20
        struct TArray<struct FRatingConditionConf> Conditions; // 0x28

    };

    struct FRatingConditionConf //ScriptStruct UADataTableModule.RatingConditionConf
    {
    //Children Prop Count (Fields): 3
    public:

        struct FText expression; // 0x0
        uint32_t Op; // 0x18
        int64_t Val; // 0x20

    };

    struct FTeamPlayerEnterConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TeamPlayerEnterConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t team_player_enter_type; // 0x8
        uint32_t Val; // 0xc
        int32_t tip_id; // 0x10
        uint32_t Priority; // 0x14

    };

    struct FTeamOptionTableRow : FTableRowBase //ScriptStruct UADataTableModule.TeamOptionTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct FText Name; // 0x10
        uint32_t DefaultValue; // 0x28

    };

    struct FTeamListTableRow : FTableRowBase //ScriptStruct UADataTableModule.TeamListTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t ID; // 0x8
        struct FText Name; // 0x10
        uint32_t Type; // 0x28
        uint32_t DefaultValue; // 0x2c
        uint32_t Param1; // 0x30
        uint32_t Param2; // 0x34

    };

    struct FTeamLendConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TeamLendConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t Val; // 0xc
        struct TArray<uint32_t> ary; // 0x10

    };

    struct FTeamDegreeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TeamDegreeConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t hall_degree_type; // 0x8
        uint32_t ID; // 0xc
        int32_t Val; // 0x10

    };

    struct FTeamConvenientMacthTableRow : FTableRowBase //ScriptStruct UADataTableModule.TeamConvenientMacthTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        struct FText Name; // 0x10
        uint32_t Type; // 0x28
        uint32_t DefaultValue; // 0x2c
        uint32_t Param1; // 0x30

    };

    struct FTaskTargetGroupConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TaskTargetGroupConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t group_id; // 0x8
        uint32_t target_id; // 0xc
        uint32_t Weight; // 0x10

    };

    struct FTaskTargetConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TaskTargetConfTableRow
    {
    //Children Prop Count (Fields): 19
    public:

        uint32_t target_id; // 0x8
        uint32_t target_type; // 0xc
        struct FText desc; // 0x10
        uint32_t jump_goto; // 0x28
        uint32_t Progress; // 0x2c
        int64_t Param1; // 0x30
        int64_t Param2; // 0x38
        int64_t param3; // 0x40
        uint32_t team_share; // 0x48
        int64_t icon_item_id; // 0x50
        struct TArray<int64_t> item_list; // 0x58
        uint32_t big_type; // 0x68
        uint32_t mid_type; // 0x6c
        uint32_t sub_type; // 0x70
        struct TArray<struct FCommonItemConfItem> rewards; // 0x78
        struct TArray<uint32_t> prev_target; // 0x88
        uint32_t prev_type; // 0x98
        uint32_t fail_when_next_fail; // 0x9c
        uint32_t node_type; // 0xa0

    };

    struct FCommonItemConfItem //ScriptStruct UADataTableModule.CommonItemConfItem
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4

    };

    struct FTaskReportConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TaskReportConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t report_id; // 0x8
        uint32_t target_id; // 0xc
        uint32_t State; // 0x10
        uint32_t businessman_id; // 0x14
        struct FText Title; // 0x18
        struct FText Content; // 0x30
        float report_time; // 0x48
        struct FText sound_url; // 0x50

    };

    struct FTaskLinkConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TaskLinkConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<struct FActLink> Links; // 0x10

    };

    struct FActLink //ScriptStruct UADataTableModule.ActLink
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t link_id; // 0x0
        uint32_t Index; // 0x4

    };

    struct FTaskDialogueTableRow : FTableRowBase //ScriptStruct UADataTableModule.TaskDialogueTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        struct FText conversation; // 0x10
        struct FText Title; // 0x28
        uint32_t NPC; // 0x40
        struct TArray<struct FCommonItemConfItem> gifts; // 0x48

    };

    struct FTaskConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TaskConfTableRow
    {
    //Children Prop Count (Fields): 38
    public:

        uint32_t task_id; // 0x8
        uint32_t Type; // 0xc
        uint32_t label_type; // 0x10
        struct FText disp_title; // 0x18
        uint32_t season_id; // 0x30
        struct FText chapter_name; // 0x38
        uint32_t disp_type; // 0x50
        struct FText disp_desc; // 0x58
        struct FText disp_detail; // 0x70
        uint32_t disp_address; // 0x88
        struct FText chapter; // 0x90
        struct FDateTime unlock_time; // 0xa8
        struct TArray<struct FUnlockCondtionRef> unlock_condtions; // 0xb0
        struct TArray<uint32_t> pre_tasks; // 0xc0
        uint32_t pre_logic; // 0xd0
        uint32_t source_type; // 0xd4
        uint32_t source_id; // 0xd8
        uint32_t faction_icon; // 0xdc
        uint32_t Faction; // 0xe0
        uint32_t show_specified_businessman_stage; // 0xe4
        uint32_t businessman_stage; // 0xe8
        struct TArray<struct FTaskTargetRefItem> Targets; // 0xf0
        uint32_t need_finish_num; // 0x100
        uint32_t hide_day; // 0x104
        struct FText kw_desc; // 0x108
        uint32_t gift_exp; // 0x120
        uint32_t gift_ruble; // 0x124
        struct TArray<struct FAwardItemConf> rewards; // 0x128
        uint32_t prev_type; // 0x138
        uint32_t reaccept_if_failed; // 0x13c
        uint32_t accept_dialog_start_id; // 0x140
        uint32_t finish_dialog_start_id; // 0x144
        uint32_t task_difficult; // 0x148
        bool complete_in_one_battle; // 0x14c
        uint32_t sort_weight; // 0x150
        uint32_t activity_id; // 0x154
        struct TArray<int32_t> reports_id; // 0x158
        bool gradually_unlock; // 0x168

    };

    struct FAwardItemConf //ScriptStruct UADataTableModule.AwardItemConf
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4
        uint32_t is_black; // 0x8
        uint32_t is_faction; // 0xc

    };

    struct FTaskTargetRefItem //ScriptStruct UADataTableModule.TaskTargetRefItem
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t target_id; // 0x0
        uint32_t group_id; // 0x4
        uint32_t Property; // 0x8

    };

    struct FUnlockCondtionRef //ScriptStruct UADataTableModule.UnlockCondtionRef
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t cond_type; // 0x0
        uint32_t cond_value; // 0x4

    };

    struct FTaskCommitTargetConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TaskCommitTargetConfTableRow
    {
    //Children Prop Count (Fields): 27
    public:

        uint32_t target_id; // 0x8
        uint32_t commit_type; // 0xc
        uint32_t item_id; // 0x10
        struct TArray<uint32_t> item_list; // 0x18
        uint32_t big_type; // 0x28
        uint32_t mid_type; // 0x2c
        uint32_t sub_type; // 0x30
        struct TArray<uint32_t> size_x; // 0x38
        struct TArray<uint32_t> size_y; // 0x48
        struct TArray<uint32_t> size_all; // 0x58
        uint32_t is_raidloot; // 0x68
        struct TArray<uint32_t> Durability; // 0x70
        struct TArray<uint32_t> durability_limit; // 0x80
        struct TArray<uint32_t> Engonomics; // 0x90
        struct TArray<uint32_t> Accuracy; // 0xa0
        struct TArray<uint32_t> ads_moa_y; // 0xb0
        struct TArray<uint32_t> horizontal_recoil; // 0xc0
        struct TArray<uint32_t> vertical_recoil; // 0xd0
        struct TArray<uint32_t> sight_range; // 0xe0
        struct TArray<uint32_t> muzzle_velocity; // 0xf0
        struct TArray<uint32_t> max_count; // 0x100
        struct TArray<uint32_t> Recoil; // 0x110
        uint32_t fire_type; // 0x120
        uint32_t Caliber; // 0x124
        struct TArray<uint32_t> fire_rate; // 0x128
        struct TArray<uint32_t> effect_dist; // 0x138
        struct TArray<uint32_t> Components; // 0x148

    };

    struct FTaskActTargetDescParamConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TaskActTargetDescParamConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        int64_t ID; // 0x8
        struct FText desc; // 0x10

    };

    struct FTaskActTargetDescConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TaskActTargetDescConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t target_type; // 0x8
        struct FText target_desc; // 0x10

    };

    struct FTaskActDescConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TaskActDescConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t task_id; // 0x8
        struct FText task_title; // 0x10
        struct FText task_detail; // 0x28
        struct TArray<struct FAwardItemConf> rewards; // 0x40
        uint32_t need_reissue; // 0x50

    };

    struct FTaskActConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TaskActConfTableRow
    {
    //Children Prop Count (Fields): 14
    public:

        uint32_t task_id; // 0x8
        struct FText task_title; // 0x10
        uint32_t begin_day; // 0x28
        uint32_t end_day; // 0x2c
        struct FString begin_time; // 0x30
        struct FString end_time; // 0x40
        struct FDateTime abs_begin_time; // 0x50
        struct FDateTime abs_end_time; // 0x58
        struct TArray<struct FActTargetRef> Targets; // 0x60
        struct TArray<struct FAwardItemConf> rewards; // 0x70
        uint32_t need_reissue; // 0x80
        uint32_t reissue_mail_id; // 0x84
        uint32_t map_need; // 0x88
        uint32_t show_in_game; // 0x8c

    };

    struct FActTargetRef //ScriptStruct UADataTableModule.ActTargetRef
    {
    //Children Prop Count (Fields): 11
    public:

        uint32_t target_type; // 0x0
        uint32_t max_progress; // 0x4
        int64_t Param1; // 0x8
        int64_t Param2; // 0x10
        int64_t param3; // 0x18
        int64_t param4; // 0x20
        struct FString param5; // 0x28
        struct FDateTime param6; // 0x38
        int64_t param7; // 0x40
        uint32_t Difficulty; // 0x48
        uint32_t jump_id; // 0x4c

    };

    struct FTargetArmorTableRow : FTableRowBase //ScriptStruct UADataTableModule.TargetArmorTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t item_id; // 0xc
        uint32_t unlock_item; // 0x10
        uint32_t is_default; // 0x14

    };

    struct FTagSheet2TableRow : FTableRowBase //ScriptStruct UADataTableModule.TagSheet2TableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct FString SocketName; // 0x10
        struct FText PartName; // 0x20

    };

    struct FTagSheet1TableRow : FTableRowBase //ScriptStruct UADataTableModule.TagSheet1TableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct FString Tag; // 0x10

    };

    struct FTagMatchedConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.TagMatchedConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Tag; // 0x8
        struct TArray<uint32_t> matchedItemIDs; // 0x18

    };

    struct FSurveyConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.SurveyConfTableRow
    {
    //Children Prop Count (Fields): 16
    public:

        uint32_t ID; // 0x8
        uint32_t Priority; // 0xc
        struct FText Title; // 0x10
        struct FText Content; // 0x28
        struct FDateTime begin_time; // 0x40
        struct FDateTime end_time; // 0x48
        uint32_t vaild_time; // 0x50
        uint32_t TaskId; // 0x54
        struct FText sid; // 0x58
        struct FText URL; // 0x70
        struct FText code; // 0x88
        uint32_t Type; // 0xa0
        uint32_t cirle; // 0xa4
        uint32_t Limit; // 0xa8
        struct TArray<struct Fitem> gifts; // 0xb0
        uint32_t svr_limit_id; // 0xc0

    };

    struct Fitem //ScriptStruct UADataTableModule.item
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t item_id; // 0x0
        uint32_t item_num; // 0x4

    };

    struct FSupplyCardRewardConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.SupplyCardRewardConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t reward_id; // 0x8
        struct FText reward_name; // 0x10
        uint32_t buy_mall_id; // 0x28
        uint32_t reward_mall_id; // 0x2c
        struct TArray<struct FRewardItem> immediate_reward_list; // 0x30

    };

    struct FRewardItem //ScriptStruct UADataTableModule.RewardItem
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x0
        uint32_t Num; // 0x4
        uint32_t is_black; // 0x8

    };

    struct FSupplyCardConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.SupplyCardConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t reward_id; // 0xc
        uint32_t effective_days; // 0x10

    };

    struct FSubsBlacklistConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.SubsBlacklistConfTableRow
    {
    //Children Prop Count (Fields): 1
    public:

        uint32_t item_id; // 0x8

    };

    struct FStreakExpTableRow : FTableRowBase //ScriptStruct UADataTableModule.StreakExpTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        uint32_t Exp; // 0xc

    };

    struct FStashSlotConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.StashSlotConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t money_id; // 0xc
        uint32_t money_num; // 0x10

    };

    struct FStandaloneWeatherTableRow : FTableRowBase //ScriptStruct UADataTableModule.StandaloneWeatherTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t PlaymModeID; // 0x8
        uint32_t Weather1; // 0xc
        uint32_t Weather2; // 0x10
        uint32_t Weather3; // 0x14
        uint32_t Weather4; // 0x18
        uint32_t Weather5; // 0x1c
        uint32_t Weather6; // 0x20

    };

    struct FSprayIconTextureTableRow : FTableRowBase //ScriptStruct UADataTableModule.SprayIconTextureTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t ItemID; // 0x8
        struct FString SprayIconPath; // 0x10
        struct FString SprayTexture; // 0x20
        struct TArray<uint32_t> jump_goto; // 0x30
        struct FText no_source_description; // 0x40
        uint32_t ActiveStatus; // 0x58

    };

    struct FSpeechConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.SpeechConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t SpeechID; // 0x8
        uint32_t NPCID; // 0xc
        struct TArray<uint32_t> Npc_stage; // 0x10
        uint32_t SpeechType; // 0x20
        struct FText SpeechText; // 0x28
        struct TArray<uint32_t> Level; // 0x40
        uint32_t QuestID; // 0x50
        uint32_t QspeechType; // 0x54

    };

    struct FSpecialGroupIdConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.SpecialGroupIdConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t Kind; // 0x8
        uint32_t group_id; // 0xc

    };

    struct FSoundConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.SoundConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName sound_name; // 0x8
        struct FText chn_name; // 0x10
        struct FText desc; // 0x28
        struct FString sound_ak_event; // 0x40

    };

    struct FSkipTutorialTableRow : FTableRowBase //ScriptStruct UADataTableModule.SkipTutorialTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t QuestionId; // 0x8
        struct FString Question; // 0x10
        struct FString Option1; // 0x20
        struct FString Option2; // 0x30
        struct FString Option3; // 0x40
        struct FString Option4; // 0x50
        uint32_t Answer; // 0x60

    };

    struct FSideClashConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.SideClashConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        uint32_t show_type; // 0xc
        struct FText Content; // 0x10
        uint32_t per_unit_score; // 0x28
        uint32_t Limit; // 0x2c
        uint32_t win_condition; // 0x30
        uint32_t win_coeff; // 0x34
        uint32_t lose_coeff; // 0x38

    };

    struct FShowExtendConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ShowExtendConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t Lower_Price; // 0xc
        uint32_t Upper_Price; // 0x10
        uint32_t Lower_Extend; // 0x14
        uint32_t Upper_Extend; // 0x18

    };

    struct FShowDetailTableRow : FTableRowBase //ScriptStruct UADataTableModule.ShowDetailTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint64_t ItemID; // 0x8
        uint32_t ShowDetailType; // 0x10
        struct FString ResourcePath; // 0x18

    };

    struct FShockConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ShockConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        struct FString ShockPath; // 0x10
        float Duration; // 0x20
        uint32_t Amplitude; // 0x24
        float CoolDownTime; // 0x28
        uint32_t Default; // 0x2c
        uint32_t Loop; // 0x30
        uint32_t Interval; // 0x34

    };

    struct FShareTextTableRow : FTableRowBase //ScriptStruct UADataTableModule.ShareTextTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint64_t ID; // 0x8
        struct FText Text; // 0x10

    };

    struct FShareTableRow : FTableRowBase //ScriptStruct UADataTableModule.ShareTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct FText pic_desc; // 0x10
        struct FString pic; // 0x28

    };

    struct FSetItemDuraConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.SetItemDuraConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t is_npc; // 0x8
        uint32_t group_id; // 0xc
        uint32_t class_id; // 0x10
        uint32_t item_id; // 0x14
        uint32_t max_durability; // 0x18
        uint32_t min_durabiliy; // 0x1c
        uint32_t max_real_durability; // 0x20
        uint32_t min_real_durability; // 0x24

    };

    struct FServerLimitConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ServerLimitConfTableRow
    {
    //Children Prop Count (Fields): 9
    public:

        uint32_t ID; // 0x8
        struct TArray<uint32_t> hourly_refresh_time; // 0x10
        uint32_t hourly_limit_num; // 0x20
        uint32_t daily_limit_num; // 0x24
        uint32_t weekly_limit_num; // 0x28
        uint32_t monthly_limit_num; // 0x2c
        uint32_t season_limit_num; // 0x30
        uint32_t permanent_limit_num; // 0x34
        uint32_t num_type; // 0x38

    };

    struct FServerKey2TextTableRow : FTableRowBase //ScriptStruct UADataTableModule.ServerKey2TextTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString ServerKey; // 0x8
        struct FText ServerText; // 0x18

    };

    struct FServerInfoTableRow : FTableRowBase //ScriptStruct UADataTableModule.ServerInfoTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ServerCode; // 0x8
        struct FText Describe; // 0x10

    };

    struct FSeasonShopConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.SeasonShopConfTableRow
    {
    //Children Prop Count (Fields): 10
    public:

        uint32_t ID; // 0x8
        uint32_t sell_item_id; // 0xc
        uint32_t sell_num; // 0x10
        uint32_t cost_num; // 0x14
        uint32_t buy_limit; // 0x18
        uint32_t buy_limit_season; // 0x1c
        uint32_t ranked_Level; // 0x20
        uint32_t bind_season; // 0x24
        struct FDateTime unlock_time; // 0x28
        uint32_t sort_param; // 0x30

    };

    struct FSeasonPublicityTableRow : FTableRowBase //ScriptStruct UADataTableModule.SeasonPublicityTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t info_id; // 0x8
        uint32_t info_type; // 0xc
        struct FString info_picture; // 0x10
        struct FText info_big_title; // 0x20
        struct FText info_small_title; // 0x38
        struct FText info_describe1; // 0x50
        struct FText info_describe2; // 0x68
        struct FString info_path; // 0x80

    };

    struct FScreenEffectPaddingTableRow : FTableRowBase //ScriptStruct UADataTableModule.ScreenEffectPaddingTableRow
    {
    //Children Prop Count (Fields): 9
    public:

        struct FString AssetName; // 0x8
        float Left; // 0x18
        float Top; // 0x1c
        float Right; // 0x20
        float Bottom; // 0x24
        float MarginLeft; // 0x28
        float MarginTop; // 0x2c
        float MarginRight; // 0x30
        float MarginBottom; // 0x34

    };

    struct FScopeScaleConfigTableRow : FTableRowBase //ScriptStruct UADataTableModule.ScopeScaleConfigTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint64_t ID; // 0x8
        struct TArray<struct FWeaponScopeScale> WeaponScopeScale; // 0x10

    };

    struct FWeaponScopeScale //ScriptStruct UADataTableModule.WeaponScopeScale
    {
    //Children Prop Count (Fields): 5
    public:

        uint64_t ID; // 0x0
        struct FText WeaponName; // 0x8
        float RoScale; // 0x20
        float LoScale; // 0x24
        float ADSGunKickScale; // 0x28

    };

    struct FScheme703060006TableRow : FTableRowBase //ScriptStruct UADataTableModule.Scheme703060006TableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        uint32_t Vest; // 0xc
        uint32_t Armor; // 0x10
        uint32_t Backpack; // 0x14
        uint32_t Helmet; // 0x18
        uint32_t Visor; // 0x1c
        uint32_t Headset; // 0x20
        uint32_t Mask; // 0x24

    };

    struct FScheme703060005TableRow : FTableRowBase //ScriptStruct UADataTableModule.Scheme703060005TableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        uint32_t Vest; // 0xc
        uint32_t Armor; // 0x10
        uint32_t Backpack; // 0x14
        uint32_t Helmet; // 0x18
        uint32_t Visor; // 0x1c
        uint32_t Headset; // 0x20
        uint32_t Mask; // 0x24

    };

    struct FScheme703060004TableRow : FTableRowBase //ScriptStruct UADataTableModule.Scheme703060004TableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        uint32_t Vest; // 0xc
        uint32_t Armor; // 0x10
        uint32_t Backpack; // 0x14
        uint32_t Helmet; // 0x18
        uint32_t Visor; // 0x1c
        uint32_t Headset; // 0x20
        uint32_t Mask; // 0x24

    };

    struct FScheme703060003TableRow : FTableRowBase //ScriptStruct UADataTableModule.Scheme703060003TableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        uint32_t Vest; // 0xc
        uint32_t Armor; // 0x10
        uint32_t Backpack; // 0x14
        uint32_t Helmet; // 0x18
        uint32_t Visor; // 0x1c
        uint32_t Headset; // 0x20
        uint32_t Mask; // 0x24

    };

    struct FScheme703060002TableRow : FTableRowBase //ScriptStruct UADataTableModule.Scheme703060002TableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        uint32_t Vest; // 0xc
        uint32_t Armor; // 0x10
        uint32_t Backpack; // 0x14
        uint32_t Helmet; // 0x18
        uint32_t Visor; // 0x1c
        uint32_t Headset; // 0x20
        uint32_t Mask; // 0x24

    };

    struct FScheme703060001TableRow : FTableRowBase //ScriptStruct UADataTableModule.Scheme703060001TableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        uint32_t Vest; // 0xc
        uint32_t Armor; // 0x10
        uint32_t Backpack; // 0x14
        uint32_t Helmet; // 0x18
        uint32_t Visor; // 0x1c
        uint32_t Headset; // 0x20
        uint32_t Mask; // 0x24

    };

    struct FScavScoreMappingTableRow : FTableRowBase //ScriptStruct UADataTableModule.ScavScoreMappingTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t Score; // 0x8
        int32_t group_id; // 0xc

    };

    struct FScavScoreConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ScavScoreConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t score_id; // 0x8
        int32_t Value; // 0xc

    };

    struct FScavExpFactorTableRow : FTableRowBase //ScriptStruct UADataTableModule.ScavExpFactorTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString ID; // 0x8
        uint32_t Factor; // 0x18

    };

    struct FScavEquipConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ScavEquipConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t is_npc; // 0x8
        uint32_t group_id; // 0xc
        uint32_t class_id; // 0x10
        uint32_t slot_index; // 0x14
        uint32_t Weight; // 0x18
        uint32_t item_id; // 0x1c
        struct TArray<struct FExtEquipConf> exts; // 0x20

    };

    struct FExtEquipConf //ScriptStruct UADataTableModule.ExtEquipConf
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x0
        uint32_t Type; // 0x4
        uint32_t Num; // 0x8

    };

    struct FScavContainerConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ScavContainerConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t Weight; // 0xc
        struct TArray<struct FCntrItemConf> Items; // 0x10

    };

    struct FCntrItemConf //ScriptStruct UADataTableModule.CntrItemConf
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4
        uint32_t min_dura; // 0x8
        uint32_t max_dura; // 0xc

    };

    struct FScavAIDynamicLimitTableRow : FTableRowBase //ScriptStruct UADataTableModule.ScavAIDynamicLimitTableRow
    {
    //Children Prop Count (Fields): 9
    public:

        int32_t ConfigID; // 0x8
        int32_t MapID; // 0xc
        struct TArray<int32_t> AISpawnConfigID; // 0x10
        int32_t eventId; // 0x20
        struct TArray<float> Weather; // 0x28
        int32_t ExpectedPMCPlayerNum; // 0x38
        float ScavAIDynamicLimitStartTime; // 0x3c
        int32_t ScavLimitPerPMCPlayer; // 0x40
        int32_t ScavLimitBase; // 0x44

    };

    struct FSafeLootLimitTableRow : FTableRowBase //ScriptStruct UADataTableModule.SafeLootLimitTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<struct FLimitPoolConf> PoolLists; // 0x10

    };

    struct FLimitPoolConf //ScriptStruct UADataTableModule.LimitPoolConf
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t shield_type; // 0x0
        uint32_t sub_item_id; // 0x4
        uint32_t sub_item_num; // 0x8
        uint32_t Probability; // 0xc
        uint32_t pool_id; // 0x10

    };

    struct FSafeBoxConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.SafeBoxConfTableRow
    {
    //Children Prop Count (Fields): 9
    public:

        uint32_t container_id; // 0x8
        uint32_t show_index; // 0xc
        uint32_t day_price; // 0x10
        uint32_t is_hidden; // 0x14
        uint32_t group_id; // 0x18
        uint32_t is_time; // 0x1c
        struct FText list_desc; // 0x20
        uint32_t jump_goto; // 0x38
        uint32_t price; // 0x3c

    };

    struct FRookirTriggerSummaryConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RookirTriggerSummaryConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t trigger_id; // 0x8
        uint32_t repetition_allowed; // 0xc
        struct FText desc; // 0x10
        struct TArray<uint32_t> check_play_mode; // 0x28
        uint32_t trigger_level; // 0x38

    };

    struct FRookieTriggerTypeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RookieTriggerTypeConfTableRow
    {
    //Children Prop Count (Fields): 12
    public:

        uint32_t ID; // 0x8
        uint32_t season_clear; // 0xc
        uint32_t trigger_id; // 0x10
        uint32_t rookieTriggerType; // 0x14
        struct TArray<uint64_t> ItemID; // 0x18
        struct TArray<uint32_t> tagid; // 0x28
        uint32_t traderid; // 0x38
        uint32_t AttachType; // 0x3c
        uint32_t Priority; // 0x40
        uint32_t triggertimes; // 0x44
        uint32_t cdtimes; // 0x48
        struct TArray<uint32_t> List; // 0x50

    };

    struct FRookieTriggerIdConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RookieTriggerIdConfTableRow
    {
    //Children Prop Count (Fields): 13
    public:

        uint32_t ID; // 0x8
        uint32_t season_clear; // 0xc
        uint32_t trigger_id; // 0x10
        uint32_t trigger_type; // 0x14
        uint32_t is_pop_after_unlock; // 0x18
        struct TArray<uint64_t> cond_value; // 0x20
        struct TArray<uint32_t> extra_param; // 0x30
        char trigger_level; // 0x40
        uint32_t Priority; // 0x44
        uint32_t triggertimes; // 0x48
        uint32_t cdtimes; // 0x4c
        struct FString trigger_panel; // 0x50
        struct TArray<uint32_t> List; // 0x60

    };

    struct FRookieTriggerConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RookieTriggerConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        uint32_t arg; // 0xc
        uint32_t season_clear; // 0x10
        uint32_t trigger_id; // 0x14
        uint32_t trigger_type; // 0x18
        uint64_t cond_value; // 0x20
        uint32_t sys_id; // 0x28
        struct TArray<struct FTriggerRookieItem> List; // 0x30

    };

    struct FTriggerRookieItem //ScriptStruct UADataTableModule.TriggerRookieItem
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x0
        uint32_t break_jump; // 0x4
        struct TArray<uint32_t> get_itemid; // 0x8
        uint32_t ItemID; // 0x18
        uint32_t trade_id; // 0x1c

    };

    struct FRookieTraderUnlockConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RookieTraderUnlockConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t traderid; // 0xc
        uint32_t season_clear; // 0x10
        uint32_t trigger_id; // 0x14
        struct TArray<uint32_t> List; // 0x18

    };

    struct FRookieTaskDoneConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RookieTaskDoneConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t ID; // 0x8
        uint32_t TaskId; // 0xc
        uint32_t season_clear; // 0x10
        uint32_t trigger_id; // 0x14
        uint32_t State; // 0x18
        struct TArray<uint32_t> List; // 0x20

    };

    struct FRookieStepConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RookieStepConfTableRow
    {
    //Children Prop Count (Fields): 13
    public:

        uint32_t ID; // 0x8
        uint32_t pre_taskid; // 0xc
        uint32_t forceguildtype; // 0x10
        uint32_t jump_id; // 0x14
        uint32_t break_jump; // 0x18
        uint32_t protected_jump; // 0x1c
        uint32_t is_effective; // 0x20
        uint32_t is_repeatable; // 0x24
        struct TArray<uint32_t> get_itemid; // 0x28
        uint32_t ItemID; // 0x38
        uint32_t trade_id; // 0x3c
        struct TArray<uint32_t> block_action; // 0x40
        struct TArray<uint32_t> tips_list; // 0x50

    };

    struct FRookieSendItemBackConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RookieSendItemBackConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t item_id; // 0x8
        uint32_t Num; // 0xc

    };

    struct FRookieMailReceiveConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RookieMailReceiveConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t mailType; // 0xc
        uint32_t season_clear; // 0x10
        uint32_t trigger_id; // 0x14
        struct TArray<uint32_t> List; // 0x18

    };

    struct FRookieItemPickConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RookieItemPickConfTableRow
    {
    //Children Prop Count (Fields): 9
    public:

        uint32_t ItemIdIndex; // 0x8
        uint32_t season_clear; // 0xc
        uint32_t trigger_id; // 0x10
        struct TArray<uint64_t> itemIdAndType; // 0x18
        uint32_t classifytype; // 0x28
        struct TArray<uint32_t> takescope; // 0x30
        uint32_t triggertimes; // 0x40
        uint32_t cdtimes; // 0x44
        struct TArray<uint32_t> List; // 0x48

    };

    struct FRookieGunCheckConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RookieGunCheckConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint64_t ItemID; // 0x10
        struct TArray<uint32_t> List; // 0x18

    };

    struct FRookieDetailConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RookieDetailConfTableRow
    {
    //Children Prop Count (Fields): 46
    public:

        uint32_t ID; // 0x8
        uint32_t Type; // 0xc
        struct FText desc; // 0x10
        struct FText desc1; // 0x28
        uint32_t subtype; // 0x40
        float positionX; // 0x44
        float positionY; // 0x48
        float SizeX; // 0x4c
        float SizeY; // 0x50
        float offsetX; // 0x54
        uint32_t unloadchecktype; // 0x58
        uint32_t AttachType; // 0x5c
        uint32_t CheckCondition; // 0x60
        float EffectScale; // 0x64
        uint32_t buttonSizeX; // 0x68
        uint32_t buttonSizeY; // 0x6c
        struct FString panelName; // 0x70
        uint32_t TaskId; // 0x80
        uint32_t businessId; // 0x84
        uint32_t classifyId; // 0x88
        uint32_t warehousesubid; // 0x8c
        uint32_t prepareid; // 0x90
        uint32_t prepareTab; // 0x94
        uint32_t mapRuleType; // 0x98
        struct FString btnName; // 0xa0
        uint32_t itemSpaceType; // 0xb0
        struct FString waitPanelName; // 0xb8
        struct FString backPanelName; // 0xc8
        struct FString waitSubPanelName; // 0xd8
        struct FString waitClosePanelName; // 0xe8
        uint64_t dragItemid; // 0xf8
        uint64_t ParentID; // 0x100
        uint32_t movieid; // 0x108
        struct TArray<uint32_t> pptid; // 0x110
        uint32_t pptemptyclose; // 0x120
        struct FText DisplayName; // 0x128
        uint32_t displayType; // 0x140
        struct FString sound_name; // 0x148
        uint32_t attachCheckType; // 0x158
        uint32_t passCheck; // 0x15c
        struct FText floatTitle; // 0x160
        struct TArray<struct FText> floatContent; // 0x178
        uint32_t isfloating; // 0x188
        uint32_t isShowpromptly; // 0x18c
        uint32_t talkcharacter; // 0x190
        uint32_t scrollAttachType; // 0x194

    };

    struct FRoleIdentityConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RoleIdentityConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t IdentityId; // 0x8
        struct FText Describe; // 0x10

    };

    struct FRobotNamePoolTableRow : FTableRowBase //ScriptStruct UADataTableModule.RobotNamePoolTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t Group; // 0xc
        struct FText Name; // 0x10

    };

    struct FRewardsConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RewardsConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<struct FBlackItemConf> rewards; // 0x10

    };

    struct FBlackItemConf //ScriptStruct UADataTableModule.BlackItemConf
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4
        uint32_t is_black; // 0x8

    };

    struct FRewardShareConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RewardShareConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct TArray<uint32_t> avatar_set; // 0x10
        uint32_t is_after; // 0x20

    };

    struct FResourceTypeIconConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ResourceTypeIconConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t typeId; // 0x8
        struct FString icon; // 0x10
        uint32_t IsDefault; // 0x20

    };

    struct FResourceListConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ResourceListConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        struct FText Name; // 0x10
        struct FString icon; // 0x28
        char rare; // 0x38
        struct TArray<uint32_t> typeId; // 0x40

    };

    struct FResourceAreaConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ResourceAreaConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t ID; // 0x8
        uint32_t MapID; // 0xc
        uint32_t tagid; // 0x10
        struct FText TagName; // 0x18
        uint32_t MapVolumeId; // 0x30
        struct TArray<uint32_t> ShowLootVolumeId; // 0x38
        uint32_t IsShowAll; // 0x48

    };

    struct FReportReasonConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ReportReasonConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t reason_id; // 0x8
        uint32_t Category; // 0xc
        struct TArray<uint32_t> use_scene; // 0x10
        struct FText Content; // 0x20
        struct FText desc; // 0x38

    };

    struct FRepairMaterialConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RepairMaterialConfTableRow
    {
    //Children Prop Count (Fields): 13
    public:

        uint32_t ID; // 0x8
        struct FText material_name; // 0x10
        float low_repair_coef; // 0x28
        float low_tech_coef; // 0x2c
        struct TArray<uint32_t> low_repair_businessman_ids; // 0x30
        float mid_repair_coef; // 0x40
        float mid_tech_coef; // 0x44
        struct TArray<uint32_t> mid_repair_businessman_ids; // 0x48
        float high_repair_coef; // 0x58
        float high_tech_coef; // 0x5c
        struct TArray<uint32_t> high_repair_businessman_ids; // 0x60
        float unit_repair_price_coef; // 0x70
        struct FText repairability; // 0x78

    };

    struct FRepairDurabilityConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RepairDurabilityConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<struct FDurabilityPriceConf> durability_price_conf; // 0x10

    };

    struct FDurabilityPriceConf //ScriptStruct UADataTableModule.DurabilityPriceConf
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t armor_level; // 0x0
        uint32_t durability_price; // 0x4

    };

    struct FRegistWhiteListConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RegistWhiteListConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint64_t GOpenID; // 0x8
        uint32_t ignore_open; // 0x10

    };

    struct FRegistLimitConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RegistLimitConfTableRow
    {
    //Children Prop Count (Fields): 9
    public:

        uint32_t ID; // 0x8
        struct FDateTime begin_time; // 0x10
        struct FDateTime end_time; // 0x18
        uint32_t qq_total; // 0x20
        uint32_t qq_ios; // 0x24
        uint32_t qq_adroid; // 0x28
        uint32_t wx_total; // 0x2c
        uint32_t wx_ios; // 0x30
        uint32_t wx_adroid; // 0x34

    };

    struct FRegistEquipConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RegistEquipConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t ID; // 0x8
        uint32_t Index; // 0xc
        uint32_t item_id; // 0x10
        uint32_t Num; // 0x14
        uint32_t is_black; // 0x18
        struct TArray<struct FBlackItemConf> Items; // 0x20

    };

    struct FRegionConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RegionConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t Region; // 0x8
        uint32_t Open; // 0xc

    };

    struct FRedPointConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RedPointConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t Type; // 0xc
        struct TArray<uint32_t> sub_id; // 0x10
        uint32_t is_external; // 0x20

    };

    struct FRedPacketConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RedPacketConfTableRow
    {
    //Children Prop Count (Fields): 16
    public:

        uint32_t ID; // 0x8
        uint32_t daily_limit; // 0xc
        struct FDateTime start_time; // 0x10
        struct FDateTime end_time; // 0x18
        struct FString red_packet_pic; // 0x20
        uint32_t show_pop_up; // 0x30
        struct FString ntf_pic; // 0x38
        struct FString show_title; // 0x48
        struct FString show_tips; // 0x58
        struct FString show_button; // 0x68
        uint32_t show_win; // 0x78
        struct FString des_win; // 0x80
        struct FString jump_win; // 0x90
        struct FString Tips; // 0xa0
        struct FString msg_title; // 0xb0
        struct FString msg_content; // 0xc0

    };

    struct FRechargeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RechargeConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t recharge_money; // 0xc
        uint32_t recharge_reward; // 0x10

    };

    struct FRankedWeekRewardConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RankedWeekRewardConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t Level; // 0xc
        uint32_t active_point; // 0x10
        struct TArray<struct FCommonItemConfItem> rewards; // 0x18

    };

    struct FRankedTopRankRewardConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RankedTopRankRewardConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t start_rank; // 0xc
        uint32_t end_rank; // 0x10
        struct TArray<struct FCommonItemConfItem> rewards; // 0x18

    };

    struct FRankedTeamScoreConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RankedTeamScoreConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t Rank; // 0x8
        uint32_t Weight; // 0xc

    };

    struct FRankedSettleScoreConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RankedSettleScoreConfTableRow
    {
    //Children Prop Count (Fields): 9
    public:

        uint32_t Level; // 0x8
        uint32_t kill_pmc_score_limit; // 0xc
        uint32_t kill_scav_score_limit; // 0x10
        uint32_t loot_value_score_limit; // 0x14
        uint32_t loot_times_score_limit; // 0x18
        uint32_t survial_score_limit; // 0x1c
        int32_t penalty_score; // 0x20
        int32_t chall_coin_factor; // 0x24
        int32_t chall_coin_bonus; // 0x28

    };

    struct FRankedSeasonRewardConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RankedSeasonRewardConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<struct FCommonItemConfItem> rewards; // 0x10

    };

    struct FRankedSeasonConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RankedSeasonConfTableRow
    {
    //Children Prop Count (Fields): 14
    public:

        uint32_t ID; // 0x8
        struct FDateTime begin_time; // 0x10
        struct FDateTime warmup_end_time; // 0x18
        struct FDateTime end_time; // 0x20
        struct FDateTime carnival_end_time; // 0x28
        struct FDateTime season_end_time; // 0x30
        struct FText desc; // 0x38
        uint32_t is_delay_start; // 0x50
        uint32_t show_season_id; // 0x54
        uint32_t season_reward_base; // 0x58
        struct FDateTime countdown_time; // 0x60
        uint32_t bp_lv_award_group_id; // 0x68
        uint32_t ranked_lv_award_group_id; // 0x6c
        uint32_t badge_group_id; // 0x70

    };

    struct FRankedRankingFactorConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RankedRankingFactorConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t is_win; // 0xc
        uint32_t is_season_ranking_low; // 0x10
        uint32_t ranking_diff; // 0x14
        uint32_t ranking_m_factor; // 0x18

    };

    struct FRankedRankingConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RankedRankingConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t conf_type; // 0x8
        int32_t Val; // 0xc

    };

    struct FRankedRankingBackConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RankedRankingBackConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t lower; // 0x8
        uint32_t upper; // 0xc
        uint32_t new_ranking; // 0x10

    };

    struct FRankedMapConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RankedMapConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        struct FDateTime begin_time; // 0x10
        struct FDateTime end_time; // 0x18
        struct TArray<uint32_t> ranked_map_list; // 0x20
        struct TArray<uint32_t> factor_list; // 0x30

    };

    struct FRankedLevelRangeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RankedLevelRangeConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t rangeid; // 0x8
        uint32_t rangecount; // 0xc
        uint32_t StageId; // 0x10
        struct FText main_name; // 0x18
        struct FText sub_name; // 0x30

    };

    struct FRankedLevelConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RankedLevelConfTableRow
    {
    //Children Prop Count (Fields): 9
    public:

        uint32_t Level; // 0x8
        uint32_t upgrade_score; // 0xc
        struct FText TitleDesc; // 0x10
        uint32_t ranking_k_factor; // 0x28
        uint32_t icon; // 0x2c
        uint32_t nextseason_level; // 0x30
        uint32_t dogtag_itemid; // 0x34
        uint32_t ranked_level_type; // 0x38
        uint32_t price; // 0x3c

    };

    struct FRankedLevelAwardConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RankedLevelAwardConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t ID; // 0x8
        uint32_t group_id; // 0xc
        uint32_t Level; // 0x10
        uint32_t task_rw_id; // 0x14
        uint32_t task_rw_num; // 0x18
        uint32_t task_show_type; // 0x1c
        uint32_t task_show_main; // 0x20

    };

    struct FRankedLeaderboardSaleConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RankedLeaderboardSaleConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t lowindex; // 0xc
        uint32_t Ratio; // 0x10

    };

    struct FRankedKillScoreConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RankedKillScoreConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t ranked_level_diff; // 0x8
        int32_t bonus_score; // 0xc

    };

    struct FRankedHistoryInfoConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RankedHistoryInfoConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        struct FText field_text; // 0x10
        struct FString Field; // 0x28
        uint32_t Type; // 0x38
        uint32_t Priority; // 0x3c

    };

    struct FRankedCommonConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RankedCommonConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t Ranked_conf_type; // 0x8
        struct FString Val; // 0x10

    };

    struct FRankedBoxConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RankedBoxConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t item_id; // 0x8
        uint32_t Level; // 0xc
        uint32_t equip_num; // 0x10
        uint32_t def_num; // 0x14
        uint32_t use_num; // 0x18
        uint32_t etc_num; // 0x1c
        struct FText desc; // 0x20

    };

    struct FRandomForgeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RandomForgeConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t Val; // 0xc
        struct TArray<uint32_t> ary; // 0x10

    };

    struct FRandClassConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.RandClassConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t is_npc; // 0x8
        uint32_t group_id; // 0xc
        uint32_t class_id; // 0x10
        uint32_t Weight; // 0x14
        uint32_t weapon_comb_type; // 0x18

    };

    struct FQuickSortContainerPriorityTableRow : FTableRowBase //ScriptStruct UADataTableModule.QuickSortContainerPriorityTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        uint32_t Priority; // 0xc

    };

    struct FQuickModeRefreshCostConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.QuickModeRefreshCostConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t ID; // 0x8
        uint32_t map_mode_id; // 0xc
        uint32_t index_id; // 0x10
        struct FText index_name; // 0x18
        struct TArray<struct FRefreshCostVec> refresh_cost_vec; // 0x30
        struct TArray<struct FEnterCostVec> enter_cost_vec; // 0x40
        uint32_t refresh_group_id; // 0x50

    };

    struct FEnterCostVec //ScriptStruct UADataTableModule.EnterCostVec
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t item_id; // 0x0
        uint32_t cost_num; // 0x4

    };

    struct FRefreshCostVec //ScriptStruct UADataTableModule.RefreshCostVec
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t item_id; // 0x0
        struct TArray<uint32_t> cost_num_array; // 0x8

    };

    struct FQuickGiveConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.QuickGiveConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t sell_item_id; // 0xc
        uint32_t exchange_item_id; // 0x10
        uint32_t exchange_num; // 0x14

    };

    struct FQuickChatDataStaticsTableRow : FTableRowBase //ScriptStruct UADataTableModule.QuickChatDataStaticsTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t ID; // 0x8
        struct FText Key; // 0x10
        struct FText BattleInfoTable; // 0x28
        struct FText BattleInfoCalculate; // 0x40
        struct FText Format; // 0x58
        struct FText Operation; // 0x70
        uint32_t Factor; // 0x88

    };

    struct FQuickChatTableRow : FTableRowBase //ScriptStruct UADataTableModule.QuickChatTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        struct FText Content; // 0x10
        uint32_t isLeader; // 0x28
        uint32_t isBattleInfo; // 0x2c
        struct FText BattleInfoField; // 0x30

    };

    struct FPurchaseConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.PurchaseConfTableRow
    {
    //Children Prop Count (Fields): 12
    public:

        uint32_t ID; // 0x8
        uint32_t Type; // 0xc
        uint32_t is_for_act; // 0x10
        struct FString product_id; // 0x18
        uint32_t price; // 0x28
        uint32_t item_id; // 0x2c
        uint32_t item_num; // 0x30
        struct FText item_name; // 0x38
        struct FText item_desc; // 0x50
        uint32_t sell_type; // 0x68
        struct FText service_code; // 0x70
        struct FText service_name; // 0x88

    };

    struct FProvinceConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ProvinceConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ADCode; // 0x8
        struct FString ip_show; // 0x10

    };

    struct FProtectionTypeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ProtectionTypeConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ProtectionType; // 0x8
        uint32_t ProtectionTime; // 0xc
        uint32_t ProtectionDuraction; // 0x10

    };

    struct FPrivilegeItemConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.PrivilegeItemConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t active_item; // 0x8
        uint32_t Type; // 0xc
        struct FText get_item; // 0x10
        struct FText season_get_item; // 0x28
        struct FText daily_item; // 0x40
        uint32_t Value; // 0x58

    };

    struct FPrivilegeDesConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.PrivilegeDesConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t dataid; // 0x8
        uint32_t vip_id; // 0xc
        uint32_t vipsubitem_id; // 0x10
        struct FText privilegedes; // 0x18
        struct FText bubbledes; // 0x30
        struct FString icon_name; // 0x48

    };

    struct FPrivilegeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.PrivilegeConfTableRow
    {
    //Children Prop Count (Fields): 11
    public:

        uint32_t ID; // 0x8
        uint32_t cost_num; // 0xc
        uint32_t Duration; // 0x10
        uint32_t cost_num2; // 0x14
        uint32_t duration2; // 0x18
        struct FText icon; // 0x20
        uint32_t rest_renew_days; // 0x38
        uint32_t active_card; // 0x3c
        struct FText renewal_face_pic; // 0x40
        uint32_t jumpgotoid; // 0x58
        struct TArray<uint32_t> item_list; // 0x60

    };

    struct FPrivilegeBubbleConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.PrivilegeBubbleConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t ID; // 0x8
        uint32_t vip_id; // 0xc
        uint32_t bubble_type; // 0x10
        float bubble_pos_x; // 0x14
        float bubble_pos_y; // 0x18
        struct FText bubble_des; // 0x20
        uint32_t is_work; // 0x38

    };

    struct FPriceConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.PriceConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        uint32_t price; // 0xc

    };

    struct FPoolLimitValueTableRow : FTableRowBase //ScriptStruct UADataTableModule.PoolLimitValueTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t pool_id; // 0x8
        uint32_t value_limit; // 0xc

    };

    struct FPmcEquipConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.PmcEquipConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t is_npc; // 0x8
        uint32_t group_id; // 0xc
        uint32_t class_id; // 0x10
        uint32_t slot_index; // 0x14
        uint32_t Weight; // 0x18
        uint32_t item_id; // 0x1c
        struct TArray<struct FExtEquipConf> exts; // 0x20

    };

    struct FPmcContainerConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.PmcContainerConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t Weight; // 0xc
        struct TArray<struct FCntrItemConf> Items; // 0x10

    };

    struct FPmcAiScoreConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.PmcAiScoreConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t Level; // 0x8
        uint32_t min_val; // 0xc

    };

    struct FPmcAiLimitItemConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.PmcAiLimitItemConfTableRow
    {
    //Children Prop Count (Fields): 1
    public:

        uint32_t item_id; // 0x8

    };

    struct FPmcAiConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.PmcAiConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint64_t Openid; // 0x10
        uint32_t Level; // 0x18
        struct FString Name; // 0x20

    };

    struct FPlayerNamePoolTableRow : FTableRowBase //ScriptStruct UADataTableModule.PlayerNamePoolTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t Group; // 0xc
        struct FText Name; // 0x10

    };

    struct FPlayerListTableRow : FTableRowBase //ScriptStruct UADataTableModule.PlayerListTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t ID; // 0x8
        struct FText Name; // 0x10
        uint32_t Type; // 0x28
        uint32_t DefaultValue; // 0x2c
        struct FString Param1; // 0x30
        struct FText OptionsName; // 0x40

    };

    struct FPlayerAvatarPopupMenuButtonTableRow : FTableRowBase //ScriptStruct UADataTableModule.PlayerAvatarPopupMenuButtonTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint16_t ID; // 0x8
        struct FText DisplayName; // 0x10
        struct FString IconName; // 0x28
        char displayType; // 0x38
        struct FString ExecFunc; // 0x40
        struct TArray<uint16_t> ForbiddenMode; // 0x50

    };

    struct FPlayerAvatarPopupMenuTableRow : FTableRowBase //ScriptStruct UADataTableModule.PlayerAvatarPopupMenuTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint16_t ID; // 0x8
        uint32_t Type; // 0xc
        uint32_t sub_type; // 0x10
        struct TArray<uint16_t> ButtonTypes; // 0x18
        uint32_t InviteTeamType; // 0x28
        uint32_t AddFriendType; // 0x2c

    };

    struct FPlayModeTableRow : FTableRowBase //ScriptStruct UADataTableModule.PlayModeTableRow
    {
    //Children Prop Count (Fields): 25
    public:

        uint32_t ID; // 0x8
        uint32_t mode_id; // 0xc
        uint32_t sub_mod_id; // 0x10
        uint32_t map_id; // 0x14
        uint32_t rule_id; // 0x18
        uint32_t difficult; // 0x1c
        uint32_t Time; // 0x20
        uint32_t base_time; // 0x24
        uint32_t day_start_time; // 0x28
        uint32_t day_end_time; // 0x2c
        uint32_t time_shift; // 0x30
        uint32_t min_pmc; // 0x34
        uint32_t max_pmc; // 0x38
        uint32_t max_pmc_team; // 0x3c
        uint32_t pmc_team_num; // 0x40
        uint32_t scav_team_num; // 0x44
        uint32_t NormalBeginTime; // 0x48
        uint32_t NormalBeginPersonNum; // 0x4c
        uint32_t LongTimeBeginTime; // 0x50
        uint32_t LongTimeBeginPersonNum; // 0x54
        uint32_t TimeoutTime; // 0x58
        uint32_t SpawnAIPersonPercent; // 0x5c
        uint32_t prefer_score; // 0x60
        uint32_t ds_tick_rate; // 0x64
        uint32_t Dynamic_Light; // 0x68

    };

    struct FPersonalRadarMapTableRow : FTableRowBase //ScriptStruct UADataTableModule.PersonalRadarMapTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<float> score_list; // 0x10

    };

    struct FPersonalRadarFactorTableRow : FTableRowBase //ScriptStruct UADataTableModule.PersonalRadarFactorTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        float MapCoefficient; // 0xc
        uint32_t IsSegment; // 0x10
        uint32_t RadarType; // 0x14
        uint32_t RadarDataSourceType; // 0x18
        struct FText AppendId; // 0x20
        uint32_t Coefficient; // 0x38
        uint32_t ConvertId; // 0x3c

    };

    struct FPersonalBattleOverviewTableRow : FTableRowBase //ScriptStruct UADataTableModule.PersonalBattleOverviewTableRow
    {
    //Children Prop Count (Fields): 14
    public:

        uint32_t ID; // 0x8
        struct FText ShowName; // 0x10
        struct FString Name; // 0x28
        struct FString Format; // 0x38
        struct FText Suffix; // 0x48
        struct FText desc; // 0x60
        uint32_t CaculateType; // 0x78
        uint32_t Show; // 0x7c
        uint32_t Category; // 0x80
        uint32_t OuterWeight; // 0x84
        uint32_t SubCategory; // 0x88
        uint32_t Weight; // 0x8c
        struct TArray<uint64_t> AppendId; // 0x90
        struct FString ClientAppendId; // 0xa0

    };

    struct FPermitConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.PermitConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t check_svr; // 0xc
        uint32_t check_iparea; // 0x10
        uint32_t check_alertip; // 0x14
        struct TArray<uint32_t> env_list; // 0x18

    };

    struct FPaybackConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.PaybackConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t ID; // 0x8
        uint32_t payback_base_value; // 0xc
        uint32_t payback_max_single_value; // 0x10
        uint32_t is_protected; // 0x14
        uint32_t min_protect_level; // 0x18
        uint32_t payback_ratio; // 0x1c
        struct TArray<struct FInflationRatio> inflation_ratio; // 0x20

    };

    struct FInflationRatio //ScriptStruct UADataTableModule.InflationRatio
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t start_day; // 0x0
        uint32_t Ratio; // 0x4

    };

    struct FPPTPageConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.PPTPageConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t pageID; // 0x8
        uint32_t umgPath; // 0xc
        struct TArray<struct FString> animations; // 0x10
        uint32_t showDesc; // 0x20
        struct FText Title; // 0x28
        struct FText desc; // 0x40

    };

    struct FOverSaleValueTableRow : FTableRowBase //ScriptStruct UADataTableModule.OverSaleValueTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t Item_type; // 0x8
        struct FText type_name; // 0x10
        struct FText sale_warning_message; // 0x28
        struct FText sale_warning_advice; // 0x40

    };

    struct FOverSaleNewbieLevelTableRow : FTableRowBase //ScriptStruct UADataTableModule.OverSaleNewbieLevelTableRow
    {
    //Children Prop Count (Fields): 1
    public:

        uint32_t newbie_level; // 0x8

    };

    struct FOverSaleLackFundTableRow : FTableRowBase //ScriptStruct UADataTableModule.OverSaleLackFundTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t lack_fund_wealth1; // 0x8
        uint32_t lack_fund_wealth2; // 0xc
        uint32_t lack_fund_cash; // 0x10
        uint32_t lack_fund_mud; // 0x14
        uint32_t lack_fund_gold; // 0x18

    };

    struct FOverConsumptionValueTableRow : FTableRowBase //ScriptStruct UADataTableModule.OverConsumptionValueTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t Item_type; // 0x8
        struct FText type_name; // 0x10
        uint32_t over_consumption_value; // 0x28

    };

    struct FOnShelfConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.OnShelfConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        uint32_t on_the_shelf; // 0xc

    };

    struct FObResetEquipConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ObResetEquipConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t Index; // 0x8
        uint32_t item_id; // 0xc
        uint32_t Num; // 0x10
        uint32_t is_black; // 0x14
        struct TArray<struct FBlackItemConf> Items; // 0x18

    };

    struct FObRegistEquipConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ObRegistEquipConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t Index; // 0x8
        uint32_t item_id; // 0xc
        uint32_t Num; // 0x10
        uint32_t is_black; // 0x14
        struct TArray<struct FBlackItemConf> Items; // 0x18

    };

    struct FObRegistBasicConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ObRegistBasicConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t ID; // 0x8
        uint32_t Level; // 0xc
        uint32_t are_all_tasks_done; // 0x10
        uint32_t bullion; // 0x14
        uint32_t gold; // 0x18
        uint32_t whether_start_rookie; // 0x1c

    };

    struct FObBusinessmanBasicConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ObBusinessmanBasicConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t businessman_id; // 0x8
        uint32_t businessman_loyalty; // 0xc

    };

    struct FNotSubsItemConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.NotSubsItemConfTableRow
    {
    //Children Prop Count (Fields): 1
    public:

        uint32_t item_id; // 0x8

    };

    struct FNormalGachaConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.NormalGachaConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t gacha_id; // 0x8
        uint32_t pool_id; // 0xc
        uint32_t cost_item; // 0x10
        uint32_t cost_num; // 0x14
        uint32_t show_items_group; // 0x18

    };

    struct FNewbieLevelTableRow : FTableRowBase //ScriptStruct UADataTableModule.NewbieLevelTableRow
    {
    //Children Prop Count (Fields): 1
    public:

        uint32_t newbie_level; // 0x8

    };

    struct FNewGachaConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.NewGachaConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t gacha_id; // 0x8
        struct FText Name; // 0x10
        uint32_t Type; // 0x28
        uint32_t max_count; // 0x2c
        uint32_t reset_type; // 0x30
        struct FText icon; // 0x38

    };

    struct FNationalFlagConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.NationalFlagConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct FText country_alpha; // 0x10
        struct FText country_img_url; // 0x28

    };

    struct FMultiModeWidgetTableRow : FTableRowBase //ScriptStruct UADataTableModule.MultiModeWidgetTableRow
    {
    //Children Prop Count (Fields): 11
    public:

        uint32_t ID; // 0x8
        struct FText Name; // 0x10
        struct FString sysIds; // 0x28
        bool isShowMode; // 0x38
        uint32_t use_ticket; // 0x3c
        uint32_t need_take_in_threshold; // 0x40
        uint32_t default_avatar_set_id; // 0x44
        uint32_t use_self_equip; // 0x48
        uint32_t use_self_avatar; // 0x4c
        uint32_t show_wash_white; // 0x50
        uint32_t block_item_back_mail; // 0x54

    };

    struct FMomentTableRow : FTableRowBase //ScriptStruct UADataTableModule.MomentTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t MomentId; // 0x8
        struct FText MomentTitle; // 0x10
        uint32_t Proportion; // 0x28
        struct FText Describe; // 0x30
        struct FText UrlTitle; // 0x48
        struct FText UrlDescribe; // 0x60

    };

    struct FMeticulousSmallGiftConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MeticulousSmallGiftConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t gift_id; // 0x8
        struct FText Name; // 0x10
        struct FText desc; // 0x28
        struct FText pic; // 0x40
        struct FText reward_pic; // 0x58

    };

    struct FMeticulousLotteryConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MeticulousLotteryConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t gift_id; // 0x8
        uint32_t exist_time; // 0xc
        struct FText Name; // 0x10
        struct FText desc; // 0x28
        struct FText pic; // 0x40

    };

    struct FMeticulousGiftConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MeticulousGiftConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t gift_id; // 0x8
        uint32_t exist_time; // 0xc
        uint32_t trigger_limit; // 0x10
        struct FText Name; // 0x18
        struct FText desc; // 0x30
        struct FText pic; // 0x48
        struct FText reward_pic; // 0x60

    };

    struct FMeleeWeaponDetailTableRow : FTableRowBase //ScriptStruct UADataTableModule.MeleeWeaponDetailTableRow
    {
    //Children Prop Count (Fields): 17
    public:

        uint64_t ItemID; // 0x8
        struct TArray<float> BaseDamage; // 0x10
        float ArmorDamage; // 0x20
        float ArmorDamageRatio; // 0x24
        float BleedChance; // 0x28
        float EnergyConsume; // 0x2c
        struct FText AttackSpeed; // 0x30
        struct TArray<float> DamageReduction; // 0x48
        float TraceRange; // 0x58
        struct FText BleedProbabilityDisplay; // 0x60
        struct FText TraceRangeDisplay; // 0x78
        float MeleeMoveSpeedRatio; // 0x90
        float DamageScaleHead; // 0x94
        float DamageScaleArms; // 0x98
        float DamageScaleLegs; // 0x9c
        float DamageScaleStomach; // 0xa0
        float DamageScaleChest; // 0xa4

    };

    struct FMedGuidePageConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MedGuidePageConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t IndexId; // 0x8
        struct FString icon; // 0x10
        struct FText desc; // 0x20
        struct TArray<uint64_t> CureItemId; // 0x38
        uint32_t ShowPage; // 0x48

    };

    struct FMatchRankScoreExpansionConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MatchRankScoreExpansionConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t rank_score; // 0x8
        struct TArray<uint32_t> rank_score_expansion_val; // 0x10

    };

    struct FMatchPoolConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MatchPoolConfTableRow
    {
    //Children Prop Count (Fields): 38
    public:

        uint32_t ID; // 0x8
        uint32_t play_mode_id; // 0xc
        uint32_t matchsvr_division; // 0x10
        uint32_t match_process; // 0x14
        uint32_t wander_default_need_teammate; // 0x18
        uint32_t time_seg; // 0x1c
        struct TArray<uint32_t> min_open_condition_time_array; // 0x20
        struct TArray<uint32_t> min_player_num_array; // 0x30
        uint32_t max_player_num; // 0x40
        struct TArray<uint32_t> min_team_num_array; // 0x48
        uint32_t max_team_num; // 0x58
        struct TArray<uint32_t> min_wander_player_num_array; // 0x60
        uint32_t max_wander_player_num; // 0x70
        struct TArray<uint32_t> min_wander_team_num_array; // 0x78
        uint32_t max_wander_team_num; // 0x88
        uint32_t wait_fill_time; // 0x8c
        uint32_t is_join_open; // 0x90
        uint32_t join_time_begin; // 0x94
        uint32_t join_time_end; // 0x98
        uint32_t max_scav_join_num; // 0x9c
        uint32_t max_wait_style_teammate_time; // 0xa0
        uint32_t max_wait_teammate_time; // 0xa4
        uint32_t min_player_team; // 0xa8
        uint32_t max_player_team; // 0xac
        uint32_t min_wander_player_team; // 0xb0
        uint32_t max_wander_player_team; // 0xb4
        struct TArray<uint32_t> rank_score_expansion_time; // 0xb8
        uint32_t match_dismiss_time; // 0xc8
        struct TArray<uint32_t> begin_time_array; // 0xd0
        struct TArray<uint32_t> begin_time_score_array; // 0xe0
        uint32_t max_wait_country_time; // 0xf0
        uint32_t max_wait_region_time; // 0xf4
        uint32_t jump_pool_time; // 0xf8
        uint32_t jump_pool_id; // 0xfc
        uint32_t match_param_total_value; // 0x100
        uint32_t max_wait_idc_time; // 0x104
        struct TArray<uint32_t> faction_open_condition_array; // 0x108
        struct TArray<struct FMatchFactionTeamConf> match_faction_team_vec; // 0x118

    };

    struct FMatchFactionTeamConf //ScriptStruct UADataTableModule.MatchFactionTeamConf
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t faction_id; // 0x0
        uint32_t role_num_ratio; // 0x4
        uint32_t min_player_team; // 0x8
        uint32_t max_player_team; // 0xc

    };

    struct FMatchPoolConditionConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MatchPoolConditionConfTableRow
    {
    //Children Prop Count (Fields): 18
    public:

        uint32_t ID; // 0x8
        uint32_t match_pool_id; // 0xc
        uint32_t match_type; // 0x10
        uint32_t min_level; // 0x14
        uint32_t max_level; // 0x18
        uint32_t min_pmc_battle_cnt; // 0x1c
        uint32_t max_pmc_battle_cnt; // 0x20
        uint32_t match_isolation_type; // 0x24
        struct TArray<uint32_t> need_step_array; // 0x28
        struct TArray<uint32_t> step_transfer_pool_array; // 0x38
        struct TArray<uint32_t> high_ratio_type_array; // 0x48
        struct TArray<uint32_t> high_ratio_transfer_pool_array; // 0x58
        uint32_t transfer_pool_id; // 0x68
        uint32_t wealth_transfer_pool_id; // 0x6c
        uint32_t time_transfer_pool_id; // 0x70
        struct FDateTime begin_time; // 0x78
        struct FDateTime end_time; // 0x80
        struct TArray<struct FMatchDailyTimeConf> daily_time_vec; // 0x88

    };

    struct FMatchDailyTimeConf //ScriptStruct UADataTableModule.MatchDailyTimeConf
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString daily_begin_time; // 0x0
        struct FString daily_end_time; // 0x10

    };

    struct FMatchMapReplaceConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MatchMapReplaceConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<struct FMatchMapReplaceItemConf> map_mode_list; // 0x10

    };

    struct FMatchMapReplaceItemConf //ScriptStruct UADataTableModule.MatchMapReplaceItemConf
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t map_mode_id; // 0x0
        uint32_t Weight; // 0x4

    };

    struct FMatchLineUpConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MatchLineUpConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t min_player_team; // 0xc
        uint32_t max_player_team; // 0x10
        uint32_t min_team_num; // 0x14
        uint32_t max_team_num; // 0x18

    };

    struct FMatchHallTeamDegreeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MatchHallTeamDegreeConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t match_hall_team_degree_type; // 0x8
        uint32_t ID; // 0xc
        int32_t Val; // 0x10

    };

    struct FMatchFactionOpenConditionConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MatchFactionOpenConditionConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct TArray<uint32_t> min_open_condition_time_array; // 0x10
        struct TArray<struct FMatchFactionOpenConf> match_faction_vec; // 0x20

    };

    struct FMatchFactionOpenConf //ScriptStruct UADataTableModule.MatchFactionOpenConf
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t faction_id; // 0x0
        struct TArray<uint32_t> team_num_array; // 0x8

    };

    struct FMatchCommonConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MatchCommonConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t match_conf_type; // 0x8
        uint32_t Val; // 0xc
        struct TArray<uint32_t> vec; // 0x10

    };

    struct FMarqueeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MarqueeConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct FString Content; // 0x10

    };

    struct FMapWeatherTableRow : FTableRowBase //ScriptStruct UADataTableModule.MapWeatherTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t cur_weather; // 0xc
        struct TArray<struct FWeatherRateItem> weather_list; // 0x10

    };

    struct FWeatherRateItem //ScriptStruct UADataTableModule.WeatherRateItem
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t Weather; // 0x0
        uint32_t Weight; // 0x4

    };

    struct FMapUnlockTableRow : FTableRowBase //ScriptStruct UADataTableModule.MapUnlockTableRow
    {
    //Children Prop Count (Fields): 34
    public:

        uint32_t ID; // 0x8
        uint32_t mode_id; // 0xc
        uint32_t sub_mod_id; // 0x10
        uint32_t map_id; // 0x14
        uint32_t rule_id; // 0x18
        struct FText ShowName; // 0x20
        uint32_t ShowIndex; // 0x38
        uint32_t helpJumpId; // 0x3c
        uint32_t unlock_type; // 0x40
        struct TArray<uint64_t> unlock_param; // 0x48
        uint32_t ticket; // 0x58
        uint32_t is_scav_unlock; // 0x5c
        uint32_t is_golden_scav_unlock; // 0x60
        uint32_t act_ticket; // 0x64
        uint32_t act_id; // 0x68
        uint32_t take_in_threshold; // 0x6c
        struct FString sysIds; // 0x70
        uint32_t map_picture; // 0x80
        struct FString typeIcon; // 0x88
        uint32_t map_plug; // 0x98
        struct FString map_bg_name; // 0xa0
        uint32_t ranked_level_limit; // 0xb0
        struct FText lockreason_out; // 0xb8
        struct FText lockreason_pop; // 0xd0
        struct TArray<uint32_t> all_unlock_condition_array; // 0xe8
        uint32_t map_unlock_level; // 0xf8
        struct FDateTime begin_time; // 0x100
        struct FDateTime end_time; // 0x108
        struct TArray<struct FMapUnlockDailyTimeConf> daily_time_vec; // 0x110
        struct TArray<uint32_t> all_show_condition_array; // 0x120
        uint32_t map_show_level; // 0x130
        struct FDateTime show_begin_time; // 0x138
        struct FDateTime show_end_time; // 0x140
        struct TArray<struct FMapShowDailyTimeConf> show_daily_time_vec; // 0x148

    };

    struct FMapShowDailyTimeConf //ScriptStruct UADataTableModule.MapShowDailyTimeConf
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString daily_begin_time; // 0x0
        struct FString daily_end_time; // 0x10

    };

    struct FMapUnlockDailyTimeConf //ScriptStruct UADataTableModule.MapUnlockDailyTimeConf
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString daily_begin_time; // 0x0
        struct FString daily_end_time; // 0x10

    };

    struct FMapRuleRangeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MapRuleRangeConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t rule_id; // 0x8
        uint32_t Index; // 0xc
        uint32_t show_index; // 0x10
        uint32_t rule_picture; // 0x14
        struct TArray<struct FMapUnlockDailyTimeConf> daily_time_vec; // 0x18
        struct FText rule_title; // 0x28
        struct FText rule_name; // 0x40
        struct FText rule_desc; // 0x58

    };

    struct FMapNewsInfoTableRow : FTableRowBase //ScriptStruct UADataTableModule.MapNewsInfoTableRow
    {
    //Children Prop Count (Fields): 10
    public:

        uint32_t ID; // 0x8
        struct FString Title; // 0x10
        struct FString desc; // 0x20
        struct FString pic; // 0x30
        struct FString show_open_time; // 0x40
        struct FString show_daily_time; // 0x50
        uint32_t Order; // 0x60
        uint32_t mapunlockId; // 0x64
        bool isPop; // 0x68
        uint32_t pop_order; // 0x6c

    };

    struct FMapLayoutTableRow : FTableRowBase //ScriptStruct UADataTableModule.MapLayoutTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t mapunlock_id; // 0x8
        struct FString select_list; // 0x10

    };

    struct FMapGameModeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MapGameModeConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t ID; // 0x8
        struct FDateTime begin_time; // 0x10
        struct FDateTime end_time; // 0x18
        struct TArray<uint32_t> pmc_map_list; // 0x20
        struct TArray<uint32_t> pmc_mode_list; // 0x30
        struct TArray<uint32_t> wander_map_list; // 0x40
        struct TArray<uint32_t> wander_mode_list; // 0x50

    };

    struct FMapDetailTableRow : FTableRowBase //ScriptStruct UADataTableModule.MapDetailTableRow
    {
    //Children Prop Count (Fields): 10
    public:

        uint32_t ID; // 0x8
        struct FText map_level; // 0x10
        struct FString mobile_map_level; // 0x28
        struct FText Name; // 0x38
        struct FString level_path; // 0x50
        struct FText Picture; // 0x60
        struct FText desc; // 0x78
        struct FVector2D MapSize; // 0x90
        struct TArray<struct FVector2D> SampleScenePoints; // 0x98
        struct TArray<struct FVector2D> SampleMapPoints; // 0xa8

    };

    struct FMallTagConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MallTagConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct FText Name; // 0x10

    };

    struct FMallSuitConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MallSuitConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        struct FText Name; // 0x10
        struct FText desc; // 0x28
        uint32_t icon_id; // 0x40
        struct TArray<uint32_t> sell_group_ids; // 0x48

    };

    struct FMallRecommendConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MallRecommendConfTableRow
    {
    //Children Prop Count (Fields): 16
    public:

        uint32_t pic_id; // 0x8
        uint32_t pic_size; // 0xc
        uint32_t pic_seq; // 0x10
        struct FText pic_name; // 0x18
        struct FString banner_url; // 0x30
        uint32_t pic_url_type; // 0x40
        struct FString pic_url; // 0x48
        struct FString video_static_pic; // 0x58
        struct FDateTime pre_begin_time; // 0x68
        struct FDateTime pre_end_time; // 0x70
        struct FDateTime begin_time; // 0x78
        struct FDateTime end_time; // 0x80
        struct FString item_desc; // 0x88
        uint32_t item_quality; // 0x98
        uint32_t mall_item_id; // 0x9c
        uint32_t jump_id; // 0xa0

    };

    struct FMallJumpConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MallJumpConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct FText jump_desc; // 0x10

    };

    struct FMallItemTagConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MallItemTagConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct FText Name; // 0x10

    };

    struct FMallItemQualityConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MallItemQualityConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<uint32_t> quality_RGB; // 0x10

    };

    struct FMallItemHighlightsConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MallItemHighlightsConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct FText Name; // 0x10
        struct FString icon; // 0x28

    };

    struct FMallItemConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MallItemConfTableRow
    {
    //Children Prop Count (Fields): 49
    public:

        uint32_t ID; // 0x8
        uint32_t jump_id; // 0xc
        uint32_t first_class_order; // 0x10
        uint32_t second_class_order; // 0x14
        uint32_t third_class_order; // 0x18
        uint32_t item_tag; // 0x1c
        uint32_t seq; // 0x20
        uint32_t sell_item_id; // 0x24
        uint32_t sell_num; // 0x28
        uint32_t sell_group_id; // 0x2c
        uint32_t sell_suit_id; // 0x30
        uint32_t can_multi_sell; // 0x34
        uint32_t purchase_id; // 0x38
        uint32_t is_black; // 0x3c
        uint32_t exchange_item_id; // 0x40
        uint32_t exchange_num; // 0x44
        uint32_t discount_exchange_num; // 0x48
        struct FDateTime discount_begin_time; // 0x50
        struct FDateTime discount_end_time; // 0x58
        uint32_t promotion_id; // 0x60
        uint32_t promotion_offset; // 0x64
        struct TArray<uint32_t> daily_differential_exchange_count_array; // 0x68
        struct TArray<uint32_t> daily_differential_exchange_num_array; // 0x78
        struct FDateTime pre_begin_time; // 0x88
        struct FDateTime pre_end_time; // 0x90
        struct FDateTime begin_time; // 0x98
        struct FDateTime end_time; // 0xa0
        uint32_t quality; // 0xa8
        uint32_t preview_mode; // 0xac
        struct TArray<struct FTag> tag_list; // 0xb0
        uint32_t first_sell_point; // 0xc0
        uint32_t second_sell_point; // 0xc4
        uint32_t third_sell_point; // 0xc8
        uint32_t fourth_sell_point; // 0xcc
        uint32_t buy_limit; // 0xd0
        uint32_t buy_limit_num; // 0xd4
        uint32_t need_vip_level; // 0xd8
        struct FString URL; // 0xe0
        struct FString need_version; // 0xf0
        uint32_t is_backup; // 0x100
        uint32_t country_group_id; // 0x104
        uint32_t is_quick_give; // 0x108
        uint32_t need_level; // 0x10c
        uint32_t need_bp_vip; // 0x110
        uint32_t need_bp_level; // 0x114
        uint32_t front_id; // 0x118
        uint32_t grade_id; // 0x11c
        uint32_t sell_channel; // 0x120
        uint32_t sell_channel_value; // 0x124

    };

    struct FTag //ScriptStruct UADataTableModule.Tag
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t tag_type; // 0x0
        struct FString tag_desc; // 0x8
        struct FDateTime tag_begin_time; // 0x18
        struct FDateTime tag_end_time; // 0x20

    };

    struct FMallGradeDivisionConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MallGradeDivisionConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t class_order_id; // 0xc
        uint32_t payment_limit; // 0x10
        uint32_t grade; // 0x14

    };

    struct FMallClassConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MallClassConfTableRow
    {
    //Children Prop Count (Fields): 14
    public:

        uint32_t ID; // 0x8
        uint32_t Type; // 0xc
        struct FText Name; // 0x10
        uint32_t parent_class; // 0x28
        struct FString icon; // 0x30
        struct FString PageType; // 0x40
        uint32_t parent_hide_empty; // 0x50
        uint32_t is_hide; // 0x54
        struct FDateTime begin_time; // 0x58
        struct FDateTime end_time; // 0x60
        uint32_t show_empty; // 0x68
        uint32_t red_point_id; // 0x6c
        uint32_t display_order; // 0x70
        struct TArray<struct FClassBanner> banner_list; // 0x78

    };

    struct FClassBanner //ScriptStruct UADataTableModule.ClassBanner
    {
    //Children Prop Count (Fields): 3
    public:

        struct FDateTime begin_time; // 0x0
        struct FDateTime end_time; // 0x8
        struct FString cdn; // 0x10

    };

    struct FMailTypeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MailTypeConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t Type; // 0x8
        uint32_t is_stage; // 0xc
        uint32_t mail_max_count; // 0x10
        uint32_t extend_max_size; // 0x14

    };

    struct FMailConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.MailConfTableRow
    {
    //Children Prop Count (Fields): 26
    public:

        uint32_t ID; // 0x8
        uint32_t Type; // 0xc
        struct FText Title; // 0x10
        struct FText Content; // 0x28
        uint32_t sender_type; // 0x40
        struct FText sender; // 0x48
        uint32_t sender_id; // 0x60
        struct FText sender_head; // 0x68
        uint32_t expire_time; // 0x80
        struct FDateTime expire_date; // 0x88
        uint32_t auto_delete; // 0x90
        uint32_t auto_award; // 0x94
        uint32_t auto_read; // 0x98
        uint32_t auto_suit_reward; // 0x9c
        uint32_t through_season; // 0xa0
        struct TArray<uint32_t> account_channel_type; // 0xa8
        struct TArray<uint32_t> client_plat_type; // 0xb8
        struct FString client_version_low; // 0xc8
        struct FString client_version_up; // 0xd8
        uint32_t link_type; // 0xe8
        struct FText link_dest; // 0xf0
        struct FString link_params; // 0x108
        struct FText link_text; // 0x118
        struct TArray<struct FBlackItemConf> awards; // 0x130
        struct FString mutil_lang_content_url; // 0x140
        uint32_t country_group_id; // 0x150

    };

    struct FLuckyGachaConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.LuckyGachaConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t gacha_id; // 0x8
        uint32_t cost_item; // 0xc
        uint32_t cost_num; // 0x10
        uint32_t ten_count_discount; // 0x14
        uint32_t pool_id; // 0x18
        struct TArray<struct FLuckyPoolInfo> lucky_pool_ids; // 0x20
        uint32_t show_items_group; // 0x30

    };

    struct FLuckyPoolInfo //ScriptStruct UADataTableModule.LuckyPoolInfo
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t pool_id; // 0x0
        uint32_t Priority; // 0x4
        uint32_t lucky_count; // 0x8

    };

    struct FLotteryStepPriceConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.LotteryStepPriceConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<uint32_t> lottery_step_price; // 0x10

    };

    struct FLoseDropConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.LoseDropConfTableRow
    {
    //Children Prop Count (Fields): 1
    public:

        uint32_t ID; // 0x8

    };

    struct FLootResourceConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.LootResourceConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t Type; // 0xc
        char rare; // 0x10
        char Priority; // 0x11

    };

    struct FLootReplaceConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.LootReplaceConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t ID; // 0x8
        uint32_t is_consumable; // 0xc
        uint32_t shield_type; // 0x10
        uint32_t sub_item_id; // 0x14
        uint32_t sub_item_num; // 0x18
        uint32_t need_sub_items; // 0x1c
        struct TArray<struct FCommonItemConfItem> sub_scav_items; // 0x20

    };

    struct FLootProtectionItemsConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.LootProtectionItemsConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        uint32_t item_id; // 0xc

    };

    struct FLootProtectionConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.LootProtectionConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        uint32_t ProtectionType; // 0xc

    };

    struct FLootPoolConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.LootPoolConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t play_mode_id; // 0x8
        uint32_t loot_pool; // 0xc

    };

    struct FLootObjExpTableRow : FTableRowBase //ScriptStruct UADataTableModule.LootObjExpTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t ID; // 0x8
        int32_t subtype; // 0xc
        int32_t loot_exp; // 0x10

    };

    struct FLootLimitConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.LootLimitConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        float normal_value; // 0xc
        float redline_value; // 0x10
        uint32_t calc_type; // 0x14
        uint32_t loot_pool; // 0x18

    };

    struct FLootFactionItemConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.LootFactionItemConfTableRow
    {
    //Children Prop Count (Fields): 1
    public:

        uint64_t ItemID; // 0x8

    };

    struct FLootDropPoolConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.LootDropPoolConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint64_t ID; // 0x8
        struct TArray<struct FLootDropPoolInfo> Items; // 0x10

    };

    struct FLootDropPoolInfo //ScriptStruct UADataTableModule.LootDropPoolInfo
    {
    //Children Prop Count (Fields): 3
    public:

        uint64_t item_id; // 0x0
        uint32_t item_num; // 0x8
        uint32_t Probability; // 0xc

    };

    struct FLootDropOperationConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.LootDropOperationConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint64_t ID; // 0x8
        struct TArray<struct FActivityLootDropInfoConf> Items; // 0x10

    };

    struct FActivityLootDropInfoConf //ScriptStruct UADataTableModule.ActivityLootDropInfoConf
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t activity_id; // 0x0
        uint32_t activity_weight; // 0x4
        uint32_t in_game_time; // 0x8
        uint32_t Weather; // 0xc
        uint32_t pool_id; // 0x10

    };

    struct FLootDropControlConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.LootDropControlConfTableRow
    {
    //Children Prop Count (Fields): 13
    public:

        uint32_t ID; // 0x8
        uint64_t map_id; // 0x10
        uint64_t is_map_all; // 0x18
        uint64_t box_id; // 0x20
        uint64_t is_box_all; // 0x28
        uint64_t loot_id; // 0x30
        uint32_t activity_id; // 0x38
        uint32_t activity_order; // 0x3c
        uint32_t in_game_time; // 0x40
        uint32_t Weather; // 0x44
        struct TArray<uint32_t> commonitem_id_array; // 0x48
        uint64_t relace_rate; // 0x58
        struct TArray<uint32_t> pool_id; // 0x60

    };

    struct FLootDropActivityPoolConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.LootDropActivityPoolConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint64_t ID; // 0x8
        struct TArray<struct FLootDropPoolInfo> Items; // 0x10

    };

    struct FLootDropActivityConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.LootDropActivityConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        uint64_t map_id; // 0x10
        uint64_t is_map_all; // 0x18
        uint64_t box_id; // 0x20
        uint64_t is_box_all; // 0x28
        uint64_t loot_id; // 0x30
        uint32_t activity_order; // 0x38
        struct TArray<struct FNewActivityLootDropInfoConf> Items; // 0x40

    };

    struct FNewActivityLootDropInfoConf //ScriptStruct UADataTableModule.NewActivityLootDropInfoConf
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t activity_id; // 0x0
        uint32_t activity_weight; // 0x4
        uint32_t in_game_time; // 0x8
        uint32_t Weather; // 0xc
        struct TArray<uint32_t> pool_id; // 0x10

    };

    struct FLootDropTableRow : FTableRowBase //ScriptStruct UADataTableModule.LootDropTableRow
    {
    //Children Prop Count (Fields): 17
    public:

        uint64_t ID; // 0x8
        struct FString desc; // 0x10
        char ItemType; // 0x20
        uint64_t ItemID; // 0x28
        struct TArray<uint32_t> ItemNum; // 0x30
        struct TArray<uint64_t> SubItemTable; // 0x40
        uint32_t Weight; // 0x50
        float Percent; // 0x54
        float RandTimes; // 0x58
        float WeightTimes; // 0x5c
        char OperationType; // 0x60
        char IsPermanent; // 0x61
        uint32_t ActID; // 0x64
        struct TArray<uint64_t> LootPointWhite; // 0x68
        struct TArray<uint64_t> LootPointBlack; // 0x78
        struct FString Describe; // 0x88
        uint32_t MaxRepeatRandomNum; // 0x98

    };

    struct FLoginLoadingTipsTableRow : FTableRowBase //ScriptStruct UADataTableModule.LoginLoadingTipsTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct FText Tip; // 0x10
        uint32_t Weight; // 0x28

    };

    struct FLoginLoadingImageTableRow : FTableRowBase //ScriptStruct UADataTableModule.LoginLoadingImageTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct FString Path; // 0x10
        uint32_t Weight; // 0x20

    };

    struct FLoginControlConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.LoginControlConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t env_id; // 0x8
        uint32_t is_open; // 0xc
        struct FDateTime open_time; // 0x10
        struct FDateTime close_time; // 0x18
        uint32_t force_all_update; // 0x20
        uint32_t force_version_update; // 0x24
        struct TArray<struct FConfVersionRange> version_ranges; // 0x28

    };

    struct FConfVersionRange //ScriptStruct UADataTableModule.ConfVersionRange
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString min_version; // 0x0
        struct FString max_version; // 0x10

    };

    struct FLocalizationConf_zh_HansTableRow : FTableRowBase //ScriptStruct UADataTableModule.LocalizationConf_zh_HansTableRow
    {
    public:


    };

    struct FLocalizationConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.LocalizationConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct FText EnumName; // 0x10
        struct FText LocalizedText; // 0x28

    };

    struct FLoadingTipsTableRow : FTableRowBase //ScriptStruct UADataTableModule.LoadingTipsTableRow
    {
    //Children Prop Count (Fields): 13
    public:

        uint32_t ID; // 0x8
        uint32_t ModelID; // 0xc
        uint32_t MapID; // 0x10
        uint32_t RuleID; // 0x14
        uint32_t ActivityID; // 0x18
        uint32_t Activityweight; // 0x1c
        float MinWealthy; // 0x20
        float MaxWealthy; // 0x24
        uint32_t MinLevel; // 0x28
        uint32_t MaxLevel; // 0x2c
        float MinEscapeProbability; // 0x30
        float MaxEscapeProbability; // 0x34
        struct TArray<struct FTipItem> Tips; // 0x38

    };

    struct FTipItem //ScriptStruct UADataTableModule.TipItem
    {
    //Children Prop Count (Fields): 2
    public:

        struct FText Tips; // 0x0
        uint32_t Weight; // 0x18

    };

    struct FLoadingImageTableRow : FTableRowBase //ScriptStruct UADataTableModule.LoadingImageTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t ID; // 0x8
        uint32_t ModelID; // 0xc
        uint32_t MapID; // 0x10
        uint32_t RuleID; // 0x14
        uint32_t ActivityID; // 0x18
        uint32_t Activityweight; // 0x1c
        struct TArray<struct FImageRefItem> ImageRef; // 0x20

    };

    struct FImageRefItem //ScriptStruct UADataTableModule.ImageRefItem
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ImageType; // 0x0
        struct FString Path; // 0x8

    };

    struct FLevelConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.LevelConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t Level; // 0x8
        uint64_t PMCExpPerLevel; // 0x10
        uint64_t PMCExpTotal; // 0x18
        uint32_t PMCIcon; // 0x20
        uint64_t ScavExpPerLevel; // 0x28
        uint64_t ScavExpTotal; // 0x30
        uint32_t ScavIcon; // 0x38

    };

    struct FLeaderboardDesConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.LeaderboardDesConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        struct FText titledes; // 0x10
        struct FText tipdes; // 0x28
        uint32_t Type; // 0x40
        uint32_t is_open; // 0x44
        uint32_t specialtype; // 0x48
        struct FText titlecountdes; // 0x50
        struct FText nogetnumdes; // 0x68

    };

    struct FLbsTitleConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.LbsTitleConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t rank_type; // 0x8
        uint32_t item_id; // 0xc

    };

    struct FLackFundTableRow : FTableRowBase //ScriptStruct UADataTableModule.LackFundTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t lack_fund_wealth1; // 0x8
        uint32_t lack_fund_wealth2; // 0xc
        uint32_t lack_fund_cash; // 0x10
        uint32_t lack_fund_mud; // 0x14
        uint32_t lack_fund_gold; // 0x18

    };

    struct FKeyContainerConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.KeyContainerConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        uint32_t container_id; // 0xc
        uint32_t show_index; // 0x10
        uint32_t is_hidden; // 0x14
        uint32_t group_id; // 0x18
        uint32_t is_time; // 0x1c
        struct FText list_desc; // 0x20
        uint32_t jump_goto; // 0x38

    };

    struct FJumpGotoCfgTableRow : FTableRowBase //ScriptStruct UADataTableModule.JumpGotoCfgTableRow
    {
    //Children Prop Count (Fields): 10
    public:

        uint32_t jump_id; // 0x8
        struct FText jump_button_name; // 0x10
        struct FText jump_name; // 0x28
        struct FText Command; // 0x40
        struct FText jump_target; // 0x58
        struct FText Param; // 0x70
        struct FText open_tips; // 0x88
        uint32_t display_gray; // 0xa0
        uint32_t replace_content; // 0xa4
        struct FText display_content; // 0xa8

    };

    struct FItemValueLevelConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ItemValueLevelConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t value_level; // 0x8
        uint32_t min_value; // 0xc

    };

    struct FItemStackFactionConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ItemStackFactionConfTableRow
    {
    //Children Prop Count (Fields): 1
    public:

        uint32_t ID; // 0x8

    };

    struct FItemSortTableRow : FTableRowBase //ScriptStruct UADataTableModule.ItemSortTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint64_t item_id; // 0x8
        struct FString icon; // 0x10

    };

    struct FItemShareConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ItemShareConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        struct FString iconUrl; // 0x10
        struct FString bgUrl; // 0x20
        uint32_t itemShareType; // 0x30
        struct TArray<struct FText> extraDesc; // 0x38

    };

    struct FItemPriceGearTableRow : FTableRowBase //ScriptStruct UADataTableModule.ItemPriceGearTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t PriceRange; // 0xc
        uint32_t Step; // 0x10

    };

    struct FItemInflationTypeTableRow : FTableRowBase //ScriptStruct UADataTableModule.ItemInflationTypeTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t low_inflation; // 0xc
        uint32_t high_inflation; // 0x10

    };

    struct FItemFactoryTableRow : FTableRowBase //ScriptStruct UADataTableModule.ItemFactoryTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct FText factory_name; // 0x10
        struct FString iconPath; // 0x28

    };

    struct FItemEffectConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ItemEffectConfTableRow
    {
    //Children Prop Count (Fields): 11
    public:

        uint32_t ID; // 0x8
        uint32_t effect_type; // 0xc
        uint32_t auto_use; // 0x10
        struct TArray<struct FExchangeEffect> exchange_list; // 0x18
        uint32_t privilege_item_id; // 0x28
        uint32_t privilege_num; // 0x2c
        uint32_t bp_season; // 0x30
        uint32_t bp_vip_lv; // 0x34
        uint32_t auction_week_sale_order_num; // 0x38
        uint32_t auction_intime_sale_order_num; // 0x3c
        uint32_t auction_effect_num; // 0x40

    };

    struct FExchangeEffect //ScriptStruct UADataTableModule.ExchangeEffect
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4
        uint32_t change_item_id; // 0x8
        uint32_t change_num; // 0xc

    };

    struct FItemDynamicPriceTableRow : FTableRowBase //ScriptStruct UADataTableModule.ItemDynamicPriceTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t y_standard_price; // 0xc
        uint32_t is_flag_item; // 0x10
        uint32_t inflation_type; // 0x14

    };

    struct FItemConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ItemConfTableRow
    {
    //Children Prop Count (Fields): 33
    public:

        uint32_t ItemID; // 0x8
        struct FText Name; // 0x10
        struct FText ShortName; // 0x28
        uint32_t IconId; // 0x40
        struct FText Describe; // 0x48
        int32_t SizeX; // 0x60
        int32_t SizeY; // 0x64
        float Weight; // 0x68
        struct FString pickup_sound; // 0x70
        struct FString use_sound; // 0x80
        struct FString drop_sound; // 0x90
        uint32_t sell_price; // 0xa0
        uint32_t sell_rate; // 0xa4
        uint32_t can_sell; // 0xa8
        uint32_t standard_price; // 0xac
        uint32_t StackMax; // 0xb0
        int32_t TakeInCount; // 0xb4
        struct FDateTime expire_time; // 0xb8
        struct TArray<struct FCommonItemConfItem> compensate; // 0xc0
        uint32_t not_discard; // 0xd0
        uint32_t Bind; // 0xd4
        uint32_t rarity; // 0xd8
        uint32_t Durability; // 0xdc
        int32_t UseExp; // 0xe0
        int32_t LootExp; // 0xe4
        struct TArray<char> RejectSlot; // 0xe8
        struct TArray<uint32_t> RejectItems; // 0xf8
        uint32_t sort; // 0x108
        uint32_t jump_goto; // 0x10c
        int32_t PackageFlags; // 0x110
        uint32_t FactoryId; // 0x114
        uint32_t is_Arenaitem; // 0x118
        uint32_t RarityColor; // 0x11c

    };

    struct FItemComponentsIconTableRow : FTableRowBase //ScriptStruct UADataTableModule.ItemComponentsIconTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        struct FText component_name; // 0x10
        struct FString icon_name; // 0x28
        struct FString icon_path; // 0x38

    };

    struct FItemClassifyGroupConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ItemClassifyGroupConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        char ID; // 0x8
        struct TArray<uint64_t> Types; // 0x10
        char SortOrder; // 0x20

    };

    struct FItemCheckWhiteListConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ItemCheckWhiteListConfTableRow
    {
    //Children Prop Count (Fields): 1
    public:

        uint32_t ItemID; // 0x8

    };

    struct FItemCategoryIconPathTableRow : FTableRowBase //ScriptStruct UADataTableModule.ItemCategoryIconPathTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        struct FText category_name; // 0x10
        uint32_t seg; // 0x28
        struct FString icon_path; // 0x30

    };

    struct FIpListConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.IpListConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        struct FText ip_begin; // 0x8
        struct FText ip_end; // 0x20

    };

    struct FIpAreaConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.IpAreaConfTableRow
    {
    //Children Prop Count (Fields): 1
    public:

        uint32_t country_code; // 0x8

    };

    struct FIpAlertListConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.IpAlertListConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        struct FText ip_begin; // 0x8
        struct FText ip_end; // 0x20

    };

    struct FInsureTypeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.InsureTypeConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t insuretime_min; // 0xc
        uint32_t insuretime_max; // 0x10
        uint32_t lootinglocktime; // 0x14

    };

    struct FInsureQualityProbConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.InsureQualityProbConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        uint32_t prob; // 0xc

    };

    struct FInsureCommonItemConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.InsureCommonItemConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<uint32_t> price_list; // 0x10

    };

    struct FInsureCommonAccConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.InsureCommonAccConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<uint32_t> price_list; // 0x10

    };

    struct FInsureCombineItemConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.InsureCombineItemConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<uint32_t> price_list; // 0x10

    };

    struct FInnerGameActConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.InnerGameActConfTableRow
    {
    //Children Prop Count (Fields): 13
    public:

        uint32_t ID; // 0x8
        struct FText Name; // 0x10
        uint32_t is_open; // 0x28
        struct FDateTime begin_time; // 0x30
        struct FDateTime end_time; // 0x38
        uint32_t inner_game_act_type; // 0x40
        struct FText json_param; // 0x48
        struct FText notice; // 0x60
        struct FText des; // 0x78
        struct TArray<uint32_t> gameplay_related_items; // 0x90
        struct TArray<uint32_t> weekly_day_vec; // 0xa0
        struct TArray<struct FDailyTimeConf> daily_time_vec; // 0xb0
        struct TArray<struct FOpenMapModeConf> open_map_mode_vec; // 0xc0

    };

    struct FOpenMapModeConf //ScriptStruct UADataTableModule.OpenMapModeConf
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t map_mode_id; // 0x0
        uint32_t time_seg; // 0x4

    };

    struct FDailyTimeConf //ScriptStruct UADataTableModule.DailyTimeConf
    {
    //Children Prop Count (Fields): 2
    public:

        struct FText daily_begin_time; // 0x0
        struct FText daily_end_time; // 0x18

    };

    struct FIconScaleConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.IconScaleConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        float DistancePercentA; // 0xc

    };

    struct FHotUpdateGlobalConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.HotUpdateGlobalConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        int64_t Val; // 0x10

    };

    struct FHighRatioScavConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.HighRatioScavConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t Type; // 0x8
        uint32_t ID; // 0xc
        uint32_t conf_type; // 0x10
        int32_t conf_val; // 0x14
        struct TArray<struct FHighRatioConfVector> conf_vec; // 0x18
        struct FDateTime begin_time; // 0x28
        struct FDateTime end_time; // 0x30
        struct TArray<struct FHighRatioScavDailyTimeConf> daily_time_vec; // 0x38

    };

    struct FHighRatioScavDailyTimeConf //ScriptStruct UADataTableModule.HighRatioScavDailyTimeConf
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString daily_begin_time; // 0x0
        struct FString daily_end_time; // 0x10

    };

    struct FHighRatioConfVector //ScriptStruct UADataTableModule.HighRatioConfVector
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t Param1; // 0x0
        int32_t Param2; // 0x4

    };

    struct FHelperConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.HelperConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t Type; // 0xc
        uint32_t Index; // 0x10
        struct FText Title; // 0x18
        struct FText desc; // 0x30

    };

    struct FHelpRootTypeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.HelpRootTypeConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct FText Name; // 0x10

    };

    struct FHelpEntryInfoConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.HelpEntryInfoConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t entry_id; // 0x8
        struct FText main_title; // 0x10
        struct TArray<struct FTabDetailItem> tab_content; // 0x28

    };

    struct FTabDetailItem //ScriptStruct UADataTableModule.TabDetailItem
    {
    //Children Prop Count (Fields): 2
    public:

        struct FText tab_title; // 0x0
        uint32_t ppt_id; // 0x18

    };

    struct FHelpDialogConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.HelpDialogConfTableRow
    {
    //Children Prop Count (Fields): 14
    public:

        uint32_t ID; // 0x8
        uint32_t Type; // 0xc
        struct FText Title; // 0x10
        uint32_t rewardId; // 0x28
        uint32_t canGetTime; // 0x2c
        uint32_t rootType; // 0x30
        uint32_t sortIndex; // 0x34
        uint32_t functioncontrolId; // 0x38
        uint32_t unlockLevel; // 0x3c
        uint32_t isHidden; // 0x40
        struct TArray<uint32_t> triggerIds; // 0x48
        struct TArray<uint32_t> mediaArray; // 0x58
        struct TArray<struct FH5MediaItem> h5Media; // 0x68
        struct TArray<struct FHelpDialogContentItem> Content; // 0x78

    };

    struct FHelpDialogContentItem //ScriptStruct UADataTableModule.HelpDialogContentItem
    {
    //Children Prop Count (Fields): 3
    public:

        struct FText contentTitle; // 0x0
        uint32_t pageIndex; // 0x18
        struct FText contentText; // 0x20

    };

    struct FH5MediaItem //ScriptStruct UADataTableModule.H5MediaItem
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString h5BgIcon; // 0x0
        struct FString h5Url; // 0x10

    };

    struct FHealthThresholdTableRow : FTableRowBase //ScriptStruct UADataTableModule.HealthThresholdTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        struct FText State; // 0x10
        uint32_t Hierarchy; // 0x28
        struct FText Content; // 0x30
        uint32_t Parameter; // 0x48
        uint32_t Alert; // 0x4c
        uint32_t Priority; // 0x50
        uint32_t LevelLimit; // 0x54

    };

    struct FHeadConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.HeadConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t ID; // 0x8
        uint32_t price; // 0xc
        uint32_t Helmet; // 0x10
        uint32_t Visor; // 0x14
        uint32_t Headset; // 0x18
        uint32_t Mask; // 0x1c

    };

    struct FHeadBoxItemConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.HeadBoxItemConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        uint32_t Type; // 0xc
        uint32_t Display; // 0x10
        uint32_t jump_goto; // 0x14
        struct FText obtain; // 0x18
        uint32_t Order; // 0x30
        struct FDateTime start_time; // 0x38
        struct FDateTime end_time; // 0x40

    };

    struct FHardwareBenchmarkScoreTableRow : FTableRowBase //ScriptStruct UADataTableModule.HardwareBenchmarkScoreTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t HardwareId; // 0x8
        struct FString HardwareName; // 0x10
        float CpuScore; // 0x20
        float GpuScore; // 0x24

    };

    struct FGuaranteedUseAttrTableRow : FTableRowBase //ScriptStruct UADataTableModule.GuaranteedUseAttrTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t guaranteed_pool_id; // 0xc
        int32_t attr_value; // 0x10
        int32_t extra_value; // 0x14
        struct TArray<struct FGuaranteedConditions> guaranteed_conditions; // 0x18

    };

    struct FGuaranteedConditions //ScriptStruct UADataTableModule.GuaranteedConditions
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t tag_id; // 0x0
        uint32_t attr_id; // 0x4
        int64_t attr_low; // 0x8
        int64_t attr_up; // 0x10

    };

    struct FGuaranteedPoolConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.GuaranteedPoolConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t guaranteed_pool_id; // 0x8
        uint32_t defalut_limit; // 0xc
        uint32_t max_limit; // 0x10
        uint32_t min_limit; // 0x14
        uint32_t stage_1_times; // 0x18
        uint32_t stage_1_limit; // 0x1c

    };

    struct FGuaranteedItemConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.GuaranteedItemConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t item_id; // 0x8
        uint32_t Level; // 0xc
        struct TArray<struct FWeaponItemConf> guaranteed_items; // 0x10

    };

    struct FGuaranteeLimitStrategyTableRow : FTableRowBase //ScriptStruct UADataTableModule.GuaranteeLimitStrategyTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t shield_type; // 0xc
        uint32_t sub_item_id; // 0x10
        struct TArray<uint32_t> sub_item_num; // 0x18

    };

    struct FGuaranteeGenItemTableRow : FTableRowBase //ScriptStruct UADataTableModule.GuaranteeGenItemTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t gen_group_id; // 0xc
        uint32_t gen_item_id; // 0x10
        uint32_t Weight; // 0x14
        struct TArray<uint32_t> item_num; // 0x18

    };

    struct FGuaranteeContainerTableRow : FTableRowBase //ScriptStruct UADataTableModule.GuaranteeContainerTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t ID; // 0x8
        uint32_t play_mode_id; // 0xc
        uint32_t lootpoint_type_id; // 0x10
        uint32_t guarantee_id; // 0x14
        uint32_t Value; // 0x18
        uint32_t check_group_id; // 0x1c
        uint32_t gen_group_id; // 0x20

    };

    struct FGuaranteeCheckItemTableRow : FTableRowBase //ScriptStruct UADataTableModule.GuaranteeCheckItemTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t check_group_id; // 0xc
        uint32_t check_item_id; // 0x10

    };

    struct FGoldenScavConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.GoldenScavConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t conf_type; // 0x8
        int32_t conf_val; // 0xc
        struct TArray<struct FConfVector> conf_vec; // 0x10
        struct FDateTime begin_time; // 0x20
        struct FDateTime end_time; // 0x28
        struct TArray<struct FGoldenScavDailyTimeConf> daily_time_vec; // 0x30

    };

    struct FGoldenScavDailyTimeConf //ScriptStruct UADataTableModule.GoldenScavDailyTimeConf
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString daily_begin_time; // 0x0
        struct FString daily_end_time; // 0x10

    };

    struct FConfVector //ScriptStruct UADataTableModule.ConfVector
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t Param1; // 0x0
        int32_t Param2; // 0x4

    };

    struct FGoldDogTagConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.GoldDogTagConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint64_t ID; // 0x8
        struct FString bgUrl; // 0x10

    };

    struct FGlobalNumConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.GlobalNumConfTableRow
    {
    public:


    };

    struct FGlobalConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.GlobalConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t ID; // 0x8
        int64_t Val; // 0x10
        struct TArray<uint64_t> ary; // 0x18
        struct TArray<int64_t> iary; // 0x28
        struct FText Str; // 0x38
        struct TArray<struct FGlobalDailyTimeConf> daily_time_vec; // 0x50

    };

    struct FGlobalDailyTimeConf //ScriptStruct UADataTableModule.GlobalDailyTimeConf
    {
    //Children Prop Count (Fields): 1
    public:

        struct FText daily_time; // 0x0

    };

    struct FGiftPackageShowItemsConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.GiftPackageShowItemsConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t package_id; // 0x8
        struct TArray<uint32_t> item_id; // 0x10
        struct TArray<uint32_t> is_black; // 0x20
        struct TArray<uint32_t> item_num; // 0x30
        struct TArray<uint32_t> Weight; // 0x40

    };

    struct FGiftPackageEquipConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.GiftPackageEquipConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t Key; // 0x8
        uint32_t ID; // 0xc
        struct TArray<struct FGiftEquipItem> Items; // 0x10

    };

    struct FGiftEquipItem //ScriptStruct UADataTableModule.GiftEquipItem
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4
        uint32_t Parent; // 0x8
        uint32_t is_black; // 0xc
        uint32_t is_rotate; // 0x10
        uint32_t Index; // 0x14
        uint32_t pos_x; // 0x18
        uint32_t pos_y; // 0x1c

    };

    struct FGiftPackageEquipTableRow : FTableRowBase //ScriptStruct UADataTableModule.GiftPackageEquipTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct FString Equip; // 0x10

    };

    struct FGiftPackageConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.GiftPackageConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t Type; // 0xc
        uint32_t is_equip_package; // 0x10
        uint32_t filter_type; // 0x14
        uint32_t self_select_num; // 0x18

    };

    struct FGiftGroupItemsConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.GiftGroupItemsConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        uint32_t group_id; // 0xc
        uint32_t item_id; // 0x10
        uint32_t item_num; // 0x14
        uint32_t is_black; // 0x18
        uint32_t exchange_item_id; // 0x1c
        uint32_t exchange_num; // 0x20
        uint32_t discount_exchange_num; // 0x24

    };

    struct FGiftGroupDescConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.GiftGroupDescConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct FText Detail; // 0x10

    };

    struct FGiftGroupConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.GiftGroupConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t ID; // 0x8
        struct FText Name; // 0x10
        uint32_t desc_id; // 0x28
        uint32_t icon_id; // 0x2c
        struct FText mutil_lang_cdn_url; // 0x30
        uint32_t Type; // 0x48

    };

    struct FGidAndMailAdressTableRow : FTableRowBase //ScriptStruct UADataTableModule.GidAndMailAdressTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        struct FText Email; // 0x8
        uint64_t GID; // 0x20
        uint64_t recruiter_gid; // 0x28

    };

    struct FGestureIconMontageTableRow : FTableRowBase //ScriptStruct UADataTableModule.GestureIconMontageTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t ItemID; // 0x8
        struct FString GestureIconPath; // 0x10
        struct FText GestureDescription; // 0x20
        uint32_t GestureMontagesMapID; // 0x38
        struct TArray<uint32_t> jump_goto; // 0x40
        struct FText no_source_description; // 0x50
        uint32_t ActiveStatus; // 0x68

    };

    struct FGenericShopTradeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.GenericShopTradeConfTableRow
    {
    //Children Prop Count (Fields): 17
    public:

        uint32_t ID; // 0x8
        uint32_t shop_id; // 0xc
        uint32_t tag_id; // 0x10
        uint32_t sell_item_id; // 0x14
        uint32_t sell_num; // 0x18
        uint32_t is_black; // 0x1c
        uint32_t is_faction; // 0x20
        uint32_t cost_item_id; // 0x24
        uint32_t cost_num; // 0x28
        uint32_t unlock_type; // 0x2c
        uint32_t unlock_param; // 0x30
        uint32_t buy_limit_type; // 0x34
        uint32_t buy_limit_num; // 0x38
        uint32_t bind_season; // 0x3c
        uint32_t preshelf_seconds; // 0x40
        struct TArray<struct FGShopOnshelfTime> onshelf_time; // 0x48
        uint32_t sort_param; // 0x58

    };

    struct FGShopOnshelfTime //ScriptStruct UADataTableModule.GShopOnshelfTime
    {
    //Children Prop Count (Fields): 2
    public:

        struct FDateTime start_time; // 0x0
        struct FDateTime end_time; // 0x8

    };

    struct FGenericShopTagConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.GenericShopTagConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        struct FText tag_name; // 0x10
        struct FString tag_icon; // 0x28
        uint32_t sort; // 0x38
        struct FString desc; // 0x40

    };

    struct FGenericShopConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.GenericShopConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t shop_id; // 0x8
        struct FText shop_name; // 0x10
        struct TArray<struct FConfGShopGood> cost_items; // 0x28
        struct FText shop_detail; // 0x38
        uint32_t red_point_type; // 0x50
        struct TArray<uint32_t> red_point_id; // 0x58

    };

    struct FConfGShopGood //ScriptStruct UADataTableModule.ConfGShopGood
    {
    //Children Prop Count (Fields): 1
    public:

        uint32_t item_id; // 0x0

    };

    struct FGameSettingDescriptionTableRow : FTableRowBase //ScriptStruct UADataTableModule.GameSettingDescriptionTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        struct FText GameSettingName; // 0x8
        struct FText Title; // 0x20
        struct FText desc; // 0x38
        struct FString Img1; // 0x50
        struct FString Img2; // 0x60

    };

    struct FGalleryShowWeaponConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.GalleryShowWeaponConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t weapon_id; // 0x8
        uint32_t kill_num; // 0xc
        uint32_t need_ruble; // 0x10
        struct FDateTime abs_begin_time; // 0x18
        struct FDateTime abs_end_time; // 0x20
        uint32_t assemble_id; // 0x28

    };

    struct FGalleryMedalTaskConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.GalleryMedalTaskConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t medal_id; // 0x8
        struct TArray<struct FNeedItemRef> needitem; // 0x10
        uint32_t Season; // 0x20

    };

    struct FNeedItemRef //ScriptStruct UADataTableModule.NeedItemRef
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<uint32_t> has_items; // 0x0
        struct FText desc; // 0x10
        uint32_t need_num; // 0x28

    };

    struct FGalleryGlobalConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.GalleryGlobalConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        int64_t Val; // 0x10

    };

    struct FGalleryCollectionTaskConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.GalleryCollectionTaskConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t collection_id; // 0x8
        struct FDateTime abs_begin_time; // 0x10
        struct FDateTime abs_end_time; // 0x18
        uint32_t target_type; // 0x20
        uint32_t item_id; // 0x24
        uint32_t Num; // 0x28

    };

    struct FGalleryCollectionExchangeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.GalleryCollectionExchangeConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t collection_id; // 0x8
        struct FDateTime abs_begin_time; // 0x10
        struct FDateTime abs_end_time; // 0x18
        struct TArray<struct FexchangeItem> exchange_items; // 0x20

    };

    struct FexchangeItem //ScriptStruct UADataTableModule.exchangeItem
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4

    };

    struct FGachaTicketConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.GachaTicketConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t buy_id; // 0x8
        uint32_t item_id; // 0xc
        uint32_t item_num; // 0x10
        uint32_t ticket_id; // 0x14
        uint32_t ticket_num; // 0x18
        uint32_t cost_item; // 0x1c
        uint32_t cost_num; // 0x20
        uint32_t limit_num; // 0x24

    };

    struct FGachaShowItemsConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.GachaShowItemsConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t group_id; // 0xc
        uint32_t item_id; // 0x10
        uint32_t item_num; // 0x14
        uint32_t Weight; // 0x18

    };

    struct FFunctionControlCfgTableRow : FTableRowBase //ScriptStruct UADataTableModule.FunctionControlCfgTableRow
    {
    //Children Prop Count (Fields): 27
    public:

        uint32_t sys_id; // 0x8
        uint32_t sys_type; // 0xc
        struct FString sys_param; // 0x10
        uint32_t is_backend; // 0x20
        struct TArray<uint32_t> active_platforms; // 0x28
        struct FString Channel; // 0x38
        uint32_t ios_testfight_hide; // 0x48
        uint32_t ios_audit_hide; // 0x4c
        uint32_t android_exp_hide; // 0x50
        struct FString android_client_version; // 0x58
        struct FString ios_client_version; // 0x68
        uint32_t season_level; // 0x78
        uint32_t battle_pmc; // 0x7c
        uint32_t Condition; // 0x80
        uint32_t open_pmc_level; // 0x84
        uint32_t history_max_level; // 0x88
        uint32_t open_mission_id; // 0x8c
        uint32_t open_bussiness_level; // 0x90
        struct FDateTime open_date; // 0x98
        struct FDateTime cloe_date; // 0xa0
        uint32_t pre_sys; // 0xa8
        struct FText Tips; // 0xb0
        struct FText btn_tips; // 0xc8
        uint32_t is_close; // 0xe0
        uint32_t lockstate; // 0xe4
        uint32_t country_group_id; // 0xe8
        uint32_t regist_country_group_id; // 0xec

    };

    struct FFriRecommTagsTableRow : FTableRowBase //ScriptStruct UADataTableModule.FriRecommTagsTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t recom_id; // 0x8
        uint32_t tag_type; // 0xc
        uint32_t tag_id; // 0x10
        int32_t Weight; // 0x14
        uint32_t Active; // 0x18
        struct FText tag_name; // 0x20
        uint32_t need_check; // 0x38

    };

    struct FFriRecommConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.FriRecommConfTableRow
    {
    //Children Prop Count (Fields): 9
    public:

        uint32_t ID; // 0x8
        uint32_t show_interact; // 0xc
        uint32_t show_pop_up; // 0x10
        uint32_t Val; // 0x14
        struct FText reason; // 0x18
        struct FText friendPanelDisplay; // 0x30
        struct FText battleReulstDisplay; // 0x48
        struct FText battleResultDesc; // 0x60
        struct TArray<uint32_t> battleResultDesc_paramTypes; // 0x78

    };

    struct FFriInviteCodeRewardTableRow : FTableRowBase //ScriptStruct UADataTableModule.FriInviteCodeRewardTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<struct FInviteRewardListConf> reward_list; // 0x10

    };

    struct FInviteRewardListConf //ScriptStruct UADataTableModule.InviteRewardListConf
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4
        uint32_t is_black; // 0x8

    };

    struct FForbiddenVersionConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ForbiddenVersionConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct FString version_low; // 0x10
        struct FString version_up; // 0x20

    };

    struct FFactionalItemConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.FactionalItemConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        uint32_t Is_Factional_Item; // 0xc

    };

    struct FFactionSelectConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.FactionSelectConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t map_mode_id; // 0xc
        uint32_t index_id; // 0x10
        uint32_t faction_id; // 0x14

    };

    struct FFactionConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.FactionConfTableRow
    {
    //Children Prop Count (Fields): 10
    public:

        uint32_t faction_id; // 0x8
        uint32_t avatar_set_id; // 0xc
        uint64_t faction_currency; // 0x10
        struct FString faction_npc_pic; // 0x18
        struct FString faction_bg_pic; // 0x28
        struct FString faction_name; // 0x38
        struct FString faction_name_3; // 0x48
        struct FString faction_logo_select; // 0x58
        struct FString faction_logo_teamup; // 0x68
        struct FString faction_logo_teaminfo; // 0x78

    };

    struct FFactionChoiceConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.FactionChoiceConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t choice_id; // 0x8
        uint32_t season_id; // 0xc
        struct TArray<struct FPreTaskId> pre_task_ids; // 0x10
        struct TArray<struct FactionChoiceItem> faction_choice_items; // 0x20

    };

    struct FactionChoiceItem //ScriptStruct UADataTableModule.actionChoiceItem
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t faction_id; // 0x0
        struct FText faction_dec; // 0x8

    };

    struct FPreTaskId //ScriptStruct UADataTableModule.PreTaskId
    {
    //Children Prop Count (Fields): 1
    public:

        uint32_t task_id; // 0x0

    };

    struct FFacePicConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.FacePicConfTableRow
    {
    //Children Prop Count (Fields): 18
    public:

        uint32_t ID; // 0x8
        struct FDateTime begin_time; // 0x10
        struct FDateTime end_time; // 0x18
        uint32_t min_level; // 0x20
        uint32_t max_level; // 0x24
        struct TArray<uint32_t> client_channel; // 0x28
        struct TArray<uint32_t> server_channel; // 0x38
        struct TArray<uint32_t> plat_type; // 0x48
        uint32_t white_country_group_id; // 0x58
        struct FString client_version_low; // 0x60
        struct FString client_version_up; // 0x70
        struct FString URL; // 0x80
        uint32_t order_id; // 0x90
        struct FString Jump; // 0x98
        struct FText btn_desc; // 0xa8
        uint32_t apear_times; // 0xc0
        uint32_t appear_once; // 0xc4
        uint32_t Type; // 0xc8

    };

    struct FExtraSkinConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ExtraSkinConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t BaseItemID; // 0x8
        struct FString SocketName; // 0x10
        uint32_t AssembleItemID; // 0x20
        bool IsStaticMesh; // 0x24
        struct FSoftObjectPath MeshPathGame; // 0x28
        struct FSoftObjectPath MeshPathLobby; // 0x40
        struct TArray<struct FSkinMaterialInfo> OverrideMaterials; // 0x58

    };

    struct FExpConstantTableRow : FTableRowBase //ScriptStruct UADataTableModule.ExpConstantTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        struct FString ID; // 0x8
        int64_t Val; // 0x18
        struct TArray<int32_t> ary; // 0x20
        struct FString Str; // 0x30

    };

    struct FExchangeStashConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ExchangeStashConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t stash_value_min; // 0x8
        uint32_t stash_value_max; // 0xc
        float middle_ratio; // 0x10
        float limit_prob_factor; // 0x14

    };

    struct FExchangeRarityConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ExchangeRarityConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        uint32_t rarity; // 0xc

    };

    struct FExchangeFixConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ExchangeFixConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t user_tag_id; // 0x8
        float middle_ratio; // 0xc
        float limit_prob_factor; // 0x10

    };

    struct FEventAIIDModifierDataTableTableRow : FTableRowBase //ScriptStruct UADataTableModule.EventAIIDModifierDataTableTableRow
    {
    //Children Prop Count (Fields): 12
    public:

        uint32_t ID; // 0x8
        uint32_t ActivityID; // 0xc
        uint32_t Priority; // 0x10
        uint32_t SourceCategory; // 0x14
        uint32_t SourceCareer; // 0x18
        uint32_t SourceTendency; // 0x1c
        uint32_t SourceDifficulty; // 0x20
        uint32_t TargetCategory; // 0x24
        uint32_t TargetCareer; // 0x28
        uint32_t TargetTendency; // 0x2c
        uint32_t TargetDifficulty; // 0x30
        uint32_t TargetEquipPoolID; // 0x34

    };

    struct FEvaluationConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.EvaluationConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t ID; // 0x8
        struct FText show_name; // 0x10
        uint32_t emotion_type; // 0x28
        int64_t basic_weight; // 0x30
        struct TArray<int64_t> event_id_array; // 0x38
        struct TArray<int64_t> event_weight_array; // 0x48
        uint32_t is_show; // 0x58

    };

    struct FEvaluationCommConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.EvaluationCommConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t conf_type; // 0x8
        int64_t event_id; // 0x10
        int64_t Val; // 0x18
        int64_t Score; // 0x20

    };

    struct FErrorCodeTableRow : FTableRowBase //ScriptStruct UADataTableModule.ErrorCodeTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t ErrorCode; // 0x8
        struct FText Describe; // 0x10
        int8_t ShowType; // 0x28

    };

    struct FEquipmentSkinConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.EquipmentSkinConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t SkinID; // 0x8
        uint32_t ItemID; // 0xc
        bool IsStaticMesh; // 0x10
        struct FSoftObjectPath MeshPathGame; // 0x18
        struct FSoftObjectPath MeshPathLobby; // 0x30
        struct TArray<struct FSkinMaterialInfo> OverrideMaterialsGame; // 0x48
        struct TArray<struct FSkinMaterialInfo> OverrideMaterialsLobby; // 0x58

    };

    struct FEquipSlotConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.EquipSlotConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct TArray<uint32_t> MatchEquipType; // 0x10
        uint32_t ShowIndex; // 0x20

    };

    struct FEquipReturnItemConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.EquipReturnItemConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t Low; // 0xc
        uint32_t Up; // 0x10
        uint32_t item_id; // 0x14
        uint32_t Num; // 0x18

    };

    struct FEquipReturnConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.EquipReturnConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t Type; // 0x8
        uint32_t Low; // 0xc
        uint32_t Up; // 0x10
        int32_t prob; // 0x14

    };

    struct FEquipReturnCardConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.EquipReturnCardConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t item_id; // 0x8
        uint32_t item_value; // 0xc
        struct FString icon_path; // 0x10

    };

    struct FEquipAvatarSetCfgTableRow : FTableRowBase //ScriptStruct UADataTableModule.EquipAvatarSetCfgTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct TArray<uint32_t> avatar_set; // 0x10
        uint32_t combined_id; // 0x20

    };

    struct FEloChangeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.EloChangeConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t elo_conf_type; // 0x8
        int64_t Param; // 0x10
        int64_t elo_change; // 0x18
        uint32_t ignore_all; // 0x20

    };

    struct FEliteSuiteConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.EliteSuiteConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t index_id; // 0x8
        struct FString set_name; // 0x10
        struct TArray<struct FEliteEnterCostVec> enter_cost_vec; // 0x20
        uint32_t refresh_group_id; // 0x30
        uint32_t set_value; // 0x34

    };

    struct FEliteEnterCostVec //ScriptStruct UADataTableModule.EliteEnterCostVec
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t item_id; // 0x0
        uint32_t cost_num; // 0x4

    };

    struct FEliminationExpTableRow : FTableRowBase //ScriptStruct UADataTableModule.EliminationExpTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t ID; // 0x8
        int32_t Level; // 0xc
        int32_t Exp; // 0x10

    };

    struct FEAttachPositionTableRow : FTableRowBase //ScriptStruct UADataTableModule.EAttachPositionTableRow
    {
    public:


    };

    struct FDynamicLotteryConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.DynamicLotteryConfTableRow
    {
    //Children Prop Count (Fields): 15
    public:

        uint32_t gacha_id; // 0x8
        uint32_t Type; // 0xc
        uint32_t ticket_id; // 0x10
        uint32_t mall_item_id; // 0x14
        uint32_t step_price_id; // 0x18
        uint32_t single_drop_price; // 0x1c
        uint32_t conseutive_drop_number; // 0x20
        uint32_t consecutive_drop_price; // 0x24
        uint32_t consecutive_discount_price; // 0x28
        uint32_t max_count; // 0x2c
        uint32_t first_hit_pool_id; // 0x30
        uint32_t first_hit_floor; // 0x34
        uint32_t first_hit_cell; // 0x38
        struct TArray<struct FLotteryPoolGuaranteeConf> lottery_pool_conf; // 0x40
        uint32_t reward_show_type; // 0x50

    };

    struct FLotteryPoolGuaranteeConf //ScriptStruct UADataTableModule.LotteryPoolGuaranteeConf
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t pool_id; // 0x0
        uint32_t guarantee_hit; // 0x4

    };

    struct FDurabilityChangeTableRow : FTableRowBase //ScriptStruct UADataTableModule.DurabilityChangeTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        uint32_t Version; // 0xc

    };

    struct FDsVersionConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.DsVersionConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t env_id; // 0x8
        struct TArray<struct FDsConfVersionRange> version_ranges; // 0x10

    };

    struct FDsConfVersionRange //ScriptStruct UADataTableModule.DsConfVersionRange
    {
    //Children Prop Count (Fields): 2
    public:

        struct FText ds_version; // 0x0
        uint32_t ds_buildno; // 0x18

    };

    struct FDsGrayConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.DsGrayConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t dsa_inst; // 0xc
        struct FText ds_version; // 0x10
        uint32_t ds_buildno; // 0x28
        struct TArray<uint64_t> gid_vec; // 0x30

    };

    struct FDsGameFunctionConfigTableRow : FTableRowBase //ScriptStruct UADataTableModule.DsGameFunctionConfigTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t play_mode_id; // 0x8
        uint32_t use_airl; // 0xc
        uint32_t use_poor_cheet; // 0x10
        uint32_t poor_cheet_value; // 0x14
        uint32_t use_safe_guard; // 0x18
        uint32_t use_launder_cheet; // 0x1c

    };

    struct FDropPoolConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.DropPoolConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t drop_type; // 0xc
        uint32_t probability_type; // 0x10
        uint32_t pool_level; // 0x14
        struct TArray<struct Fcolor_conf> probability_by_color; // 0x18

    };

    struct Fcolor_conf //ScriptStruct UADataTableModule.color_conf
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t Color; // 0x0
        uint32_t Probability; // 0x4

    };

    struct FDropPicShowConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.DropPicShowConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct FString pic_path; // 0x10

    };

    struct FDropItemDuraConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.DropItemDuraConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t item_id; // 0x8
        uint32_t max_dura; // 0xc
        uint32_t min_dura; // 0x10
        uint32_t max_real_dura; // 0x14
        uint32_t min_real_dura; // 0x18

    };

    struct FDropItemConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.DropItemConfTableRow
    {
    //Children Prop Count (Fields): 24
    public:

        uint32_t ID; // 0x8
        uint32_t pool_id; // 0xc
        uint32_t seq; // 0x10
        struct FText desc; // 0x18
        uint32_t Level; // 0x30
        uint32_t Type; // 0x34
        uint32_t item_id; // 0x38
        uint32_t item_num; // 0x3c
        uint32_t item_unit_price; // 0x40
        uint32_t real_send_pack_id; // 0x44
        uint32_t is_black; // 0x48
        uint32_t is_faction; // 0x4c
        uint32_t Weight; // 0x50
        struct TArray<uint32_t> guaranteed_weight; // 0x58
        uint32_t is_core_item; // 0x68
        uint32_t is_intersect_pool; // 0x6c
        uint32_t is_irreturnable; // 0x70
        uint32_t background_color; // 0x74
        uint32_t probability_by_id; // 0x78
        uint32_t server_limit_id; // 0x7c
        struct FText CDN_picture_link; // 0x80
        uint32_t limit_num; // 0x98
        uint32_t show_avatar; // 0x9c
        struct TArray<int32_t> camerapos; // 0xa0

    };

    struct FDispelExpTableRow : FTableRowBase //ScriptStruct UADataTableModule.DispelExpTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t ID; // 0x8
        int32_t part_id; // 0xc
        int32_t dispel_exp; // 0x10

    };

    struct FDeviceWhiteListConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.DeviceWhiteListConfTableRow
    {
    //Children Prop Count (Fields): 1
    public:

        struct FText device_id; // 0x8

    };

    struct FDesignPageTableRow : FTableRowBase //ScriptStruct UADataTableModule.DesignPageTableRow
    {
    public:


    };

    struct FDeathDropReplacePoolTableRow : FTableRowBase //ScriptStruct UADataTableModule.DeathDropReplacePoolTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t pool_id; // 0x8
        struct TArray<uint32_t> item_ids; // 0x10

    };

    struct FDeathDropReplaceBTableRow : FTableRowBase //ScriptStruct UADataTableModule.DeathDropReplaceBTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t item_id; // 0x8
        struct TArray<struct FDeathDropReplacePoolInfo> death_drop_replace_pool_infos; // 0x10

    };

    struct FDeathDropReplacePoolInfo //ScriptStruct UADataTableModule.DeathDropReplacePoolInfo
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t pool_id; // 0x0
        uint32_t Weight; // 0x4

    };

    struct FDeathDropReplaceATableRow : FTableRowBase //ScriptStruct UADataTableModule.DeathDropReplaceATableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t item_id; // 0x8
        uint32_t pool_id; // 0xc
        uint32_t Weight; // 0x10
        uint32_t special_replace_item_id; // 0x14
        uint32_t replace_count; // 0x18

    };

    struct FDataPathTableRow : FTableRowBase //ScriptStruct UADataTableModule.DataPathTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t PathID; // 0x8
        struct FString PathName; // 0x10

    };

    struct FDailyTaskRefreshConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.DailyTaskRefreshConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t season_id; // 0x8
        struct TArray<struct FDailyTaskSet> task_set; // 0x10

    };

    struct FDailyTaskSet //ScriptStruct UADataTableModule.DailyTaskSet
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<uint32_t> task_ids; // 0x0

    };

    struct FDSCountryZoneConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.DSCountryZoneConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t ds_zone_id; // 0xc
        struct TArray<uint32_t> country_codes; // 0x10

    };

    struct FDSCountryGroupConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.DSCountryGroupConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t country_code; // 0x8
        uint32_t ds_group_id; // 0xc
        uint32_t ds_zone_id; // 0x10

    };

    struct FCustomizedExchangeRuleConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.CustomizedExchangeRuleConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t ID; // 0x8
        uint32_t businessman_id; // 0xc
        uint32_t loyalty_level; // 0x10
        uint32_t Level; // 0x14
        uint32_t Num; // 0x18
        struct TArray<struct FDailyRefreshTimeConf> daily_refresh_time_vec; // 0x20

    };

    struct FDailyRefreshTimeConf //ScriptStruct UADataTableModule.DailyRefreshTimeConf
    {
    //Children Prop Count (Fields): 1
    public:

        struct FString refresh_time; // 0x0

    };

    struct FCustomizedExchangeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.CustomizedExchangeConfTableRow
    {
    //Children Prop Count (Fields): 17
    public:

        uint32_t ID; // 0x8
        uint32_t businessman_id; // 0xc
        uint32_t seq; // 0x10
        uint32_t buy_limit; // 0x14
        uint32_t is_hide; // 0x18
        uint32_t sell_item_id; // 0x1c
        uint32_t sell_num; // 0x20
        uint32_t is_faction; // 0x24
        struct TArray<struct FCustomizedExchangeItemConf> exchange_item_vec; // 0x28
        uint32_t loyalty_level; // 0x38
        uint32_t min_level; // 0x3c
        uint32_t max_level; // 0x40
        uint32_t min_player_wealth; // 0x44
        uint32_t max_player_wealth; // 0x48
        uint32_t min_escape_percent; // 0x4c
        uint32_t max_escape_percent; // 0x50
        uint32_t Weight; // 0x54

    };

    struct FCustomizedExchangeItemConf //ScriptStruct UADataTableModule.CustomizedExchangeItemConf
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4

    };

    struct FCurrencyExchangeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.CurrencyExchangeConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString CurrencyName; // 0x8
        float CurrencyCount; // 0x18

    };

    struct FCreditPaneltyConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.CreditPaneltyConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct FString Description; // 0x10

    };

    struct FCreditLevelConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.CreditLevelConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t credit_upperbound; // 0x8
        uint32_t Level; // 0xc
        uint32_t daily_attainable_credit; // 0x10
        uint32_t deduct_coeff_percent; // 0x14
        struct TArray<uint32_t> panelty; // 0x18
        uint32_t reward; // 0x28
        struct FText desc; // 0x30

    };

    struct FCreditEventConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.CreditEventConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        struct FText reason; // 0x10
        int32_t event_type; // 0x28
        uint32_t credit_change; // 0x2c
        uint32_t max_count; // 0x30

    };

    struct FCreditBehaviorDescConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.CreditBehaviorDescConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t isPositive; // 0xc
        struct FText desc; // 0x10

    };

    struct FCreateRoleAvatarShowConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.CreateRoleAvatarShowConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t Type; // 0x8
        struct TArray<uint32_t> avatar_set; // 0x10
        struct TArray<uint32_t> avatar_set_female; // 0x20

    };

    struct FCreateRoleAvatarConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.CreateRoleAvatarConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t Type; // 0x8
        struct TArray<struct FAvatarSet> avatar_sets; // 0x10

    };

    struct FAvatarSet //ScriptStruct UADataTableModule.AvatarSet
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<uint32_t> avatars; // 0x0

    };

    struct FCountryGroupConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.CountryGroupConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<uint32_t> country_codes; // 0x10

    };

    struct FCountryCurrencyExchangeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.CountryCurrencyExchangeConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t CountryCode; // 0x8
        struct FString CurrencyName; // 0x10
        float CurrencyCount; // 0x20

    };

    struct FCountryConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.CountryConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t country_code; // 0x8
        struct FText country_name; // 0x10

    };

    struct FContextMenuPickUpConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ContextMenuPickUpConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint16_t ID; // 0x8
        struct FString PanelType; // 0x10
        struct FString PickUpType; // 0x20

    };

    struct FContextMenuLevel2ConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ContextMenuLevel2ConfTableRow
    {
    //Children Prop Count (Fields): 11
    public:

        uint16_t ID; // 0x8
        struct FText DisplayName; // 0x10
        char ShowIndex; // 0x28
        char displayType; // 0x29
        struct FString ExecFunc; // 0x30
        struct TArray<uint64_t> ItemTypes; // 0x40
        char ItemTypeMode; // 0x50
        struct TArray<uint16_t> PickTypeIds; // 0x58
        char isEquiped; // 0x68
        char IsLendItem; // 0x69
        uint32_t SysId; // 0x6c

    };

    struct FContextMenuLevel1ConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ContextMenuLevel1ConfTableRow
    {
    //Children Prop Count (Fields): 14
    public:

        uint16_t ID; // 0x8
        struct FText DisplayName; // 0x10
        char ShowIndex; // 0x28
        char displayType; // 0x29
        struct FString ExecFunc; // 0x30
        struct TArray<uint64_t> ItemTypes; // 0x40
        char ItemTypeMode; // 0x50
        struct TArray<uint16_t> PickTypeIds; // 0x58
        char isEquiped; // 0x68
        char IsLendItem; // 0x69
        uint32_t SysId; // 0x6c
        uint32_t IsHintMode; // 0x70
        uint32_t IsInspect; // 0x74
        uint32_t IsTraining; // 0x78

    };

    struct FContestBattlePassLevelConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ContestBattlePassLevelConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t Level; // 0xc
        struct TArray<struct FContestBattlePassLevelItem> award; // 0x10
        struct TArray<struct FContestBattlePassLevelItem> extra_award; // 0x20

    };

    struct FContestBattlePassLevelItem //ScriptStruct UADataTableModule.ContestBattlePassLevelItem
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4
        uint32_t is_black; // 0x8
        uint32_t is_faction; // 0xc

    };

    struct FContainerRuleConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ContainerRuleConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t need_roll_up; // 0xc
        struct TArray<uint32_t> black_list; // 0x10
        struct TArray<uint32_t> white_list; // 0x20

    };

    struct FContainerConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ContainerConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        int32_t rollup_size_x; // 0xc
        int32_t rollup_size_y; // 0x10
        float rollup_time; // 0x14
        uint32_t rule_id; // 0x18
        struct FString open_sound; // 0x20
        struct FString close_sound; // 0x30
        struct TArray<struct FContainerSizeConfItem> sizes; // 0x40

    };

    struct FContainerSizeConfItem //ScriptStruct UADataTableModule.ContainerSizeConfItem
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<float> PosX; // 0x0
        struct TArray<float> PosY; // 0x10
        uint32_t col; // 0x20
        uint32_t Row; // 0x24

    };

    struct FContainerArmorConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ContainerArmorConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t price; // 0xc
        uint32_t Vest; // 0x10
        uint32_t Armor; // 0x14
        uint32_t Backpack; // 0x18

    };

    struct FConsumablesUseAwardConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ConsumablesUseAwardConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<struct FConsumablesUseAward> awards; // 0x10

    };

    struct FConsumablesUseAward //ScriptStruct UADataTableModule.ConsumablesUseAward
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4
        uint32_t prob; // 0x8

    };

    struct FConsumablesDetailConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ConsumablesDetailConfTableRow
    {
    //Children Prop Count (Fields): 13
    public:

        uint32_t consumables_id; // 0x8
        uint32_t start_time; // 0xc
        uint32_t energy_value; // 0x10
        int32_t hydration_value; // 0x14
        int32_t food_value; // 0x18
        float Treat_speed; // 0x1c
        int32_t minus_healthupper_value; // 0x20
        int32_t recover_health_value; // 0x24
        struct FText energy_recover_desc; // 0x28
        uint32_t remove_all_parts_buff; // 0x40
        struct TArray<struct FConsumeRemoveStatusConf> remove_status_vec; // 0x48
        struct FText buff_extend_desc; // 0x58
        struct TArray<struct FConsumeBuffConf> buff_vec; // 0x70

    };

    struct FConsumeBuffConf //ScriptStruct UADataTableModule.ConsumeBuffConf
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t buff_id; // 0x0
        uint32_t is_buff; // 0x4

    };

    struct FConsumeRemoveStatusConf //ScriptStruct UADataTableModule.ConsumeRemoveStatusConf
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t remove_id; // 0x0
        uint32_t durability_consume; // 0x4

    };

    struct FConsumablesConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ConsumablesConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t price; // 0xc
        struct TArray<struct FRecommandSuppliesPack> RecommandSuppliesPackList; // 0x10

    };

    struct FRecommandSuppliesPack //ScriptStruct UADataTableModule.RecommandSuppliesPack
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4

    };

    struct FConsumablesBuffConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ConsumablesBuffConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t buff_id; // 0x8
        struct FString logic_id; // 0x10
        struct FText Name; // 0x20
        struct FString icon; // 0x38
        uint64_t delay_time; // 0x48
        uint64_t total_time; // 0x50
        uint64_t Value; // 0x58
        struct FText Describe; // 0x60

    };

    struct FCompetitionDefaultTeamNameConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.CompetitionDefaultTeamNameConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t team_id; // 0x8
        struct FText default_team_name; // 0x10

    };

    struct FCompetitionAuthorityConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.CompetitionAuthorityConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint64_t GOpenID; // 0x8
        uint32_t authority; // 0x10

    };

    struct FCommonCreditLimitSceneTableRow : FTableRowBase //ScriptStruct UADataTableModule.CommonCreditLimitSceneTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        struct FString scene_id; // 0x10
        uint32_t need_ntf; // 0x20
        struct FText ntf_msg; // 0x28

    };

    struct FCommonCreditLimitConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.CommonCreditLimitConfTableRow
    {
    //Children Prop Count (Fields): 9
    public:

        uint32_t ID; // 0x8
        uint32_t Type; // 0xc
        int32_t group_id; // 0x10
        int32_t threshold_lo; // 0x14
        int32_t threshold_hi; // 0x18
        int32_t is_tag_used; // 0x1c
        struct FString tag_type; // 0x20
        int32_t tag_lo; // 0x30
        int32_t tag_hi; // 0x34

    };

    struct FCommonAffixsConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.CommonAffixsConfTableRow
    {
    //Children Prop Count (Fields): 17
    public:

        uint32_t ID; // 0x8
        struct FString FieldName; // 0x10
        int8_t ShowIndex; // 0x20
        int8_t AccesoryShowIndex; // 0x21
        struct FText DisplayName; // 0x28
        uint32_t Algorithm; // 0x40
        uint32_t IsWeaponBase; // 0x44
        struct FString AccesoryFormat; // 0x48
        struct FString WeaponFormat; // 0x58
        struct FText WeaponUnit; // 0x68
        struct FText AccesoryUnit; // 0x80
        float Rato; // 0x98
        uint32_t LessIsBetter; // 0x9c
        int32_t MaxValue; // 0xa0
        uint32_t displayType; // 0xa4
        uint32_t IsBaseAttr; // 0xa8
        struct FText AffixDiscription; // 0xb0

    };

    struct FCommercialSchemeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.CommercialSchemeConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct FString SchemeConf; // 0x10

    };

    struct FComebackConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ComebackConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t ID; // 0x8
        uint32_t afktime_p1; // 0xc
        uint32_t afktime_p2; // 0x10
        uint32_t rankedlv_p1; // 0x14
        uint32_t rankedlv_p2; // 0x18
        uint32_t Value; // 0x1c
        uint32_t Tag; // 0x20

    };

    struct FCombatReadinessConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.CombatReadinessConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t Type; // 0x8
        struct TArray<uint32_t> recommend_list; // 0x10
        struct TArray<uint32_t> initializer_list; // 0x20
        struct TArray<uint32_t> discard_list; // 0x30

    };

    struct FCityConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.CityConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ADCode; // 0x8
        uint32_t ID; // 0xc

    };

    struct FChatDialogBubbleConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ChatDialogBubbleConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t bubbleId; // 0x8
        uint32_t isListed; // 0xc
        struct FText getMethodDesc; // 0x10
        int32_t bubbleLevel; // 0x28
        struct FDateTime start_time; // 0x30
        struct FDateTime end_time; // 0x38

    };

    struct FChannelPromotionConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ChannelPromotionConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t plat_type; // 0x8
        uint32_t channel_number; // 0xc
        uint32_t channel_type; // 0x10
        struct FText desc; // 0x18
        struct FText jump_url; // 0x30

    };

    struct FCardConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.CardConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t card_id; // 0x8
        struct FDateTime start_time; // 0x10
        struct FDateTime end_time; // 0x18
        uint32_t is_open; // 0x20
        struct FString asset_id; // 0x28
        uint32_t jump_id; // 0x38
        struct FText get_tip; // 0x40

    };

    struct FCaptureTableRow : FTableRowBase //ScriptStruct UADataTableModule.CaptureTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        int32_t X; // 0xc
        int32_t Y; // 0x10
        int32_t Z; // 0x14
        uint32_t LightGroupType; // 0x18

    };

    struct FCandidateItemPoolConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.CandidateItemPoolConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t pool_id; // 0x8
        struct TArray<struct FRandItemConf> candidate_items; // 0x10

    };

    struct FRandItemConf //ScriptStruct UADataTableModule.RandItemConf
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t item_id; // 0x0
        uint32_t Weight; // 0x4

    };

    struct FCalExtendConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.CalExtendConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t Lower_Price; // 0xc
        uint32_t Upper_Price; // 0x10
        uint32_t Lower_Extend; // 0x14
        uint32_t Upper_Extend; // 0x18

    };

    struct FBusinessmanStageConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BusinessmanStageConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t businessman_id; // 0x8
        uint32_t stage_id; // 0xc
        uint32_t cond_type; // 0x10
        uint32_t cond_param; // 0x14

    };

    struct FBusinessmanConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BusinessmanConfTableRow
    {
    //Children Prop Count (Fields): 20
    public:

        uint32_t ID; // 0x8
        uint32_t businessman_type; // 0xc
        uint32_t system_lock_id; // 0x10
        struct TArray<struct FBusinessBaseInfoVec> base_info_vec; // 0x18
        struct FString icon_path; // 0x28
        uint32_t init_reputation; // 0x38
        uint32_t init_total_sell; // 0x3c
        struct FDateTime refresh_begin_time; // 0x40
        uint32_t refresh_period; // 0x48
        uint32_t refresh_recover_money; // 0x4c
        uint32_t act_unlock_level; // 0x50
        uint32_t money_id; // 0x54
        uint32_t total_money; // 0x58
        struct TArray<uint32_t> loyalty; // 0x60
        struct TArray<uint64_t> item_types; // 0x70
        uint32_t point_key_unlock; // 0x80
        uint32_t point_key_trade_unlock; // 0x84
        uint32_t can_sell; // 0x88
        uint32_t can_buy; // 0x8c
        struct TArray<struct FShowTimeConf> show_time_vec; // 0x90

    };

    struct FShowTimeConf //ScriptStruct UADataTableModule.ShowTimeConf
    {
    //Children Prop Count (Fields): 2
    public:

        struct FDateTime start_time; // 0x0
        struct FDateTime end_time; // 0x8

    };

    struct FBusinessBaseInfoVec //ScriptStruct UADataTableModule.BusinessBaseInfoVec
    {
    //Children Prop Count (Fields): 2
    public:

        struct FText Name; // 0x0
        struct FText Description; // 0x18

    };

    struct FBusinessGrateDescribeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BusinessGrateDescribeConfTableRow
    {
    //Children Prop Count (Fields): 9
    public:

        uint32_t ID; // 0x8
        struct FText leveldescribe; // 0x10
        struct FText selltype; // 0x28
        struct FString selltypeicon; // 0x40
        struct FText leveltextdes; // 0x50
        struct FText loyaltyonedata; // 0x68
        struct FText loyaltytwodata; // 0x80
        struct FText loyaltythreedata; // 0x98
        struct FText loyaltyfourdata; // 0xb0

    };

    struct FBulletNumShrinkConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BulletNumShrinkConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t item_id; // 0x8
        uint32_t min_ratio; // 0xc
        uint32_t max_ratio; // 0x10

    };

    struct FBulletDetailConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BulletDetailConfTableRow
    {
    //Children Prop Count (Fields): 26
    public:

        uint32_t ItemID; // 0x8
        float BaseDamage; // 0xc
        float BaseSpeed; // 0x10
        float PenetrationFactor; // 0x14
        int32_t PenetrationLevel; // 0x18
        float BrokenProbability; // 0x1c
        float BrokenDamageScale; // 0x20
        float ArmorDamage; // 0x24
        float BleedProbabilityForPenetration; // 0x28
        float BleedProbabilityForBlock; // 0x2c
        float BleedProbabilityForBody; // 0x30
        struct FText BleedProbabilityDisplay; // 0x38
        struct FString AssembleTag; // 0x50
        uint64_t slot_type; // 0x60
        int32_t ShotsInOneBullet; // 0x68
        float BodyHitThroughDamageFactor; // 0x6c
        float BodyHitThroughProbability; // 0x70
        struct FString PrimaryHitBones; // 0x78
        struct FString SecondaryHitBones; // 0x88
        float MOA; // 0x98
        float MoaX; // 0x9c
        float MoaY; // 0xa0
        float HorizontalRecoil; // 0xa4
        float VerticalRecoil; // 0xa8
        uint32_t ZeroDropDistance; // 0xac
        float EnergyBreak; // 0xb0

    };

    struct FBulletConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BulletConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t GunId; // 0xc
        struct TArray<struct FMagazineBulletPack> MagazineBulletList; // 0x10

    };

    struct FMagazineBulletPack //ScriptStruct UADataTableModule.MagazineBulletPack
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4

    };

    struct FBuffIconConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BuffIconConfTableRow
    {
    //Children Prop Count (Fields): 17
    public:

        uint32_t buff_id; // 0x8
        struct FString buff_name; // 0x10
        struct FString icon_path; // 0x20
        struct FString inspecticon_path; // 0x30
        struct FText display_name; // 0x40
        struct FText Describe; // 0x58
        uint32_t Type; // 0x70
        uint32_t showicon; // 0x74
        uint32_t Priority; // 0x78
        struct FString show_type; // 0x80
        struct FString part_head; // 0x90
        struct FString part_chest; // 0xa0
        struct FString part_stomach; // 0xb0
        struct FString part_leftarm; // 0xc0
        struct FString part_rightarm; // 0xd0
        struct FString part_leftleg; // 0xe0
        struct FString part_rightleg; // 0xf0

    };

    struct FBrokenImageConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BrokenImageConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t Index; // 0x8
        struct FString FilePath; // 0x10
        float Left; // 0x20
        float Top; // 0x24
        float Right; // 0x28
        float Bottom; // 0x2c

    };

    struct FBossTokenConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BossTokenConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t GroupID; // 0x8
        uint32_t ItemID; // 0xc

    };

    struct FBodyPartsTableTableRow : FTableRowBase //ScriptStruct UADataTableModule.BodyPartsTableTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint64_t PositionId; // 0x8
        struct FText Describe; // 0x10

    };

    struct FBodyDetailsPartsTableTableRow : FTableRowBase //ScriptStruct UADataTableModule.BodyDetailsPartsTableTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint64_t PositionId; // 0x8
        uint64_t BodyPartId; // 0x10
        struct FText Describe; // 0x18

    };

    struct FBattleStatConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattleStatConfTableRow
    {
    //Children Prop Count (Fields): 1
    public:

        uint32_t stat_type; // 0x8

    };

    struct FBattleResultReferTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattleResultReferTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t StatisticsId; // 0x8
        struct FText Describe; // 0x10

    };

    struct FBattleResultPointEventConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattleResultPointEventConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t eventId; // 0x8
        struct FText EventTypeDes; // 0x10
        struct FText EventTitle; // 0x28
        struct FText DescribeWord; // 0x40
        uint32_t Weight; // 0x58
        struct TArray<struct FDescribeArg> DescribeWordArgsList; // 0x60
        struct FText CombinedDescribeWord; // 0x70
        struct TArray<struct FDescribeArg> CombinedDescribeWordArgsList; // 0x88

    };

    struct FDescribeArg //ScriptStruct UADataTableModule.DescribeArg
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString arg; // 0x0
        uint32_t ResolveMethod; // 0x10
        struct FString LocalizationKey; // 0x18

    };

    struct FBattleResultMapTextureConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattleResultMapTextureConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t ID; // 0x8
        uint32_t MainModeID; // 0xc
        uint32_t SubModeID; // 0x10
        uint32_t MapID; // 0x14
        uint32_t SpecialID; // 0x18
        uint32_t Difficulty; // 0x1c
        struct FText TexturePath; // 0x20

    };

    struct FBattleResultLootBoxConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattleResultLootBoxConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct FString LootBoxKey; // 0x10
        struct FText LootBoxName; // 0x20

    };

    struct FBattleResultLoadingTipsTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattleResultLoadingTipsTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        struct FText Tip; // 0x10
        uint32_t Weight; // 0x28
        uint32_t BattleResult; // 0x2c

    };

    struct FBattleResultLoadingImageTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattleResultLoadingImageTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        struct FString Path; // 0x10
        uint32_t Weight; // 0x20
        uint32_t BattleResult; // 0x24

    };

    struct FBattleResultInjuredRecordTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattleResultInjuredRecordTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t InjuredId; // 0x8
        struct FText InjuredRecordDescribe; // 0x10
        struct FString InjuredFormType; // 0x28

    };

    struct FBattleResultEnemyTipsFuncTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattleResultEnemyTipsFuncTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        struct FText CheckFunc; // 0x10
        struct TArray<struct FText> Params; // 0x28
        struct TArray<struct FText> ParamsType; // 0x38

    };

    struct FBattleResultEnemyTipsTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattleResultEnemyTipsTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        struct TArray<uint32_t> CheckFuncIds; // 0x10
        uint32_t Priority; // 0x20
        struct TArray<bool> JudgeResults; // 0x28
        struct FText Tips; // 0x38

    };

    struct FBattleResultEXPRatioTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattleResultEXPRatioTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ResultId; // 0x8
        uint32_t EXPRatio; // 0xc
        struct FText Describe; // 0x10

    };

    struct FBattleResultDieTypeTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattleResultDieTypeTableRow
    {
    //Children Prop Count (Fields): 11
    public:

        uint32_t ID; // 0x8
        uint32_t DieType; // 0xc
        struct FString DetailBodyPart; // 0x10
        struct FString BodyPart; // 0x20
        uint32_t SpreadBodyPart; // 0x30
        uint32_t HitArmor; // 0x34
        uint32_t IsThough; // 0x38
        uint32_t OverBulletKill; // 0x3c
        struct TArray<uint32_t> DeathCauserIdList; // 0x40
        struct FText ResultTitle; // 0x50
        struct FString TipsArray; // 0x68

    };

    struct FBattleResultDieTipsTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattleResultDieTipsTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct FText Tips; // 0x10

    };

    struct FBattleResultConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattleResultConfTableRow
    {
    //Children Prop Count (Fields): 10
    public:

        uint64_t ID; // 0x8
        uint32_t AttributeType; // 0x10
        uint32_t Proportion; // 0x14
        struct FText Describe; // 0x18
        uint32_t FromType; // 0x30
        struct TArray<uint32_t> AppendId; // 0x38
        struct FText Scale; // 0x48
        struct FString Format; // 0x60
        struct FText Unit; // 0x70
        uint32_t RoundingType; // 0x88

    };

    struct FBattleResultAreaConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattleResultAreaConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct FText AreaName; // 0x10

    };

    struct FBattleResultAppraiseSeasonConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattleResultAppraiseSeasonConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<uint32_t> appraise_id_list; // 0x10

    };

    struct FBattleResultAppraiseTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattleResultAppraiseTableRow
    {
    //Children Prop Count (Fields): 30
    public:

        uint32_t AppraiseId; // 0x8
        struct FText AppraiseName; // 0x10
        struct FText Describe; // 0x28
        struct FText DesWords; // 0x40
        struct TArray<int64_t> event_id_array; // 0x58
        struct TArray<int64_t> event_val_array; // 0x68
        struct TArray<uint32_t> ignore_multi_mode_list; // 0x78
        struct TArray<struct FAppraiseConditionConf> Conditions; // 0x88
        struct FString icon; // 0x98
        uint32_t Group; // 0xa8
        uint32_t GroupShowIndex; // 0xac
        uint32_t Class; // 0xb0
        uint32_t ClassIndex; // 0xb4
        uint32_t quality; // 0xb8
        struct TArray<uint32_t> FacePicMapUnlockIds; // 0xc0
        uint32_t SeasonPropotion; // 0xd0
        uint32_t Proportion; // 0xd4
        uint32_t PlatformCDNImageURLID; // 0xd8
        struct FText MagazineShareDesc; // 0xe0
        uint32_t AppraiseImageIndex; // 0xf8
        struct FText DataDes; // 0x100
        struct FText ShareDescribe; // 0x118
        struct FText ShareDesWords; // 0x130
        uint32_t CanShare; // 0x148
        uint32_t SeasonForceShowType; // 0x14c
        uint32_t ForceShowType; // 0x150
        uint32_t Type; // 0x154
        uint32_t Param1; // 0x158
        uint32_t Param2; // 0x15c
        uint32_t param3; // 0x160

    };

    struct FAppraiseConditionConf //ScriptStruct UADataTableModule.AppraiseConditionConf
    {
    //Children Prop Count (Fields): 3
    public:

        struct FText expression; // 0x0
        uint32_t Op; // 0x18
        int64_t Val; // 0x20

    };

    struct FBattlePassWorldLevelConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattlePassWorldLevelConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t week_idx; // 0x8
        uint32_t Level; // 0xc
        uint32_t delta_level; // 0x10

    };

    struct FBattlePassVipShowConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattlePassVipShowConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t group_id; // 0xc
        uint32_t vip_id; // 0x10
        uint32_t is_extra; // 0x14
        struct TArray<struct FBattlePassVipShowItem> award; // 0x18

    };

    struct FBattlePassVipShowItem //ScriptStruct UADataTableModule.BattlePassVipShowItem
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4
        uint32_t is_black; // 0x8
        struct FText unlock_desc; // 0x10
        struct FText item_desc; // 0x28

    };

    struct FBattlePassVipConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattlePassVipConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t ID; // 0x8
        uint32_t group_id; // 0xc
        uint32_t pre_vip_lv; // 0x10
        uint32_t vip_lv; // 0x14
        struct FText Name; // 0x18
        uint32_t purchase_id; // 0x30
        struct TArray<struct FBattlePassVipItem> award; // 0x38

    };

    struct FBattlePassVipItem //ScriptStruct UADataTableModule.BattlePassVipItem
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4
        uint32_t show_type; // 0x8
        uint32_t is_black; // 0xc

    };

    struct FBattlePassShowTypeTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattlePassShowTypeTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        uint32_t show_type; // 0xc

    };

    struct FBattlePassOtherWayTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattlePassOtherWayTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        uint32_t unlock_level; // 0xc
        uint32_t is_new; // 0x10
        struct FDateTime start_time; // 0x18
        struct FDateTime end_time; // 0x20
        struct FText desc; // 0x28
        uint32_t jump_goto; // 0x40
        struct FText btn_title; // 0x48

    };

    struct FBattlePassLevelConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattlePassLevelConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t Level; // 0xc
        uint32_t group_id; // 0x10
        struct TArray<struct FBattlePassLevelItem> award; // 0x18
        struct TArray<struct FBattlePassLevelItem> extra_award; // 0x28

    };

    struct FBattlePassLevelItem //ScriptStruct UADataTableModule.BattlePassLevelItem
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4
        uint32_t is_black; // 0x8

    };

    struct FBattlePassLastSeasonAwardConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattlePassLastSeasonAwardConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        uint32_t group_id; // 0xc
        uint32_t level_min; // 0x10
        uint32_t level_max; // 0x14
        uint32_t login_day_min; // 0x18
        uint32_t login_day_max; // 0x1c
        struct TArray<uint32_t> award; // 0x20
        struct FText desc; // 0x30

    };

    struct FBattlePassConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattlePassConfTableRow
    {
    //Children Prop Count (Fields): 14
    public:

        uint32_t ID; // 0x8
        uint32_t max_level; // 0xc
        uint32_t award_max_level; // 0x10
        uint32_t need_exp; // 0x14
        uint32_t buy_exp_item; // 0x18
        uint32_t buy_exp_cost; // 0x1c
        struct FText show_time; // 0x20
        struct FString entry_img_cdn_path; // 0x38
        struct FString img_cdn_path; // 0x48
        struct TArray<uint32_t> try_wear_list; // 0x58
        uint32_t exchange_bg; // 0x68
        struct TArray<struct FText> first_pop_img_path; // 0x70
        uint32_t upgrade_step; // 0x80
        struct FText growup_items_desc; // 0x88

    };

    struct FBattlePassAwardItemsConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BattlePassAwardItemsConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<struct FBlackItemConf> award; // 0x10

    };

    struct FBasicEquipConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BasicEquipConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t is_npc; // 0x8
        uint32_t group_id; // 0xc
        uint32_t class_id; // 0x10
        uint32_t slot_index; // 0x14
        uint32_t item_id; // 0x18
        struct TArray<struct FExtEquipConf> exts; // 0x20

    };

    struct FBanTypeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BanTypeConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct FText Content; // 0x10

    };

    struct FBanThrowsconfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BanThrowsconfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        int32_t RowNum; // 0x8
        uint64_t ItemID; // 0x10
        uint32_t HitGroup; // 0x18
        float DamageThres; // 0x1c
        int32_t DamageTimes; // 0x20
        struct TArray<int32_t> TimeThres; // 0x28
        uint64_t BanTime; // 0x38

    };

    struct FBanReasonConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BanReasonConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct FText Content; // 0x10

    };

    struct FBadgeSlotConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BadgeSlotConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t slot_id; // 0x8
        uint32_t is_unlock; // 0xc
        struct FText slot_name; // 0x10
        uint32_t sort; // 0x28
        uint32_t check_wear; // 0x2c
        struct FString slot_icon; // 0x30

    };

    struct FBadgeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.BadgeConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t badge_id; // 0x8
        struct FText badge_name; // 0x10
        uint32_t group_id; // 0x28
        struct TArray<uint32_t> jump_goto; // 0x30
        struct FText no_source_description; // 0x40

    };

    struct FAvatarValueShowTableRow : FTableRowBase //ScriptStruct UADataTableModule.AvatarValueShowTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t avatar_id; // 0x8
        struct TArray<struct FBuffInfo> buff_list; // 0x10

    };

    struct FBuffInfo //ScriptStruct UADataTableModule.BuffInfo
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x0
        struct FString Value; // 0x8

    };

    struct FAvatarValueNameTableRow : FTableRowBase //ScriptStruct UADataTableModule.AvatarValueNameTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct FString Name; // 0x10

    };

    struct FAvatarTabCfgTableRow : FTableRowBase //ScriptStruct UADataTableModule.AvatarTabCfgTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t ID; // 0x8
        uint32_t Index; // 0xc
        struct TArray<uint32_t> sub_part_id; // 0x10
        struct FString Name; // 0x20
        struct FString icon; // 0x30
        uint32_t show_sub_tab; // 0x40

    };

    struct FAvatarSetCfgTableRow : FTableRowBase //ScriptStruct UADataTableModule.AvatarSetCfgTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t IsIntergral; // 0xc
        struct TArray<uint32_t> avatar_set; // 0x10

    };

    struct FAvatarPartTabCfgTableRow : FTableRowBase //ScriptStruct UADataTableModule.AvatarPartTabCfgTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t PartId; // 0x8
        struct FString Name; // 0x10
        struct FString icon; // 0x20

    };

    struct FAvatarItemConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.AvatarItemConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<uint32_t> conflect_types; // 0x10

    };

    struct FAvatarItemCfgTableRow : FTableRowBase //ScriptStruct UADataTableModule.AvatarItemCfgTableRow
    {
    //Children Prop Count (Fields): 15
    public:

        uint32_t ID; // 0x8
        uint32_t show_in_wardrobe; // 0xc
        uint32_t force_hide; // 0x10
        uint32_t sex; // 0x14
        uint32_t Level; // 0x18
        uint32_t is_show; // 0x1c
        uint32_t Score; // 0x20
        struct FDateTime start_time; // 0x28
        struct FDateTime end_time; // 0x30
        uint32_t replace_itemid; // 0x38
        uint32_t replace_num; // 0x3c
        struct TArray<uint32_t> jump_goto; // 0x40
        struct FText no_source_description; // 0x50
        uint32_t factory_id; // 0x68
        struct FString effect_bg_path; // 0x70

    };

    struct FAvatarHairOptionsTableRow : FTableRowBase //ScriptStruct UADataTableModule.AvatarHairOptionsTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t hair; // 0xc
        uint32_t Color; // 0x10
        uint32_t composite_id; // 0x14

    };

    struct FAvatarFactoryCfgTableRow : FTableRowBase //ScriptStruct UADataTableModule.AvatarFactoryCfgTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        struct FString Name; // 0x10
        struct FString icon; // 0x20
        struct FString desc; // 0x30
        struct TArray<uint32_t> series; // 0x40

    };

    struct FAvatarCompleteShareConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.AvatarCompleteShareConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct FString cdn_url; // 0x10

    };

    struct FAuctionTagsTableRow : FTableRowBase //ScriptStruct UADataTableModule.AuctionTagsTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct FText Name; // 0x10
        struct FString icon_path; // 0x28

    };

    struct FAuctionSingleRecycleTableRow : FTableRowBase //ScriptStruct UADataTableModule.AuctionSingleRecycleTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t show_recycle_price_rate; // 0xc
        uint32_t show_recycle_rand; // 0x10
        uint32_t expire_recycle_num_rate; // 0x14
        uint32_t expire_recycle_price_rate; // 0x18

    };

    struct FAuctionScaleConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.AuctionScaleConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        float DistancePercentA; // 0xc

    };

    struct FAuctionSafeQuestionConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.AuctionSafeQuestionConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t number1; // 0xc
        struct FText symbol; // 0x10
        uint32_t number2; // 0x28
        uint32_t Answer; // 0x2c

    };

    struct FAuctionMinorTableRow : FTableRowBase //ScriptStruct UADataTableModule.AuctionMinorTableRow
    {
    //Children Prop Count (Fields): 9
    public:

        uint32_t ID; // 0x8
        struct FText Name; // 0x10
        uint32_t sort; // 0x28
        struct TArray<uint32_t> Parent; // 0x30
        uint32_t Show; // 0x40
        uint32_t show_summary; // 0x44
        struct FString icon_path; // 0x48
        uint32_t icon_path_id; // 0x58
        struct TArray<uint32_t> show_titles; // 0x60

    };

    struct FAuctionMajorTableRow : FTableRowBase //ScriptStruct UADataTableModule.AuctionMajorTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t ID; // 0x8
        struct FText Name; // 0x10
        uint32_t sort; // 0x28
        uint32_t Show; // 0x2c
        uint32_t skip_minor; // 0x30
        struct FString icon_path; // 0x38
        uint32_t icon_path_id; // 0x48

    };

    struct FAuctionItemTableRow : FTableRowBase //ScriptStruct UADataTableModule.AuctionItemTableRow
    {
    //Children Prop Count (Fields): 42
    public:

        uint64_t ID; // 0x8
        struct TArray<uint32_t> Parent; // 0x10
        struct TArray<uint32_t> weapon_parent; // 0x20
        struct TArray<uint32_t> durability_rate; // 0x30
        struct TArray<uint32_t> durability_sale_num_rate; // 0x40
        uint32_t on_the_shelf; // 0x50
        struct FDateTime begin_time; // 0x58
        struct FDateTime end_time; // 0x60
        uint32_t act_id; // 0x68
        struct TArray<uint32_t> sort; // 0x70
        uint32_t combinable; // 0x80
        uint32_t one_way_auction; // 0x84
        uint32_t min_sell_num; // 0x88
        uint32_t minimum_sell_num; // 0x8c
        uint32_t max_buy_num; // 0x90
        uint32_t max_sale_num; // 0x94
        uint64_t display_weapon; // 0x98
        uint32_t auto_order; // 0xa0
        float sale_price_rate_min; // 0xa4
        float sale_price_rate_max; // 0xa8
        float sale_price_u; // 0xac
        float sale_price_s; // 0xb0
        float sale_num_rate_min; // 0xb4
        float sale_num_rate_max; // 0xb8
        uint32_t merge_sale_price_step_rate; // 0xbc
        struct TArray<uint32_t> Tags; // 0xc0
        struct FString official_order_calc_params; // 0xd0
        uint32_t official_order_delay_time; // 0xe0
        float min_price_scale; // 0xe4
        float max_price_scale; // 0xe8
        struct TArray<uint32_t> replace_order_price_rate; // 0xf0
        struct TArray<uint32_t> replace_order_random; // 0x100
        float hour_official_place_rate; // 0x110
        float once_official_place_rate; // 0x114
        float official_place_price_step; // 0x118
        float official_place_limit_rate; // 0x11c
        uint32_t item_flag; // 0x120
        uint32_t standprice_a1; // 0x124
        uint32_t standprice_b1; // 0x128
        uint32_t avgprice_a2; // 0x12c
        uint32_t avgprice_b2; // 0x130
        uint32_t step_len; // 0x134

    };

    struct FAuctionDelayTableRow : FTableRowBase //ScriptStruct UADataTableModule.AuctionDelayTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t place_up_delay_min; // 0xc
        uint32_t place_up_delay_max; // 0x10
        uint32_t send_mail_delay; // 0x14

    };

    struct FAuctionCombineRecycleTableRow : FTableRowBase //ScriptStruct UADataTableModule.AuctionCombineRecycleTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t show_recycle_price_rate; // 0xc
        uint32_t show_recycle_rand; // 0x10

    };

    struct FArmorProtectDisplayConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ArmorProtectDisplayConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t protect_display_id; // 0x8
        uint32_t protect_display_type; // 0xc
        struct FText protect_part_name; // 0x10
        uint32_t protect_part_dec; // 0x28
        struct FString protect_pic; // 0x30

    };

    struct FArmorProtectConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ArmorProtectConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t protect_id; // 0x8
        uint32_t protect_type; // 0xc
        uint32_t protect_part_hex; // 0x10
        uint32_t protect_part_dec; // 0x14

    };

    struct FArmorMaterialConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ArmorMaterialConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t material_id; // 0x8
        float material_coef; // 0xc

    };

    struct FArmorDetailValueToAttributeTableRow : FTableRowBase //ScriptStruct UADataTableModule.ArmorDetailValueToAttributeTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        struct FString DetailValueName; // 0x8
        uint32_t ConvertType; // 0x18
        struct FString ConvertTargetName; // 0x20
        uint32_t OperationType; // 0x30
        uint32_t SubOperationType; // 0x34

    };

    struct FArmorDetailConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ArmorDetailConfTableRow
    {
    //Children Prop Count (Fields): 39
    public:

        uint32_t armor_id; // 0x8
        uint32_t armor_protecttype; // 0xc
        uint32_t armor_level; // 0x10
        uint32_t armor_protectmask; // 0x14
        struct TArray<uint32_t> armor_protectdisplay; // 0x18
        uint32_t armor_headdetailprotectmask; // 0x28
        uint32_t armor_antipenetrationfactor; // 0x2c
        float armor_damagescaleforblock; // 0x30
        float armor_destructibility; // 0x34
        uint32_t armor_material_id; // 0x38
        struct TArray<uint32_t> size_ext; // 0x40
        struct FText armor_materialname; // 0x50
        float armor_ricochetangle; // 0x68
        float armor_ricochetprobabilitymin; // 0x6c
        float armor_ricochetprobabilitymax; // 0x70
        float MoveSpeed; // 0x74
        float TurnSpeed; // 0x78
        float Engonomics; // 0x7c
        struct FText SoundPick; // 0x80
        struct FText NoiseReduce; // 0x98
        struct FText DefenseFlash; // 0xb0
        struct FText DefensePoison; // 0xc8
        uint32_t SoundBlock; // 0xe0
        float SoundLevelInfluence; // 0xe4
        float SoundMaxDistanceInfluenceFactor; // 0xe8
        float SoundIndicatorLevelInfluence; // 0xec
        float SoundIndicatorMaxDistanceInfluenceFactor; // 0xf0
        float FlashTimeInfluenceFactor; // 0xf4
        float FlashEffectInfluenceFactor; // 0xf8
        struct FString StaticScreenEffectPath; // 0x100
        struct FString MaterialScreenEffectPath; // 0x110
        uint32_t HasBrokenScreenEffect; // 0x120
        struct FString AssembleTag; // 0x128
        struct FString SubAssembleTag; // 0x138
        uint64_t slot_type; // 0x148
        uint64_t sub_slot_type; // 0x150
        struct TArray<struct FWeaponSocket> Sockets; // 0x158
        struct TArray<uint32_t> ConflictedItemIds; // 0x168
        struct TArray<uint32_t> IgnoreSoundIndicatorType; // 0x178

    };

    struct FAntipenetrationConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.AntipenetrationConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t material_id; // 0x8
        uint32_t material_coef; // 0xc

    };

    struct FAmmoNumTableRow : FTableRowBase //ScriptStruct UADataTableModule.AmmoNumTableRow
    {
    //Children Prop Count (Fields): 22
    public:

        uint64_t magazine_id; // 0x8
        int32_t Type; // 0x10
        struct FText full_name; // 0x18
        uint32_t full_max; // 0x30
        uint32_t full_min; // 0x34
        struct FText almostfull_name; // 0x38
        int32_t almostfull_max; // 0x50
        int32_t almostfull_min; // 0x54
        struct FText morethanhalf_name; // 0x58
        int32_t morethanhalf_max; // 0x70
        int32_t morethanhalf_min; // 0x74
        struct FText abouthalf_name; // 0x78
        int32_t abouthalf_max; // 0x90
        int32_t abouthalf_min; // 0x94
        struct FText lessthanhalf_name; // 0x98
        int32_t lessthanhalf_max; // 0xb0
        int32_t lessthanhalf_min; // 0xb4
        struct FText almostempty_name; // 0xb8
        int32_t almostempty_max; // 0xd0
        int32_t almostempty_min; // 0xd4
        struct FText empty_name; // 0xd8
        int32_t Empty; // 0xf0

    };

    struct FAmmoMagazineRelationTableRow : FTableRowBase //ScriptStruct UADataTableModule.AmmoMagazineRelationTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t item_id; // 0x8
        uint32_t ammo_count; // 0xc
        uint32_t ammo_count_mul; // 0x10
        uint32_t capacity_ratio; // 0x14
        uint32_t filling_ratio; // 0x18

    };

    struct FAiLimitConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.AiLimitConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        float normal_value; // 0xc
        float redline_value; // 0x10
        uint32_t calc_type; // 0x14
        uint32_t loot_pool; // 0x18

    };

    struct FAiLevelConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.AiLevelConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t Level; // 0x8
        uint32_t start_id; // 0xc
        uint32_t end_id; // 0x10

    };

    struct FAiDropConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.AiDropConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t group_id; // 0x8
        struct TArray<struct FDropItemList> drop_items; // 0x10

    };

    struct FDropItemList //ScriptStruct UADataTableModule.DropItemList
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t act_id; // 0x0
        uint32_t item_id; // 0x4
        uint32_t Num; // 0x8
        uint32_t Weight; // 0xc

    };

    struct FAiCommonConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.AiCommonConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t Val; // 0xc
        struct FString pic_prefix; // 0x10

    };

    struct FAdditionalTranslationConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.AdditionalTranslationConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct FText translation_key; // 0x10
        struct TArray<struct FText> translation_list; // 0x28

    };

    struct FAdcodeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.AdcodeConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ADCode; // 0x8
        struct TArray<struct FText> Region; // 0x10

    };

    struct FActWeekendPaybackConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActWeekendPaybackConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct FDateTime hide_time; // 0x10
        struct FDateTime payback_begin_time; // 0x18

    };

    struct FActTaskMetiConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActTaskMetiConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        uint32_t active_type; // 0xc
        uint32_t reset_type; // 0x10
        struct FText pic_url; // 0x18
        struct TArray<uint32_t> meti_task_limit_pool; // 0x30
        uint32_t meti_task_num_min; // 0x40
        uint32_t meti_task_num; // 0x44
        struct TArray<uint32_t> default_task_list; // 0x48

    };

    struct FActTaskConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActTaskConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t reset_type; // 0xc
        struct TArray<uint32_t> task_list; // 0x10

    };

    struct FActSingleRechargeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActSingleRechargeConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t threshold; // 0xc
        struct TArray<struct FAwardSingleChargeConf> award_single_conf; // 0x10

    };

    struct FAwardSingleChargeConf //ScriptStruct UADataTableModule.AwardSingleChargeConf
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t item; // 0x0
        uint32_t Num; // 0x4

    };

    struct FActSimpleConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActSimpleConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct TArray<struct FShowItem> show_item_infos; // 0x10
        struct TArray<struct FPPTNode> ppts; // 0x20

    };

    struct FPPTNode //ScriptStruct UADataTableModule.PPTNode
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString Title; // 0x0
        struct FString desc; // 0x10
        struct FString pic; // 0x20

    };

    struct FShowItem //ScriptStruct UADataTableModule.ShowItem
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<uint32_t> ID; // 0x0
        struct FString desc; // 0x10

    };

    struct FActSideClashConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActSideClashConfTableRow
    {
    //Children Prop Count (Fields): 10
    public:

        uint32_t ID; // 0x8
        uint32_t play_mode_id; // 0xc
        uint32_t jump_goto; // 0x10
        uint32_t cdis_mapping; // 0x14
        uint32_t mnst_mapping; // 0x18
        uint32_t survive_event; // 0x1c
        struct TArray<struct FPointEvent> cdis_event_list; // 0x20
        uint32_t cdis_side_event; // 0x30
        struct TArray<struct FPointEvent> mnst_event_list; // 0x38
        uint32_t mnst_side_event; // 0x48

    };

    struct FPointEvent //ScriptStruct UADataTableModule.PointEvent
    {
    //Children Prop Count (Fields): 1
    public:

        uint32_t ID; // 0x0

    };

    struct FActServerProgressConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActServerProgressConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t ID; // 0x8
        struct TArray<uint32_t> inc_progress_per_hour; // 0x10
        struct TArray<float> inc_progress_day_factor; // 0x20
        uint32_t max_progress; // 0x30
        uint32_t task_id; // 0x34
        uint32_t limit_id; // 0x38
        struct TArray<struct FActServerProgressRewardConf> rewards; // 0x40

    };

    struct FActServerProgressRewardConf //ScriptStruct UADataTableModule.ActServerProgressRewardConf
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t Progress; // 0x0
        uint32_t Type; // 0x4
        uint32_t item_id; // 0x8
        uint32_t item_num; // 0xc
        uint32_t is_black; // 0x10
        struct FString cdn; // 0x18
        struct FString desc; // 0x28
        uint32_t is_faction; // 0x38

    };

    struct FActSeriesActConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActSeriesActConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t child_active_count_limit; // 0xc
        uint32_t reward_progress; // 0x10
        struct FText reward_pic; // 0x18
        struct TArray<struct FChildActConf> child_act_info; // 0x30

    };

    struct FChildActConf //ScriptStruct UADataTableModule.ChildActConf
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t child_id; // 0x0
        struct FText thumb_name; // 0x8
        struct FText thumb_pic; // 0x20
        struct FText reward_list; // 0x38
        uint32_t Difficulty; // 0x50
        uint32_t reject_cd; // 0x54

    };

    struct FActSecretTaskConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActSecretTaskConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t exchange_item_id; // 0xc
        struct TArray<struct FPhotoTaskConf> photo_task_info; // 0x10
        struct TArray<struct FAwardItemConf> all_complete_reward; // 0x20

    };

    struct FPhotoTaskConf //ScriptStruct UADataTableModule.PhotoTaskConf
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t photo_id; // 0x0
        uint32_t Level; // 0x4
        uint32_t task_id; // 0x8

    };

    struct FActSeasonPageConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActSeasonPageConfTableRow
    {
    //Children Prop Count (Fields): 9
    public:

        uint32_t ID; // 0x8
        uint32_t entry_id; // 0xc
        uint32_t sys_id; // 0x10
        uint32_t season_id; // 0x14
        uint32_t display_order; // 0x18
        struct FString Name; // 0x20
        struct FString begin_time; // 0x30
        struct FString Description; // 0x40
        struct FString pic; // 0x50

    };

    struct FActSeasonActEntranceConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActSeasonActEntranceConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        uint32_t main_act_id; // 0xc
        uint32_t Pos; // 0x10
        uint32_t jumpgoto_id; // 0x14
        struct FString Name; // 0x18
        struct FString Description; // 0x28
        struct FString pic; // 0x38
        struct FString mask_id; // 0x48

    };

    struct FActScratchCardConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActScratchCardConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t dynamic_gacha_id; // 0xc
        uint32_t history_count; // 0x10
        struct TArray<uint32_t> marquee_items; // 0x18
        uint32_t marquee_id; // 0x28

    };

    struct FActScavGuideConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActScavGuideConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct FString pic; // 0x10
        struct FString notify_msg; // 0x20

    };

    struct FActRelatedItemsConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActRelatedItemsConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t act_id; // 0x8
        struct TArray<uint32_t> Items; // 0x10

    };

    struct FActRedPacketConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActRedPacketConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t reset_type; // 0xc
        struct TArray<struct FTaskListConf> task_list; // 0x10

    };

    struct FTaskListConf //ScriptStruct UADataTableModule.TaskListConf
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t task_id; // 0x0
        uint32_t Reset; // 0x4
        uint32_t Type; // 0x8

    };

    struct FActRecruitGiftPackageConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActRecruitGiftPackageConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<struct FGiftItem> gift_items; // 0x10

    };

    struct FGiftItem //ScriptStruct UADataTableModule.GiftItem
    {
    //Children Prop Count (Fields): 9
    public:

        uint32_t item_id; // 0x0
        uint32_t item_num; // 0x4
        struct FString item_icon; // 0x8
        struct FString item_title; // 0x18
        struct FString item_desc; // 0x28
        struct FString item_tag; // 0x38
        uint32_t exchange_id; // 0x48
        uint32_t exchange_num; // 0x4c
        uint32_t discount_num; // 0x50

    };

    struct FActRankConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActRankConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        struct FDateTime frozen_time; // 0x10
        uint32_t mail_id; // 0x18
        uint32_t score_id; // 0x1c
        struct TArray<struct FRangeAward> awards; // 0x20

    };

    struct FRangeAward //ScriptStruct UADataTableModule.RangeAward
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t min_rank; // 0x0
        uint32_t max_rank; // 0x4
        uint32_t award_id; // 0x8

    };

    struct FActRandomTaskConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActRandomTaskConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t random_num; // 0xc
        uint32_t reset_type; // 0x10
        struct TArray<struct FTaskItem> task_list; // 0x18

    };

    struct FTaskItem //ScriptStruct UADataTableModule.TaskItem
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t task_id; // 0x0
        uint32_t Weight; // 0x4

    };

    struct FActRandomForgeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActRandomForgeConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        struct TArray<uint32_t> quick_forge_material_id; // 0x10
        uint32_t deluxe_pool_id; // 0x20
        struct TArray<struct ForgePool> forge_pool; // 0x28

    };

    struct ForgePool //ScriptStruct UADataTableModule.orgePool
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t Cost; // 0x0
        uint32_t normal_pool_id; // 0x4
        uint32_t lucky_coeff; // 0x8
        uint32_t cost_coeff; // 0xc
        uint32_t luck_buff; // 0x10

    };

    struct FActProbShowConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActProbShowConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        struct TArray<uint32_t> item_id; // 0x10
        struct TArray<uint32_t> is_black; // 0x20
        struct TArray<uint32_t> item_num; // 0x30
        struct TArray<uint32_t> Weight; // 0x40

    };

    struct FActPrivilegeDiscountConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActPrivilegeDiscountConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t Time; // 0xc
        struct TArray<struct FPrivilegeDiscountConf> privilege_discount_conf; // 0x10

    };

    struct FPrivilegeDiscountConf //ScriptStruct UADataTableModule.PrivilegeDiscountConf
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t privilege_level; // 0x0
        uint32_t duration_type; // 0x4
        uint32_t ID; // 0x8

    };

    struct FActPopImageConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActPopImageConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t Type; // 0xc
        uint32_t json_param; // 0x10
        uint32_t Priority; // 0x14

    };

    struct FActOpenBoxConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActOpenBoxConfTableRow
    {
    //Children Prop Count (Fields): 13
    public:

        uint32_t ID; // 0x8
        uint32_t daily_count; // 0xc
        uint32_t box_id; // 0x10
        uint32_t box_num; // 0x14
        uint32_t key_id; // 0x18
        uint32_t key_num; // 0x1c
        uint32_t mall_key_id; // 0x20
        uint32_t pool_id; // 0x24
        uint32_t lucky; // 0x28
        uint32_t total_count; // 0x2c
        struct FString banner; // 0x30
        uint32_t is_step_price; // 0x40
        struct TArray<uint32_t> step_price; // 0x48

    };

    struct FActMoneyBoxConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActMoneyBoxConfTableRow
    {
    //Children Prop Count (Fields): 12
    public:

        uint32_t ID; // 0x8
        uint32_t buy_item_id; // 0xc
        uint32_t buy_item_num; // 0x10
        uint32_t reward_limit; // 0x14
        uint32_t base_reward; // 0x18
        uint32_t battle_reward; // 0x1c
        uint32_t escape_reward; // 0x20
        uint32_t kill_reward; // 0x24
        uint32_t take_out_count; // 0x28
        uint32_t take_out_reward; // 0x2c
        struct FString money_box_push_pic; // 0x30
        struct TArray<struct FMoneyBoxPicConf> money_box_pic_conf; // 0x40

    };

    struct FMoneyBoxPicConf //ScriptStruct UADataTableModule.MoneyBoxPicConf
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString pic_url; // 0x0
        uint32_t Percentage; // 0x10

    };

    struct FActLuckyStarConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActLuckyStarConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t act_id; // 0x8
        uint32_t allow_spread; // 0xc
        struct FDateTime spread_end_time; // 0x10
        uint32_t lucky_star_task; // 0x18
        struct TArray<struct FAwardItemConf> help_awards; // 0x20
        struct FText notify_msg; // 0x30
        struct FText notify_cdn_url; // 0x48
        uint32_t notify_jump_id; // 0x60

    };

    struct FActLotteryStepConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActLotteryStepConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        uint32_t ticket_id; // 0xc
        struct TArray<uint32_t> step_price; // 0x10
        uint32_t ticket_mall_id; // 0x20
        uint32_t pool_id; // 0x24
        struct TArray<uint32_t> guaranteed_count; // 0x28
        uint32_t daily_limit; // 0x38
        uint32_t total_limit; // 0x3c

    };

    struct FActLotteryNormalConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActLotteryNormalConfTableRow
    {
    //Children Prop Count (Fields): 16
    public:

        uint32_t ID; // 0x8
        uint32_t ticket_id; // 0xc
        uint32_t single_price; // 0x10
        uint32_t multi_count; // 0x14
        uint32_t multi_price; // 0x18
        uint32_t ticket_mall_id; // 0x1c
        uint32_t pool_id; // 0x20
        uint32_t lucky; // 0x24
        struct TArray<uint32_t> guaranteed_count; // 0x28
        uint32_t daily_limit; // 0x38
        uint32_t total_limit; // 0x3c
        uint32_t free_refresh_interval; // 0x40
        uint32_t free_count; // 0x44
        uint32_t free_refresh_count; // 0x48
        uint32_t shop_id; // 0x4c
        uint32_t currency_id; // 0x50

    };

    struct FActInviteNewConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActInviteNewConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct FString all_complete_reward_list; // 0x10
        struct TArray<struct FRewardConf> reward_conf; // 0x20

    };

    struct FRewardConf //ScriptStruct UADataTableModule.RewardConf
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t invite_num; // 0x0
        uint32_t Level; // 0x4
        struct FString reward_list; // 0x8

    };

    struct FActIdentificationSpecificConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActIdentificationSpecificConfTableRow
    {
    //Children Prop Count (Fields): 11
    public:

        uint32_t ID; // 0x8
        uint32_t act_id; // 0xc
        struct FString pic; // 0x10
        struct FString Description; // 0x20
        uint32_t Level; // 0x30
        struct TArray<struct FNeedEntryIDConf> need_entry_ids; // 0x38
        uint32_t can_repeated_activate; // 0x48
        uint32_t daily_activate_limit; // 0x4c
        uint32_t weekly_activate_limit; // 0x50
        uint32_t total_activate_limit; // 0x54
        struct TArray<struct FActivateSpecificAwardConf> activate_award_conf; // 0x58

    };

    struct FActivateSpecificAwardConf //ScriptStruct UADataTableModule.ActivateSpecificAwardConf
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t item; // 0x0
        uint32_t Num; // 0x4
        uint32_t is_black; // 0x8
        uint32_t is_faction; // 0xc

    };

    struct FNeedEntryIDConf //ScriptStruct UADataTableModule.NeedEntryIDConf
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t need_entry_id; // 0x0
        uint32_t Slot; // 0x4

    };

    struct FActIdentificationEntryConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActIdentificationEntryConfTableRow
    {
    //Children Prop Count (Fields): 16
    public:

        uint32_t ID; // 0x8
        uint32_t act_id; // 0xc
        struct FText Description; // 0x10
        uint32_t Level; // 0x28
        uint32_t Slot; // 0x2c
        uint32_t Weight; // 0x30
        uint32_t value_ratio; // 0x34
        struct TArray<uint32_t> companion_entries; // 0x38
        uint32_t is_gurantee; // 0x48
        uint32_t is_unreturnable; // 0x4c
        uint32_t is_hidden; // 0x50
        uint32_t can_repeated_activate; // 0x54
        uint32_t daily_activate_limit; // 0x58
        uint32_t weekly_activate_limit; // 0x5c
        uint32_t total_activate_limit; // 0x60
        struct TArray<struct FActivateAwardConf> activate_award_conf; // 0x68

    };

    struct FActivateAwardConf //ScriptStruct UADataTableModule.ActivateAwardConf
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t item; // 0x0
        uint32_t Num; // 0x4
        uint32_t is_black; // 0x8
        uint32_t is_faction; // 0xc

    };

    struct FActIdentificationConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActIdentificationConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        uint32_t reidentification_item_id; // 0xc
        uint32_t weekly_identification_limit; // 0x10
        uint32_t weekly_reidentification_limit; // 0x14
        uint32_t always_red_point; // 0x18
        uint32_t gurantee_time; // 0x1c
        uint32_t mail_id; // 0x20
        struct TArray<uint32_t> related_identification_item_id_conf; // 0x28

    };

    struct FActGroupPurchaseConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActGroupPurchaseConfTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t ID; // 0x8
        uint32_t buy_limit_id; // 0xc
        uint32_t expectation; // 0x10
        uint32_t refund_item_id; // 0x14
        uint32_t extra_purchase_count; // 0x18
        uint32_t recharge_id; // 0x1c
        struct TArray<struct FDiscountConf> discount_list; // 0x20

    };

    struct FDiscountConf //ScriptStruct UADataTableModule.DiscountConf
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t purchase_count; // 0x0
        uint32_t discount; // 0x4
        uint32_t refund_item_num; // 0x8

    };

    struct FActGoodCommentConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActGoodCommentConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t ID; // 0x8
        struct TArray<uint32_t> trigger_task; // 0x10
        struct TArray<uint32_t> trigger_task2; // 0x20
        uint32_t trigger_interval; // 0x30
        uint32_t max_trigger_count; // 0x34
        struct TArray<struct FChannelInfo> channel_infos; // 0x38

    };

    struct FChannelInfo //ScriptStruct UADataTableModule.ChannelInfo
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x0
        struct FString URL; // 0x8

    };

    struct FActGoldenWeekConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActGoldenWeekConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t task_id; // 0xc
        struct TArray<struct FGoldenWeekTreasuryConf> treasure_reward_vector; // 0x10

    };

    struct FGoldenWeekTreasuryConf //ScriptStruct UADataTableModule.GoldenWeekTreasuryConf
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t treasure_reward_item_id; // 0x0
        uint32_t treasure_reward_item_num; // 0x4
        uint32_t is_black; // 0x8
        uint32_t is_faction; // 0xc

    };

    struct FActGoldenWeekBoxConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActGoldenWeekBoxConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        struct FDateTime take_time_begin; // 0x10
        struct FDateTime take_time_end; // 0x18
        uint32_t score_item_id; // 0x20
        struct TArray<struct FActGoldenWeekCDNConf> pic_conf; // 0x28

    };

    struct FActGoldenWeekCDNConf //ScriptStruct UADataTableModule.ActGoldenWeekCDNConf
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t score_item_num; // 0x0
        struct FString treasure_picture_url; // 0x8

    };

    struct FActGoldIdCardConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActGoldIdCardConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint64_t ID; // 0x8
        uint32_t inner_game_act_id; // 0x10
        uint32_t is_close; // 0x14
        struct FText cdn_url; // 0x18

    };

    struct FActGeneralOpenBoxConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActGeneralOpenBoxConfTableRow
    {
    //Children Prop Count (Fields): 10
    public:

        uint32_t ID; // 0x8
        uint32_t daily_count; // 0xc
        uint32_t box_id; // 0x10
        uint32_t box_num; // 0x14
        uint32_t key_id; // 0x18
        uint32_t key_num; // 0x1c
        uint32_t normal_pool_id; // 0x20
        uint32_t lucky_pool_id; // 0x24
        uint32_t lucky; // 0x28
        uint32_t prob_show_id; // 0x2c

    };

    struct FActFriNumInviteCodeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActFriNumInviteCodeConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t ID; // 0x8
        uint32_t refresh_cd; // 0xc
        struct FText act_reward_list; // 0x10
        struct FText act_reward_pic; // 0x28
        struct FText act_reward_desc; // 0x40
        struct TArray<struct FriNumTaskConf> fri_num_task_conf; // 0x58

    };

    struct FriNumTaskConf //ScriptStruct UADataTableModule.riNumTaskConf
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t task_id; // 0x0
        uint32_t invite_num; // 0x4
        struct FText task_desc; // 0x8
        struct FText reward_list; // 0x20

    };

    struct FActFriLevelInviteCodeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActFriLevelInviteCodeConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t ID; // 0x8
        uint32_t refresh_cd; // 0xc
        struct FText act_reward_list; // 0x10
        struct FText act_reward_pic; // 0x28
        struct FText act_reward_desc; // 0x40
        struct TArray<struct FriLevelTaskConf> fri_level_task_conf; // 0x58

    };

    struct FriLevelTaskConf //ScriptStruct UADataTableModule.riLevelTaskConf
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t task_id; // 0x0
        uint32_t complete_num; // 0x4
        uint32_t Level; // 0x8
        struct FText task_desc; // 0x10
        struct FText reward_list; // 0x28

    };

    struct FActFirstLoseEquipConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActFirstLoseEquipConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t min_take_in_value; // 0xc
        struct TArray<struct FirstLoseEquipConf> reward_list; // 0x10

    };

    struct FirstLoseEquipConf //ScriptStruct UADataTableModule.irstLoseEquipConf
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4

    };

    struct FActExpressTaskPoolConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActExpressTaskPoolConfTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t act_id; // 0x8
        uint32_t task_num; // 0xc
        struct TArray<uint32_t> init_distribution; // 0x10
        uint32_t fill_num; // 0x20
        uint32_t refresh_ticket; // 0x24
        struct TArray<struct FWeightedTask> task_pool_a; // 0x28
        struct TArray<struct FWeightedTask> task_pool_b; // 0x38
        struct TArray<struct FWeightedTask> task_pool_c; // 0x48

    };

    struct FWeightedTask //ScriptStruct UADataTableModule.WeightedTask
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t task_id; // 0x0
        uint32_t Weight; // 0x4
        struct FText rsc_path; // 0x8
        struct FText special_desc; // 0x20
        uint32_t mail_id; // 0x38

    };

    struct FActExchangeGlobalConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActExchangeGlobalConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        uint32_t history_count; // 0xc

    };

    struct FActExchangeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActExchangeConfTableRow
    {
    //Children Prop Count (Fields): 11
    public:

        uint32_t ID; // 0x8
        uint32_t pre_exchange_count; // 0xc
        uint32_t total_exchange_limit; // 0x10
        uint32_t daily_exchange_limit; // 0x14
        uint32_t week_exchange_limit; // 0x18
        uint32_t act_daily_limit; // 0x1c
        struct TArray<struct FCostItemNode> cost_list; // 0x20
        struct TArray<struct FSubmitItemNode> submit_cost_list; // 0x30
        struct FString reward_list; // 0x40
        uint32_t is_attention; // 0x50
        uint32_t server_limit_id; // 0x54

    };

    struct FSubmitItemNode //ScriptStruct UADataTableModule.SubmitItemNode
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4
        uint32_t is_black; // 0x8
        uint32_t is_dark; // 0xc
        uint32_t is_full_durability; // 0x10

    };

    struct FCostItemNode //ScriptStruct UADataTableModule.CostItemNode
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4

    };

    struct FActEntryConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActEntryConfTableRow
    {
    //Children Prop Count (Fields): 18
    public:

        uint32_t ID; // 0x8
        uint32_t sys_id; // 0xc
        uint32_t Type; // 0x10
        uint32_t tab_type; // 0x14
        uint32_t display_order; // 0x18
        struct FString Name; // 0x20
        struct FString icon; // 0x30
        uint32_t countdown_time; // 0x40
        struct FString tmplt; // 0x48
        uint32_t disappear; // 0x58
        uint32_t min_level; // 0x5c
        struct FString client_version_low; // 0x60
        struct FString client_version_up; // 0x70
        struct TArray<uint32_t> forbidden_client_channel; // 0x80
        struct TArray<uint32_t> forbidden_account_channel; // 0x90
        struct TArray<uint32_t> forbidden_plat_type; // 0xa0
        uint32_t country_group_id; // 0xb0
        uint32_t is_external_sys; // 0xb4

    };

    struct FActDoss2ConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActDoss2ConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t contact_id; // 0xc
        struct FString dialogue; // 0x10

    };

    struct FActDailyLoginConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActDailyLoginConfTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        uint32_t reset_type; // 0xc
        uint32_t need_reissue; // 0x10
        struct TArray<struct FAwardItemConf> reward_list; // 0x18

    };

    struct FActContestConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActContestConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t ID; // 0x8
        int64_t Val; // 0x10
        struct FString Str; // 0x18
        struct FDateTime begin_time; // 0x28
        struct FDateTime end_time; // 0x30
        struct TArray<struct FRewardSeg> reward_segs; // 0x38

    };

    struct FRewardSeg //ScriptStruct UADataTableModule.RewardSeg
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t start_rank; // 0x0
        uint32_t end_rank; // 0x4
        struct FString reward_list; // 0x8

    };

    struct FActConfigTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActConfigTableRow
    {
    //Children Prop Count (Fields): 53
    public:

        uint32_t ID; // 0x8
        uint32_t display_order; // 0xc
        uint32_t Type; // 0x10
        uint32_t icon_sys_id; // 0x14
        struct FText Name; // 0x18
        uint32_t rp_type; // 0x30
        uint32_t is_open; // 0x34
        struct TArray<uint32_t> closed_env_id; // 0x38
        struct TArray<uint32_t> open_condition; // 0x48
        struct FString tab_name; // 0x58
        uint32_t tab_order; // 0x68
        uint32_t theme_act_id; // 0x6c
        struct FString tab_cdn; // 0x70
        uint32_t precondition; // 0x80
        uint32_t disappear; // 0x84
        uint32_t min_level; // 0x88
        uint32_t max_level; // 0x8c
        uint32_t parent_id; // 0x90
        uint32_t is_logic; // 0x94
        struct FDateTime begin_time; // 0x98
        struct FDateTime begin_time_deadline; // 0xa0
        struct FDateTime end_time; // 0xa8
        uint32_t continue_time; // 0xb0
        struct FString des; // 0xb8
        struct FString act_time_des; // 0xc8
        struct FString notice; // 0xd8
        struct FString json_param; // 0xe8
        struct FString reward_list; // 0xf8
        struct FString pic; // 0x108
        struct FString Jump; // 0x118
        struct TArray<uint32_t> forbidden_client_channel; // 0x128
        struct TArray<uint32_t> forbidden_account_channel; // 0x138
        struct TArray<uint32_t> forbidden_plat_type; // 0x148
        struct FString client_version_low; // 0x158
        struct FString client_version_up; // 0x168
        struct FString bp_path; // 0x178
        struct FString URL; // 0x188
        uint32_t tag_type; // 0x198
        uint32_t tag_time; // 0x19c
        uint32_t countdown_time; // 0x1a0
        uint32_t core_item_id; // 0x1a4
        uint32_t core_item_num; // 0x1a8
        uint32_t country_group_id; // 0x1ac
        uint32_t through_season; // 0x1b0
        uint32_t can_rate; // 0x1b4
        uint32_t rate_prereq; // 0x1b8
        uint32_t is_share; // 0x1bc
        struct FString share_reward_list; // 0x1c0
        struct FString share_cdn; // 0x1d0
        uint32_t open_user_type; // 0x1e0
        uint32_t not_open_by_parent; // 0x1e4
        uint32_t is_rookie_act; // 0x1e8
        uint32_t check_active; // 0x1ec

    };

    struct FActCollectClueConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActCollectClueConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        struct TArray<struct FinalRewardConf> rewards; // 0x10
        struct TArray<struct FTaskTextConf> task_list; // 0x20

    };

    struct FTaskTextConf //ScriptStruct UADataTableModule.TaskTextConf
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t task_id; // 0x0
        struct FString Title; // 0x8
        struct FString Text; // 0x18
        struct FString pic; // 0x28

    };

    struct FinalRewardConf //ScriptStruct UADataTableModule.inalRewardConf
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t item_id; // 0x0
        uint32_t Num; // 0x4
        uint32_t is_black; // 0x8

    };

    struct FActCodePacketConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActCodePacketConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<struct FCodePacketConf> code_packet_list; // 0x10

    };

    struct FCodePacketConf //ScriptStruct UADataTableModule.CodePacketConf
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t task_id; // 0x0
        struct FString ntf_pic; // 0x8
        struct FString Text; // 0x18
        uint32_t finish_count; // 0x28
        uint32_t Reset; // 0x2c
        struct FString Effect; // 0x30

    };

    struct FActClassTaskConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActClassTaskConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        uint32_t class_policy; // 0xc
        struct TArray<struct FClassTaskConf> task_list; // 0x10

    };

    struct FClassTaskConf //ScriptStruct UADataTableModule.ClassTaskConf
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t bound; // 0x0
        struct TArray<uint32_t> tasks; // 0x8

    };

    struct FActCdkConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActCdkConfTableRow
    {
    //Children Prop Count (Fields): 9
    public:

        uint32_t ID; // 0x8
        struct FString Name; // 0x10
        uint32_t act_id; // 0x20
        uint32_t task_id; // 0x24
        struct FString cdk; // 0x28
        uint32_t mail_id; // 0x38
        uint32_t marquee_id; // 0x3c
        uint32_t server_limit_id; // 0x40
        struct FString website; // 0x48

    };

    struct FActBlindBoxConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActBlindBoxConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<struct FBlindBoxConf> rewards; // 0x10

    };

    struct FBlindBoxConf //ScriptStruct UADataTableModule.BlindBoxConf
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t pool_id; // 0x0
        uint32_t treasure_item_id; // 0x4
        struct FDateTime begin_time; // 0x8
        struct FDateTime end_time; // 0x10
        uint32_t jump_id; // 0x18

    };

    struct FActBankruptConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActBankruptConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ID; // 0x8
        int64_t Val; // 0x10
        struct FString Str; // 0x18

    };

    struct FActAwardConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActAwardConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<struct FAwardItemConf> award; // 0x10

    };

    struct FActAccumRechargeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActAccumRechargeConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t total_stage; // 0xc
        uint32_t Stage; // 0x10
        uint32_t threshold; // 0x14
        struct TArray<struct FAwardAccumRechargeConf> award_accum_conf; // 0x18

    };

    struct FAwardAccumRechargeConf //ScriptStruct UADataTableModule.AwardAccumRechargeConf
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t item; // 0x0
        uint32_t Num; // 0x4

    };

    struct FActAccumConsumeConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.ActAccumConsumeConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        uint32_t ID; // 0x8
        uint32_t total_stage; // 0xc
        uint32_t Stage; // 0x10
        uint32_t threshold; // 0x14
        struct TArray<struct FAwardAccumConsumeConf> award_accum_conf; // 0x18

    };

    struct FAwardAccumConsumeConf //ScriptStruct UADataTableModule.AwardAccumConsumeConf
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t item; // 0x0
        uint32_t Num; // 0x4

    };

    struct FAchievementConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.AchievementConfTableRow
    {
    //Children Prop Count (Fields): 9
    public:

        uint32_t badge_id; // 0x8
        uint32_t Type; // 0xc
        uint32_t sub_type; // 0x10
        uint32_t season_id; // 0x14
        struct FText badge_name; // 0x18
        struct FText badge_desc; // 0x30
        uint32_t need_finish_num; // 0x48
        struct TArray<uint32_t> task_ids; // 0x50
        struct FText icon_path; // 0x60

    };

    struct FAchieveTaskConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.AchieveTaskConfTableRow
    {
    //Children Prop Count (Fields): 11
    public:

        uint32_t task_id; // 0x8
        uint32_t Type; // 0xc
        struct FText Name; // 0x10
        struct FText finish_name; // 0x28
        struct FText desc; // 0x40
        struct FText finish_desc; // 0x58
        uint32_t target_type; // 0x70
        uint32_t Param1; // 0x74
        uint32_t Param2; // 0x78
        struct TArray<uint32_t> sub_tasks; // 0x80
        uint32_t Progress; // 0x90

    };

    struct FAchieveBadgeSlotTableRow : FTableRowBase //ScriptStruct UADataTableModule.AchieveBadgeSlotTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t slot_id; // 0x8
        struct FText slot_name; // 0x10
        struct FText slot_icon; // 0x28
        uint32_t is_unlock; // 0x40
        uint32_t sort; // 0x44
        uint32_t check_wear; // 0x48

    };

    struct FAccountBanReasonTableRow : FTableRowBase //ScriptStruct UADataTableModule.AccountBanReasonTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString AccountBanID; // 0x8
        struct FText AccountBanReason; // 0x18

    };

    struct FAccessRepairDurabilityConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.AccessRepairDurabilityConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        struct TArray<struct FAccessDurabilityPriceConf> durability_price_conf; // 0x10

    };

    struct FAccessDurabilityPriceConf //ScriptStruct UADataTableModule.AccessDurabilityPriceConf
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t armor_level; // 0x0
        uint32_t durability_price; // 0x4

    };

    struct FAccessMatArchIdConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.AccessMatArchIdConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        uint32_t material_arch_id; // 0xc

    };

    struct FAccessDurabilityArchIdConfTableRow : FTableRowBase //ScriptStruct UADataTableModule.AccessDurabilityArchIdConfTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ID; // 0x8
        uint32_t durability_price_arch_id; // 0xc

    };

    struct FAISpawnScavSpawnControllerTableRow : FTableRowBase //ScriptStruct UADataTableModule.AISpawnScavSpawnControllerTableRow
    {
    //Children Prop Count (Fields): 25
    public:

        int32_t ConfigID; // 0x8
        int32_t MapID; // 0xc
        struct TArray<int32_t> AISpawnConfigID; // 0x10
        int32_t eventId; // 0x20
        struct TArray<float> Weather; // 0x28
        int32_t SquadID; // 0x38
        int32_t FatherSquadID; // 0x3c
        float PlayerAroundRadius; // 0x40
        float PlayerLineOfSight; // 0x44
        float PlayerViewAngle; // 0x48
        int32_t AIRandLimitationMin; // 0x4c
        int32_t AIRandLimitationMax; // 0x50
        bool Loop; // 0x54
        float FirstSpawnTime; // 0x58
        int32_t TriggerVolumeID; // 0x5c
        float DeathDelay; // 0x60
        int32_t Reinforce; // 0x64
        bool IsPatrol; // 0x68
        bool SingleArea; // 0x69
        int32_t Priority; // 0x6c
        int32_t FactionType; // 0x70
        int32_t GroupType; // 0x74
        struct TArray<struct FScavWaveInfoArray> ScavWaveInfoArray; // 0x78
        struct TArray<struct FAreaInfo> AreaInfo; // 0x88
        struct TArray<struct FAreaInfo> Reinforcement; // 0x98

    };

    struct FAreaInfo //ScriptStruct UADataTableModule.AreaInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString AreaID; // 0x0
        int32_t Weight; // 0x10

    };

    struct FScavWaveInfoArray //ScriptStruct UADataTableModule.ScavWaveInfoArray
    {
    //Children Prop Count (Fields): 5
    public:

        float Probability; // 0x0
        int32_t Min; // 0x4
        int32_t Max; // 0x8
        float MinInterval; // 0xc
        float MaxInterval; // 0x10

    };

    struct FAISpawnPlayerScavConfigTableRow : FTableRowBase //ScriptStruct UADataTableModule.AISpawnPlayerScavConfigTableRow
    {
    //Children Prop Count (Fields): 15
    public:

        int32_t ConfigID; // 0x8
        int32_t MapID; // 0xc
        struct TArray<int32_t> AISpawnConfigID; // 0x10
        int32_t eventId; // 0x20
        struct TArray<float> Weather; // 0x28
        int32_t MinPlayerScavAINum; // 0x38
        int32_t MaxPlayerScavAINum; // 0x3c
        float PlayerScavAIDelayTime; // 0x40
        float PlayerScavAIEndTime; // 0x44
        float PlayerScavAISpawnInterval; // 0x48
        struct TArray<int32_t> PlayerScavAIIDPool; // 0x50
        struct TArray<int32_t> PlayerScavAIEquipPool; // 0x60
        float PlayerAroundRadius; // 0x70
        float PlayerLineOfSight; // 0x74
        float PlayerViewAngle; // 0x78

    };

    struct FAISpawnPMCSpawnControllerTableRow : FTableRowBase //ScriptStruct UADataTableModule.AISpawnPMCSpawnControllerTableRow
    {
    //Children Prop Count (Fields): 11
    public:

        int32_t ConfigID; // 0x8
        int32_t MapID; // 0xc
        int32_t AISpawnConfigID; // 0x10
        int32_t SquadID; // 0x14
        int32_t MinSquadNum; // 0x18
        int32_t MaxSquadNum; // 0x1c
        float PlayerAroundRadius; // 0x20
        float PlayerLineOfSight; // 0x24
        float PlayerViewAngle; // 0x28
        bool Priority; // 0x2c
        struct TArray<struct FAreaInfo> AreaInfo; // 0x30

    };

    struct FAISpawnPMCConfigTableRow : FTableRowBase //ScriptStruct UADataTableModule.AISpawnPMCConfigTableRow
    {
    //Children Prop Count (Fields): 29
    public:

        int32_t ConfigID; // 0x8
        int32_t MapID; // 0xc
        struct TArray<int32_t> AISpawnConfigID; // 0x10
        int32_t eventId; // 0x20
        struct TArray<float> Weather; // 0x28
        int32_t MinPMCNum; // 0x38
        int32_t MaxPMCNum; // 0x3c
        int32_t Plan1Weight; // 0x40
        float PMCAIDelayTime; // 0x44
        int32_t MinPMCAITeamUpNum; // 0x48
        int32_t MaxPMCAITeamUpNum; // 0x4c
        float PlayerAroundRadius; // 0x50
        float PlayerLineOfSight; // 0x54
        float PlayerViewAngle; // 0x58
        struct TArray<int32_t> PMCAIIDPool; // 0x60
        struct TArray<int32_t> PMCAIEquipPool; // 0x70
        struct TArray<struct FPMCAIEquipmentLimit> PMCAIEquipmentLimit; // 0x80
        int32_t Plan2Wieght; // 0x90
        float PMCAIDelayTime2; // 0x94
        int32_t MinPMCAITeamUpNum2; // 0x98
        int32_t MaxPMCAITeamUpNum2; // 0x9c
        struct TArray<int32_t> PMCAIIDPool2; // 0xa0
        struct TArray<int32_t> PMCAIEquipPool2; // 0xb0
        float ScanInterval; // 0xc0
        float SpawnInterval; // 0xc4
        float DetectionTime; // 0xc8
        float BattleIntensity; // 0xcc
        int32_t HitNum; // 0xd0
        int32_t KillNum; // 0xd4

    };

    struct FPMCAIEquipmentLimit //ScriptStruct UADataTableModule.PMCAIEquipmentLimit
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t EquipID; // 0x0
        int32_t Limit; // 0x4
        int32_t BackupID; // 0x8

    };

    struct FAISpawnBossSpawnControllerTableRow : FTableRowBase //ScriptStruct UADataTableModule.AISpawnBossSpawnControllerTableRow
    {
    //Children Prop Count (Fields): 17
    public:

        int32_t ConfigID; // 0x8
        int32_t MapID; // 0xc
        struct TArray<int32_t> AISpawnConfigID; // 0x10
        struct TArray<float> Weather; // 0x20
        int32_t SquadID; // 0x30
        int32_t BossID; // 0x34
        int32_t eventId; // 0x38
        float PlayerAroundRadius; // 0x3c
        float PlayerLineOfSight; // 0x40
        float PlayerViewAngle; // 0x44
        float Probability; // 0x48
        int32_t Weight; // 0x4c
        struct FText MaxNumber; // 0x50
        float FirstSpawnTime; // 0x68
        int32_t FactionType; // 0x6c
        int32_t GroupType; // 0x70
        struct TArray<struct FTriggerArea> BossArea; // 0x78

    };

    struct FTriggerArea //ScriptStruct UADataTableModule.TriggerArea
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString AreaID; // 0x0
        struct FString TriggerEvent; // 0x10
        struct FString FollowArea; // 0x20

    };

    struct FAISpawnAreaInfoTableRow : FTableRowBase //ScriptStruct UADataTableModule.AISpawnAreaInfoTableRow
    {
    //Children Prop Count (Fields): 10
    public:

        int32_t ConfigID; // 0x8
        int32_t MapID; // 0xc
        struct TArray<int32_t> AISpawnConfigID; // 0x10
        int32_t eventId; // 0x20
        struct TArray<float> Weather; // 0x28
        struct FString AreaID; // 0x38
        int32_t CampID; // 0x48
        int32_t MaxAINumber; // 0x4c
        int32_t PoolType; // 0x50
        struct TArray<struct FAIPool> AIPool; // 0x58

    };

    struct FAIPool //ScriptStruct UADataTableModule.AIPool
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString ID; // 0x0
        int32_t Equip; // 0x10
        int32_t Weight; // 0x14

    };

    struct FTaskDescription //ScriptStruct UACommon.TaskDescription
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString ETag; // 0x0
        int32_t FileSize; // 0x10

    };

    struct FKeyInputBlockingConfTableRow : FTableRowBase //ScriptStruct UACommon.KeyInputBlockingConfTableRow
    {
    //Children Prop Count (Fields): 6
    public:

        enum class EPCInputButton ActionName; // 0x8
        bool FrontEnd; // 0x9
        bool InBattle; // 0xa
        bool notBagOpen; // 0xb
        bool notMapOpen; // 0xc
        bool notGamesettingOpen; // 0xd

    };

    struct FCommonActionKeyNameConfTableRow : FTableRowBase //ScriptStruct UACommon.CommonActionKeyNameConfTableRow
    {
    //Children Prop Count (Fields): 9
    public:

        uint32_t ID; // 0x8
        struct FText ActionName; // 0x10
        struct FText OperationName; // 0x28
        int32_t Scale; // 0x40
        struct FText KeyDescribeName; // 0x48
        int32_t typeId; // 0x60
        struct FText KeyTypeName; // 0x68
        int32_t subTypeId; // 0x80
        int32_t RelationCounts; // 0x84

    };

    struct FCALevelMapInfoTableRow : FTableRowBase //ScriptStruct UACommon.CALevelMapInfoTableRow
    {
    //Children Prop Count (Fields): 11
    public:

        int32_t MapID; // 0x8
        struct FVector WorldCenter; // 0xc
        struct FVector MapTopLeftLocation; // 0x18
        struct FVector WorldNorthAngleOffset; // 0x24
        class UTexture2D* MapTexture; // 0x30
        class UTexture2D* Map2LTexture; // 0x38
        struct TSoftObjectPtr<UTexture2D> CoreAreaTexturePath; // 0x40
        struct TArray<struct FCAMapAreaTextureInfo> MapAreaTextureInfos; // 0x68
        struct TArray<char> CoreRawData; // 0x78
        int32_t CoreWidth; // 0x88
        int32_t CoreHeight; // 0x8c

    };

    struct FCAMapAreaTextureInfo //ScriptStruct UACommon.CAMapAreaTextureInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t AreaID; // 0x0
        class UTexture2D* MapTexture; // 0x8

    };

    struct FMagazineIconConfTable : FTableRowBase //ScriptStruct UACommon.MagazineIconConfTable
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t item_id; // 0x8
        int32_t min_num; // 0xc

    };

    struct FItemIntervalTable : FTableRowBase //ScriptStruct UACommon.ItemIntervalTable
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t Item_type; // 0x8
        float Interval; // 0xc
        struct TMap<int32_t, float> item_id_interval_map; // 0x10

    };

    struct FSystemUnlockTable : FTableRowBase //ScriptStruct UACommon.SystemUnlockTable
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t sys_id; // 0x8
        bool NeedUnlockAnim; // 0xc

    };

    struct FLootStaticPointDetailTable : FTableRowBase //ScriptStruct UACommon.LootStaticPointDetailTable
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t ID; // 0x8
        struct FString desc; // 0x10
        struct TMap<enum class ELevelDifficult, struct FLootDetailTable> LootDetail; // 0x20

    };

    struct FLootDetailTable : FTableRowBase //ScriptStruct UACommon.LootDetailTable
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t ID; // 0x8
        struct TArray<struct FNumDistribute> Count; // 0x10
        struct TArray<struct FLoosePoint> LoosePoints; // 0x20
        struct TArray<struct FLoosePoint> FixedLoosePoints; // 0x30
        struct TArray<struct FActiveLoosePoint> ActivateLoosePoints; // 0x40

    };

    struct FActiveLoosePoint : FTableRowBase //ScriptStruct UACommon.ActiveLoosePoint
    {
    //Children Prop Count (Fields): 2
    public:

        struct FLoosePoint LoosePoint; // 0x8
        int32_t ActiveId; // 0x20

    };

    struct FLoosePoint : FTableRowBase //ScriptStruct UACommon.LoosePoint
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t Distribution; // 0x8
        int32_t ItemID; // 0xc
        int32_t MinCount; // 0x10
        int32_t MaxCount; // 0x14

    };

    struct FNumDistribute : FTableRowBase //ScriptStruct UACommon.NumDistribute
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t Distribution; // 0x8
        int32_t Num; // 0xc

    };

    struct FMapStaticPointTable : FTableRowBase //ScriptStruct UACommon.MapStaticPointTable
    {
    //Children Prop Count (Fields): 9
    public:

        int32_t MapID; // 0x8
        int32_t RuleID; // 0xc
        enum class ELevelDifficult LevelDifficult; // 0x10
        struct FString PointName; // 0x18
        struct FTransform Transform; // 0x30
        int32_t LootPointType; // 0x60
        class ASGInventory* InvClass; // 0x68
        int32_t LinkStaticPointDetailId; // 0x70
        struct FString Comments; // 0x78

    };

    struct FRookieTipTable : FTableRowBase //ScriptStruct UACommon.RookieTipTable
    {
    //Children Prop Count (Fields): 11
    public:

        int32_t tip_id; // 0x8
        enum class ERookieTipType Type; // 0xc
        struct FText Text; // 0x10
        struct FString listen_action; // 0x28
        struct TArray<int32_t> next_ids; // 0x38
        bool is_key; // 0x48
        int32_t talkcharacter; // 0x4c
        struct FString sound_name; // 0x50
        float remain_time; // 0x60
        struct TArray<struct FString> exec_action; // 0x68
        struct TArray<int32_t> face_paint_ids; // 0x78

    };

    struct FRookieLimitTable : FTableRowBase //ScriptStruct UACommon.RookieLimitTable
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t ID; // 0x8
        struct TMap<int32_t, bool> sys_id_changes; // 0x10

    };

    struct FRicochetTable : FTableRowBase //ScriptStruct UACommon.RicochetTable
    {
    //Children Prop Count (Fields): 3
    public:

        float armor_ricochetangle; // 0x8
        float armor_ricochetprobabilitymin; // 0xc
        float armor_ricochetprobabilitymax; // 0x10

    };

    struct FLoosePointAliasesTable : FTableRowBase //ScriptStruct UACommon.LoosePointAliasesTable
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName LinkLoosePointDetailID; // 0x8
        struct FAliasesTableMessage AliasesTableMessage; // 0x10

    };

    struct FAliasesTableMessage //ScriptStruct UACommon.AliasesTableMessage
    {
    //Children Prop Count (Fields): 2
    public:

        struct TMap<int32_t, struct FAliases> AliasesTable; // 0x0
        struct TArray<struct FLoosePoint> LoosePointMessages; // 0x50

    };

    struct FAliases //ScriptStruct UACommon.Aliases
    {
    //Children Prop Count (Fields): 2
    public:

        float Rate; // 0x0
        int32_t Idx; // 0x4

    };

    struct FLoosePointMapMessage : FTableRowBase //ScriptStruct UACommon.LoosePointMapMessage
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t MapID; // 0x8
        int32_t TotalWeight; // 0xc
        struct TArray<struct FMapLoosePoint> SortLoosePoints; // 0x10

    };

    struct FMapLoosePoint : FTableRowBase //ScriptStruct UACommon.MapLoosePoint
    {
    //Children Prop Count (Fields): 9
    public:

        int32_t MapID; // 0x8
        int32_t RuleID; // 0xc
        struct FString PointName; // 0x10
        struct FTransform Root; // 0x20
        enum class ELoosePointType LoosePointType; // 0x50
        struct FString Comments; // 0x58
        struct TArray<struct FTransform> RandomPos; // 0x68
        struct FName LinkLoosePointDetailID; // 0x78
        int32_t Distributed; // 0x80

    };

    struct FLoosePointDetail : FTableRowBase //ScriptStruct UACommon.LoosePointDetail
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t ID; // 0x8
        struct FString desc; // 0x10
        struct TArray<struct FLoosePoint> LoosePoints; // 0x20

    };

    struct FItemCamOffsetOverrideConf : FTableRowBase //ScriptStruct UACommon.ItemCamOffsetOverrideConf
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ItemID; // 0x8
        struct FVector Offset; // 0xc

    };

    struct FItemCornerIconConf : FTableRowBase //ScriptStruct UACommon.ItemCornerIconConf
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString TypeName; // 0x8
        class UPaperSprite* icon; // 0x18

    };

    struct FItemColorConf : FTableRowBase //ScriptStruct UACommon.ItemColorConf
    {
    //Children Prop Count (Fields): 4
    public:

        struct FLinearColor Color; // 0x8
        struct TArray<uint32_t> SupportTypes; // 0x18
        struct TArray<uint32_t> IgnoreTypes; // 0x28
        struct TArray<int32_t> rarity; // 0x38

    };

    struct FMapRuleConfig //ScriptStruct UACommon.MapRuleConfig
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t RuleID; // 0x0
        int32_t MinCount; // 0x4
        int32_t MaxCount; // 0x8

    };

    struct FIniFileBackup //ScriptStruct UACommon.IniFileBackup
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString IniName; // 0x0
        struct TArray<struct FString> ClassesReloaded; // 0x10

    };

    struct FBuglyData //ScriptStruct UACommon.BuglyData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString URL; // 0x0
        struct FString Time; // 0x10

    };

    struct FItemInfoForRand //ScriptStruct UACommon.ItemInfoForRand
    {
    //Children Prop Count (Fields): 2
    public:

        struct TMap<int32_t, int32_t> SuitItemsInfo; // 0x0
        int32_t Weight; // 0x50

    };

    struct FInitInventoryParams //ScriptStruct UACommon.InitInventoryParams
    {
    //Children Prop Count (Fields): 2
    public:

        class USGPlayerItemInfoBase* item; // 0x0
        class AActor* ParentInventory; // 0x8

    };

    struct FSceneCaptureConfig //ScriptStruct UACommon.SceneCaptureConfig
    {
    //Children Prop Count (Fields): 10
    public:

        struct FTransform CameraTransform; // 0x0
        float FOV; // 0x30
        class UTextureRenderTarget2D* TextureTarget; // 0x38
        bool bIsCasual; // 0x40
        struct FString Light_Rifle_Male; // 0x48
        struct FString Light_Pistol_Male; // 0x58
        struct FString Light_Melee_Male; // 0x68
        struct FString Light_Rifle_Female; // 0x78
        struct FString Light_Pistol_Female; // 0x88
        struct FString Light_Melee_Female; // 0x98

    };

    struct FUAFrontEndStageTableRow : FTableRowBase //ScriptStruct UACommon.UAFrontEndStageTableRow
    {
    //Children Prop Count (Fields): 8
    public:

        uint32_t ID; // 0x8
        struct FString SequenceTag; // 0x10
        bool bReversePlay; // 0x20
        struct FString CameraStartFocus; // 0x28
        struct FString CameraEndFocus; // 0x38
        float CameraMoveSpeed; // 0x48
        bool bNeedSfx; // 0x4c
        struct FString Comment; // 0x50

    };

    struct FUAGamePadVisibilityTableRow : FTableRowBase //ScriptStruct UACommon.UAGamePadVisibilityTableRow
    {
    //Children Prop Count (Fields): 10
    public:

        uint32_t ID; // 0x8
        struct FString WidgetName; // 0x10
        uint32_t TutorialActive; // 0x20
        uint32_t RangeActive; // 0x24
        uint32_t NormalActive; // 0x28
        uint32_t DBNOActive; // 0x2c
        uint32_t SpectatingActive; // 0x30
        uint32_t OBActive; // 0x34
        uint32_t OBFreeView; // 0x38
        uint32_t VehicleView; // 0x3c

    };

    struct FUATutorialEventTable : FTableRowBase //ScriptStruct UACommon.UATutorialEventTable
    {
    //Children Prop Count (Fields): 11
    public:

        struct FString EventName; // 0x8
        int32_t MaxTimesInGame; // 0x18
        int32_t MaxTimesInCareer; // 0x1c
        int32_t NotTriggerTimesInCareer; // 0x20
        int32_t CD; // 0x24
        struct FString ExtraParaText1; // 0x28
        int32_t ExtraPara1; // 0x38
        struct FString ExtraParaText2; // 0x40
        int32_t ExtraPara2; // 0x50
        struct FString ExtraParaText3; // 0x58
        int32_t ExtraPara3; // 0x68

    };

    struct FUAAdviseInvPriorityTable : FTableRowBase //ScriptStruct UACommon.UAAdviseInvPriorityTable
    {
    //Children Prop Count (Fields): 12
    public:

        struct FString characterState; // 0x8
        struct FString AdviseInvType1; // 0x18
        struct FString AdviseInvType2; // 0x28
        struct FString AdviseInvType3; // 0x38
        struct FString AdviseInvType4; // 0x48
        struct FString AdviseInvType5; // 0x58
        struct FString AdviseInvType6; // 0x68
        struct FString AdviseInvType7; // 0x78
        struct FString AdviseInvType8; // 0x88
        struct FString AdviseInvType9; // 0x98
        struct FString AdviseInvType10; // 0xa8
        struct FString AdviseInvTypeEnd; // 0xb8

    };

    struct FUAAIUniqueItemInfoTable : FTableRowBase //ScriptStruct UACommon.UAAIUniqueItemInfoTable
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t ItemID; // 0x8

    };

    struct FUAFactionRelationTable : FTableRowBase //ScriptStruct UACommon.UAFactionRelationTable
    {
    //Children Prop Count (Fields): 10
    public:

        enum class EFactionRelationType NormalPMC; // 0x8
        enum class EFactionRelationType NormalScav; // 0x9
        enum class EFactionRelationType PlayerScav; // 0xa
        enum class EFactionRelationType RebelFaction; // 0xb
        enum class EFactionRelationType LakeFaction; // 0xc
        enum class EFactionRelationType GangsterFaction; // 0xd
        enum class EFactionRelationType KurtTeam; // 0xe
        enum class EFactionRelationType NavyFaction; // 0xf
        enum class EFactionRelationType Blackgold; // 0x10
        enum class EFactionRelationType Gnesk; // 0x11

    };

    struct FUAMultiModeWidgetTable : FTableRowBase //ScriptStruct UACommon.UAMultiModeWidgetTable
    {
    //Children Prop Count (Fields): 7
    public:

        int32_t ID; // 0x8
        struct FText Name; // 0x10
        struct FString sysIds; // 0x28
        bool isShowMode; // 0x38
        int32_t use_ticket; // 0x3c
        int32_t need_take_in_threshold; // 0x40
        int32_t default_avatar_set_id; // 0x44

    };

    struct FUATraceStyleTable : FTableRowBase //ScriptStruct UACommon.UATraceStyleTable
    {
    //Children Prop Count (Fields): 19
    public:

        int32_t StyleID; // 0x8
        struct FString Annotation; // 0x10
        struct FSoftClassProperty TemplateUMG_Resource; // 0x20
        int32_t ZOrder; // 0x48
        float EffectDistance; // 0x4c
        float OpacityOnVisible; // 0x50
        float OpacityOnInvisible; // 0x54
        struct FSlateColor Image_Circle_Color_Normal; // 0x58
        struct FSlateColor Image_Circle_Color_Teamate; // 0x80
        struct FSlateColor Image_Circle_Color_Enemy; // 0xa8
        struct FString Image_BG_Path; // 0xd0
        struct FSlateColor Image_BG_Color_Normal; // 0xe0
        struct FSlateColor Image_BG_Color_Teamate; // 0x108
        struct FSlateColor Image_BG_Color_Enemy; // 0x130
        struct FString Image_Icon_Path; // 0x158
        struct FSlateColor Image_Icon_Color_Normal; // 0x168
        struct FSlateColor Image_Icon_Color_Teamate; // 0x190
        struct FSlateColor Image_Icon_Color_Enemy; // 0x1b8
        struct TArray<struct FString> Params; // 0x1e0

    };

    struct FUANewTraceStyleTable : FTableRowBase //ScriptStruct UACommon.UANewTraceStyleTable
    {
    //Children Prop Count (Fields): 7
    public:

        struct FString Annotation; // 0x8
        struct FSlateColor Color; // 0x18
        struct FSoftObjectPath MarkIconResource; // 0x40
        struct FSoftObjectPath BackgroundResource; // 0x58
        struct FUATraceSceneStyleParams SceneStyleParams; // 0x70
        struct FUATraceNewMapStyleParams NewMapStyleParams; // 0xa8
        struct FUATraceDirectionalBarStyleParams DirectionalBarStyleParams; // 0x108

    };

    struct FUATraceDirectionalBarStyleParams //ScriptStruct UACommon.UATraceDirectionalBarStyleParams
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString HighlightAniName; // 0x0
        int32_t AniLoopTimes; // 0x10
        struct TArray<struct FString> Params; // 0x18

    };

    struct FUATraceNewMapStyleParams //ScriptStruct UACommon.UATraceNewMapStyleParams
    {
    //Children Prop Count (Fields): 8
    public:

        struct FSoftClassProperty UMGType; // 0x0
        int32_t ZOrder; // 0x28
        bool HighLightMapIcon; // 0x2c
        bool bShowArea; // 0x2d
        float DisplayAnimationInterval; // 0x30
        struct FString HighlightAniName; // 0x38
        int32_t AniLoopTimes; // 0x48
        struct TArray<struct FString> Params; // 0x50

    };

    struct FUATraceSceneStyleParams //ScriptStruct UACommon.UATraceSceneStyleParams
    {
    //Children Prop Count (Fields): 7
    public:

        float OpactiyInVision; // 0x0
        float OpactiyNotInVision; // 0x4
        float OpacityOutofDistance; // 0x8
        float ShortShowDistance; // 0xc
        struct FString HighlightAniName; // 0x10
        int32_t AniLoopTimes; // 0x20
        struct TArray<struct FString> Params; // 0x28

    };

    struct FUANewTraceRuleTable : FTableRowBase //ScriptStruct UACommon.UANewTraceRuleTable
    {
    //Children Prop Count (Fields): 4
    public:

        enum class ENewTraceSyncRule SyncRule; // 0x8
        struct FUATraceSceneRuleParams SceneRuleParams; // 0xc
        struct FUATraceNewMapRuleParams NewMapRuleParams; // 0x18
        struct FUATraceDirectionalBarRuleParams DirectionalBarRuleParams; // 0x24

    };

    struct FUATraceDirectionalBarRuleParams //ScriptStruct UACommon.UATraceDirectionalBarRuleParams
    {
    //Children Prop Count (Fields): 3
    public:

        bool bCanShow; // 0x0
        float ShowDistance; // 0x4
        float DrawInverval; // 0x8

    };

    struct FUATraceNewMapRuleParams //ScriptStruct UACommon.UATraceNewMapRuleParams
    {
    //Children Prop Count (Fields): 3
    public:

        bool bCanShow; // 0x0
        float ShowDistance; // 0x4
        float DrawInverval; // 0x8

    };

    struct FUATraceSceneRuleParams //ScriptStruct UACommon.UATraceSceneRuleParams
    {
    //Children Prop Count (Fields): 4
    public:

        bool bCanShow; // 0x0
        bool bActiveCanShow; // 0x1
        float ShowDistance; // 0x4
        float DrawInverval; // 0x8

    };

    struct FUANewTraceConfigTable : FTableRowBase //ScriptStruct UACommon.UANewTraceConfigTable
    {
    //Children Prop Count (Fields): 10
    public:

        enum class ENewTraceableMarkType MarkType; // 0x8
        struct FString TraceRuleRowName; // 0x10
        int32_t TraceStyleID; // 0x20
        float DataSyncInverval; // 0x24
        bool CanInteract; // 0x28
        bool bAutoSelected; // 0x29
        struct FText TraceTitle; // 0x30
        struct FText TraceDesc; // 0x48
        struct FText TargetTitle; // 0x60
        struct FText TargetDesc; // 0x78

    };

    struct FUATraceTargetTable : FTableRowBase //ScriptStruct UACommon.UATraceTargetTable
    {
    //Children Prop Count (Fields): 10
    public:

        int32_t TargetId; // 0x8
        struct FText TargetTitle; // 0x10
        struct FText TargetDesc; // 0x28
        bool bShowTrace; // 0x40
        bool bIsClick; // 0x41
        bool bIsAutoSelect; // 0x42
        struct FText TraceTitle; // 0x48
        struct FText TraceDesc; // 0x60
        struct FString AnimName; // 0x78
        int32_t StyleID; // 0x88

    };

    struct FUALootDataInfosTable : FTableRowBase //ScriptStruct UACommon.UALootDataInfosTable
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t LootDataInfoID; // 0x8
        struct FString Description; // 0x10
        int32_t LootPointType; // 0x20
        class UPaperSprite* LootPointIcon; // 0x28

    };

    struct FUABrilliantTimeReplayTableRow : FTableRowBase //ScriptStruct UACommon.UABrilliantTimeReplayTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t typeId; // 0x8
        int32_t MapID; // 0xc
        struct TSoftObjectPtr<UMFMissionFlow> MissionFlow; // 0x10
        int32_t MinCountToSubmit; // 0x38
        bool NeedEscapeAliveToSubmit; // 0x3c

    };

    struct FUASubTitleTextTable : FTableRowBase //ScriptStruct UACommon.UASubTitleTextTable
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t TextMessageId; // 0x8
        struct FText Text; // 0x10
        int32_t GameHUDTypeID; // 0x28

    };

    struct FUASubTitleVOTable : FTableRowBase //ScriptStruct UACommon.UASubTitleVOTable
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t Messageid; // 0x8
        struct FString SoundResource; // 0x10
        int32_t TextMessageId; // 0x20
        struct FName SoundType; // 0x24

    };

    struct FItemConfTableRowBPProxy : FTableRowBase //ScriptStruct UACommon.ItemConfTableRowBPProxy
    {
    //Children Prop Count (Fields): 25
    public:

        int32_t ItemID; // 0x8
        struct FString Name; // 0x10
        struct FString ShortName; // 0x20
        uint32_t IconId; // 0x30
        struct FString Describe; // 0x38
        int32_t SizeX; // 0x48
        int32_t SizeY; // 0x4c
        float Weight; // 0x50
        struct FString pickup_sound; // 0x58
        struct FString use_sound; // 0x68
        struct FString drop_sound; // 0x78
        int32_t sell_price; // 0x88
        uint32_t can_sell; // 0x8c
        int32_t standard_price; // 0x90
        uint32_t StackMax; // 0x94
        uint32_t not_discard; // 0x98
        uint32_t Bind; // 0x9c
        uint32_t rarity; // 0xa0
        uint32_t Durability; // 0xa4
        uint32_t UseExp; // 0xa8
        int32_t LootExp; // 0xac
        struct TArray<char> RejectSlot; // 0xb0
        uint32_t sort; // 0xc0
        uint32_t jump_goto; // 0xc4
        uint32_t RarityColorIndex; // 0xc8

    };

    struct FLootDropTableRowBPProxy : FTableRowBase //ScriptStruct UACommon.LootDropTableRowBPProxy
    {
    //Children Prop Count (Fields): 15
    public:

        int64_t ID; // 0x8
        struct FString desc; // 0x10
        char ItemType; // 0x20
        int64_t ItemID; // 0x28
        struct TArray<int32_t> ItemNum; // 0x30
        struct TArray<int64_t> SubItemTable; // 0x40
        int32_t Weight; // 0x50
        float Percent; // 0x54
        float RandTimes; // 0x58
        char OperationType; // 0x5c
        char IsPermanent; // 0x5d
        uint32_t ActID; // 0x60
        struct TArray<uint64_t> LootPointWhite; // 0x68
        struct TArray<uint64_t> LootPointBlack; // 0x78
        struct FString Describe; // 0x88

    };

    struct FMapDetailTableRowBPProxy : FTableRowBase //ScriptStruct UACommon.MapDetailTableRowBPProxy
    {
    //Children Prop Count (Fields): 10
    public:

        int32_t ID; // 0x8
        struct FString map_level; // 0x10
        struct FString mobile_map_level; // 0x20
        struct FString Name; // 0x30
        struct FString level_path; // 0x40
        struct FString Picture; // 0x50
        struct FString desc; // 0x60
        struct FVector2D MapSize; // 0x70
        struct TArray<struct FVector2D> SampleScenePoints; // 0x78
        struct TArray<struct FVector2D> SampleMapPoints; // 0x88

    };

    struct FUACaptureTableRow : FTableRowBase //ScriptStruct UACommon.UACaptureTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t ID; // 0x8
        int32_t X; // 0xc
        int32_t Y; // 0x10
        int32_t Z; // 0x14

    };

    struct FUAEscapeInteractTextTable : FTableRowBase //ScriptStruct UACommon.UAEscapeInteractTextTable
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t EscapeInteractID; // 0x8
        struct FText InteractText; // 0x10

    };

    struct FUAPlayerEscapeShowRow : FTableRowBase //ScriptStruct UACommon.UAPlayerEscapeShowRow
    {
    //Children Prop Count (Fields): 5
    public:

        bool enable; // 0x8
        int32_t EscapePointID; // 0xc
        int32_t MaxPlayerNum; // 0x10
        float PlayTime; // 0x14
        struct TArray<class APlayerController*> PCArr; // 0x18

    };

    struct FUAEscapeTextTableRow : FTableRowBase //ScriptStruct UACommon.UAEscapeTextTableRow
    {
    //Children Prop Count (Fields): 15
    public:

        int32_t EscapePointID; // 0x8
        struct FText EscapeName; // 0x10
        struct FText ConditionDescription; // 0x28
        struct FText ConditionDescShort; // 0x40
        struct FText ConditionPassText; // 0x58
        struct FText EscapeDescription; // 0x70
        struct FText RemainTimeText; // 0x88
        struct FText AlreadyFailText; // 0xa0
        int32_t EscapeReportID; // 0xb8
        struct FText PersonHitContent; // 0xc0
        struct FText GlobalHitContent; // 0xd8
        struct FText GlobalCloseHitContent; // 0xf0
        struct FVector Location; // 0x108
        struct FText GlobalLeftTimeHitContent_OpenEscape; // 0x118
        struct FText GlobalLeftTimeHitContent_CloseEscape; // 0x130

    };

    struct FPanelLayerTableRow : FTableRowBase //ScriptStruct UACommon.PanelLayerTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString LayerName; // 0x8
        uint32_t StartZOrder; // 0x18

    };

    struct FPanelConfTableRow : FTableRowBase //ScriptStruct UACommon.PanelConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        struct FString Name; // 0x8
        struct FString OwnerModule; // 0x18
        struct FString AssetMobileName; // 0x28
        struct FString LayerName; // 0x38
        struct TArray<struct FString> OwnerPanel; // 0x48

    };

    struct FServiceConfTableRow : FTableRowBase //ScriptStruct UACommon.ServiceConfTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        struct FString Name; // 0x8
        struct FString InitContext; // 0x18
        struct FString ResetContext; // 0x28
        struct FString desc; // 0x38
        struct FString ServiceType; // 0x48

    };

    struct FModuleContextConfTableRow : FTableRowBase //ScriptStruct UACommon.ModuleContextConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString Name; // 0x8
        struct FString LevelPath; // 0x18
        struct FString desc; // 0x28

    };

    struct FModuleConfTableRow : FTableRowBase //ScriptStruct UACommon.ModuleConfTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString Name; // 0x8
        struct FString Context; // 0x18
        struct FString desc; // 0x28

    };

    struct FUAGameBigMapModuleModeTable : FTableRowBase //ScriptStruct UACommon.UAGameBigMapModuleModeTable
    {
    //Children Prop Count (Fields): 5
    public:

        struct FSoftClassProperty BigMapModule; // 0x8
        struct FText DisplayName; // 0x30
        bool enable; // 0x48
        bool Switchable; // 0x49
        bool DefaultState; // 0x4a

    };

    struct FUAGameLandmarkTable : FTableRowBase //ScriptStruct UACommon.UAGameLandmarkTable
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t MapID; // 0x8
        int32_t LandMarkId; // 0xc
        struct FText LandMarkName; // 0x10
        struct FVector2D WorldLocation; // 0x28

    };

    struct FUAGameBigMapEffectTable : FTableRowBase //ScriptStruct UACommon.UAGameBigMapEffectTable
    {
    //Children Prop Count (Fields): 10
    public:

        int32_t Messageid; // 0x8
        int32_t MapID; // 0xc
        int32_t LandMarkId; // 0x10
        struct FSoftClassProperty TemplateUMG_Resource; // 0x18
        float StartAtScale; // 0x40
        float EndAtScale; // 0x44
        bool ShowAtInit; // 0x48
        bool DynamicSize; // 0x49
        int32_t InitSize; // 0x4c
        struct TArray<int32_t> AreaIDs; // 0x50

    };

    struct FUALootPointInfo : FTableRowBase //ScriptStruct UACommon.UALootPointInfo
    {
    //Children Prop Count (Fields): 8
    public:

        int32_t MapID; // 0x8
        int32_t LootPointID; // 0xc
        struct FVector Location; // 0x10
        struct FText AreaName; // 0x20
        int32_t AreaID; // 0x38
        struct FString LevelPath; // 0x40
        int32_t LootPointType; // 0x50
        int32_t InBigMapAreaID; // 0x54

    };

    struct FUABattleQuickChat : FTableRowBase //ScriptStruct UACommon.UABattleQuickChat
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t Messageid; // 0x8
        struct FString ChatType; // 0x10
        struct FText ListName; // 0x20
        struct FText ChatContent; // 0x38
        struct FText ChatSound; // 0x50

    };

    struct FUAGamePadMessageTable : FTableRowBase //ScriptStruct UACommon.UAGamePadMessageTable
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t Messageid; // 0x8
        enum class EUAGamePadTable GamePadWidgets; // 0xc
        bool GamePadWidgetVisibility; // 0xd
        enum class EGamePadEffectTable GamePadEffectWidgets; // 0xe
        bool GamePadEffectWidgetVisibility; // 0xf

    };

    struct FUAGameHUDTable : FTableRowBase //ScriptStruct UACommon.UAGameHUDTable
    {
    //Children Prop Count (Fields): 11
    public:

        int32_t Messageid; // 0x8
        struct FSoftClassProperty TemplateUMG_Resource; // 0x10
        enum class EUAHUDPreInstallLoc Location_Type; // 0x38
        struct TSoftObjectPtr<UObject> BackGround_Img; // 0x40
        struct TSoftObjectPtr<UObject> Content_Img; // 0x68
        bool bUseContent_Img_Color; // 0x90
        struct FSlateColor Content_Img_Color; // 0x98
        struct FText Normal_Text; // 0xc0
        int32_t RemainTime; // 0xd8
        bool bWaitWidgetFinish; // 0xdc
        class UAkAudioEvent* AudioEvent; // 0xe0

    };

    struct FUATaskTypeTable : FTableRowBase //ScriptStruct UACommon.UATaskTypeTable
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t Type; // 0x8
        struct FText TypeDesc; // 0x10
        struct FString iconPath; // 0x28

    };

    struct FUABattleEventTable : FTableRowBase //ScriptStruct UACommon.UABattleEventTable
    {
    //Children Prop Count (Fields): 17
    public:

        struct FString Describe; // 0x8
        bool Enabled; // 0x18
        enum class EUAStatisMethod StatisMethod; // 0x19
        bool ExcludeSameTeam; // 0x1a
        struct TArray<struct FUAStatisParamInfo> Params; // 0x20
        int32_t MaxTimesInSecond; // 0x30
        int32_t CutGroup; // 0x34
        bool ShouldCombine; // 0x38
        int32_t Weight; // 0x3c
        float CutTrendArgsOnConstant; // 0x40
        struct TArray<struct FUACutTrendArgs> CutTrendArgsOnDistance; // 0x48
        struct TArray<struct FUACutTrendArgs> CutTrendArgsOnDeltaTime; // 0x58
        struct TArray<struct FUACutTrendArgs> CutTrendArgsOnEventValue; // 0x68
        struct FString DescribeWord; // 0x78
        struct TArray<struct FUADescribeWordArgs> DescribeWordArgsList; // 0x88
        struct FString CombinedDescribeWord; // 0x98
        struct TArray<struct FUADescribeWordArgs> CombinedDescribeWordArgsList; // 0xa8

    };

    struct FUADescribeWordArgs : FTableRowBase //ScriptStruct UACommon.UADescribeWordArgs
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString arg; // 0x8
        enum class EUAArgResolveMethod ResolveMethod; // 0x18

    };

    struct FUACutTrendArgs : FTableRowBase //ScriptStruct UACommon.UACutTrendArgs
    {
    //Children Prop Count (Fields): 3
    public:

        float A; // 0x8
        float B; // 0xc
        float N; // 0x10

    };

    struct FUAStatisParamInfo : FTableRowBase //ScriptStruct UACommon.UAStatisParamInfo
    {
    //Children Prop Count (Fields): 5
    public:

        enum class EUAStatisParamFilterType CompareType; // 0x8
        int64_t CompareValue; // 0x10
        int64_t CompareValueExt; // 0x18
        bool Detail; // 0x20
        struct TArray<int64_t> ValueList; // 0x28

    };

    struct FUAStatisTable : FTableRowBase //ScriptStruct UACommon.UAStatisTable
    {
    //Children Prop Count (Fields): 8
    public:

        struct FText Describe; // 0x8
        enum class EUAStatisMethod StatisMethod; // 0x20
        bool ExcludeSameTeam; // 0x21
        bool ExcludeSameInst; // 0x22
        bool RecordEvent; // 0x23
        struct TArray<struct FUAStatisParamInfo> Params; // 0x28
        int32_t EventCount; // 0x38
        struct FSoftClassPath ExpCaculator; // 0x40

    };

    struct FUAServiceTable : FTableRowBase //ScriptStruct UACommon.UAServiceTable
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString InitContext; // 0x8
        struct FString ResetContext; // 0x18

    };

    struct FUAModuleTable : FTableRowBase //ScriptStruct UACommon.UAModuleTable
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Context; // 0x8
        struct FString DefaultPanel; // 0x18

    };

    struct FUAModuleContextTable : FTableRowBase //ScriptStruct UACommon.UAModuleContextTable
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Name; // 0x8
        struct FString LevelPath; // 0x18

    };

    struct FUAGachaMapTable : FTableRowBase //ScriptStruct UACommon.UAGachaMapTable
    {
    //Children Prop Count (Fields): 4
    public:

        uint64_t ItemID; // 0x8
        uint32_t WeaponId; // 0x10
        uint32_t Num; // 0x14
        uint32_t Weight; // 0x18

    };

    struct FUAVestBagGridTable : FTableRowBase //ScriptStruct UACommon.UAVestBagGridTable
    {
    //Children Prop Count (Fields): 62
    public:

        struct FString Name; // 0x8
        uint32_t Seperated; // 0x18
        uint32_t SizeX_2; // 0x1c
        uint32_t SizeY_2; // 0x20
        float PosX_2; // 0x24
        float PosY_2; // 0x28
        uint32_t SizeX_3; // 0x2c
        uint32_t SizeY_3; // 0x30
        float PosX_3; // 0x34
        float PosY_3; // 0x38
        uint32_t SizeX_4; // 0x3c
        uint32_t SizeY_4; // 0x40
        float PosX_4; // 0x44
        float PosY_4; // 0x48
        uint32_t SizeX_5; // 0x4c
        uint32_t SizeY_5; // 0x50
        float PosX_5; // 0x54
        float PosY_5; // 0x58
        uint32_t SizeX_6; // 0x5c
        uint32_t SizeY_6; // 0x60
        float PosX_6; // 0x64
        float PosY_6; // 0x68
        uint32_t SizeX_7; // 0x6c
        uint32_t SizeY_7; // 0x70
        float PosX_7; // 0x74
        float PosY_7; // 0x78
        uint32_t SizeX_8; // 0x7c
        uint32_t SizeY_8; // 0x80
        float PosX_8; // 0x84
        float PosY_8; // 0x88
        uint32_t SizeX_9; // 0x8c
        uint32_t SizeY_9; // 0x90
        float PosX_9; // 0x94
        float PosY_9; // 0x98
        uint32_t SizeX_10; // 0x9c
        uint32_t SizeY_10; // 0xa0
        float PosX_10; // 0xa4
        float PosY_10; // 0xa8
        uint32_t SizeX_11; // 0xac
        uint32_t SizeY_11; // 0xb0
        float PosX_11; // 0xb4
        float PosY_11; // 0xb8
        uint32_t SizeX_12; // 0xbc
        uint32_t SizeY_12; // 0xc0
        float PosX_12; // 0xc4
        float PosY_12; // 0xc8
        uint32_t SizeX_13; // 0xcc
        uint32_t SizeY_13; // 0xd0
        float PosX_13; // 0xd4
        float PosY_13; // 0xd8
        uint32_t SizeX_14; // 0xdc
        uint32_t SizeY_14; // 0xe0
        float PosX_14; // 0xe4
        float PosY_14; // 0xe8
        uint32_t SizeX_15; // 0xec
        uint32_t SizeY_15; // 0xf0
        float PosX_15; // 0xf4
        float PosY_15; // 0xf8
        uint32_t SizeX_16; // 0xfc
        uint32_t SizeY_16; // 0x100
        float PosX_16; // 0x104
        float PosY_16; // 0x108

    };

    struct FUABattleMapTable : FTableRowBase //ScriptStruct UACommon.UABattleMapTable
    {
    //Children Prop Count (Fields): 19
    public:

        struct FString MapLevel; // 0x8
        struct FString MobileMapLevel; // 0x18
        uint32_t ShowIndex; // 0x28
        struct FString Name; // 0x30
        struct FString Picture; // 0x40
        struct FString desc; // 0x50
        uint32_t Time; // 0x60
        uint32_t DayStartTime; // 0x64
        uint32_t MinPMC; // 0x68
        uint32_t MaxPMC; // 0x6c
        uint32_t IsScavJoin; // 0x70
        uint32_t ScavJoinTimeBegin; // 0x74
        uint32_t ScavJoinTimeEnd; // 0x78
        uint32_t NormalBeginTime; // 0x7c
        uint32_t NormalBeginPersonNum; // 0x80
        uint32_t LongTimeBeginTime; // 0x84
        uint32_t LongTimeBeginPersonNum; // 0x88
        uint32_t TimeoutTime; // 0x8c
        uint32_t SpawnAIPersonNum; // 0x90

    };

    struct FUAGlobalNumTable : FTableRowBase //ScriptStruct UACommon.UAGlobalNumTable
    {
    //Children Prop Count (Fields): 2
    public:

        struct FText Name; // 0x8
        float Val; // 0x20

    };

    struct FUABattleresultTable : FTableRowBase //ScriptStruct UACommon.UABattleresultTable
    {
    //Children Prop Count (Fields): 4
    public:

        uint32_t dataid; // 0x8
        uint32_t AttributeType; // 0xc
        uint32_t Proportion; // 0x10
        struct FString Describe; // 0x18

    };

    struct FUAItemContextMenuTable : FTableRowBase //ScriptStruct UACommon.UAItemContextMenuTable
    {
    //Children Prop Count (Fields): 4
    public:

        struct FText DisplayName; // 0x8
        uint32_t DisplayIconID; // 0x20
        uint32_t ShowIndex; // 0x24
        struct FString UseTip; // 0x28

    };

    struct FTextLocalizationPatch //ScriptStruct UACommon.TextLocalizationPatch
    {
    //Children Prop Count (Fields): 5
    public:

        struct FString NativeCulture; // 0x0
        struct FString Namespace; // 0x10
        struct FString Key; // 0x20
        struct FString NativeString; // 0x30
        struct TMap<struct FString, struct FString> LocalizedStrings; // 0x40

    };

    struct FUAModeActivityMissionTable : FModeTableRowBase //ScriptStruct UACommon.UAModeActivityMissionTable
    {
    //Children Prop Count (Fields): 1
    public:

        struct TMap<int32_t, struct FActivityMissionConfig> ActivityMissionMap; // 0x20

    };

    struct FActivityMissionConfig //ScriptStruct UACommon.ActivityMissionConfig
    {
    //Children Prop Count (Fields): 6
    public:

        struct FActivityResidentMissionConfig ResidentMission; // 0x0
        struct FActivityRandomMissionConfig RandomMission; // 0x10
        int32_t MaxActivityTaskNum; // 0x28
        bool bCloseDynamicMission; // 0x2c
        bool bCloseOtherActivities; // 0x2d
        struct TArray<int32_t> CloseOtherActivityIDs; // 0x30

    };

    struct FActivityRandomMissionConfig //ScriptStruct UACommon.ActivityRandomMissionConfig
    {
    //Children Prop Count (Fields): 3
    public:

        float Probability; // 0x0
        int32_t RandomTimes; // 0x4
        struct TArray<struct FMissionClassWeightConfig> MissionList; // 0x8

    };

    struct FMissionClassWeightConfig //ScriptStruct UACommon.MissionClassWeightConfig
    {
    //Children Prop Count (Fields): 2
    public:

        struct TSoftObjectPtr<UMFMissionFlow> MissionFlowAsset; // 0x0
        int32_t Weight; // 0x28

    };

    struct FActivityResidentMissionConfig //ScriptStruct UACommon.ActivityResidentMissionConfig
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FMissionClassProbabilityConfig> MissionList; // 0x0

    };

    struct FMissionClassProbabilityConfig //ScriptStruct UACommon.MissionClassProbabilityConfig
    {
    //Children Prop Count (Fields): 3
    public:

        struct TSoftObjectPtr<UMFMissionFlow> MissionFlowAsset; // 0x0
        float Probability; // 0x28
        bool bIgnoreActivitiy; // 0x2c

    };

    struct FUAModeDynamicMissionTable : FModeTableRowBase //ScriptStruct UACommon.UAModeDynamicMissionTable
    {
    //Children Prop Count (Fields): 4
    public:

        struct FString LevelName; // 0x20
        struct FDynamicResidentMissionConfig ResidentMission; // 0x30
        struct FDynamicRandomMissionConfig RandomMission; // 0x40
        int32_t MaxDynamicTaskNum; // 0x58

    };

    struct FDynamicRandomMissionConfig //ScriptStruct UACommon.DynamicRandomMissionConfig
    {
    //Children Prop Count (Fields): 3
    public:

        float Probability; // 0x0
        int32_t RandomTimes; // 0x4
        struct TArray<struct FMissionClassWeightConfig> MissionList; // 0x8

    };

    struct FDynamicResidentMissionConfig //ScriptStruct UACommon.DynamicResidentMissionConfig
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FMissionClassProbabilityConfig> MissionList; // 0x0

    };

    struct FUAModeQuestDistributerConfigTable : FModeTableRowBase //ScriptStruct UACommon.UAModeQuestDistributerConfigTable
    {
    //Children Prop Count (Fields): 6
    public:

        float LoadDistributerProbability; // 0x20
        struct TArray<struct FQuestDistributerClassWithWeight> NeedLoadQuestDistributer; // 0x28
        int32_t RandomTimes; // 0x38
        float ActivityLoadDistributerProbability; // 0x3c
        struct TMap<int32_t, struct FActivityQuestDistributer> ActivityNeedLoadQuestDistributer; // 0x40
        int32_t ActivityRandomTimes; // 0x90

    };

    struct FActivityQuestDistributer //ScriptStruct UACommon.ActivityQuestDistributer
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FQuestDistributerClassWithWeight> ActivityQuestDistributers; // 0x0

    };

    struct FQuestDistributerClassWithWeight //ScriptStruct UACommon.QuestDistributerClassWithWeight
    {
    //Children Prop Count (Fields): 2
    public:

        struct FSoftClassProperty QuestDistributerClass; // 0x0
        int32_t Weight; // 0x28

    };

    struct FUAModeBigMapModuleConfigTable : FModeTableRowBase //ScriptStruct UACommon.UAModeBigMapModuleConfigTable
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FSoftClassProperty> AdditionModules; // 0x20
        struct TArray<struct FSoftClassProperty> RemoveModules; // 0x30

    };

    struct FUAScriptLevelTable : FModeTableRowBase //ScriptStruct UACommon.UAScriptLevelTable
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FString> ScriptMaps; // 0x20
        struct TArray<struct FString> AdditionIgnores; // 0x30

    };

    struct FUAModeLootConfigTable : FModeTableRowBase //ScriptStruct UACommon.UAModeLootConfigTable
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t LootID; // 0x20
        struct TSoftObjectPtr<UDataTable> LootDropSubTable; // 0x28
        struct TArray<struct FString> LootMaps; // 0x50
        float RoughSearchModifyScale; // 0x60
        float DetailSearchModifyScale; // 0x64

    };

    struct FUAModeStartAndEscapeTable : FModeTableRowBase //ScriptStruct UACommon.UAModeStartAndEscapeTable
    {
    //Children Prop Count (Fields): 10
    public:

        struct FString LevelName; // 0x20
        struct TArray<struct FString> AdditionLevelName; // 0x30
        struct TArray<struct FUAPlayerStartGroupData> PlayerStart; // 0x40
        struct TArray<struct FUAAIStartGroupData> AIStartAddition; // 0x50
        struct TMap<struct FString, struct FEscapePreset> EscapePresetMap; // 0x60
        struct TMap<int32_t, struct FEscapeProbabilityReset> EscapeProbabilityResetMap; // 0xb0
        float PMCCheckRadius; // 0x100
        float EnemyCheckRadius; // 0x104
        float SecondEnemyCheckRadius; // 0x108
        float TeamCheckRadius; // 0x10c

    };

    struct FEscapeProbabilityReset //ScriptStruct UACommon.EscapeProbabilityReset
    {
    //Children Prop Count (Fields): 2
    public:

        float OpenProbability; // 0x0
        float ShowProbability; // 0x4

    };

    struct FEscapePreset //ScriptStruct UACommon.EscapePreset
    {
    //Children Prop Count (Fields): 6
    public:

        int32_t PresetIndex; // 0x0
        struct TArray<int32_t> ConstantEscapePointIDs; // 0x8
        int32_t ConstantNum; // 0x18
        struct TArray<int32_t> RandomEscapePointIDs; // 0x20
        int32_t RandomNum; // 0x30
        struct TArray<struct FUAEscapeRandomStruct> RandomArr; // 0x38

    };

    struct FUAEscapeRandomStruct //ScriptStruct UACommon.UAEscapeRandomStruct
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FUAEscapeRandomWeightStruct> EscapePointIDs; // 0x0
        int32_t RandomNum; // 0x10

    };

    struct FUAEscapeRandomWeightStruct //ScriptStruct UACommon.UAEscapeRandomWeightStruct
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t EscapePointID; // 0x0
        int32_t Weight; // 0x4

    };

    struct FUAAIStartGroupData //ScriptStruct UACommon.UAAIStartGroupData
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t GroupIndex; // 0x0
        enum class EPlayerTeamType StartPointType; // 0x4

    };

    struct FUAPlayerStartGroupData //ScriptStruct UACommon.UAPlayerStartGroupData
    {
    //Children Prop Count (Fields): 9
    public:

        int32_t GroupIndex; // 0x0
        enum class EPlayerTeamType StartPointType; // 0x4
        int32_t BigGroup; // 0x8
        int32_t SecondGroup; // 0xc
        int32_t Priority; // 0x10
        int32_t Weight; // 0x14
        struct FString EscapePreset; // 0x18
        int32_t ExclusiveGroup; // 0x28
        int32_t ExclusiveGroupWeight; // 0x2c

    };

    struct FUAGameModeTableRow : FTableRowBase //ScriptStruct UACommon.UAGameModeTableRow
    {
    //Children Prop Count (Fields): 7
    public:

        uint32_t Index; // 0x8
        uint32_t MainModeID; // 0xc
        struct FText MainModeName; // 0x10
        uint32_t SubModeID; // 0x28
        struct FText SubModeName; // 0x30
        struct FSoftClassProperty GameModeClass; // 0x48
        struct FSoftClassProperty GameStateClass; // 0x70

    };

    struct FPanelProfilerStack //ScriptStruct UACommon.PanelProfilerStack
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<double> theStack; // 0x0

    };

    struct FAchievementList //ScriptStruct UAGame.AchievementList
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FAchievementData> Achievements; // 0x0

    };

    struct FAchievementData //ScriptStruct UAGame.AchievementData
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t AchievementID; // 0x0
        int32_t Progress; // 0x4

    };

    struct FAchievementDistributerTableRow : FTableRowBase //ScriptStruct UAGame.AchievementDistributerTableRow
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t AchievementID; // 0x8
        bool bSubAchievement; // 0xc
        struct FSoftClassProperty QuestDistributerClass; // 0x10

    };

    struct FBigMapAreaTextureInfo //ScriptStruct UAGame.BigMapAreaTextureInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t AreaID; // 0x0
        class UTexture2D* MapTexture; // 0x8

    };

    struct FAIAimingTarget //ScriptStruct UAGame.AIAimingTarget
    {
    public:


    };

    struct FDefaultOperationSettingTable : FTableRowBase //ScriptStruct UAGame.DefaultOperationSettingTable
    {
    //Children Prop Count (Fields): 6
    public:

        struct FName ActionName; // 0x8
        enum class EOperationKeyType KeyType; // 0x10
        struct FInputChord KeyChord; // 0x18
        enum class EOperationKeyStyle KeyStyle; // 0x38
        struct TArray<enum class EOperationInputType> EffectiveTarget; // 0x40
        float Scale; // 0x50

    };

    struct FDefaultSettingTable : FTableRowBase //ScriptStruct UAGame.DefaultSettingTable
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName SettingName; // 0x8
        float DefaultValue; // 0x10

    };

    struct FMessageIDInfo //ScriptStruct UAGame.MessageIDInfo
    {
    //Children Prop Count (Fields): 1
    public:

        struct TMap<struct FGameplayTag, struct FString> BlockTagLocationKey; // 0x0

    };

    struct FActionDefine //ScriptStruct UAGame.ActionDefine
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<enum class EActionContext> EnabledContext; // 0x0

    };

    struct FSubContextGroup //ScriptStruct UAGame.SubContextGroup
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<enum class EActionContext> SubContext; // 0x0

    };

    struct FActionContext //ScriptStruct UAGame.ActionContext
    {
    public:


    };

    struct FMFMissionVariableRead_ActorReference : FMFMissionVariableReadBase //ScriptStruct UAGame.MFMissionVariableRead_ActorReference
    {
    //Children Prop Count (Fields): 1
    public:

        struct FMissionActorReference ConfigValue; // 0x28

    };

    struct FQuestActionSpawnInventoryInfo //ScriptStruct UAGame.QuestActionSpawnInventoryInfo
    {
    //Children Prop Count (Fields): 9
    public:

        int64_t SpawnPointID; // 0x0
        int64_t ItemID; // 0x8
        int32_t Weight; // 0x10
        int32_t ItemStackCount; // 0x14
        bool bCheckPlacement; // 0x18
        enum class ETraceMarkOperatorType OperatorType; // 0x19
        enum class ETraceableMarkType MarkType; // 0x1a
        float ScanningInterval; // 0x1c
        int32_t ConfigID; // 0x20

    };

    struct FTimeOfDay //ScriptStruct UAGame.TimeOfDay
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t Hour; // 0x0
        int32_t Minute; // 0x4
        int32_t Second; // 0x8

    };

    struct FDistributeQuestHistory //ScriptStruct UAGame.DistributeQuestHistory
    {
    //Children Prop Count (Fields): 4
    public:

        class AMFQuestDistributerBase* QuestDistributer; // 0x0
        enum class ECharacterType TriggerCharacterType; // 0x8
        int32_t TriggerCharacterLevel; // 0xc
        int32_t GraphID; // 0x10

    };

    struct FActivateLootPointConfigs //ScriptStruct UAGame.ActivateLootPointConfigs
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<int32_t> ForceActivateLootPoints; // 0x0
        struct TArray<struct FActivateLootPointConfig> ActivateConfigs; // 0x10

    };

    struct FActivateLootPointConfig //ScriptStruct UAGame.ActivateLootPointConfig
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t LootPointType; // 0x0
        int32_t ActivateMinCount; // 0x4
        int32_t ActivateMaxCount; // 0x8

    };

    struct FRandomQuestTableRow : FTableRowBase //ScriptStruct UAGame.RandomQuestTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t TaskId; // 0x8
        int32_t Weight; // 0xc
        int32_t MinLevel; // 0x10
        int32_t MaxLevel; // 0x14

    };

    struct FGiveItemInfo //ScriptStruct UAGame.GiveItemInfo
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t ItemID; // 0x0
        int32_t MinStackCount; // 0x4
        int32_t MaxStackCount; // 0x8
        class ASGInventory* InventoryClass; // 0x10

    };

    struct FRandomEscapePoint //ScriptStruct UAGame.RandomEscapePoint
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t EscapePointID; // 0x0
        int32_t Weight; // 0x4

    };

    struct FVolumeMarkableInfo //ScriptStruct UAGame.VolumeMarkableInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t VolumeID; // 0x0
        int32_t ConfigID; // 0x4

    };

    struct FInventoryMarkableInfo //ScriptStruct UAGame.InventoryMarkableInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t ItemID; // 0x0
        int32_t ConfigID; // 0x4

    };

    struct FAICharacterMarkableInfo //ScriptStruct UAGame.AICharacterMarkableInfo
    {
    //Children Prop Count (Fields): 3
    public:

        int64_t AIID; // 0x0
        enum class ESpawnReason SpawnReason; // 0x8
        int32_t ConfigID; // 0xc

    };

    struct FPylonIDMapTableRow : FTableRowBase //ScriptStruct UAGame.PylonIDMapTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        int64_t Key; // 0x8
        int32_t PylonID; // 0x10

    };

    struct FTriggerSpawnByEventConfig //ScriptStruct UAGame.TriggerSpawnByEventConfig
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t SpawnNum; // 0x0
        struct TArray<struct FTriggerSpawnByEventParams> EventParams; // 0x8

    };

    struct FTriggerSpawnByEventParams //ScriptStruct UAGame.TriggerSpawnByEventParams
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FString> EventStrs; // 0x0
        int32_t Weight; // 0x10

    };

    struct FTriggerSpawnByVolumeConfig //ScriptStruct UAGame.TriggerSpawnByVolumeConfig
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t SpawnNum; // 0x0
        struct TArray<struct FTriggerSpawnByVolumeParams> VolumeParams; // 0x8

    };

    struct FTriggerSpawnByVolumeParams //ScriptStruct UAGame.TriggerSpawnByVolumeParams
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<int32_t> VolumeIDs; // 0x0
        int32_t Weight; // 0x10

    };

    struct FTriggerSpawnByAreaConfig //ScriptStruct UAGame.TriggerSpawnByAreaConfig
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t SpawnNum; // 0x0
        struct TArray<struct FTriggerSpawnByAreaParams> AreaParams; // 0x8

    };

    struct FTriggerSpawnByAreaParams //ScriptStruct UAGame.TriggerSpawnByAreaParams
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t SquadID; // 0x0
        struct TArray<struct FString> SpawnAreas; // 0x8
        int32_t Weight; // 0x18

    };

    struct FQuestEffectSpawnInteractItemInfo //ScriptStruct UAGame.QuestEffectSpawnInteractItemInfo
    {
    //Children Prop Count (Fields): 6
    public:

        int64_t SpawnPointID; // 0x0
        class ASGNetRelevantConfigurableActor* InteractItemClass; // 0x8
        int32_t Weight; // 0x10
        bool bQuestActionRelevantToActors; // 0x14
        class UMFQuestContextSourceBase* TargetContextSource; // 0x18
        struct TArray<enum class ERelatedTargetType> RelatedTargetTypes; // 0x20

    };

    struct FQuestEffectSpawnInventoryInfo //ScriptStruct UAGame.QuestEffectSpawnInventoryInfo
    {
    //Children Prop Count (Fields): 7
    public:

        int64_t SpawnPointID; // 0x0
        class ASGInventory* ContainerClass; // 0x8
        struct TArray<int64_t> ItemIDs; // 0x10
        int32_t Weight; // 0x20
        int32_t ConfigID; // 0x24
        class UMFQuestContextSourceBase* TargetContextSource; // 0x28
        struct TArray<enum class ERelatedTargetType> RelatedTargetTypes; // 0x30

    };

    struct FQuestEffectSpawnPickupInfo //ScriptStruct UAGame.QuestEffectSpawnPickupInfo
    {
    //Children Prop Count (Fields): 6
    public:

        int64_t SpawnPointID; // 0x0
        class ASGPickup* PickupClass; // 0x8
        int32_t Weight; // 0x10
        int32_t ConfigID; // 0x14
        class UMFQuestContextSourceBase* TargetContextSource; // 0x18
        struct TArray<enum class ERelatedTargetType> RelatedTargetTypes; // 0x20

    };

    struct FQuestInventory //ScriptStruct UAGame.QuestInventory
    {
    //Children Prop Count (Fields): 6
    public:

        int32_t TaskId; // 0x0
        int32_t TargetId; // 0x4
        struct TArray<int64_t> ItemIDs; // 0x8
        int32_t BigType; // 0x18
        int64_t MidType; // 0x20
        int64_t subtype; // 0x28

    };

    struct FActQuestTargetTemplateTableRow : FTableRowBase //ScriptStruct UAGame.ActQuestTargetTemplateTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t TargetTypeID; // 0x8
        struct FSoftClassProperty QuestClass; // 0x10

    };

    struct FQuestIDTableRow : FTableRowBase //ScriptStruct UAGame.QuestIDTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t QuestID; // 0x8
        struct FSoftClassProperty QuestClass; // 0x10

    };

    struct FTaskCreateData //ScriptStruct UAGame.TaskCreateData
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t TaskId; // 0x0
        struct TArray<struct FQuestCreateData> QuestArr; // 0x8
        bool CompleteInOneBattle; // 0x18
        int32_t PrevType; // 0x24
        bool IsAct; // 0x28

    };

    struct FQuestCreateData //ScriptStruct UAGame.QuestCreateData
    {
    //Children Prop Count (Fields): 9
    public:

        int32_t TargetId; // 0x0
        int32_t CurrProgress; // 0x4
        int32_t MaxProgress; // 0x8
        struct TArray<int32_t> PreviewTargets; // 0x10
        int32_t NodeType; // 0x20
        int32_t PrevType; // 0x24
        int32_t FailWhenNextFail; // 0x28
        bool IsAct; // 0x2c
        struct TArray<int32_t> ActQuestTemplateParams; // 0x30

    };

    struct FQuestTraceInfo //ScriptStruct UAGame.QuestTraceInfo
    {
    //Children Prop Count (Fields): 12
    public:

        struct TWeakObjectPtr<struct AActor> TraceActor; // 0x0
        enum class EQuestTraceMarkType TraceMarkType; // 0x8
        int32_t Handle; // 0xc
        struct FVector WorldLocation; // 0x10
        struct FVector Extend; // 0x1c
        bool bIsActorDestroyed; // 0x28
        bool bHasOwner; // 0x29
        bool bNeedTrace; // 0x2a
        struct TWeakObjectPtr<struct AQuestBase> OwnerQuest; // 0x2c
        int32_t TaskId; // 0x34
        int32_t TargetId; // 0x38
        int32_t EscapeId; // 0x3c

    };

    struct FRichUMGRow : FTableRowBase //ScriptStruct UAGame.RichUMGRow
    {
    //Children Prop Count (Fields): 1
    public:

        class UCAUserWidget_Decorator* WidgetClass; // 0x8

    };

    struct FSoundContext //ScriptStruct UAGame.SoundContext
    {
    //Children Prop Count (Fields): 6
    public:

        class AActor* SourceActor; // 0x0
        struct FVector SoundLocation; // 0x8
        class USoundWaveWidget* IconWidget; // 0x18
        class UMaterialInterface* MatUpper; // 0x20
        class UMaterialInterface* MatMiddle; // 0x28
        class UMaterialInterface* MatLower; // 0x30

    };

    struct FSGInventorySpawnInfo //ScriptStruct UAGame.SGInventorySpawnInfo
    {
    //Children Prop Count (Fields): 12
    public:

        struct FSoftClassProperty InventoryClass; // 0x0
        bool bIsFullWeapon; // 0x28
        uint64_t LootDropID; // 0x30
        uint64_t LootDropTableItemID; // 0x38
        uint64_t ReallyLootDropTableItemID; // 0x40
        uint32_t Count; // 0x48
        uint32_t SkinID; // 0x4c
        uint32_t ParentItemID; // 0x50
        int32_t SlotIndex; // 0x54
        uint64_t ParentLootDropID; // 0x58
        uint32_t FormActivityID; // 0x70
        uint32_t FormActivityPoolID; // 0x74

    };

    struct FSGLootRandomItemTableRow : FTableRowBase //ScriptStruct UAGame.SGLootRandomItemTableRow
    {
    //Children Prop Count (Fields): 10
    public:

        enum class ELootRandomItemType ItemType; // 0x8
        uint64_t ItemID; // 0x10
        char ItemNum; // 0x18
        class UDataTable* SubItemTable; // 0x20
        int32_t Weight; // 0x28
        float Percent; // 0x2c
        int32_t RandTimes; // 0x30
        enum class ESGLootRandomItemOperation OperationType; // 0x34
        bool IsPermanent; // 0x35
        struct FText Describe; // 0x38

    };

    struct FInvAdvPriortyInfo //ScriptStruct UAGame.InvAdvPriortyInfo
    {
    public:


    };

    struct FInvTypeInfo //ScriptStruct UAGame.InvTypeInfo
    {
    public:


    };

    struct FSpawnAreaBase //ScriptStruct UAGame.SpawnAreaBase
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<class AActor*> SpawnPoints; // 0x0
        struct TArray<class USpawnPointInfo*> SpawnPointInfos; // 0x10

    };

    struct FSpawnArea : FSpawnAreaBase //ScriptStruct UAGame.SpawnArea
    {
    //Children Prop Count (Fields): 10
    public:

        struct TArray<class ASGAIPathNode*> PathNodes; // 0x20
        struct TArray<class AActor*> GuardPoints; // 0x30
        class AVolume* BattleVolume; // 0x40
        struct TArray<struct FString> ExclusiveAreas; // 0x48
        class AActor* MapEffectMarkActor; // 0x58
        class ASGAITriggerVolume* PlayTriggerVolume; // 0x60
        struct TArray<class AActor*> BattleTestStartPoints; // 0x68
        struct TArray<class AVolume*> PatrolNoEntryVolume; // 0x78
        bool bEnableTestData; // 0x88
        struct FAISpawnAreaInfoTableRow AreaData; // 0x90

    };

    struct FSpawnVolume : FSpawnAreaBase //ScriptStruct UAGame.SpawnVolume
    {
    public:


    };

    struct FPathNodeGroupInfo //ScriptStruct UAGame.PathNodeGroupInfo
    {
    //Children Prop Count (Fields): 3
    public:

        class AVolume* BattleVolumes; // 0x0
        struct TArray<class ASGAIPathNode*> PathNodes; // 0x8
        struct TArray<class AActor*> ScavSpawnPoints; // 0x18

    };

    struct FScavInfoForPathNodeGroup //ScriptStruct UAGame.ScavInfoForPathNodeGroup
    {
    //Children Prop Count (Fields): 3
    public:

        class ASGAICharacter* ScavPawn; // 0x0
        struct FString AreaName; // 0x8
        class ASGAIPathNode* CurrentPathNode; // 0x18

    };

    struct FPathArray //ScriptStruct UAGame.PathArray
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class ASGAIPathNode*> PathNodes; // 0x0

    };

    struct FAreaRuntimeDataInSpawnGroup //ScriptStruct UAGame.AreaRuntimeDataInSpawnGroup
    {
    //Children Prop Count (Fields): 1
    public:

        struct FAreaInfo AreaInfo; // 0x0

    };

    struct FAISpawnPool //ScriptStruct UAGame.AISpawnPool
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName ToSpawnAIID; // 0x0
        int32_t EquipmentPoolID; // 0x8

    };

    struct FBulletDampingBind //ScriptStruct UAGame.BulletDampingBind
    {
    //Children Prop Count (Fields): 2
    public:

        class UPhysicalMaterial* PhysicalMaterial; // 0x0
        struct FBulletDampingParam DampingParam; // 0x8

    };

    struct FBulletDampingParam //ScriptStruct UAGame.BulletDampingParam
    {
    //Children Prop Count (Fields): 4
    public:

        float VelSub; // 0x0
        float DamageSub; // 0x4
        float PenetrationSub; // 0x8
        float Density; // 0xc

    };

    struct FUABenchmarkDataTableData : FTableRowBase //ScriptStruct UAGame.UABenchmarkDataTableData
    {
    //Children Prop Count (Fields): 10
    public:

        struct FString Marker; // 0x8
        struct FString Type; // 0x18
        struct FString Unit; // 0x28
        struct FString Value; // 0x38
        float PosX; // 0x48
        float PosY; // 0x4c
        float PosZ; // 0x50
        float RotX; // 0x54
        float RotY; // 0x58
        float RotZ; // 0x5c

    };

    struct FUATutorialEventInfo //ScriptStruct UAGame.UATutorialEventInfo
    {
    //Children Prop Count (Fields): 9
    public:

        int32_t ID; // 0x0
        struct FString EventName; // 0x8
        int32_t MaxTimesInGame; // 0x18
        int32_t MaxTimesInCareer; // 0x1c
        int32_t NotTriggerTimesInCareer; // 0x20
        int32_t CD; // 0x24
        int32_t Para1; // 0x28
        int32_t Para2; // 0x2c
        int32_t Para3; // 0x30

    };

    struct FShortcutItemStruct //ScriptStruct UAGame.ShortcutItemStruct
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<class ASGInventory*> ShortcutItemInvList; // 0x0
        class ASGInventory* ShortcutItemInv; // 0x10
        enum class EAttachPosition MyAttachPosition; // 0x18
        enum class EAttachPosition InvAttachPosition; // 0x19

    };

    struct FUAMarkedData //ScriptStruct UAGame.UAMarkedData
    {
    //Children Prop Count (Fields): 2
    public:

        enum class EUAMarkedType MarkedType; // 0x0
        float MarkedContinueTime; // 0x4

    };

    struct FDistributeMissionHistory //ScriptStruct UAGame.DistributeMissionHistory
    {
    //Children Prop Count (Fields): 4
    public:

        class UMFMissionFlow* MissionFlow; // 0x0
        enum class ECharacterType TriggerCharacterType; // 0x8
        int32_t TriggerCharacterLevel; // 0xc
        int32_t MisionFlowID; // 0x10

    };

    struct FFactionmemberBaseInfo //ScriptStruct UAGame.FactionmemberBaseInfo
    {
    //Children Prop Count (Fields): 8
    public:

        struct FString PlayerName; // 0x0
        uint64_t GID; // 0x10
        uint64_t TeamIndex; // 0x18
        enum class EFactionMemberType CharacterType; // 0x20
        class ASGCharacter* Character; // 0x28
        enum class ESGPlayerCondition Condition; // 0x30
        struct FVector TransientLocation; // 0x34
        int64_t DeathTimeStamp; // 0x40

    };

    struct FUAFSMInfo //ScriptStruct UAGame.UAFSMInfo
    {
    //Children Prop Count (Fields): 4
    public:

        struct FString FSMState; // 0x0
        struct FString OldFSMState; // 0x10
        class UObject* TargetObject; // 0x20
        bool OnlyReplicateToTarget; // 0x28

    };

    struct FUAFSMAdvanceParam //ScriptStruct UAGame.UAFSMAdvanceParam
    {
    //Children Prop Count (Fields): 1
    public:

        bool OnlyReplicateToTarget; // 0x0

    };

    struct FGameAreaStatisDateInfo //ScriptStruct UAGame.GameAreaStatisDateInfo
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FAreaDataInfo> AreaIDArrays; // 0x0

    };

    struct FGameHUDReportInfo //ScriptStruct UAGame.GameHUDReportInfo
    {
    //Children Prop Count (Fields): 1
    public:

        class UOverlay* ParentWidget; // 0x8

    };

    struct FActivityRequireDistributers //ScriptStruct UAGame.ActivityRequireDistributers
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FSoftClassProperty> DistributerClasses; // 0x0

    };

    struct FUAModePickupLevelConfigsMappingTableRow : FTableRowBase //ScriptStruct UAGame.UAModePickupLevelConfigsMappingTableRow
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t ModeId; // 0x8
        int32_t MapID; // 0xc
        int32_t MatchID; // 0x10
        int32_t TeamID; // 0x14
        class UDataTable* PickupLevelConfigsTable; // 0x18

    };

    struct FPlayerStartGroupInfo //ScriptStruct UAGame.PlayerStartGroupInfo
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t GroupIndex; // 0x0
        enum class EPlayerTeamType TeamType; // 0x4
        struct TArray<class APlayerStart*> PlayerStarts; // 0x8

    };

    struct FFactionPlayerStart //ScriptStruct UAGame.FactionPlayerStart
    {
    //Children Prop Count (Fields): 5
    public:

        enum class EFactionType FactionType; // 0x0
        struct TArray<int32_t> DomainPlayerStart; // 0x8
        bool bOccupyDomainPlayerStart; // 0x18
        struct TArray<int32_t> PlayerStartResult; // 0x20
        struct TArray<int32_t> PlayerStartResultUsed; // 0x30

    };

    struct FPlayerItemGroupReplaceInfo //ScriptStruct UAGame.PlayerItemGroupReplaceInfo
    {
    //Children Prop Count (Fields): 3
    public:

        int64_t PlayerGID; // 0x0
        int32_t TeamIndex; // 0x8
        struct TArray<struct FItemGroupReplaceInfo> ItemGroupReplaceInfos; // 0x10

    };

    struct FItemGroupReplaceInfo //ScriptStruct UAGame.ItemGroupReplaceInfo
    {
    //Children Prop Count (Fields): 4
    public:

        int64_t TakeInItemGID; // 0x0
        struct TArray<class USGPlayerItemInfoBase*> ItemGroupAfterReplace; // 0x8
        struct TArray<struct FItemTreeCreateInfo> ItemGroupCreateInfos; // 0x18
        bool bReplaced; // 0x28

    };

    struct FItemTreeCreateInfo //ScriptStruct UAGame.ItemTreeCreateInfo
    {
    //Children Prop Count (Fields): 4
    public:

        int64_t FromPlayerGID; // 0x0
        int32_t FromTeamIndex; // 0x8
        class ASGInventory* CreatedRootInventory; // 0x10
        struct TArray<struct FPendingCreateItemInfo> PendingCreateInventories; // 0x18

    };

    struct FPendingCreateItemInfo //ScriptStruct UAGame.PendingCreateItemInfo
    {
    //Children Prop Count (Fields): 3
    public:

        class USGPlayerItemInfoBase* PlayerItemInfo; // 0x0
        class AActor* ParentInventory; // 0x8
        int32_t ContainerIndex; // 0x10

    };

    struct FMFClimateWeatherParams //ScriptStruct UAGame.MFClimateWeatherParams
    {
    //Children Prop Count (Fields): 2
    public:

        float TimeOfDay; // 0x0
        struct TArray<float> BlendWeights; // 0x8

    };

    struct FTraceableActorList //ScriptStruct UAGame.TraceableActorList
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FTraceableActorInfo> TraceableActorInfos; // 0x0

    };

    struct FTraceableActorInfo //ScriptStruct UAGame.TraceableActorInfo
    {
    //Children Prop Count (Fields): 18
    public:

        struct TWeakObjectPtr<struct AActor> Actor; // 0x0
        struct TWeakObjectPtr<struct AActor> ActorOuter; // 0x8
        bool bActorDestroyed; // 0x10
        bool bOwnerAlive; // 0x11
        bool bHasOwner; // 0x12
        struct FVector WorldLocation; // 0x14
        int32_t Handle; // 0x20
        enum class ETraceMarkOperatorType OperatorType; // 0x24
        enum class ETraceableMarkType MarkType; // 0x25
        int32_t ConfigID; // 0x28
        float ScanningInterval; // 0x2c
        float LastUpdateServerTime; // 0x30
        struct TWeakObjectPtr<struct AQuestBase> OwnerQuest; // 0x34
        int32_t TaskId; // 0x3c
        int32_t TargetId; // 0x40
        bool bNeedTrace; // 0x44
        struct FVector Extend; // 0x48
        int32_t EscapeId; // 0x54

    };

    struct FTrackPlayerInfo //ScriptStruct UAGame.TrackPlayerInfo
    {
    //Children Prop Count (Fields): 3
    public:

        class UUAPlayerStateTraceComponent* PlayerStateTraceComponent; // 0x0
        class UUAPlayerStateChaseActivityComp* ChaseActivityComp; // 0x8
        struct FChaseActivityAvatarInfo ChaseActivityAvatarInfo; // 0x10

    };

    struct FMemberInfo //ScriptStruct UAGame.MemberInfo
    {
    //Children Prop Count (Fields): 15
    public:

        int32_t GID; // 0x0
        int32_t Level; // 0x4
        struct FString HeadIconFileName; // 0x8
        class UObject* HeadIconTexture; // 0x18
        struct FString HeadboxPath; // 0x20
        struct FString PrivilegeIconPath; // 0x30
        struct FString PlayerName; // 0x40
        struct FString TitleName; // 0x50
        struct FString TitleIconPath; // 0x60
        struct FString TitleBackgroundPath; // 0x70
        int32_t TitleShowNum; // 0x80
        int32_t Type; // 0x84
        struct FString NameCardPath; // 0x88
        struct FString NationalFlagPath; // 0x98
        struct FString RankingIconPath; // 0xa8

    };

    struct FModifyEscapeInfoList //ScriptStruct UAGame.ModifyEscapeInfoList
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FModifyEscapeInfo> ModifyEscapeInfos; // 0x0

    };

    struct FModifyEscapeInfo //ScriptStruct UAGame.ModifyEscapeInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t EscapePointID; // 0x0
        bool bAddEscapePoint; // 0x4

    };

    struct FTeamEscapeInfo //ScriptStruct UAGame.TeamEscapeInfo
    {
    //Children Prop Count (Fields): 4
    public:

        class ASGTeamInfo* TeamInfo; // 0x0
        struct TArray<int32_t> EscapePointIDs; // 0x8
        bool FinishDistribute; // 0x18
        int32_t PresetIndex; // 0x1c

    };

    struct FSGSceneMoveActorRaw //ScriptStruct UAGame.SGSceneMoveActorRaw
    {
    //Children Prop Count (Fields): 2
    public:

        struct FMissionActorReference ActorReference; // 0x0
        struct FVector MoveLocation; // 0x18

    };

    struct FChaseActivityInvMarkScaleInfo //ScriptStruct UAGame.ChaseActivityInvMarkScaleInfo
    {
    //Children Prop Count (Fields): 2
    public:

        float Distance; // 0x0
        float Scale; // 0x4

    };

    struct FUAWeaponAttributes //ScriptStruct UAGame.UAWeaponAttributes
    {
    //Children Prop Count (Fields): 7
    public:

        float BulletZeroFlyDistanceForWeaponAction; // 0x0
        float ZeroDropDistance; // 0x4
        float Accuracy; // 0x8
        float MoaX; // 0xc
        float MoaY; // 0x10
        float VerticalRecoil; // 0x14
        float HorizontalRecoil; // 0x18

    };

    struct FUALootBoxNameTool //ScriptStruct UAGame.UALootBoxNameTool
    {
    //Children Prop Count (Fields): 1
    public:

        struct FText TextForFindTableID; // 0x0

    };

    struct FCombinPickupData //ScriptStruct UAGame.CombinPickupData
    {
    //Children Prop Count (Fields): 4
    public:

        struct FSoftClassProperty PickupClass; // 0x0
        struct FVector LocationOffset; // 0x28
        struct FRotator RotatorOffset; // 0x34
        class AUAPickup* SpawnPickup; // 0x40

    };

    struct FCacheModifyData //ScriptStruct UAGame.CacheModifyData
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class ACharacter*> Characters; // 0x0

    };

    struct FMissionActionRelevantToAICharacters //ScriptStruct UAGame.MissionActionRelevantToAICharacters
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct TWeakObjectPtr<struct ASGAICharacter>> AICharacters; // 0x0

    };

    struct FMissionActionRelevantToInventories //ScriptStruct UAGame.MissionActionRelevantToInventories
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct TWeakObjectPtr<struct ASGInventory>> Inventories; // 0x0

    };

    struct FMissionActionRelevantToInteractActors //ScriptStruct UAGame.MissionActionRelevantToInteractActors
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct TWeakObjectPtr<struct AActor>> InteractActors; // 0x0

    };

    struct FMissionActionSpawnedInventories //ScriptStruct UAGame.MissionActionSpawnedInventories
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct TWeakObjectPtr<struct ASGInventory>> Inventories; // 0x0

    };

    struct FRandomCacheStruct //ScriptStruct UAGame.RandomCacheStruct
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<int32_t> EscapePoints; // 0x0

    };

    struct FGlobalEventMessage_DistributeFactionDomain //ScriptStruct UAGame.GlobalEventMessage_DistributeFactionDomain
    {
    //Children Prop Count (Fields): 1
    public:

        class AGameState* Instigator; // 0x0

    };

    struct FGlobalEventMessage_DistributeMissionN //ScriptStruct UAGame.GlobalEventMessage_DistributeMissionN
    {
    //Children Prop Count (Fields): 2
    public:

        class ACharacter* Instigator; // 0x0
        int32_t IntCount; // 0x8

    };

    struct FGlobalEventMessage_DoorState //ScriptStruct UAGame.GlobalEventMessage_DoorState
    {
    //Children Prop Count (Fields): 1
    public:

        class AGameState* Instigator; // 0x0

    };

    struct FFactionPlayerStartConfigRow //ScriptStruct UAGame.FactionPlayerStartConfigRow
    {
    //Children Prop Count (Fields): 7
    public:

        enum class EFactionType FactionType; // 0x0
        int32_t ChooseNum; // 0x4
        enum class EFPSCCheckType CheckType; // 0x8
        enum class EPlayerTeamType PlayerStartTeamType; // 0x9
        int32_t ParamOne; // 0xc
        int32_t ParamTwo; // 0x10
        struct FMFMissionVariableRead_Vector NewReferenceVector; // 0x18

    };

    struct FGlobalEventMessage_FactionPlayerStart //ScriptStruct UAGame.GlobalEventMessage_FactionPlayerStart
    {
    //Children Prop Count (Fields): 1
    public:

        class AGameState* Instigator; // 0x0

    };

    struct FMissionParadropRow //ScriptStruct UAGame.MissionParadropRow
    {
    //Children Prop Count (Fields): 2
    public:

        struct FMFMissionVariableRead_ActorReference NewPlacementActor; // 0x0
        struct FName ConfigRowName; // 0x40

    };

    struct FGlobalEventMessage_Paradrop //ScriptStruct UAGame.GlobalEventMessage_Paradrop
    {
    //Children Prop Count (Fields): 1
    public:

        class AGameState* Instigator; // 0x0

    };

    struct FMissionVariableWriteRow //ScriptStruct UAGame.MissionVariableWriteRow
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class UMFMissionVariableWriteBase*> Variables; // 0x0

    };

    struct FGlobalEventMessage_RdmBlackboard //ScriptStruct UAGame.GlobalEventMessage_RdmBlackboard
    {
    //Children Prop Count (Fields): 1
    public:

        class AGameState* Instigator; // 0x0

    };

    struct FGlobalEventMessage_RdmPlayerStart //ScriptStruct UAGame.GlobalEventMessage_RdmPlayerStart
    {
    //Children Prop Count (Fields): 1
    public:

        class AGameState* Instigator; // 0x0

    };

    struct FGlobalEventMessage_Scene //ScriptStruct UAGame.GlobalEventMessage_Scene
    {
    //Children Prop Count (Fields): 1
    public:

        class AGameState* Instigator; // 0x0

    };

    struct FGlobalEventMessage_ActivateLootPoint //ScriptStruct UAGame.GlobalEventMessage_ActivateLootPoint
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* Instigator; // 0x0

    };

    struct FMissionObjectiveActivateLootPointConfigs //ScriptStruct UAGame.MissionObjectiveActivateLootPointConfigs
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<int32_t> ForceActivateLootPoints; // 0x0
        struct TArray<struct FMissionObjectiveActivateLootPointConfig> ActivateConfigs; // 0x10

    };

    struct FMissionObjectiveActivateLootPointConfig //ScriptStruct UAGame.MissionObjectiveActivateLootPointConfig
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t LootPointType; // 0x0
        int32_t ActivateMinCount; // 0x4
        int32_t ActivateMaxCount; // 0x8

    };

    struct FGlobalEventMessage_AddInventoryToLootContainer //ScriptStruct UAGame.GlobalEventMessage_AddInventoryToLootContainer
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* Instigator; // 0x0

    };

    struct FMissionObjectiveBroadcastedCheckTimeConfigs //ScriptStruct UAGame.MissionObjectiveBroadcastedCheckTimeConfigs
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<int32_t> CheckIndexs; // 0x0

    };

    struct FGlobalEventMessage_BroadcastOnGameHUD //ScriptStruct UAGame.GlobalEventMessage_BroadcastOnGameHUD
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* Instigator; // 0x0

    };

    struct FMissionObjectiveBroadcastGameHUDConfigs //ScriptStruct UAGame.MissionObjectiveBroadcastGameHUDConfigs
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FBroadcastOnGameHUDConfig> GameHUDConfigs; // 0x0

    };

    struct FGlobalEventMessage_DisableLootPoint //ScriptStruct UAGame.GlobalEventMessage_DisableLootPoint
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* Instigator; // 0x0

    };

    struct FGlobalEventMessage_DistributeMission //ScriptStruct UAGame.GlobalEventMessage_DistributeMission
    {
    //Children Prop Count (Fields): 2
    public:

        class AActor* Instigator; // 0x0
        int32_t IntCount; // 0x8

    };

    struct FGlobalEventMessage_EscapeVolumeStateChange //ScriptStruct UAGame.GlobalEventMessage_EscapeVolumeStateChange
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* Instigator; // 0x0

    };

    struct FGlobalEventMessage_Escort //ScriptStruct UAGame.GlobalEventMessage_Escort
    {
    //Children Prop Count (Fields): 3
    public:

        class ACharacter* Instigator; // 0x0
        class ACharacter* TeamMember; // 0x8
        class AActor* EscapeVolume; // 0x10

    };

    struct FFactionScoreAction //ScriptStruct UAGame.FactionScoreAction
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class UMFMissionAction*> Actions; // 0x0

    };

    struct FGlobalEventMessage_GiveItem //ScriptStruct UAGame.GlobalEventMessage_GiveItem
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* Instigator; // 0x0

    };

    struct FGlobalEventMessage_OrderPlayerStart //ScriptStruct UAGame.GlobalEventMessage_OrderPlayerStart
    {
    //Children Prop Count (Fields): 1
    public:

        class AGameState* Instigator; // 0x0

    };

    struct FGlobalEventMessage_RandTimeRange //ScriptStruct UAGame.GlobalEventMessage_RandTimeRange
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* Instigator; // 0x0

    };

    struct FGlobalEventMessage_ShowControl //ScriptStruct UAGame.GlobalEventMessage_ShowControl
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* Instigator; // 0x0

    };

    struct FMissionObjectiveSpawnedActors //ScriptStruct UAGame.MissionObjectiveSpawnedActors
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class ASGNetRelevantConfigurableActor*> Actors; // 0x0

    };

    struct FGlobalEventMessage_SpawnActor //ScriptStruct UAGame.GlobalEventMessage_SpawnActor
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* Instigator; // 0x0

    };

    struct FGlobalEventMessage_SpawnGashapon //ScriptStruct UAGame.GlobalEventMessage_SpawnGashapon
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* Instigator; // 0x0

    };

    struct FMissionObjectiveSpawnedInteractItems //ScriptStruct UAGame.MissionObjectiveSpawnedInteractItems
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct TWeakObjectPtr<struct ASGNetRelevantConfigurableActor>> InteractItems; // 0x0

    };

    struct FGlobalEventMessage_SpawnInteractItem //ScriptStruct UAGame.GlobalEventMessage_SpawnInteractItem
    {
    //Children Prop Count (Fields): 2
    public:

        class AActor* Instigator; // 0x0
        class AActor* InteractActor; // 0x8

    };

    struct FMissionObjectiveSpawnedInventories //ScriptStruct UAGame.MissionObjectiveSpawnedInventories
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct TWeakObjectPtr<struct ASGInventory>> Inventories; // 0x0

    };

    struct FGlobalEventMessage_SpawnInventory //ScriptStruct UAGame.GlobalEventMessage_SpawnInventory
    {
    //Children Prop Count (Fields): 2
    public:

        class AActor* Instigator; // 0x0
        class ASGInventory* Inventory; // 0x8

    };

    struct FGlobalEventMessage_SpawnParticle //ScriptStruct UAGame.GlobalEventMessage_SpawnParticle
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* Instigator; // 0x0

    };

    struct FMissionObjectiveSpawnedPickups //ScriptStruct UAGame.MissionObjectiveSpawnedPickups
    {
    public:


    };

    struct FGlobalEventMessage_SpawnPickup //ScriptStruct UAGame.GlobalEventMessage_SpawnPickup
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* Instigator; // 0x0

    };

    struct FGlobalEventMessage_Survival //ScriptStruct UAGame.GlobalEventMessage_Survival
    {
    //Children Prop Count (Fields): 1
    public:

        class AActor* Instigator; // 0x0

    };

    struct FGlobalEventMessage_TakeOutItem //ScriptStruct UAGame.GlobalEventMessage_TakeOutItem
    {
    //Children Prop Count (Fields): 3
    public:

        class AActor* Instigator; // 0x0
        class ASGInventory* Inventory; // 0x8
        struct FStackableItemSourceInfo StackableItemSourceInfo; // 0x10

    };

    struct FGlobalEventMessage_TakeOutType //ScriptStruct UAGame.GlobalEventMessage_TakeOutType
    {
    //Children Prop Count (Fields): 2
    public:

        class AActor* Instigator; // 0x0
        class ASGInventory* Inventory; // 0x8

    };

    struct FGlobalEventMessage_WalkDistance //ScriptStruct UAGame.GlobalEventMessage_WalkDistance
    {
    //Children Prop Count (Fields): 2
    public:

        class APlayerState* Instigator; // 0x0
        enum class EPlayerEndGameType EndGameType; // 0x8

    };

    struct FMissionFlowUploadData //ScriptStruct UAGame.MissionFlowUploadData
    {
    //Children Prop Count (Fields): 4
    public:

        struct FString MissionFlowName; // 0x0
        enum class EMissionStatus MissionFlowStatus; // 0x10
        bool bBeforeState; // 0x11
        struct TArray<struct FMissionUploadData> MissionUploadDataList; // 0x18

    };

    struct FMissionUploadData //ScriptStruct UAGame.MissionUploadData
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString MissionName; // 0x0
        enum class EMissionStatus MissionStatus; // 0x10
        int32_t CurProgress; // 0x14

    };

    struct FActivityTemplateMissionTableRow : FTableRowBase //ScriptStruct UAGame.ActivityTemplateMissionTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t TargetTypeID; // 0x8
        struct TSoftObjectPtr<UMFMissionFlow> MissionFlowAsset; // 0x10

    };

    struct FMissionFlowPlayers //ScriptStruct UAGame.MissionFlowPlayers
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct TWeakObjectPtr<struct APlayerController>> PlayerList; // 0x0

    };

    struct FMissionTraceableParam //ScriptStruct UAGame.MissionTraceableParam
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t ConfigID; // 0x0

    };

    struct FMissionConditionTimeOfDay //ScriptStruct UAGame.MissionConditionTimeOfDay
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t Hour; // 0x0
        int32_t Minute; // 0x4
        int32_t Second; // 0x8

    };

    struct FMissionActionVolumeMarkableInfo //ScriptStruct UAGame.MissionActionVolumeMarkableInfo
    {
    //Children Prop Count (Fields): 6
    public:

        bool bShowTraceableActor; // 0x0
        struct TArray<int32_t> SpawnedInventories; // 0x8
        struct FMFGlobalEventParameterTag VolumeTag; // 0x18
        int32_t VolumeID; // 0x20
        struct FMFMissionVariableRead_Int NewVolumeID; // 0x28
        int32_t ConfigID; // 0x58

    };

    struct FMissionActionInventoryMarkableInfo //ScriptStruct UAGame.MissionActionInventoryMarkableInfo
    {
    //Children Prop Count (Fields): 7
    public:

        bool bShowTraceableActor; // 0x0
        struct FMissionActorReference SpawnVolumeActor; // 0x8
        struct FMFGlobalEventParameterTag SpawnVolumeTag; // 0x20
        bool bNotCharacterOwner; // 0x28
        struct FMFGlobalEventParameterTag InventoryTag; // 0x2c
        int32_t ItemID; // 0x34
        int32_t ConfigID; // 0x38

    };

    struct FMissionActionAICharacterMarkableInfo //ScriptStruct UAGame.MissionActionAICharacterMarkableInfo
    {
    //Children Prop Count (Fields): 5
    public:

        bool bShowTraceableActor; // 0x0
        struct FMFGlobalEventParameterTag AICharacterTag; // 0x4
        int64_t AIID; // 0x10
        enum class ESpawnReason SpawnReason; // 0x18
        int32_t ConfigID; // 0x1c

    };

    struct FMissionActionActorMarkableInfo //ScriptStruct UAGame.MissionActionActorMarkableInfo
    {
    //Children Prop Count (Fields): 4
    public:

        bool bShowTraceableActor; // 0x0
        struct FMFGlobalEventParameterTag ActorTag; // 0x4
        struct FMissionActorReference ActorRef; // 0x10
        int32_t ConfigID; // 0x28

    };

    struct FMissionActionRandomEscapePoint //ScriptStruct UAGame.MissionActionRandomEscapePoint
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t EscapePointID; // 0x0
        struct FMFMissionVariableRead_Int NewEscapePointID; // 0x8
        int32_t Weight; // 0x38

    };

    struct FMissionActionRelevantToAI //ScriptStruct UAGame.MissionActionRelevantToAI
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<int32_t> AIIDs; // 0x0
        int32_t ConfigID; // 0x10
        int32_t FailedAINum; // 0x14

    };

    struct FMissionActionRelevantToInventory //ScriptStruct UAGame.MissionActionRelevantToInventory
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<int32_t> InventoryItemIDs; // 0x0
        int32_t ConfigID; // 0x10
        int32_t FailedInventoryNum; // 0x14

    };

    struct FMissionActionRelevantToVolume //ScriptStruct UAGame.MissionActionRelevantToVolume
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<int32_t> VolumeItemIDs; // 0x0
        int32_t ConfigID; // 0x10
        int32_t FailedInteractNum; // 0x14

    };

    struct FMissionActionRelevantToInteract //ScriptStruct UAGame.MissionActionRelevantToInteract
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<int32_t> InteractItemIDs; // 0x0
        int32_t ConfigID; // 0x10
        int32_t FailedInteractNum; // 0x14

    };

    struct FMissionActionGiveItemInfo //ScriptStruct UAGame.MissionActionGiveItemInfo
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t ItemID; // 0x0
        int32_t MinStackCount; // 0x4
        int32_t MaxStackCount; // 0x8
        class ASGInventory* InventoryClass; // 0x10

    };

    struct FRandomMissionTableRow : FTableRowBase //ScriptStruct UAGame.RandomMissionTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t TaskId; // 0x8
        int32_t Weight; // 0xc
        int32_t MinLevel; // 0x10
        int32_t MaxLevel; // 0x14

    };

    struct FMissionObjectiveGiveItemInfo //ScriptStruct UAGame.MissionObjectiveGiveItemInfo
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t ItemID; // 0x0
        int32_t MinStackCount; // 0x4
        int32_t MaxStackCount; // 0x8
        class ASGInventory* InventoryClass; // 0x10

    };

    struct FMissionObjectiveAddInventoryToSearchContainerInfo //ScriptStruct UAGame.MissionObjectiveAddInventoryToSearchContainerInfo
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t ItemID; // 0x0

    };

    struct FMissionObjectiveAddInventoryToLootContainerInfo //ScriptStruct UAGame.MissionObjectiveAddInventoryToLootContainerInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t Weight; // 0x0
        int32_t ItemID; // 0x4

    };

    struct FMissionObjectiveSceneEventInfo //ScriptStruct UAGame.MissionObjectiveSceneEventInfo
    {
    //Children Prop Count (Fields): 7
    public:

        struct FSoftClassProperty SceneEventClassPtr; // 0x0
        float ValidTime; // 0x28
        float ValidScope; // 0x2c
        struct FVector Location; // 0x30
        float CoverRange; // 0x3c
        int32_t Weight; // 0x40
        struct TArray<struct FString> Tags; // 0x48

    };

    struct FMissionObjectiveSpawnParticleInfo //ScriptStruct UAGame.MissionObjectiveSpawnParticleInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FMissionActorReference SpawnPointActor; // 0x0
        class UParticleSystem* Effect; // 0x18
        int32_t Weight; // 0x20

    };

    struct FMissionObjectiveSpawnActorInfo //ScriptStruct UAGame.MissionObjectiveSpawnActorInfo
    {
    //Children Prop Count (Fields): 4
    public:

        struct FMissionActorReference SpawnPointActor; // 0x0
        class UStaticMesh* StaticMesh; // 0x18
        int32_t Weight; // 0x20
        struct TArray<enum class EMissionRelatedTargetType> RelatedTargetTypes; // 0x28

    };

    struct FMissionObjectiveSpawnPickupInfo //ScriptStruct UAGame.MissionObjectiveSpawnPickupInfo
    {
    //Children Prop Count (Fields): 5
    public:

        struct FMissionActorReference SpawnPointActor; // 0x0
        class ASGPickup* PickupClass; // 0x18
        int32_t Weight; // 0x20
        int32_t ConfigID; // 0x24
        struct TArray<enum class EMissionRelatedTargetType> RelatedTargetTypes; // 0x28

    };

    struct FMissionObjectiveSpawnInteractItemInfo //ScriptStruct UAGame.MissionObjectiveSpawnInteractItemInfo
    {
    //Children Prop Count (Fields): 5
    public:

        struct FMissionActorReference SpawnPointActor; // 0x0
        class ASGNetRelevantConfigurableActor* InteractItemClass; // 0x18
        int32_t Weight; // 0x20
        int32_t ConfigID; // 0x24
        struct TArray<enum class EMissionRelatedTargetType> RelatedTargetTypes; // 0x28

    };

    struct FMissionObjectiveSpawnInventoryInfo //ScriptStruct UAGame.MissionObjectiveSpawnInventoryInfo
    {
    //Children Prop Count (Fields): 8
    public:

        struct FMissionActorReference SpawnPointActor; // 0x0
        struct FMissionActorReference SpawnVolumeActor; // 0x18
        class ASGInventory* ContainerClass; // 0x30
        struct TArray<int64_t> ItemIDs; // 0x38
        int32_t Weight; // 0x48
        int32_t ConfigID; // 0x4c
        int32_t LootPointType; // 0x50
        struct TArray<enum class EMissionRelatedTargetType> RelatedTargetTypes; // 0x58

    };

    struct FMissionObjectiveSpawnAIEventConfig //ScriptStruct UAGame.MissionObjectiveSpawnAIEventConfig
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t SpawnNum; // 0x0
        struct TArray<struct FMissionObjectiveSpawnAIEventParams> EventParams; // 0x8

    };

    struct FMissionObjectiveSpawnAIEventParams //ScriptStruct UAGame.MissionObjectiveSpawnAIEventParams
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FString> EventStrList; // 0x0
        int32_t Weight; // 0x10

    };

    struct FMissionObjectiveInteractTargets //ScriptStruct UAGame.MissionObjectiveInteractTargets
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class AActor*> InteractTargets; // 0x0

    };

    struct FMissionObjectiveCollectedItems //ScriptStruct UAGame.MissionObjectiveCollectedItems
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class ASGInventory*> Inventories; // 0x0

    };

    struct FMissionObjectiveEffectMissionFlowInfo //ScriptStruct UAGame.MissionObjectiveEffectMissionFlowInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t MissionFlowID; // 0x0
        struct TArray<int32_t> MissionIDs; // 0x8

    };

    struct FMissionRelatedPlayers //ScriptStruct UAGame.MissionRelatedPlayers
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<class APlayerState*> PlayerStates; // 0x0
        struct TArray<class ASGTeamInfo*> TeamInfos; // 0x10
        struct TArray<enum class EPlayerTeamType> PlayerTeamTypes; // 0x20
        struct TArray<enum class EFactionType> FactionTypes; // 0x30

    };

    struct FMissionRelatedTargets //ScriptStruct UAGame.MissionRelatedTargets
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<class ACharacter*> Characters; // 0x0
        struct TArray<class ASGTeamInfo*> TeamInfos; // 0x10
        struct TArray<enum class EPlayerTeamType> PlayerTeamTypes; // 0x20
        struct TArray<enum class EFactionType> FactionTypes; // 0x30

    };

    struct FMissionFlowClassTableRow : FTableRowBase //ScriptStruct UAGame.MissionFlowClassTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t MissionFlowID; // 0x8
        struct TSoftObjectPtr<UMFMissionFlow> MissionFlowAsset; // 0x10

    };

    struct FMissionFlowCreateData //ScriptStruct UAGame.MissionFlowCreateData
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t MissionFlowID; // 0x0
        struct TArray<struct FMissionCreateData> MissionList; // 0x8
        bool bActTask; // 0x18
        bool bShowInGame; // 0x19

    };

    struct FMissionCreateData //ScriptStruct UAGame.MissionCreateData
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t MissionID; // 0x0
        int32_t CurProgress; // 0x4
        int32_t MaxProgress; // 0x8
        struct TArray<int32_t> ActivityTemplateParams; // 0x10

    };

    struct FObjPoolClassWeight //ScriptStruct UAGame.ObjPoolClassWeight
    {
    //Children Prop Count (Fields): 2
    public:

        struct FSoftClassProperty Class; // 0x0
        int32_t Weight; // 0x28

    };

    struct FUAObjPoolExpectationMem //ScriptStruct UAGame.UAObjPoolExpectationMem
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t Priority; // 0x0
        float ExpectationMem; // 0x4

    };

    struct FNiagaraSwitherRow //ScriptStruct UAGame.NiagaraSwitherRow
    {
    //Children Prop Count (Fields): 2
    public:

        class UNiagaraSystem* Asset; // 0x0
        float PlayTime; // 0x8

    };

    struct FUAParadropVolumeInfo //ScriptStruct UAGame.UAParadropVolumeInfo
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<int32_t> AvailablePointIDs; // 0x0

    };

    struct FUAParadropWave //ScriptStruct UAGame.UAParadropWave
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FUAParadropFlight> Flights; // 0x10
        class APawn* ParadropInstigator; // 0x28

    };

    struct FUAParadropFlight //ScriptStruct UAGame.UAParadropFlight
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<class AActor*> ParadropPoints; // 0x8
        struct TArray<struct FVector> OverWriteKeyPoints; // 0x20

    };

    struct FUAParadropGroup //ScriptStruct UAGame.UAParadropGroup
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class AActor*> ParadropPointArray; // 0x0

    };

    struct FUAParadropSupplyInfo //ScriptStruct UAGame.UAParadropSupplyInfo
    {
    //Children Prop Count (Fields): 2
    public:

        class AActor* LootContainer; // 0x0
        struct FName SocketName; // 0x8

    };

    struct FParticalSwitherRow //ScriptStruct UAGame.ParticalSwitherRow
    {
    //Children Prop Count (Fields): 2
    public:

        class ASGShowControlEffectActor* EffectActor; // 0x0
        float PlayTime; // 0x8

    };

    struct FQuestReplicateData //ScriptStruct UAGame.QuestReplicateData
    {
    //Children Prop Count (Fields): 8
    public:

        class AController* Controller; // 0x0
        int32_t GraphID; // 0x8
        enum class EQuestStatus GraphState; // 0xc
        struct TArray<class AMFQuestBase*> QuestActors; // 0x10
        bool IsSeasonTask; // 0x20
        bool QuestBeforeState; // 0x21
        enum class EQuestStatus OldGraphState; // 0x22
        float GraphStateChangeTime; // 0x24

    };

    struct FUAAmmoSpawnRow : FTableRowBase //ScriptStruct UAGame.UAAmmoSpawnRow
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t MinCount; // 0x8
        int32_t MaxCount; // 0xc

    };

    struct FRelevantFollowActorList //ScriptStruct UAGame.RelevantFollowActorList
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class AActor*> ActorList; // 0x0

    };

    struct FASkeletalAnimSwitherRow //ScriptStruct UAGame.ASkeletalAnimSwitherRow
    {
    //Children Prop Count (Fields): 2
    public:

        class UAnimationAsset* Asset; // 0x0
        float PlayTime; // 0x8

    };

    struct FSceneObjInfo_Stat : FSceneObjeInfo_Base //ScriptStruct UAGame.SceneObjInfo_Stat
    {
    public:


    };

    struct FThrowableDebuffStruct //ScriptStruct UAGame.ThrowableDebuffStruct
    {
    //Children Prop Count (Fields): 4
    public:

        float DizzyTime; // 0x0
        float BlindTime; // 0x4
        float SlowDownTime; // 0x8
        float TinnitusTime; // 0xc

    };

    struct FInventoryFlashDebuffStruct //ScriptStruct UAGame.InventoryFlashDebuffStruct
    {
    //Children Prop Count (Fields): 4
    public:

        float DebuffTime; // 0x0
        float GetDebuffPosX; // 0x4
        float GetDebuffPosY; // 0x8
        float GetDebuffPosZ; // 0xc

    };

    struct FUseInventoryFlashStruct //ScriptStruct UAGame.UseInventoryFlashStruct
    {
    //Children Prop Count (Fields): 4
    public:

        float UseTime; // 0x0
        float UsePosX; // 0x4
        float UsePosY; // 0x8
        float UsePosZ; // 0xc

    };

    struct FSecHurtFlowStruct //ScriptStruct UAGame.SecHurtFlowStruct
    {
    //Children Prop Count (Fields): 26
    public:

        int32_t MapID; // 0x0
        int32_t Weatherid; // 0x4
        int32_t HurtFlowID; // 0x8
        struct FString EnemyOpenID; // 0x10
        struct FString EnemyRoleID; // 0x20
        int32_t EnemyRoleType; // 0x30
        struct FString EnemyUserName; // 0x38
        int32_t HurtTime; // 0x48
        int32_t HurtType; // 0x4c
        int32_t HitType; // 0x50
        int32_t DamageStart; // 0x54
        int32_t DamageReduce; // 0x58
        int32_t ArmorDef; // 0x5c
        int32_t HPstart; // 0x60
        int32_t HPEnd; // 0x64
        int32_t HelmetHPStart; // 0x68
        int32_t HelmetHPEnd; // 0x6c
        int32_t ArmorHPStart; // 0x70
        int32_t ArmorHPEnd; // 0x74
        int32_t FallHeight; // 0x78
        int32_t PlayerKilled; // 0x7c
        int32_t IfIsAI; // 0x80
        struct FString DebuffStartList; // 0x88
        struct FString DebuffEndList; // 0x98
        struct FString DebuffLevelStartList; // 0xa8
        struct FString DebuffLevelEndList; // 0xb8

    };

    struct FOnKillOtherStruct //ScriptStruct UAGame.OnKillOtherStruct
    {
    //Children Prop Count (Fields): 38
    public:

        struct FString WeaponName; // 0x0
        struct FString BulletName; // 0x10
        float KillTime; // 0x20
        struct FString HitHelmetInventoryName; // 0x28
        struct FString HitVestInventoryName; // 0x38
        int32_t KilledPlayerTeamType; // 0x48
        int32_t ArmorLevel; // 0x4c
        int32_t HitEndurance; // 0x50
        int32_t TeamType; // 0x54
        bool bADS; // 0x58
        class ASGInventory* WeaponInventory; // 0x60
        float HitDistance; // 0x68
        int64_t KillerPlayerID; // 0x70
        float CauseArmorConsume; // 0x78
        float CauseArmorReduceDamage; // 0x7c
        bool bHitHead; // 0x80
        float ResultDamage; // 0x84
        float GameRunningTime; // 0x88
        int64_t KilledCharacterID; // 0x90
        int32_t HitGroup; // 0x98
        int32_t HitHeadPart; // 0x9c
        float KillerPosX; // 0xa0
        float KillerPosY; // 0xa4
        float KillerPosZ; // 0xa8
        float DeathPosX; // 0xac
        float DeathPosY; // 0xb0
        float DeathPosZ; // 0xb4
        int32_t GunId; // 0xb8
        uint32_t BulletItemID; // 0xbc
        uint32_t VestItemID; // 0xc0
        uint32_t HelmetItemID; // 0xc4
        float VerticalRecoil; // 0xc8
        float HorizontalRecoil; // 0xcc
        float MoaX; // 0xd0
        float MoaY; // 0xd4
        float Ergonomics; // 0xd8
        float Accuracy; // 0xdc
        struct FString AccessoryIds; // 0xe0

    };

    struct FBulletDamageStruct //ScriptStruct UAGame.BulletDamageStruct
    {
    //Children Prop Count (Fields): 11
    public:

        struct FString WeaponName; // 0x0
        struct FString BulletName; // 0x10
        struct FString WeaponType; // 0x20
        int32_t HitCharacter; // 0x30
        int32_t HitArmor; // 0x34
        int32_t HitEndurance; // 0x38
        int32_t HitGroup; // 0x3c
        float HitEnduranceDamage; // 0x40
        int32_t HitSubEndurance; // 0x44
        int32_t HitSubGroup; // 0x48
        float HitSubEnduranceDamage; // 0x4c

    };

    struct FChangeWeaponOrStartFireStruct //ScriptStruct UAGame.ChangeWeaponOrStartFireStruct
    {
    //Children Prop Count (Fields): 10
    public:

        uint64_t FireID; // 0x0
        struct FString WeaponName; // 0x8
        int32_t bIsChangeWeaponOrStartFire; // 0x18
        int32_t bHitCharacter; // 0x1c
        int32_t HitEndurance; // 0x20
        int32_t HitGroup; // 0x24
        float HitEnduranceDamage; // 0x28
        int32_t HitSubEndurance; // 0x2c
        int32_t HitSubGroup; // 0x30
        float HitSubEnduranceDamage; // 0x34

    };

    struct FAntiDataStruct //ScriptStruct UAGame.AntiDataStruct
    {
    //Children Prop Count (Fields): 4
    public:

        uint64_t roomid; // 0x0
        struct FString ClientVersion; // 0x8
        struct FString AntiData; // 0x18
        uint32_t Source; // 0x28

    };

    struct FThrowableStartFireInformationStatistics //ScriptStruct UAGame.ThrowableStartFireInformationStatistics
    {
    //Children Prop Count (Fields): 69
    public:

        int64_t Timestamp; // 0x0
        int64_t WeaponId; // 0x8
        struct FString WeaponName; // 0x10
        struct FString WeaponType; // 0x20
        bool bHit; // 0x30
        struct TArray<struct FString> HitCharacterArray; // 0x38
        int32_t HitNumber; // 0x48
        int32_t HitPmcNumber; // 0x4c
        int32_t HitScavNumber; // 0x50
        float ThrowDistance; // 0x54
        int32_t TeamType; // 0x58
        int32_t HitCharacterTeamType; // 0x5c
        int64_t HitCharacterPlayerID; // 0x60
        int32_t HitEndurance; // 0x68
        int32_t HitSubEndurance; // 0x6c
        int64_t ArmorId; // 0x70
        int32_t ArmorLevel; // 0x78
        float CauseArmorConsume; // 0x7c
        float CauseArmorReduceDamage; // 0x80
        float ResultDamage; // 0x84
        class ASGInventory* WeaponInventory; // 0x88
        int32_t HitCharacterType; // 0x90
        int64_t HitAIID; // 0x98
        int32_t ShotTime; // 0xa0
        int32_t HitTime; // 0xa4
        int32_t PlayerPositionX; // 0xa8
        int32_t PlayerPositionY; // 0xac
        int32_t PlayerPositionZ; // 0xb0
        int32_t ThrowPositionX; // 0xb4
        int32_t ThrowPositionY; // 0xb8
        int32_t ThrowPositionZ; // 0xbc
        int32_t ProjectileBornPositionX; // 0xc0
        int32_t ProjectileBornPositionY; // 0xc4
        int32_t ProjectileBornPositionZ; // 0xc8
        int32_t HitPositionX; // 0xcc
        int32_t HitPositionY; // 0xd0
        int32_t HitPositionZ; // 0xd4
        int32_t HitCharacterPositionX; // 0xd8
        int32_t HitCharacterPositionY; // 0xdc
        int32_t HitCharacterPositionZ; // 0xe0
        int32_t HitCharacterTeammateNumber; // 0xe4
        struct FString ThrowCharacterID; // 0xe8
        bool HegPenetrateObstacle; // 0xf8
        int32_t HegPenetrateObstacleNum; // 0xfc
        float HegPenetrateObstacleDamage; // 0x100
        int32_t HegNumCauseTinnitus; // 0x104
        float FragSumBodyDamage; // 0x108
        float FragSumArmorDamage; // 0x10c
        int32_t FragHitNumber; // 0x110
        int32_t FragHitHeadNumber; // 0x114
        int32_t FragHitChestNumber; // 0x118
        int32_t FragHitStomachNumber; // 0x11c
        int32_t FragHitLeftArmNumber; // 0x120
        int32_t FragHitRightArmNumber; // 0x124
        int32_t FragHitLeftLegNumber; // 0x128
        int32_t FragHitRightLegNumber; // 0x12c
        int32_t FragHitArmorLevel; // 0x130
        float MolotovTime; // 0x134
        int32_t MolotovHitNumber; // 0x138
        bool ActivityUse; // 0x13c
        int32_t OwnerTeamIndex; // 0x140
        bool TeamFlash; // 0x144
        int32_t MapID; // 0x148
        int32_t TimeSeconds; // 0x14c
        int32_t TimeFromLastThrow; // 0x150
        struct TArray<struct FString> InfectedCharacterTeamTypeArray; // 0x158
        struct TArray<struct FString> InfectedCharacterArray; // 0x168
        struct FString InfectedCharacterTeamType; // 0x178
        struct FString InfectedCharacter; // 0x188

    };

    struct FMeleeStartFireInformationStatistics //ScriptStruct UAGame.MeleeStartFireInformationStatistics
    {
    //Children Prop Count (Fields): 34
    public:

        int64_t Timestamp; // 0x0
        int64_t WeaponId; // 0x8
        struct FString WeaponName; // 0x10
        struct FString WeaponType; // 0x20
        bool bHit; // 0x30
        int32_t HitNumber; // 0x34
        int32_t HitPmcNumber; // 0x38
        int32_t HitScavNumber; // 0x3c
        float HitDistance; // 0x40
        int32_t TeamType; // 0x44
        int32_t HitCharacterTeamType; // 0x48
        int64_t HitCharacterPlayerID; // 0x50
        int32_t HitEndurance; // 0x58
        int32_t HitSubEndurance; // 0x5c
        int64_t ArmorId; // 0x60
        int32_t ArmorLevel; // 0x68
        float CauseArmorConsume; // 0x6c
        float CauseArmorReduceDamage; // 0x70
        float ResultDamage; // 0x74
        class ASGInventory* WeaponInventory; // 0x78
        int32_t HitCharacterType; // 0x80
        int32_t ShotTime; // 0x84
        int32_t HitTime; // 0x88
        int32_t PlayerPositionX; // 0x8c
        int32_t PlayerPositionY; // 0x90
        int32_t PlayerPositionZ; // 0x94
        int32_t MeleePositionX; // 0x98
        int32_t MeleePositionY; // 0x9c
        int32_t MeleePositionZ; // 0xa0
        int32_t HitPositionX; // 0xa4
        int32_t HitPositionY; // 0xa8
        int32_t HitPositionZ; // 0xac
        int32_t TimeSeconds; // 0xb0
        int32_t TimeFromLastThrow; // 0xb4

    };

    struct FStartFireInformationStatistics //ScriptStruct UAGame.StartFireInformationStatistics
    {
    //Children Prop Count (Fields): 101
    public:

        int64_t Timestamp; // 0x0
        int64_t WeaponId; // 0x8
        struct FString WeaponName; // 0x10
        int64_t BulletID; // 0x20
        struct FString BulletName; // 0x28
        int32_t BulletCount; // 0x38
        struct FString WeaponType; // 0x40
        bool bADS; // 0x50
        bool bHit; // 0x51
        bool bHitHead; // 0x52
        float HitDistance; // 0x54
        float VerticalRecoil; // 0x58
        float HorizontalRecoil; // 0x5c
        struct FString SightName; // 0x60
        float EngageDistance; // 0x70
        float WaistShotAccuracy; // 0x74
        float EffectiveDistance; // 0x78
        int32_t TeamType; // 0x7c
        int32_t HitCharacterTeamType; // 0x80
        int64_t HitCharacterPlayerID; // 0x88
        int32_t HitEndurance; // 0x90
        int32_t HitGroup; // 0x94
        float HitEnduranceDamage; // 0x98
        int32_t HitSubEndurance; // 0x9c
        int32_t HitSubGroup; // 0xa0
        float HitSubEnduranceDamage; // 0xa4
        int64_t ArmorId; // 0xa8
        int32_t ArmorLevel; // 0xb0
        float CauseArmorConsume; // 0xb4
        float CauseArmorReduceDamage; // 0xb8
        float ResultDamage; // 0xbc
        class ASGInventory* WeaponInventory; // 0xc0
        uint32_t ChangeWeaponOrFire; // 0xc8
        int32_t HitCharacterType; // 0xcc
        int64_t HitAIID; // 0xd0
        float MoaX; // 0xd8
        float MoaY; // 0xdc
        int32_t ShootingMode; // 0xe0
        int32_t MapID; // 0xe4
        int32_t Weatherid; // 0xe8
        int32_t AtackFlowID; // 0xec
        struct FString TargetUserName; // 0xf0
        int32_t GunType; // 0x100
        struct FString GunPartslist; // 0x108
        int32_t BulletSpeed; // 0x118
        int32_t MagazineMax; // 0x11c
        int32_t MagazineLeft; // 0x120
        int32_t ShotFrequency; // 0x124
        int32_t BulletDamage; // 0x128
        int32_t BulletDamageReduce; // 0x12c
        int32_t BulletDown; // 0x130
        int32_t ReloadTime; // 0x134
        int32_t PlayerPose; // 0x138
        int32_t ShotPose; // 0x13c
        int32_t FireType; // 0x140
        int32_t Sideways; // 0x144
        int32_t ShotTime; // 0x148
        int32_t HitTime; // 0x14c
        int32_t PlayerPositionX; // 0x150
        int32_t PlayerPositionY; // 0x154
        int32_t PlayerPositionZ; // 0x158
        int32_t GunPositionX; // 0x15c
        int32_t GunPositionY; // 0x160
        int32_t GunPositionZ; // 0x164
        int32_t BulletsBornPositionX; // 0x168
        int32_t BulletsBornPositionY; // 0x16c
        int32_t BulletsBornPositionZ; // 0x170
        int32_t LastHitTime; // 0x174
        int32_t BulletFlyDistance; // 0x178
        int32_t BulletFlyTime; // 0x17c
        int32_t HitPositionX; // 0x180
        int32_t HitPositionY; // 0x184
        int32_t HitPositionZ; // 0x188
        int32_t HitPart; // 0x18c
        int32_t RecoilMoveX; // 0x190
        int32_t RecoilMoveY; // 0x194
        int32_t WeaponAimFOV; // 0x198
        int32_t BulletDamageBuff; // 0x19c
        int32_t HitSubHeadPart; // 0x1a0
        bool bPenetrateArmor; // 0x1a4
        int64_t HitMovableArmorID; // 0x1a8
        float MovableArmorConsume; // 0x1b0
        float MovableArmorBlockDamage; // 0x1b4
        float FireNetAvgLag; // 0x1b8
        float FireNetLossPercentage; // 0x1bc
        float FireNetAvgLossPercentage; // 0x1c0
        float CauserMaxLocDelta; // 0x1c4
        float HitNetAvgLag; // 0x1c8
        float HitNetLossPercentage; // 0x1cc
        float HitNetAvgLossPercentage; // 0x1d0
        float TakerMaxLocDelta; // 0x1d4
        uint32_t TargetVestArmorID; // 0x1d8
        uint32_t TargetHelmetArmorID; // 0x1dc
        uint32_t TargetFaceShieldID; // 0x1e0
        uint32_t TargetThighArmorID; // 0x1e4
        int32_t QuietStep; // 0x1e8
        int32_t ContinuousFireCount; // 0x1ec
        float ShotTargetDistance; // 0x1f0
        int32_t TimeSeconds; // 0x1f4
        uint64_t ShotTargetGID; // 0x1f8
        int32_t TimeFromLastThrow; // 0x200

    };

    struct FInteractionStatistics //ScriptStruct UAGame.InteractionStatistics
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t ItemID; // 0x0
        uint32_t MapID; // 0x4
        int32_t InteractionType; // 0x8

    };

    struct FPlayerTakeDamageByWeaponStatistics //ScriptStruct UAGame.PlayerTakeDamageByWeaponStatistics
    {
    //Children Prop Count (Fields): 51
    public:

        struct FString WeaponName; // 0x0
        struct FString BulletName; // 0x10
        struct FString WeaponType; // 0x20
        int32_t VestLevel; // 0x30
        struct FString VestName; // 0x38
        int32_t HelmetLevel; // 0x48
        struct FString HelmetName; // 0x50
        struct FString DamageHitType; // 0x60
        float ResultDamage; // 0x70
        float ArmorConsume; // 0x74
        float PenetrateDamage; // 0x78
        float CharacterAllEndurance; // 0x7c
        struct FString HitArmorName; // 0x80
        float CurWeaponADSTime; // 0x90
        float CurWeaponFireInterval; // 0x94
        float ValidAimTime; // 0x98
        int32_t DamageHitTypeInt; // 0x9c
        float ArmorReduceDamage; // 0xa0
        float ShootDistance; // 0xa4
        int32_t TeamType; // 0xa8
        bool bIsDead; // 0xac
        uint64_t ShooterCharacterID; // 0xb0
        int32_t ShooterTeamType; // 0xb8
        int32_t CharacterType; // 0xbc
        int32_t WeaponValue; // 0xc0
        int32_t HitSubEndurance; // 0xc4
        float VerticalRecoil; // 0xc8
        float HorizontalRecoil; // 0xcc
        struct FString SightName; // 0xd0
        int32_t WeaponId; // 0xe0
        int32_t MapID; // 0xe4
        int32_t Weatherid; // 0xe8
        int32_t HurtFlowID; // 0xec
        int32_t EnemyRoleType; // 0xf0
        struct FString EnemyRoleID; // 0xf8
        struct FString EnemyUserName; // 0x108
        int32_t HurtTime; // 0x118
        int32_t HurtType; // 0x11c
        int32_t DamageStart; // 0x120
        int32_t DamageReduce; // 0x124
        int32_t HPstart; // 0x128
        int32_t HPEnd; // 0x12c
        int32_t HelmetHPStart; // 0x130
        int32_t HelmetHPEnd; // 0x134
        int32_t ArmorHPStart; // 0x138
        int32_t ArmorHPEnd; // 0x13c
        int32_t FallHeight; // 0x140
        int32_t PlayerKilled; // 0x144
        struct FString DebuffStartList; // 0x148
        struct FString DebuffEndList; // 0x158
        bool bPenetrateArmor; // 0x168

    };

    struct FUATeamEscapeRow //ScriptStruct UAGame.UATeamEscapeRow
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t EscapePointID; // 0x0
        enum class EEscapeExploreState State; // 0x4

    };

    struct FTeammemberPlayerBaseInfo //ScriptStruct UAGame.TeammemberPlayerBaseInfo
    {
    //Children Prop Count (Fields): 11
    public:

        int32_t IndexInTeam; // 0x0
        uint64_t GID; // 0x8
        int32_t SquadIndex; // 0x10
        class AController* Controller; // 0x18
        class ASGCharacter* Character; // 0x20
        enum class ECharacterSex CharacterSex; // 0x28
        struct FTeammemberTitleInfo TitleInfo; // 0x2c
        struct FTeammemberStatusInfo StatusInfo; // 0x38
        struct FTeammemberIdentityInfo IdentityInfo; // 0x50
        bool bIsAI; // 0x68
        bool bRemoved; // 0x69

    };

    struct FTeammemberIdentityInfo //ScriptStruct UAGame.TeammemberIdentityInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString PlayerName; // 0x0
        int32_t PlayerLevel; // 0x10
        int32_t HeadBoxID; // 0x14

    };

    struct FTeammemberStatusInfo //ScriptStruct UAGame.TeammemberStatusInfo
    {
    //Children Prop Count (Fields): 3
    public:

        enum class ESGPlayerCondition Condition; // 0x0
        struct FVector2D DeathLocation; // 0x4
        struct FVector TransientLocation; // 0xc

    };

    struct FTeammemberTitleInfo //ScriptStruct UAGame.TeammemberTitleInfo
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t TitleID; // 0x0
        int32_t TitleStarNum; // 0x4
        int32_t TitleRank; // 0x8

    };

    struct FTeamPlayerBaseInfo //ScriptStruct UAGame.TeamPlayerBaseInfo
    {
    //Children Prop Count (Fields): 7
    public:

        uint64_t GID; // 0x0
        int32_t SquadIndex; // 0x8
        class ASGPlayerState* PlayerState; // 0x10
        enum class ECharacterSex CharacterSex; // 0x18
        int32_t TitleID; // 0x1c
        int32_t TitleStarNum; // 0x20
        int32_t TitleRank; // 0x24

    };

    struct FTeamPlayerInfo //ScriptStruct UAGame.TeamPlayerInfo
    {
    //Children Prop Count (Fields): 5
    public:

        struct FVector2D Sign_EscapePointPos; // 0x0
        int32_t Sign_EscapePointID; // 0x8
        struct FTraceableActorInfo Sign_QuestTraceInfo; // 0xc
        struct FVector2D Sign_PlayerPos; // 0x64
        int64_t UpdateTimeStamp; // 0x70

    };

    struct FTraceInfoHistoryBlackboard //ScriptStruct UAGame.TraceInfoHistoryBlackboard
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FNewTraceableActorInfo> ActiveTraceDataList; // 0x0
        struct TArray<struct FNewTraceableActorInfo> PassivityTraceDataList; // 0x10

    };

    struct FTutorialCheckpointSettings //ScriptStruct UAGame.TutorialCheckpointSettings
    {
    //Children Prop Count (Fields): 2
    public:

        class ASGPlayerStart* PlayerStart; // 0x0
        bool bResetCaptainRotation; // 0x8

    };

    struct FTutorialCaptainTipRow : FTableRowBase //ScriptStruct UAGame.TutorialCaptainTipRow
    {
    //Children Prop Count (Fields): 5
    public:

        int64_t HUDTableID; // 0x8
        struct FName VoiceRowName; // 0x10
        class UAnimMontage* BodyMontage; // 0x18
        struct FName MontageSectionName; // 0x20
        struct FString FacialMontage; // 0x28

    };

    struct FCACameraChangeArray //ScriptStruct UAGame.CACameraChangeArray
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FCACameraChangeFocusSpeed> SpeedItem; // 0x0

    };

    struct FCACameraChangeFocusSpeed //ScriptStruct UAGame.CACameraChangeFocusSpeed
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Name; // 0x0
        float Speed; // 0x10

    };

    struct FCACameraAdvancedFocus //ScriptStruct UAGame.CACameraAdvancedFocus
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector position; // 0x0
        struct FRotator Rotation; // 0xc

    };

    struct FNewTraceableActorInfoList //ScriptStruct UAGame.NewTraceableActorInfoList
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FNewTraceableActorInfo> TraceableActorInfos; // 0x0

    };

    struct FInventoryInfo //ScriptStruct UAGame.InventoryInfo
    {
    //Children Prop Count (Fields): 12
    public:

        int64_t ItemGID; // 0x0
        int64_t ItemID; // 0x8
        int32_t StackCount; // 0x10
        int32_t Durability; // 0x14
        int32_t MaxDurability; // 0x18
        int64_t ParentGID; // 0x20
        int32_t Index; // 0x28
        int32_t StartRow; // 0x2c
        int32_t StartColumn; // 0x30
        enum class EAttachPosition AttachPosition; // 0x34
        int32_t InsureType; // 0x38
        int64_t TakeInPlayerGID; // 0x40

    };

    struct FDarkZonePlayerStartPointInfo //ScriptStruct UAGame.DarkZonePlayerStartPointInfo
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<class AActor*> PlayerStartPointList; // 0x0
        struct TArray<int32_t> TeamIndexList; // 0x10
        int32_t GroupIndex; // 0x20
        struct TArray<class AActor*> TeamPlayerStartPointList; // 0x28

    };

    struct FDarkZoneEscapePointInfo //ScriptStruct UAGame.DarkZoneEscapePointInfo
    {
    //Children Prop Count (Fields): 2
    public:

        class AActor* EscapePoint; // 0x0
        float Ratio; // 0x8

    };

    struct FRestrictedAreaInfo //ScriptStruct UAGame.RestrictedAreaInfo
    {
    //Children Prop Count (Fields): 7
    public:

        float CenterPointOffsetMax; // 0x0
        struct FVector CenterPoint; // 0x4
        float Radius; // 0x10
        float WaitTime; // 0x14
        float ShrinkTime; // 0x18
        int32_t Damage; // 0x1c
        float DamageInterval; // 0x20

    };

    struct FUAPickupLevelConfigsTableRow : FTableRowBase //ScriptStruct UAGame.UAPickupLevelConfigsTableRow
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t Level; // 0x8
        struct FString Describtion; // 0x10
        float Percent; // 0x20
        struct TArray<struct FUAPickupPercentage> PickupPercentages; // 0x28

    };

    struct FUAPickupPercentage //ScriptStruct UAGame.UAPickupPercentage
    {
    //Children Prop Count (Fields): 2
    public:

        struct FSoftClassProperty PickupClass; // 0x0
        float Percent; // 0x28

    };

    struct FUAPickupLevelPercentage //ScriptStruct UAGame.UAPickupLevelPercentage
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t Level; // 0x0
        float Percent; // 0x4

    };

    struct FInvisibleTag //ScriptStruct UAGame.InvisibleTag
    {
    public:


    };

    struct FVolumeSpawnedInventoryInfo //ScriptStruct UAGame.VolumeSpawnedInventoryInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct TWeakObjectPtr<struct ASGInventory> SpawnedInventory; // 0x0
        struct FMissionObjectiveSpawnInventoryInfo SpawnInventoryInfo; // 0x8

    };

    struct FCompositeFont //ScriptStruct SlateCore.CompositeFont
    {
    //Children Prop Count (Fields): 3
    public:

        struct FTypeface DefaultTypeface; // 0x0
        struct FCompositeFallbackFont FallbackTypeface; // 0x10
        struct TArray<struct FCompositeSubFont> SubTypefaces; // 0x28

    };

    struct FCompositeFallbackFont //ScriptStruct SlateCore.CompositeFallbackFont
    {
    //Children Prop Count (Fields): 2
    public:

        struct FTypeface Typeface; // 0x0
        float ScalingFactor; // 0x10

    };

    struct FTypeface //ScriptStruct SlateCore.Typeface
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FTypefaceEntry> Fonts; // 0x0

    };

    struct FTypefaceEntry //ScriptStruct SlateCore.TypefaceEntry
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Name; // 0x0
        struct FFontData Font; // 0x8

    };

    struct FFontData //ScriptStruct SlateCore.FontData
    {
    //Children Prop Count (Fields): 6
    public:

        struct FString FontFilename; // 0x0
        enum class EFontHinting Hinting; // 0x10
        enum class EFontLoadingPolicy LoadingPolicy; // 0x11
        bool IsKeepInMemory; // 0x12
        int32_t SubFaceIndex; // 0x14
        class UObject* FontFaceAsset; // 0x18

    };

    struct FCompositeSubFont : FCompositeFallbackFont //ScriptStruct SlateCore.CompositeSubFont
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FInt32Range> CharacterRanges; // 0x18
        struct FString Cultures; // 0x28

    };

    struct FCaptureLostEvent //ScriptStruct SlateCore.CaptureLostEvent
    {
    public:


    };

    struct FWindowStyle : FSlateWidgetStyle //ScriptStruct SlateCore.WindowStyle
    {
    //Children Prop Count (Fields): 14
    public:

        struct FButtonStyle MinimizeButtonStyle; // 0x8
        struct FButtonStyle MaximizeButtonStyle; // 0x2a0
        struct FButtonStyle RestoreButtonStyle; // 0x538
        struct FButtonStyle CloseButtonStyle; // 0x7d0
        struct FTextBlockStyle TitleTextStyle; // 0xa68
        struct FSlateBrush ActiveTitleBrush; // 0xcf0
        struct FSlateBrush InactiveTitleBrush; // 0xd80
        struct FSlateBrush FlashTitleBrush; // 0xe10
        struct FSlateColor BackgroundColor; // 0xea0
        struct FSlateBrush OutlineBrush; // 0xec8
        struct FSlateColor OutlineColor; // 0xf58
        struct FSlateBrush BorderBrush; // 0xf80
        struct FSlateBrush BackgroundBrush; // 0x1010
        struct FSlateBrush ChildBackgroundBrush; // 0x10a0

    };

    struct FScrollBorderStyle : FSlateWidgetStyle //ScriptStruct SlateCore.ScrollBorderStyle
    {
    //Children Prop Count (Fields): 2
    public:

        struct FSlateBrush TopShadowBrush; // 0x8
        struct FSlateBrush BottomShadowBrush; // 0x98

    };

    struct FScrollBoxStyle : FSlateWidgetStyle //ScriptStruct SlateCore.ScrollBoxStyle
    {
    //Children Prop Count (Fields): 4
    public:

        struct FSlateBrush TopShadowBrush; // 0x8
        struct FSlateBrush BottomShadowBrush; // 0x98
        struct FSlateBrush LeftShadowBrush; // 0x128
        struct FSlateBrush RightShadowBrush; // 0x1b8

    };

    struct FDockTabStyle : FSlateWidgetStyle //ScriptStruct SlateCore.DockTabStyle
    {
    //Children Prop Count (Fields): 12
    public:

        struct FButtonStyle CloseButtonStyle; // 0x8
        struct FSlateBrush NormalBrush; // 0x2a0
        struct FSlateBrush ActiveBrush; // 0x330
        struct FSlateBrush ColorOverlayTabBrush; // 0x3c0
        struct FSlateBrush ColorOverlayIconBrush; // 0x450
        struct FSlateBrush ForegroundBrush; // 0x4e0
        struct FSlateBrush HoveredBrush; // 0x570
        struct FSlateBrush ContentAreaBrush; // 0x600
        struct FSlateBrush TabWellBrush; // 0x690
        struct FMargin TabPadding; // 0x720
        float OverlapWidth; // 0x730
        struct FSlateColor FlashColor; // 0x738

    };

    struct FHeaderRowStyle : FSlateWidgetStyle //ScriptStruct SlateCore.HeaderRowStyle
    {
    //Children Prop Count (Fields): 5
    public:

        struct FTableColumnHeaderStyle ColumnStyle; // 0x8
        struct FTableColumnHeaderStyle LastColumnStyle; // 0x520
        struct FSplitterStyle ColumnSplitterStyle; // 0xa38
        struct FSlateBrush BackgroundBrush; // 0xb60
        struct FSlateColor ForegroundColor; // 0xbf0

    };

    struct FSplitterStyle : FSlateWidgetStyle //ScriptStruct SlateCore.SplitterStyle
    {
    //Children Prop Count (Fields): 2
    public:

        struct FSlateBrush HandleNormalBrush; // 0x8
        struct FSlateBrush HandleHighlightBrush; // 0x98

    };

    struct FTableColumnHeaderStyle : FSlateWidgetStyle //ScriptStruct SlateCore.TableColumnHeaderStyle
    {
    //Children Prop Count (Fields): 9
    public:

        struct FSlateBrush SortPrimaryAscendingImage; // 0x8
        struct FSlateBrush SortPrimaryDescendingImage; // 0x98
        struct FSlateBrush SortSecondaryAscendingImage; // 0x128
        struct FSlateBrush SortSecondaryDescendingImage; // 0x1b8
        struct FSlateBrush NormalBrush; // 0x248
        struct FSlateBrush HoveredBrush; // 0x2d8
        struct FSlateBrush MenuDropdownImage; // 0x368
        struct FSlateBrush MenuDropdownNormalBorderBrush; // 0x3f8
        struct FSlateBrush MenuDropdownHoveredBorderBrush; // 0x488

    };

    struct FInlineTextImageStyle : FSlateWidgetStyle //ScriptStruct SlateCore.InlineTextImageStyle
    {
    //Children Prop Count (Fields): 2
    public:

        struct FSlateBrush Image; // 0x8
        int16_t Baseline; // 0x98

    };

    struct FVolumeControlStyle : FSlateWidgetStyle //ScriptStruct SlateCore.VolumeControlStyle
    {
    //Children Prop Count (Fields): 6
    public:

        struct FSliderStyle SliderStyle; // 0x8
        struct FSlateBrush HighVolumeImage; // 0x378
        struct FSlateBrush MidVolumeImage; // 0x408
        struct FSlateBrush LowVolumeImage; // 0x498
        struct FSlateBrush NoVolumeImage; // 0x528
        struct FSlateBrush MutedImage; // 0x5b8

    };

    struct FSliderStyle : FSlateWidgetStyle //ScriptStruct SlateCore.SliderStyle
    {
    //Children Prop Count (Fields): 7
    public:

        struct FSlateBrush NormalBarImage; // 0x8
        struct FSlateBrush HoveredBarImage; // 0x98
        struct FSlateBrush DisabledBarImage; // 0x128
        struct FSlateBrush NormalThumbImage; // 0x1b8
        struct FSlateBrush HoveredThumbImage; // 0x248
        struct FSlateBrush DisabledThumbImage; // 0x2d8
        float BarThickness; // 0x368

    };

    struct FSearchBoxStyle : FSlateWidgetStyle //ScriptStruct SlateCore.SearchBoxStyle
    {
    //Children Prop Count (Fields): 8
    public:

        struct FEditableTextBoxStyle TextBoxStyle; // 0x8
        struct FSlateFontInfo ActiveFontInfo; // 0x868
        struct FSlateBrush UpArrowImage; // 0x8c0
        struct FSlateBrush DownArrowImage; // 0x950
        struct FSlateBrush GlassImage; // 0x9e0
        struct FSlateBrush ClearImage; // 0xa70
        struct FMargin ImagePadding; // 0xb00
        bool bLeftAlignButtons; // 0xb10

    };

    struct FExpandableAreaStyle : FSlateWidgetStyle //ScriptStruct SlateCore.ExpandableAreaStyle
    {
    //Children Prop Count (Fields): 3
    public:

        struct FSlateBrush CollapsedImage; // 0x8
        struct FSlateBrush ExpandedImage; // 0x98
        float RolloutAnimationSeconds; // 0x128

    };

    struct FProgressBarStyle : FSlateWidgetStyle //ScriptStruct SlateCore.ProgressBarStyle
    {
    //Children Prop Count (Fields): 3
    public:

        struct FSlateBrush BackgroundImage; // 0x8
        struct FSlateBrush FillImage; // 0x98
        struct FSlateBrush MarqueeImage; // 0x128

    };

    struct FInlineEditableTextBlockStyle : FSlateWidgetStyle //ScriptStruct SlateCore.InlineEditableTextBlockStyle
    {
    //Children Prop Count (Fields): 2
    public:

        struct FEditableTextBoxStyle EditableTextBoxStyle; // 0x8
        struct FTextBlockStyle TextStyle; // 0x868

    };

    struct FHyperlinkStyle : FSlateWidgetStyle //ScriptStruct SlateCore.HyperlinkStyle
    {
    //Children Prop Count (Fields): 3
    public:

        struct FButtonStyle UnderlineStyle; // 0x8
        struct FTextBlockStyle TextStyle; // 0x2a0
        struct FMargin Padding; // 0x528

    };

    struct FCheckBoxStyle : FSlateWidgetStyle //ScriptStruct SlateCore.CheckBoxStyle
    {
    //Children Prop Count (Fields): 16
    public:

        enum class ESlateCheckBoxType CheckBoxType; // 0x8
        struct FSlateBrush UncheckedImage; // 0x10
        struct FSlateBrush UncheckedHoveredImage; // 0xa0
        struct FSlateBrush UncheckedPressedImage; // 0x130
        struct FSlateBrush CheckedImage; // 0x1c0
        struct FSlateBrush CheckedHoveredImage; // 0x250
        struct FSlateBrush CheckedPressedImage; // 0x2e0
        struct FSlateBrush UndeterminedImage; // 0x370
        struct FSlateBrush UndeterminedHoveredImage; // 0x400
        struct FSlateBrush UndeterminedPressedImage; // 0x490
        struct FMargin Padding; // 0x520
        struct FSlateColor ForegroundColor; // 0x530
        struct FSlateColor BorderBackgroundColor; // 0x558
        struct FSlateSound CheckedSlateSound; // 0x580
        struct FSlateSound UncheckedSlateSound; // 0x598
        struct FSlateSound HoveredSlateSound; // 0x5b0

    };

    struct FCustomizedToolMenu //ScriptStruct Slate.CustomizedToolMenu
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName Name; // 0x0
        struct TMap<struct FName, struct FCustomizedToolMenuEntry> Entries; // 0x8
        struct TMap<struct FName, struct FCustomizedToolMenuSection> Sections; // 0x58
        struct TMap<struct FName, struct FCustomizedToolMenuNameArray> EntryOrder; // 0xa8
        struct TArray<struct FName> SectionOrder; // 0xf8

    };

    struct FCustomizedToolMenuNameArray //ScriptStruct Slate.CustomizedToolMenuNameArray
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FName> Names; // 0x0

    };

    struct FCustomizedToolMenuSection //ScriptStruct Slate.CustomizedToolMenuSection
    {
    //Children Prop Count (Fields): 1
    public:

        enum class ECustomizedToolMenuVisibility Visibility; // 0x0

    };

    struct FCustomizedToolMenuEntry //ScriptStruct Slate.CustomizedToolMenuEntry
    {
    //Children Prop Count (Fields): 1
    public:

        enum class ECustomizedToolMenuVisibility Visibility; // 0x0

    };

    struct FImageWriteOptions //ScriptStruct ImageWriteQueue.ImageWriteOptions
    {
    //Children Prop Count (Fields): 5
    public:

        enum class EDesiredImageFormat Format; // 0x0
        struct FDelegate OnComplete; // 0x4
        int32_t CompressionQuality; // 0x14
        bool bOverwriteFile; // 0x18
        bool bAsync; // 0x19

    };

    struct FMaterialQualityOverrides //ScriptStruct MaterialShaderQualitySettings.MaterialQualityOverrides
    {
    //Children Prop Count (Fields): 14
    public:

        bool bDiscardQualityDuringCook; // 0x0
        bool bEnableOverride; // 0x1
        bool bForceFullyRough; // 0x2
        bool bForceNonMetal; // 0x3
        bool bForceDisableLMDirectionality; // 0x4
        bool bForceLQReflections; // 0x5
        bool bForceDisablePreintegratedGF; // 0x6
        bool bDisableMaterialNormalCalculation; // 0x7
        enum class EMobileShadowQuality MobileShadowQuality; // 0x8
        bool bDisableAdditiveReflection; // 0x9
        bool bDisableMaterialPlanarReflection; // 0xa
        bool bCalcILCPerVertex; // 0xb
        bool b1dSHForTransferTexture; // 0xc
        bool bDisableGeometricSpecularAA; // 0xd

    };

    struct FLightPropagationVolumeSettings //ScriptStruct Renderer.LightPropagationVolumeSettings
    {
    //Children Prop Count (Fields): 28
    public:

        char bOverride_LPVIntensity; // 0x0
        char bOverride_LPVDirectionalOcclusionIntensity; // 0x0
        char bOverride_LPVDirectionalOcclusionRadius; // 0x0
        char bOverride_LPVDiffuseOcclusionExponent; // 0x0
        char bOverride_LPVSpecularOcclusionExponent; // 0x0
        char bOverride_LPVDiffuseOcclusionIntensity; // 0x0
        char bOverride_LPVSpecularOcclusionIntensity; // 0x0
        char bOverride_LPVSize; // 0x0
        char bOverride_LPVSecondaryOcclusionIntensity; // 0x1
        char bOverride_LPVSecondaryBounceIntensity; // 0x1
        char bOverride_LPVGeometryVolumeBias; // 0x1
        char bOverride_LPVVplInjectionBias; // 0x1
        char bOverride_LPVEmissiveInjectionIntensity; // 0x1
        float LPVIntensity; // 0x4
        float LPVVplInjectionBias; // 0x8
        float LPVSize; // 0xc
        float LPVSecondaryOcclusionIntensity; // 0x10
        float LPVSecondaryBounceIntensity; // 0x14
        float LPVGeometryVolumeBias; // 0x18
        float LPVEmissiveInjectionIntensity; // 0x1c
        float LPVDirectionalOcclusionIntensity; // 0x20
        float LPVDirectionalOcclusionRadius; // 0x24
        float LPVDiffuseOcclusionExponent; // 0x28
        float LPVSpecularOcclusionExponent; // 0x2c
        float LPVDiffuseOcclusionIntensity; // 0x30
        float LPVSpecularOcclusionIntensity; // 0x34
        float LPVFadeRange; // 0x38
        float LPVDirectionalOcclusionFadeRange; // 0x3c

    };

    struct FAutoCompleteCommand //ScriptStruct EngineSettings.AutoCompleteCommand
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Command; // 0x0
        struct FString desc; // 0x10

    };

    struct FGameModeName //ScriptStruct EngineSettings.GameModeName
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Name; // 0x0
        struct FSoftClassPath GameMode; // 0x10

    };

    struct FChaosSolverConfiguration //ScriptStruct Chaos.ChaosSolverConfiguration
    {
    //Children Prop Count (Fields): 18
    public:

        int32_t Iterations; // 0x0
        int32_t CollisionPairIterations; // 0x4
        int32_t PushOutIterations; // 0x8
        int32_t CollisionPushOutPairIterations; // 0xc
        float CollisionMarginFraction; // 0x10
        float CollisionMarginMax; // 0x14
        float CollisionCullDistance; // 0x18
        int32_t JointPairIterations; // 0x1c
        int32_t JointPushOutPairIterations; // 0x20
        float ClusterConnectionFactor; // 0x24
        enum class EClusterUnionMethod ClusterUnionConnectionType; // 0x28
        bool bGenerateCollisionData; // 0x29
        struct FSolverCollisionFilterSettings CollisionFilterSettings; // 0x2c
        bool bGenerateBreakData; // 0x3c
        struct FSolverBreakingFilterSettings BreakingFilterSettings; // 0x40
        bool bGenerateTrailingData; // 0x50
        struct FSolverTrailingFilterSettings TrailingFilterSettings; // 0x54
        bool bGenerateContactGraph; // 0x64

    };

    struct FSolverTrailingFilterSettings //ScriptStruct Chaos.SolverTrailingFilterSettings
    {
    //Children Prop Count (Fields): 4
    public:

        bool FilterEnabled; // 0x0
        float MinMass; // 0x4
        float MinSpeed; // 0x8
        float MinVolume; // 0xc

    };

    struct FSolverBreakingFilterSettings //ScriptStruct Chaos.SolverBreakingFilterSettings
    {
    //Children Prop Count (Fields): 4
    public:

        bool FilterEnabled; // 0x0
        float MinMass; // 0x4
        float MinSpeed; // 0x8
        float MinVolume; // 0xc

    };

    struct FSolverCollisionFilterSettings //ScriptStruct Chaos.SolverCollisionFilterSettings
    {
    //Children Prop Count (Fields): 4
    public:

        bool FilterEnabled; // 0x0
        float MinMass; // 0x4
        float MinSpeed; // 0x8
        float MinImpulse; // 0xc

    };

    struct FRecordedTransformTrack //ScriptStruct Chaos.RecordedTransformTrack
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FRecordedFrame> Records; // 0x0

    };

    struct FRecordedFrame //ScriptStruct Chaos.RecordedFrame
    {
    //Children Prop Count (Fields): 8
    public:

        struct TArray<struct FTransform> Transforms; // 0x0
        struct TArray<int32_t> TransformIndices; // 0x10
        struct TArray<int32_t> PreviousTransformIndices; // 0x20
        struct TArray<bool> DisabledFlags; // 0x30
        struct TArray<struct FSolverCollisionData> Collisions; // 0x40
        struct TArray<struct FSolverBreakingData> Breakings; // 0x50
        struct TSet<struct FSolverTrailingData> Trailings; // 0x60
        float Timestamp; // 0xb0

    };

    struct FSolverTrailingData //ScriptStruct Chaos.SolverTrailingData
    {
    //Children Prop Count (Fields): 6
    public:

        struct FVector Location; // 0x0
        struct FVector Velocity; // 0xc
        struct FVector AngularVelocity; // 0x18
        float Mass; // 0x24
        int32_t ParticleIndex; // 0x28
        int32_t ParticleIndexMesh; // 0x2c

    };

    struct FSolverBreakingData //ScriptStruct Chaos.SolverBreakingData
    {
    //Children Prop Count (Fields): 6
    public:

        struct FVector Location; // 0x0
        struct FVector Velocity; // 0xc
        struct FVector AngularVelocity; // 0x18
        float Mass; // 0x24
        int32_t ParticleIndex; // 0x28
        int32_t ParticleIndexMesh; // 0x2c

    };

    struct FSolverCollisionData //ScriptStruct Chaos.SolverCollisionData
    {
    //Children Prop Count (Fields): 13
    public:

        struct FVector Location; // 0x0
        struct FVector AccumulatedImpulse; // 0xc
        struct FVector Normal; // 0x18
        struct FVector Velocity1; // 0x24
        struct FVector Velocity2; // 0x30
        struct FVector AngularVelocity1; // 0x3c
        struct FVector AngularVelocity2; // 0x48
        float Mass1; // 0x54
        float Mass2; // 0x58
        int32_t ParticleIndex; // 0x5c
        int32_t LevelsetIndex; // 0x60
        int32_t ParticleIndexMesh; // 0x64
        int32_t LevelsetIndexMesh; // 0x68

    };

    struct FMRMeshConfiguration //ScriptStruct MRMesh.MRMeshConfiguration
    {
    public:


    };

    struct FTrackedGeometryGroup //ScriptStruct AugmentedReality.TrackedGeometryGroup
    {
    //Children Prop Count (Fields): 3
    public:

        class AARActor* ARActor; // 0x0
        class UARComponent* ARComponent; // 0x8
        class UARTrackedGeometry* TrackedGeometry; // 0x10

    };

    struct FARGeoAnchorUpdatePayload //ScriptStruct AugmentedReality.ARGeoAnchorUpdatePayload
    {
    //Children Prop Count (Fields): 7
    public:

        struct FARSessionPayload SessionPayload; // 0x0
        struct FTransform WorldTransform; // 0x20
        float Longitude; // 0x50
        float Latitude; // 0x54
        float AltitudeMeters; // 0x58
        enum class EARAltitudeSource AltitudeSource; // 0x5c
        struct FString AnchorName; // 0x60

    };

    struct FARSessionPayload //ScriptStruct AugmentedReality.ARSessionPayload
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t ConfigFlags; // 0x0
        class UMaterialInterface* DefaultMeshMaterial; // 0x8
        class UMaterialInterface* DefaultWireframeMeshMaterial; // 0x10

    };

    struct FARMeshUpdatePayload //ScriptStruct AugmentedReality.ARMeshUpdatePayload
    {
    //Children Prop Count (Fields): 3
    public:

        struct FARSessionPayload SessionPayload; // 0x0
        struct FTransform WorldTransform; // 0x20
        enum class EARObjectClassification ObjectClassification; // 0x50

    };

    struct FARObjectUpdatePayload //ScriptStruct AugmentedReality.ARObjectUpdatePayload
    {
    //Children Prop Count (Fields): 1
    public:

        struct FTransform WorldTransform; // 0x0

    };

    struct FAREnvironmentProbeUpdatePayload //ScriptStruct AugmentedReality.AREnvironmentProbeUpdatePayload
    {
    //Children Prop Count (Fields): 1
    public:

        struct FTransform WorldTransform; // 0x0

    };

    struct FARPoseUpdatePayload //ScriptStruct AugmentedReality.ARPoseUpdatePayload
    {
    //Children Prop Count (Fields): 2
    public:

        struct FTransform WorldTransform; // 0x0
        struct TArray<struct FTransform> JointTransforms; // 0x30

    };

    struct FARQRCodeUpdatePayload //ScriptStruct AugmentedReality.ARQRCodeUpdatePayload
    {
    //Children Prop Count (Fields): 4
    public:

        struct FARSessionPayload SessionPayload; // 0x0
        struct FTransform WorldTransform; // 0x20
        struct FVector Extents; // 0x50
        struct FString QRCode; // 0x60

    };

    struct FARImageUpdatePayload //ScriptStruct AugmentedReality.ARImageUpdatePayload
    {
    //Children Prop Count (Fields): 4
    public:

        struct FARSessionPayload SessionPayload; // 0x0
        struct FTransform WorldTransform; // 0x20
        class UARCandidateImage* DetectedImage; // 0x50
        struct FVector2D EstimatedSize; // 0x58

    };

    struct FARFaceUpdatePayload //ScriptStruct AugmentedReality.ARFaceUpdatePayload
    {
    //Children Prop Count (Fields): 4
    public:

        struct FARSessionPayload SessionPayload; // 0x0
        struct FVector LeftEyePosition; // 0x18
        struct FVector RightEyePosition; // 0x24
        struct FVector LookAtTarget; // 0x30

    };

    struct FARPointUpdatePayload //ScriptStruct AugmentedReality.ARPointUpdatePayload
    {
    public:


    };

    struct FARPlaneUpdatePayload //ScriptStruct AugmentedReality.ARPlaneUpdatePayload
    {
    //Children Prop Count (Fields): 6
    public:

        struct FARSessionPayload SessionPayload; // 0x0
        struct FTransform WorldTransform; // 0x20
        struct FVector Center; // 0x50
        struct FVector Extents; // 0x5c
        struct TArray<struct FVector> BoundaryVertices; // 0x68
        enum class EARObjectClassification ObjectClassification; // 0x78

    };

    struct FARSharedWorldReplicationState //ScriptStruct AugmentedReality.ARSharedWorldReplicationState
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t PreviewImageOffset; // 0x0
        int32_t ARWorldOffset; // 0x4

    };

    struct FARTraceResult //ScriptStruct AugmentedReality.ARTraceResult
    {
    //Children Prop Count (Fields): 4
    public:

        float DistanceFromCamera; // 0x0
        enum class EARLineTraceChannels TraceChannel; // 0x4
        struct FTransform LocalTransform; // 0x10
        class UARTrackedGeometry* TrackedGeometry; // 0x40

    };

    struct FARCameraIntrinsics //ScriptStruct AugmentedReality.ARCameraIntrinsics
    {
    //Children Prop Count (Fields): 3
    public:

        struct FIntPoint ImageResolution; // 0x0
        struct FVector2D FocalLength; // 0x8
        struct FVector2D PrincipalPoint; // 0x10

    };

    struct FARPose3D //ScriptStruct AugmentedReality.ARPose3D
    {
    //Children Prop Count (Fields): 4
    public:

        struct FARSkeletonDefinition SkeletonDefinition; // 0x0
        struct TArray<struct FTransform> JointTransforms; // 0x28
        struct TArray<bool> IsJointTracked; // 0x38
        enum class EARJointTransformSpace JointTransformSpace; // 0x48

    };

    struct FARSkeletonDefinition //ScriptStruct AugmentedReality.ARSkeletonDefinition
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t NumJoints; // 0x0
        struct TArray<struct FName> JointNames; // 0x8
        struct TArray<int32_t> ParentIndices; // 0x18

    };

    struct FARPose2D //ScriptStruct AugmentedReality.ARPose2D
    {
    //Children Prop Count (Fields): 3
    public:

        struct FARSkeletonDefinition SkeletonDefinition; // 0x0
        struct TArray<struct FVector2D> JointLocations; // 0x28
        struct TArray<bool> IsJointTracked; // 0x38

    };

    struct FARVideoFormat //ScriptStruct AugmentedReality.ARVideoFormat
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t FPS; // 0x0
        int32_t Width; // 0x4
        int32_t Height; // 0x8

    };

    struct FARSessionStatus //ScriptStruct AugmentedReality.ARSessionStatus
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString AdditionalInfo; // 0x0
        enum class EARSessionStatus status; // 0x10

    };

    struct FXRMotionControllerData //ScriptStruct HeadMountedDisplay.XRMotionControllerData
    {
    //Children Prop Count (Fields): 14
    public:

        bool bValid; // 0x0
        struct FName DeviceName; // 0x4
        struct FGuid ApplicationInstanceID; // 0xc
        enum class EXRVisualType DeviceVisualType; // 0x1c
        enum class EControllerHand HandIndex; // 0x1d
        enum class ETrackingStatus TrackingStatus; // 0x1e
        struct FVector GripPosition; // 0x20
        struct FQuat GripRotation; // 0x30
        struct FVector AimPosition; // 0x40
        struct FQuat AimRotation; // 0x50
        struct TArray<struct FVector> HandKeyPositions; // 0x60
        struct TArray<struct FQuat> HandKeyRotations; // 0x70
        struct TArray<float> HandKeyRadii; // 0x80
        bool bIsGrasped; // 0x90

    };

    struct FXRHMDData //ScriptStruct HeadMountedDisplay.XRHMDData
    {
    //Children Prop Count (Fields): 6
    public:

        bool bValid; // 0x0
        struct FName DeviceName; // 0x4
        struct FGuid ApplicationInstanceID; // 0xc
        enum class ETrackingStatus TrackingStatus; // 0x1c
        struct FVector position; // 0x20
        struct FQuat Rotation; // 0x30

    };

    struct FXRDeviceId //ScriptStruct HeadMountedDisplay.XRDeviceId
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName SystemName; // 0x0
        int32_t DeviceID; // 0x8

    };

    struct FXRGestureConfig //ScriptStruct HeadMountedDisplay.XRGestureConfig
    {
    //Children Prop Count (Fields): 6
    public:

        bool bTap; // 0x0
        bool bHold; // 0x1
        enum class ESpatialInputGestureAxis AxisGesture; // 0x2
        bool bNavigationAxisX; // 0x3
        bool bNavigationAxisY; // 0x4
        bool bNavigationAxisZ; // 0x5

    };

    struct FFileManifestData //ScriptStruct BuildPatchServices.FileManifestData
    {
    //Children Prop Count (Fields): 8
    public:

        struct FString Filename; // 0x0
        struct FSHAHashData FileHash; // 0x10
        struct TArray<struct FChunkPartData> FileChunkParts; // 0x28
        struct TArray<struct FString> InstallTags; // 0x38
        bool bIsUnixExecutable; // 0x48
        struct FString SymlinkTarget; // 0x50
        bool bIsReadOnly; // 0x60
        bool bIsCompressed; // 0x61

    };

    struct FChunkPartData //ScriptStruct BuildPatchServices.ChunkPartData
    {
    //Children Prop Count (Fields): 3
    public:

        struct FGuid Guid; // 0x0
        uint32_t Offset; // 0x10
        uint32_t Size; // 0x14

    };

    struct FSHAHashData //ScriptStruct BuildPatchServices.SHAHashData
    {
    //Children Prop Count (Fields): 1
    public:

        char Hash; // 0x0

    };

    struct FChunkInfoData //ScriptStruct BuildPatchServices.ChunkInfoData
    {
    //Children Prop Count (Fields): 5
    public:

        struct FGuid Guid; // 0x0
        uint64_t Hash; // 0x10
        struct FSHAHashData ShaHash; // 0x18
        int64_t FileSize; // 0x30
        char GroupNumber; // 0x38

    };

    struct FCustomFieldData //ScriptStruct BuildPatchServices.CustomFieldData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Key; // 0x0
        struct FString Value; // 0x10

    };

    struct FFoliageVertexColorChannelMask //ScriptStruct Foliage.FoliageVertexColorChannelMask
    {
    //Children Prop Count (Fields): 3
    public:

        char UseMask; // 0x0
        float MaskThreshold; // 0x4
        char InvertMask; // 0x8

    };

    struct FFoliageTypeObject //ScriptStruct Foliage.FoliageTypeObject
    {
    //Children Prop Count (Fields): 4
    public:

        class UObject* FoliageTypeObject; // 0x0
        class UFoliageType* TypeInstance; // 0x8
        bool bIsAsset; // 0x10
        class UFoliageType_InstancedStaticMesh* Type; // 0x18

    };

    struct FProceduralFoliageInstance //ScriptStruct Foliage.ProceduralFoliageInstance
    {
    //Children Prop Count (Fields): 6
    public:

        struct FQuat Rotation; // 0x0
        struct FVector Location; // 0x10
        float Age; // 0x1c
        struct FVector Normal; // 0x20
        float Scale; // 0x2c
        class UFoliageType* Type; // 0x30

    };

    struct FOffsetData //ScriptStruct Landscape.OffsetData
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<char> Data; // 0x0

    };

    struct FLandscapeLayer //ScriptStruct Landscape.LandscapeLayer
    {
    //Children Prop Count (Fields): 9
    public:

        struct FGuid Guid; // 0x0
        struct FName Name; // 0x10
        bool bVisible; // 0x18
        bool bLocked; // 0x19
        float HeightmapAlpha; // 0x1c
        float WeightmapAlpha; // 0x20
        enum class ELandscapeBlendMode BlendMode; // 0x24
        struct TArray<struct FLandscapeLayerBrush> Brushes; // 0x28
        struct TMap<class ULandscapeLayerInfoObject*, bool> WeightmapLayerAllocationBlend; // 0x38

    };

    struct FLandscapeLayerBrush //ScriptStruct Landscape.LandscapeLayerBrush
    {
    public:


    };

    struct FLandscapeLayerComponentData //ScriptStruct Landscape.LandscapeLayerComponentData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FHeightmapData HeightmapData; // 0x0
        struct FWeightmapData WeightmapData; // 0x8

    };

    struct FWeightmapData //ScriptStruct Landscape.WeightmapData
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<class UTexture2D*> Textures; // 0x0
        struct TArray<struct FWeightmapLayerAllocationInfo> LayerAllocations; // 0x10
        struct TArray<class ULandscapeWeightmapUsage*> TextureUsages; // 0x20

    };

    struct FWeightmapLayerAllocationInfo //ScriptStruct Landscape.WeightmapLayerAllocationInfo
    {
    //Children Prop Count (Fields): 3
    public:

        class ULandscapeLayerInfoObject* LayerInfo; // 0x0
        char WeightmapTextureIndex; // 0x8
        char WeightmapTextureChannel; // 0x9

    };

    struct FHeightmapData //ScriptStruct Landscape.HeightmapData
    {
    //Children Prop Count (Fields): 1
    public:

        class UTexture2D* Texture; // 0x0

    };

    struct FLandscapeComponentMaterialOverride //ScriptStruct Landscape.LandscapeComponentMaterialOverride
    {
    //Children Prop Count (Fields): 2
    public:

        struct FPerPlatformInt LODIndex; // 0x0
        class UMaterialInterface* Material; // 0x8

    };

    struct FPerPlatformInt //ScriptStruct Engine.PerPlatformInt
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t Default; // 0x0
        int32_t ScalableBias; // 0x4

    };

    struct FLandscapeEditToolRenderData //ScriptStruct Landscape.LandscapeEditToolRenderData
    {
    //Children Prop Count (Fields): 9
    public:

        class UMaterialInterface* ToolMaterial; // 0x0
        class UMaterialInterface* GizmoMaterial; // 0x8
        int32_t SelectedType; // 0x10
        int32_t DebugChannelR; // 0x14
        int32_t DebugChannelG; // 0x18
        int32_t DebugChannelB; // 0x1c
        class UTexture2D* DataTexture; // 0x20
        class UTexture2D* LayerContributionTexture; // 0x28
        class UTexture2D* DirtyTexture; // 0x30

    };

    struct FGizmoSelectData //ScriptStruct Landscape.GizmoSelectData
    {
    public:


    };

    struct FGrassVariety //ScriptStruct Landscape.GrassVariety
    {
    //Children Prop Count (Fields): 34
    public:

        class UStaticMesh* GrassMesh; // 0x0
        struct TArray<class UMaterialInterface*> OverrideMaterials; // 0x8
        struct FPerPlatformFloat GrassDensity; // 0x18
        struct FPerPlatformFloat MaxOffset; // 0x1c
        struct FPerPlatformFloat MinGrassWeight; // 0x20
        bool bUseGrid; // 0x24
        float PlacementJitter; // 0x28
        struct FPerPlatformInt StartCullDistance; // 0x2c
        struct FPerPlatformInt EndCullDistance; // 0x34
        float FallOffExponent; // 0x3c
        struct FFloatInterval OffsetWeight; // 0x40
        struct FFloatInterval OffsetRange; // 0x48
        struct FFloatInterval EdgeScaleWeight; // 0x50
        struct FFloatInterval EdgeScaleRatio; // 0x58
        int32_t MinLOD; // 0x60
        enum class EGrassScaling Scaling; // 0x64
        enum class EGrassPreservePriority GrassPreservePriority; // 0x68
        struct FFloatInterval ScaleX; // 0x6c
        struct FFloatInterval ScaleY; // 0x74
        struct FFloatInterval ScaleZ; // 0x7c
        bool RandomRotation; // 0x84
        bool AlignToSurface; // 0x85
        bool bUseLandscapeLightmap; // 0x86
        struct FLightingChannels LightingChannels; // 0x87
        bool bReceivesDecals; // 0x88
        bool bCastDynamicShadow; // 0x89
        bool bCastShadow; // 0x8a
        bool bCastContactShadow; // 0x8b
        bool bKeepInstanceBufferCPUCopy; // 0x8c
        bool bForceUseSkyLightAsDiffuseGI; // 0x8d
        enum class EIndirectLightingCacheQuality IndirectLightingCacheQuality; // 0x8e
        bool bReMergeInstancing; // 0x8f
        bool bHiddenShadowOnShadowCapture; // 0x90
        enum class EShadowCaptureLayer ShadowCaptureLayer; // 0x91

    };

    struct FPerPlatformFloat //ScriptStruct Engine.PerPlatformFloat
    {
    //Children Prop Count (Fields): 1
    public:

        float Default; // 0x0

    };

    struct FLandscapeInfoLayerSettings //ScriptStruct Landscape.LandscapeInfoLayerSettings
    {
    //Children Prop Count (Fields): 2
    public:

        class ULandscapeLayerInfoObject* LayerInfoObj; // 0x0
        struct FName LayerName; // 0x8

    };

    struct FLandscapeMaterialTextureStreamingInfo //ScriptStruct Landscape.LandscapeMaterialTextureStreamingInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName TextureName; // 0x0
        float TexelFactor; // 0x8

    };

    struct FLandscapeProxyMaterialOverride //ScriptStruct Landscape.LandscapeProxyMaterialOverride
    {
    //Children Prop Count (Fields): 2
    public:

        struct FPerPlatformInt LODIndex; // 0x0
        class UMaterialInterface* Material; // 0x8

    };

    struct FLandscapeImportLayerInfo //ScriptStruct Landscape.LandscapeImportLayerInfo
    {
    public:


    };

    struct FLandscapeLayerStruct //ScriptStruct Landscape.LandscapeLayerStruct
    {
    //Children Prop Count (Fields): 1
    public:

        class ULandscapeLayerInfoObject* LayerInfoObj; // 0x0

    };

    struct FLandscapeEditorLayerSettings //ScriptStruct Landscape.LandscapeEditorLayerSettings
    {
    public:


    };

    struct FLandscapeSplineConnection //ScriptStruct Landscape.LandscapeSplineConnection
    {
    //Children Prop Count (Fields): 2
    public:

        class ULandscapeSplineSegment* Segment; // 0x0
        char End; // 0x8

    };

    struct FForeignWorldSplineData //ScriptStruct Landscape.ForeignWorldSplineData
    {
    public:


    };

    struct FForeignSplineSegmentData //ScriptStruct Landscape.ForeignSplineSegmentData
    {
    public:


    };

    struct FForeignControlPointData //ScriptStruct Landscape.ForeignControlPointData
    {
    public:


    };

    struct FLandscapeSplineMeshEntry //ScriptStruct Landscape.LandscapeSplineMeshEntry
    {
    //Children Prop Count (Fields): 9
    public:

        class UStaticMesh* Mesh; // 0x0
        struct TArray<class UMaterialInterface*> MaterialOverrides; // 0x8
        char bCenterH; // 0x18
        struct FVector2D CenterAdjust; // 0x1c
        char bScaleToWidth; // 0x24
        struct FVector Scale; // 0x28
        enum class LandscapeSplineMeshOrientation Orientation; // 0x34
        enum class ESplineMeshAxis ForwardAxis; // 0x35
        enum class ESplineMeshAxis UpAxis; // 0x36

    };

    struct FLandscapeSplineSegmentConnection //ScriptStruct Landscape.LandscapeSplineSegmentConnection
    {
    //Children Prop Count (Fields): 3
    public:

        class ULandscapeSplineControlPoint* ControlPoint; // 0x0
        float TangentLen; // 0x8
        struct FName SocketName; // 0xc

    };

    struct FLandscapeSplineInterpPoint //ScriptStruct Landscape.LandscapeSplineInterpPoint
    {
    //Children Prop Count (Fields): 10
    public:

        struct FVector Center; // 0x0
        struct FVector Left; // 0xc
        struct FVector Right; // 0x18
        struct FVector FalloffLeft; // 0x24
        struct FVector FalloffRight; // 0x30
        struct FVector LayerLeft; // 0x3c
        struct FVector LayerRight; // 0x48
        struct FVector LayerFalloffLeft; // 0x54
        struct FVector LayerFalloffRight; // 0x60
        float StartEndFalloff; // 0x6c

    };

    struct FGrassInput //ScriptStruct Landscape.GrassInput
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Name; // 0x0
        class ULandscapeGrassType* GrassType; // 0x8
        struct FExpressionInput Input; // 0x10

    };

    struct FLayerBlendInput //ScriptStruct Landscape.LayerBlendInput
    {
    //Children Prop Count (Fields): 7
    public:

        struct FName LayerName; // 0x0
        enum class ELandscapeLayerBlendType BlendType; // 0x8
        struct FExpressionInput LayerInput; // 0xc
        struct FExpressionInput HeightInput; // 0x20
        float PreviewWeight; // 0x34
        struct FVector ConstLayerInput; // 0x38
        float ConstHeightInput; // 0x44

    };

    struct FPhysicalMaterialInput //ScriptStruct Landscape.PhysicalMaterialInput
    {
    //Children Prop Count (Fields): 2
    public:

        class UPhysicalMaterial* PhysicalMaterial; // 0x0
        struct FExpressionInput Input; // 0x8

    };

    struct FTimedDataInputEvaluationData //ScriptStruct TimeManagement.TimedDataInputEvaluationData
    {
    //Children Prop Count (Fields): 2
    public:

        float DistanceToNewestSampleSeconds; // 0x0
        float DistanceToOldestSampleSeconds; // 0x4

    };

    struct FTimedDataChannelSampleTime //ScriptStruct TimeManagement.TimedDataChannelSampleTime
    {
    public:


    };

    struct FTrackInstanceInputComponent //ScriptStruct MovieScene.TrackInstanceInputComponent
    {
    //Children Prop Count (Fields): 2
    public:

        class UMovieSceneSection* Section; // 0x0
        int32_t OutputIndex; // 0x8

    };

    struct FMovieSceneTrackInstanceComponent //ScriptStruct MovieScene.MovieSceneTrackInstanceComponent
    {
    //Children Prop Count (Fields): 2
    public:

        class UMovieSceneSection* Owner; // 0x0
        class UMovieSceneTrackInstance* TrackInstanceClass; // 0x8

    };

    struct FEasingComponentData //ScriptStruct MovieScene.EasingComponentData
    {
    //Children Prop Count (Fields): 1
    public:

        class UMovieSceneSection* Section; // 0x0

    };

    struct FMovieScenePropertyBinding //ScriptStruct MovieScene.MovieScenePropertyBinding
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName PropertyName; // 0x0
        struct FName PropertyPath; // 0x8
        bool bCanUseClassLookup; // 0x10

    };

    struct FMovieSceneSectionGroup //ScriptStruct MovieScene.MovieSceneSectionGroup
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct TWeakObjectPtr<struct UMovieSceneSection>> Sections; // 0x0

    };

    struct FMovieSceneObjectBindingIDs //ScriptStruct MovieScene.MovieSceneObjectBindingIDs
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FMovieSceneObjectBindingID> IDs; // 0x0

    };

    struct FMovieSceneObjectBindingID //ScriptStruct MovieScene.MovieSceneObjectBindingID
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t SequenceID; // 0x0
        enum class EMovieSceneObjectBindingSpace Space; // 0x4
        struct FGuid Guid; // 0x8

    };

    struct FMovieSceneTrackLabels //ScriptStruct MovieScene.MovieSceneTrackLabels
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FString> Strings; // 0x0

    };

    struct FMovieSceneEditorData //ScriptStruct MovieScene.MovieSceneEditorData
    {
    //Children Prop Count (Fields): 9
    public:

        struct TMap<struct FString, struct FMovieSceneExpansionState> ExpansionStates; // 0x0
        struct TArray<struct FString> PinnedNodes; // 0x50
        double ViewStart; // 0x60
        double ViewEnd; // 0x68
        double WorkStart; // 0x70
        double WorkEnd; // 0x78
        struct TSet<struct FFrameNumber> MarkedFrames; // 0x80
        struct FFloatRange WorkingRange; // 0xd0
        struct FFloatRange ViewRange; // 0xe0

    };

    struct FMovieSceneExpansionState //ScriptStruct MovieScene.MovieSceneExpansionState
    {
    //Children Prop Count (Fields): 1
    public:

        bool bExpanded; // 0x0

    };

    struct FMovieSceneMarkedFrame //ScriptStruct MovieScene.MovieSceneMarkedFrame
    {
    //Children Prop Count (Fields): 2
    public:

        struct FFrameNumber FrameNumber; // 0x0
        struct FString label; // 0x8

    };

    struct FMovieSceneTimecodeSource //ScriptStruct MovieScene.MovieSceneTimecodeSource
    {
    //Children Prop Count (Fields): 2
    public:

        struct FTimecode Timecode; // 0x0
        struct FFrameNumber DeltaFrame; // 0x14

    };

    struct FMovieSceneBinding //ScriptStruct MovieScene.MovieSceneBinding
    {
    //Children Prop Count (Fields): 3
    public:

        struct FGuid ObjectGuid; // 0x0
        struct FString BindingName; // 0x10
        struct TArray<class UMovieSceneTrack*> Tracks; // 0x20

    };

    struct FMovieSceneBindingOverrideData //ScriptStruct MovieScene.MovieSceneBindingOverrideData
    {
    //Children Prop Count (Fields): 3
    public:

        struct FMovieSceneObjectBindingID ObjectBindingID; // 0x0
        struct TWeakObjectPtr<struct UObject> Object; // 0x18
        bool bOverridesDefault; // 0x20

    };

    struct FOptionalMovieSceneBlendType //ScriptStruct MovieScene.OptionalMovieSceneBlendType
    {
    //Children Prop Count (Fields): 2
    public:

        enum class EMovieSceneBlendType BlendType; // 0x0
        bool bIsValid; // 0x1

    };

    struct FMovieSceneSequenceCompilerMaskStruct //ScriptStruct MovieScene.MovieSceneSequenceCompilerMaskStruct
    {
    //Children Prop Count (Fields): 4
    public:

        char bHierarchy; // 0x0
        char bEvaluationTemplate; // 0x0
        char bEvaluationTemplateField; // 0x0
        char bEntityComponentField; // 0x0

    };

    struct FMovieSceneEntitySystemGraph //ScriptStruct MovieScene.MovieSceneEntitySystemGraph
    {
    //Children Prop Count (Fields): 1
    public:

        struct FMovieSceneEntitySystemGraphNodes Nodes; // 0x80

    };

    struct FMovieSceneEntitySystemGraphNodes //ScriptStruct MovieScene.MovieSceneEntitySystemGraphNodes
    {
    public:


    };

    struct FMovieSceneEntitySystemGraphNode //ScriptStruct MovieScene.MovieSceneEntitySystemGraphNode
    {
    //Children Prop Count (Fields): 1
    public:

        class UMovieSceneEntitySystem* System; // 0x20

    };

    struct FMovieSceneEvalTemplatePtr //ScriptStruct MovieScene.MovieSceneEvalTemplatePtr
    {
    public:


    };

    struct FMovieSceneEmptyStruct //ScriptStruct MovieScene.MovieSceneEmptyStruct
    {
    public:


    };

    struct FMovieSceneEvaluationField //ScriptStruct MovieScene.MovieSceneEvaluationField
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FMovieSceneFrameRange> Ranges; // 0x0
        struct TArray<struct FMovieSceneEvaluationGroup> Groups; // 0x10
        struct TArray<struct FMovieSceneEvaluationMetaData> MetaData; // 0x20

    };

    struct FMovieSceneEvaluationMetaData //ScriptStruct MovieScene.MovieSceneEvaluationMetaData
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FMovieSceneSequenceID> ActiveSequences; // 0x0
        struct TArray<struct FMovieSceneOrderedEvaluationKey> ActiveEntities; // 0x10

    };

    struct FMovieSceneOrderedEvaluationKey //ScriptStruct MovieScene.MovieSceneOrderedEvaluationKey
    {
    //Children Prop Count (Fields): 3
    public:

        struct FMovieSceneEvaluationKey Key; // 0x0
        uint16_t SetupIndex; // 0xc
        uint16_t TearDownIndex; // 0xe

    };

    struct FMovieSceneEvaluationKey //ScriptStruct MovieScene.MovieSceneEvaluationKey
    {
    //Children Prop Count (Fields): 3
    public:

        struct FMovieSceneSequenceID SequenceID; // 0x0
        struct FMovieSceneTrackIdentifier TrackIdentifier; // 0x4
        uint32_t SectionIndex; // 0x8

    };

    struct FMovieSceneTrackIdentifier //ScriptStruct MovieScene.MovieSceneTrackIdentifier
    {
    //Children Prop Count (Fields): 1
    public:

        uint32_t Value; // 0x0

    };

    struct FMovieSceneEvaluationGroup //ScriptStruct MovieScene.MovieSceneEvaluationGroup
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FMovieSceneEvaluationGroupLUTIndex> LUTIndices; // 0x0
        struct TArray<struct FMovieSceneFieldEntry_EvaluationTrack> TrackLUT; // 0x10
        struct TArray<struct FMovieSceneFieldEntry_ChildTemplate> SectionLUT; // 0x20

    };

    struct FMovieSceneFieldEntry_ChildTemplate //ScriptStruct MovieScene.MovieSceneFieldEntry_ChildTemplate
    {
    //Children Prop Count (Fields): 3
    public:

        uint16_t ChildIndex; // 0x0
        enum class ESectionEvaluationFlags Flags; // 0x2
        struct FFrameNumber ForcedTime; // 0x4

    };

    struct FMovieSceneFieldEntry_EvaluationTrack //ScriptStruct MovieScene.MovieSceneFieldEntry_EvaluationTrack
    {
    //Children Prop Count (Fields): 2
    public:

        struct FMovieSceneEvaluationFieldTrackPtr TrackPtr; // 0x0
        uint16_t NumChildren; // 0x8

    };

    struct FMovieSceneEvaluationFieldTrackPtr //ScriptStruct MovieScene.MovieSceneEvaluationFieldTrackPtr
    {
    //Children Prop Count (Fields): 2
    public:

        struct FMovieSceneSequenceID SequenceID; // 0x0
        struct FMovieSceneTrackIdentifier TrackIdentifier; // 0x4

    };

    struct FMovieSceneEvaluationGroupLUTIndex //ScriptStruct MovieScene.MovieSceneEvaluationGroupLUTIndex
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t NumInitPtrs; // 0x0
        int32_t NumEvalPtrs; // 0x4

    };

    struct FMovieSceneFrameRange //ScriptStruct MovieScene.MovieSceneFrameRange
    {
    public:


    };

    struct FMovieSceneEvaluationFieldSegmentPtr : FMovieSceneEvaluationFieldTrackPtr //ScriptStruct MovieScene.MovieSceneEvaluationFieldSegmentPtr
    {
    //Children Prop Count (Fields): 1
    public:

        struct FMovieSceneSegmentIdentifier SegmentID; // 0x8

    };

    struct FMovieSceneSegmentIdentifier //ScriptStruct MovieScene.MovieSceneSegmentIdentifier
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t IdentifierIndex; // 0x0

    };

    struct FMovieSceneEntityComponentField //ScriptStruct MovieScene.MovieSceneEntityComponentField
    {
    //Children Prop Count (Fields): 5
    public:

        struct FMovieSceneEvaluationFieldEntityTree PersistentEntityTree; // 0x0
        struct FMovieSceneEvaluationFieldEntityTree OneShotEntityTree; // 0x60
        struct TArray<struct FMovieSceneEvaluationFieldEntity> Entities; // 0xc0
        struct TArray<struct FMovieSceneEvaluationFieldEntityMetaData> EntityMetaData; // 0xd0
        struct TArray<struct FMovieSceneEvaluationFieldSharedEntityMetaData> SharedMetaData; // 0xe0

    };

    struct FMovieSceneEvaluationFieldSharedEntityMetaData //ScriptStruct MovieScene.MovieSceneEvaluationFieldSharedEntityMetaData
    {
    //Children Prop Count (Fields): 1
    public:

        struct FGuid ObjectBindingID; // 0x0

    };

    struct FMovieSceneEvaluationFieldEntityMetaData //ScriptStruct MovieScene.MovieSceneEvaluationFieldEntityMetaData
    {
    //Children Prop Count (Fields): 4
    public:

        struct FFrameNumber ForcedTime; // 0x0
        enum class ESectionEvaluationFlags Flags; // 0x8
        char bEvaluateInSequencePreRoll; // 0x9
        char bEvaluateInSequencePostRoll; // 0x9

    };

    struct FMovieSceneEvaluationFieldEntity //ScriptStruct MovieScene.MovieSceneEvaluationFieldEntity
    {
    //Children Prop Count (Fields): 2
    public:

        struct FMovieSceneEvaluationFieldEntityKey Key; // 0x0
        int32_t SharedMetaDataIndex; // 0xc

    };

    struct FMovieSceneEvaluationFieldEntityKey //ScriptStruct MovieScene.MovieSceneEvaluationFieldEntityKey
    {
    //Children Prop Count (Fields): 2
    public:

        struct TWeakObjectPtr<struct UObject> EntityOwner; // 0x0
        uint32_t EntityID; // 0x8

    };

    struct FMovieSceneEvaluationFieldEntityTree //ScriptStruct MovieScene.MovieSceneEvaluationFieldEntityTree
    {
    public:


    };

    struct FMovieSceneEvaluationTemplate //ScriptStruct MovieScene.MovieSceneEvaluationTemplate
    {
    //Children Prop Count (Fields): 4
    public:

        struct TMap<struct FMovieSceneTrackIdentifier, struct FMovieSceneEvaluationTrack> Tracks; // 0x0
        struct FGuid SequenceSignature; // 0xa0
        struct FMovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber; // 0xb0
        struct FMovieSceneTemplateGenerationLedger TemplateLedger; // 0xb8

    };

    struct FMovieSceneTemplateGenerationLedger //ScriptStruct MovieScene.MovieSceneTemplateGenerationLedger
    {
    //Children Prop Count (Fields): 3
    public:

        struct FMovieSceneTrackIdentifier LastTrackIdentifier; // 0x0
        struct TMap<struct FGuid, struct FMovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier; // 0x8
        struct TMap<struct FGuid, struct FMovieSceneFrameRange> SubSectionRanges; // 0x58

    };

    struct FMovieSceneEvaluationTemplateSerialNumber //ScriptStruct MovieScene.MovieSceneEvaluationTemplateSerialNumber
    {
    //Children Prop Count (Fields): 1
    public:

        uint32_t Value; // 0x0

    };

    struct FMovieSceneEvaluationTrack //ScriptStruct MovieScene.MovieSceneEvaluationTrack
    {
    //Children Prop Count (Fields): 10
    public:

        struct FGuid ObjectBindingID; // 0x0
        uint16_t EvaluationPriority; // 0x10
        enum class EEvaluationMethod EvaluationMethod; // 0x12
        struct TWeakObjectPtr<struct UMovieSceneTrack> SourceTrack; // 0x14
        struct TArray<struct FMovieSceneEvalTemplatePtr> ChildTemplates; // 0x20
        struct FMovieSceneTrackImplementationPtr TrackTemplate; // 0x30
        struct FName EvaluationGroup; // 0x68
        char bEvaluateInPreroll; // 0x70
        char bEvaluateInPostroll; // 0x70
        char bTearDownPriority; // 0x70

    };

    struct FMovieSceneTrackImplementationPtr //ScriptStruct MovieScene.MovieSceneTrackImplementationPtr
    {
    public:


    };

    struct FMovieSceneSubSectionData //ScriptStruct MovieScene.MovieSceneSubSectionData
    {
    //Children Prop Count (Fields): 3
    public:

        struct TWeakObjectPtr<struct UMovieSceneSubSection> Section; // 0x0
        struct FGuid ObjectBindingID; // 0x8
        enum class ESectionEvaluationFlags Flags; // 0x18

    };

    struct FMovieSceneRootEvaluationTemplateInstance //ScriptStruct MovieScene.MovieSceneRootEvaluationTemplateInstance
    {
    //Children Prop Count (Fields): 4
    public:

        struct TWeakObjectPtr<struct UMovieSceneSequence> WeakRootSequence; // 0x0
        class UMovieSceneCompiledDataManager* CompiledDataManager; // 0x8
        class UMovieSceneEntitySystemLinker* EntitySystemLinker; // 0x18
        struct TMap<struct FMovieSceneSequenceID, class UObject*> DirectorInstances; // 0x90

    };

    struct FMovieSceneKeyStruct //ScriptStruct MovieScene.MovieSceneKeyStruct
    {
    public:


    };

    struct FMovieSceneKeyTimeStruct : FMovieSceneKeyStruct //ScriptStruct MovieScene.MovieSceneKeyTimeStruct
    {
    //Children Prop Count (Fields): 1
    public:

        struct FFrameNumber Time; // 0x8

    };

    struct FGeneratedMovieSceneKeyStruct //ScriptStruct MovieScene.GeneratedMovieSceneKeyStruct
    {
    public:


    };

    struct FMovieSceneObjectPathChannel : FMovieSceneChannel //ScriptStruct MovieScene.MovieSceneObjectPathChannel
    {
    //Children Prop Count (Fields): 4
    public:

        class UObject* PropertyClass; // 0x8
        struct TArray<struct FFrameNumber> Times; // 0x10
        struct TArray<struct FMovieSceneObjectPathChannelKeyValue> Values; // 0x20
        struct FMovieSceneObjectPathChannelKeyValue DefaultValue; // 0x30

    };

    struct FMovieSceneObjectPathChannelKeyValue //ScriptStruct MovieScene.MovieSceneObjectPathChannelKeyValue
    {
    //Children Prop Count (Fields): 2
    public:

        struct TSoftObjectPtr<UObject> SoftPtr; // 0x0
        class UObject* HardPtr; // 0x28

    };

    struct FMovieScenePossessable //ScriptStruct MovieScene.MovieScenePossessable
    {
    //Children Prop Count (Fields): 5
    public:

        struct TArray<struct FName> Tags; // 0x0
        struct FGuid Guid; // 0x10
        struct FString Name; // 0x20
        class UObject* PossessedObjectClass; // 0x30
        struct FGuid ParentGuid; // 0x38

    };

    struct FMovieScenePropertySectionTemplate : FMovieSceneEvalTemplate //ScriptStruct MovieScene.MovieScenePropertySectionTemplate
    {
    //Children Prop Count (Fields): 1
    public:

        struct FMovieScenePropertySectionData PropertyData; // 0x20

    };

    struct FMovieScenePropertySectionData //ScriptStruct MovieScene.MovieScenePropertySectionData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName PropertyName; // 0x0
        struct FString PropertyPath; // 0x8

    };

    struct FMovieSceneEasingSettings //ScriptStruct MovieScene.MovieSceneEasingSettings
    {
    //Children Prop Count (Fields): 8
    public:

        int32_t AutoEaseInDuration; // 0x0
        int32_t AutoEaseOutDuration; // 0x4
        struct TScriptInterface<IMovieSceneEasingFunction> EaseIn; // 0x8
        bool bManualEaseIn; // 0x18
        int32_t ManualEaseInDuration; // 0x1c
        struct TScriptInterface<IMovieSceneEasingFunction> EaseOut; // 0x20
        bool bManualEaseOut; // 0x30
        int32_t ManualEaseOutDuration; // 0x34

    };

    struct FMovieSceneSectionEvalOptions //ScriptStruct MovieScene.MovieSceneSectionEvalOptions
    {
    //Children Prop Count (Fields): 2
    public:

        bool bCanEditCompletionMode; // 0x0
        enum class EMovieSceneCompletionMode CompletionMode; // 0x1

    };

    struct FMovieSceneSectionParameters //ScriptStruct MovieScene.MovieSceneSectionParameters
    {
    //Children Prop Count (Fields): 9
    public:

        struct FFrameNumber StartFrameOffset; // 0x0
        bool bCanLoop; // 0x4
        struct FFrameNumber EndFrameOffset; // 0x8
        struct FFrameNumber FirstLoopStartFrameOffset; // 0xc
        float TimeScale; // 0x10
        int32_t HierarchicalBias; // 0x14
        float StartOffset; // 0x18
        float PrerollTime; // 0x1c
        float PostrollTime; // 0x20

    };

    struct FMovieSceneSegment //ScriptStruct MovieScene.MovieSceneSegment
    {
    public:


    };

    struct FSectionEvaluationData //ScriptStruct MovieScene.SectionEvaluationData
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t ImplIndex; // 0x0
        struct FFrameNumber ForcedTime; // 0x4
        enum class ESectionEvaluationFlags Flags; // 0x8

    };

    struct FMovieSceneSequenceHierarchy //ScriptStruct MovieScene.MovieSceneSequenceHierarchy
    {
    //Children Prop Count (Fields): 4
    public:

        struct FMovieSceneSequenceHierarchyNode RootNode; // 0x0
        struct FMovieSceneSubSequenceTree Tree; // 0x18
        struct TMap<struct FMovieSceneSequenceID, struct FMovieSceneSubSequenceData> SubSequences; // 0x78
        struct TMap<struct FMovieSceneSequenceID, struct FMovieSceneSequenceHierarchyNode> Hierarchy; // 0xc8

    };

    struct FMovieSceneSequenceHierarchyNode //ScriptStruct MovieScene.MovieSceneSequenceHierarchyNode
    {
    //Children Prop Count (Fields): 2
    public:

        struct FMovieSceneSequenceID ParentID; // 0x0
        struct TArray<struct FMovieSceneSequenceID> Children; // 0x8

    };

    struct FMovieSceneSubSequenceData //ScriptStruct MovieScene.MovieSceneSubSequenceData
    {
    //Children Prop Count (Fields): 14
    public:

        struct FSoftObjectPath Sequence; // 0x0
        struct FMovieSceneSequenceTransform RootToSequenceTransform; // 0x18
        struct FFrameRate TickResolution; // 0x38
        struct FMovieSceneSequenceID DeterministicSequenceID; // 0x40
        struct FMovieSceneFrameRange PlayRange; // 0x44
        struct FMovieSceneFrameRange FullPlayRange; // 0x54
        struct FMovieSceneFrameRange UnwarpedPlayRange; // 0x64
        struct FMovieSceneFrameRange PreRollRange; // 0x74
        struct FMovieSceneFrameRange PostRollRange; // 0x84
        int16_t HierarchicalBias; // 0x94
        bool bHasHierarchicalEasing; // 0x96
        struct FMovieSceneSequenceInstanceDataPtr InstanceData; // 0x98
        struct FGuid SubSectionSignature; // 0xb8
        struct FMovieSceneSequenceTransform OuterToInnerTransform; // 0xc8

    };

    struct FMovieSceneSequenceTransform //ScriptStruct MovieScene.MovieSceneSequenceTransform
    {
    //Children Prop Count (Fields): 2
    public:

        struct FMovieSceneTimeTransform LinearTransform; // 0x0
        struct TArray<struct FMovieSceneNestedSequenceTransform> NestedTransforms; // 0x10

    };

    struct FMovieSceneNestedSequenceTransform //ScriptStruct MovieScene.MovieSceneNestedSequenceTransform
    {
    //Children Prop Count (Fields): 2
    public:

        struct FMovieSceneTimeTransform LinearTransform; // 0x0
        struct FMovieSceneTimeWarping Warping; // 0xc

    };

    struct FMovieSceneTimeWarping //ScriptStruct MovieScene.MovieSceneTimeWarping
    {
    //Children Prop Count (Fields): 2
    public:

        struct FFrameNumber Start; // 0x0
        struct FFrameNumber End; // 0x4

    };

    struct FMovieSceneTimeTransform //ScriptStruct MovieScene.MovieSceneTimeTransform
    {
    //Children Prop Count (Fields): 2
    public:

        float TimeScale; // 0x0
        struct FFrameTime Offset; // 0x4

    };

    struct FMovieSceneSequenceInstanceDataPtr //ScriptStruct MovieScene.MovieSceneSequenceInstanceDataPtr
    {
    public:


    };

    struct FMovieSceneSubSequenceTree //ScriptStruct MovieScene.MovieSceneSubSequenceTree
    {
    public:


    };

    struct FMovieSceneSubSequenceTreeEntry //ScriptStruct MovieScene.MovieSceneSubSequenceTreeEntry
    {
    public:


    };

    struct FMovieSceneSequencePlaybackParams //ScriptStruct MovieScene.MovieSceneSequencePlaybackParams
    {
    //Children Prop Count (Fields): 5
    public:

        struct FFrameTime Frame; // 0x0
        float Time; // 0x8
        struct FString MarkedFrame; // 0x10
        enum class EMovieScenePositionType PositionType; // 0x20
        enum class EUpdatePositionMethod UpdateMethod; // 0x21

    };

    struct FMovieSceneSequencePlaybackSettings //ScriptStruct MovieScene.MovieSceneSequencePlaybackSettings
    {
    //Children Prop Count (Fields): 12
    public:

        char bAutoPlay; // 0x0
        struct FMovieSceneSequenceLoopCount LoopCount; // 0x4
        float PlayRate; // 0x8
        float StartTime; // 0xc
        char bRandomStartTime; // 0x10
        char bRestoreState; // 0x10
        char bDisableMovementInput; // 0x10
        char bDisableLookAtInput; // 0x10
        char bHidePlayer; // 0x10
        char bHideHud; // 0x10
        char bDisableCameraCuts; // 0x10
        char bPauseAtEnd; // 0x10

    };

    struct FMovieSceneSequenceLoopCount //ScriptStruct MovieScene.MovieSceneSequenceLoopCount
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t Value; // 0x0

    };

    struct FMovieSceneSequenceReplProperties //ScriptStruct MovieScene.MovieSceneSequenceReplProperties
    {
    //Children Prop Count (Fields): 3
    public:

        struct FFrameTime LastKnownPosition; // 0x0
        enum class EMovieScenePlayerStatus LastKnownStatus; // 0x8
        int32_t LastKnownNumLoops; // 0xc

    };

    struct FMovieSceneWarpCounter //ScriptStruct MovieScene.MovieSceneWarpCounter
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<uint32_t> WarpCounts; // 0x0

    };

    struct FMovieSceneSpawnable //ScriptStruct MovieScene.MovieSceneSpawnable
    {
    //Children Prop Count (Fields): 10
    public:

        struct FTransform SpawnTransform; // 0x0
        struct TArray<struct FName> Tags; // 0x30
        bool bContinuouslyRespawn; // 0x40
        bool bEvaluateTracksWhenNotSpawned; // 0x41
        struct FGuid Guid; // 0x44
        struct FString Name; // 0x58
        class UObject* ObjectTemplate; // 0x68
        struct TArray<struct FGuid> ChildPossessables; // 0x70
        enum class ESpawnOwnership Ownership; // 0x80
        struct FName LevelName; // 0x84

    };

    struct FTestMovieSceneEvalTemplate : FMovieSceneEvalTemplate //ScriptStruct MovieScene.TestMovieSceneEvalTemplate
    {
    public:


    };

    struct FMovieSceneTrackDisplayOptions //ScriptStruct MovieScene.MovieSceneTrackDisplayOptions
    {
    //Children Prop Count (Fields): 1
    public:

        char bShowVerticalFrames; // 0x0

    };

    struct FMovieSceneTrackEvalOptions //ScriptStruct MovieScene.MovieSceneTrackEvalOptions
    {
    //Children Prop Count (Fields): 5
    public:

        char bCanEvaluateNearestSection; // 0x0
        char bEvalNearestSection; // 0x0
        char bEvaluateInPreroll; // 0x0
        char bEvaluateInPostroll; // 0x0
        char bEvaluateNearestSection; // 0x0

    };

    struct FMovieSceneTrackEvaluationField //ScriptStruct MovieScene.MovieSceneTrackEvaluationField
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FMovieSceneTrackEvaluationFieldEntry> Entries; // 0x0

    };

    struct FMovieSceneTrackEvaluationFieldEntry //ScriptStruct MovieScene.MovieSceneTrackEvaluationFieldEntry
    {
    //Children Prop Count (Fields): 5
    public:

        class UMovieSceneSection* Section; // 0x0
        struct FFrameNumberRange Range; // 0x8
        struct FFrameNumber ForcedTime; // 0x18
        enum class ESectionEvaluationFlags Flags; // 0x1c
        int16_t LegacySortOrder; // 0x1e

    };

    struct FMovieSceneTrackInstanceInput //ScriptStruct MovieScene.MovieSceneTrackInstanceInput
    {
    //Children Prop Count (Fields): 1
    public:

        class UMovieSceneSection* Section; // 0x0

    };

    struct FMovieSceneTrackInstanceEntry //ScriptStruct MovieScene.MovieSceneTrackInstanceEntry
    {
    //Children Prop Count (Fields): 2
    public:

        class UObject* BoundObject; // 0x0
        class UMovieSceneTrackInstance* TrackInstance; // 0x8

    };

    struct FAxis //ScriptStruct AnimationCore.Axis
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Axis; // 0x0
        bool bInLocalSpace; // 0xc

    };

    struct FConstraintDescriptionEx //ScriptStruct AnimationCore.ConstraintDescriptionEx
    {
    //Children Prop Count (Fields): 1
    public:

        struct FFilterOptionPerAxis AxesFilterOption; // 0x8

    };

    struct FAimConstraintDescription : FConstraintDescriptionEx //ScriptStruct AnimationCore.AimConstraintDescription
    {
    //Children Prop Count (Fields): 4
    public:

        struct FAxis LookAt_Axis; // 0x10
        struct FAxis LookUp_Axis; // 0x20
        bool bUseLookUp; // 0x30
        struct FVector LookUpTarget; // 0x34

    };

    struct FTransformConstraintDescription : FConstraintDescriptionEx //ScriptStruct AnimationCore.TransformConstraintDescription
    {
    //Children Prop Count (Fields): 1
    public:

        enum class ETransformConstraintType TransformType; // 0x10

    };

    struct FNodeChain //ScriptStruct AnimationCore.NodeChain
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FName> Nodes; // 0x0

    };

    struct FTransformNoScale //ScriptStruct AnimationCore.TransformNoScale
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Location; // 0x0
        struct FQuat Rotation; // 0x10

    };

    struct FAnimNode_AssetPlayerBase : FAnimNode_Base //ScriptStruct Engine.AnimNode_AssetPlayerBase
    {
    //Children Prop Count (Fields): 6
    public:

        struct FName GroupName; // 0x10
        enum class EAnimGroupRole GroupRole; // 0x18
        enum class EAnimSyncGroupScope GroupScope; // 0x19
        bool bIgnoreForRelevancyTest; // 0x1a
        float BlendWeight; // 0x1c
        float InternalTimeAccumulator; // 0x20

    };

    struct FAnimNode_BlendSpacePlayer : FAnimNode_AssetPlayerBase //ScriptStruct AnimGraphRuntime.AnimNode_BlendSpacePlayer
    {
    //Children Prop Count (Fields): 16
    public:

        float X; // 0x120
        float Y; // 0x124
        float Z; // 0x128
        float PlayRate; // 0x12c
        bool bLoop; // 0x130
        bool bResetPlayTimeWhenBlendSpaceChanges; // 0x131
        float StartPosition; // 0x134
        class UBlendSpaceBase* BlendSpace; // 0x138
        bool bResetPlayTimeWhenStartPositionChanges; // 0x140
        bool bResetAccumulateTimeWhenActive; // 0x141
        bool bUseOverrideInterpolationParam; // 0x148
        struct FInterpolationParameter OverrideInterpolationParam_X; // 0x14c
        struct FInterpolationParameter OverrideInterpolationParam_Y; // 0x154
        class UBlendSpaceBase* PreviousBlendSpace; // 0x1e8
        float PreviousStartPosition; // 0x1f0
        class UAnimSequence* LastCachedAnimSequence; // 0x200

    };

    struct FAnimNode_AimOffsetLookAt : FAnimNode_BlendSpacePlayer //ScriptStruct AnimGraphRuntime.AnimNode_AimOffsetLookAt
    {
    //Children Prop Count (Fields): 7
    public:

        struct FPoseLink BasePose; // 0x270
        int32_t LODThreshold; // 0x280
        struct FName SourceSocketName; // 0x284
        struct FName PivotSocketName; // 0x28c
        struct FVector LookAtLocation; // 0x294
        struct FVector SocketAxis; // 0x2a0
        float Alpha; // 0x2ac

    };

    struct FAnimNode_AnimDynamics : FAnimNode_SkeletalControlBase //ScriptStruct AnimGraphRuntime.AnimNode_AnimDynamics
    {
    //Children Prop Count (Fields): 44
    public:

        float LinearDampingOverride; // 0xd0
        float AngularDampingOverride; // 0xd4
        struct FBoneReference RelativeSpaceBone; // 0x140
        struct FBoneReference BoundBone; // 0x150
        struct FBoneReference ChainEnd; // 0x160
        struct FVector BoxExtents; // 0x170
        struct FVector LocalJointOffset; // 0x17c
        float GravityScale; // 0x188
        struct FVector GravityOverride; // 0x18c
        float LinearSpringConstant; // 0x198
        float AngularSpringConstant; // 0x19c
        float WindScale; // 0x1a0
        struct FVector ComponentLinearAccScale; // 0x1a4
        struct FVector ComponentLinearVelScale; // 0x1b0
        struct FVector ComponentAppliedLinearAccClamp; // 0x1bc
        float AngularBiasOverride; // 0x1c8
        int32_t NumSolverIterationsPreUpdate; // 0x1cc
        int32_t NumSolverIterationsPostUpdate; // 0x1d0
        struct FAnimPhysConstraintSetup ConstraintSetup; // 0x1d4
        struct TArray<struct FAnimPhysSphericalLimit> SphericalLimits; // 0x220
        float SphereCollisionRadius; // 0x230
        struct FVector ExternalForce; // 0x234
        struct TArray<struct FAnimPhysPlanarLimit> PlanarLimits; // 0x240
        enum class AnimPhysCollisionType CollisionType; // 0x250
        enum class AnimPhysSimSpaceType SimulationSpace; // 0x251
        char bUseSphericalLimits; // 0x254
        char bUsePlanarLimit; // 0x254
        char bDoUpdate; // 0x254
        char bDoEval; // 0x254
        char bOverrideLinearDamping; // 0x254
        char bOverrideAngularBias; // 0x254
        char bOverrideAngularDamping; // 0x254
        char bEnableWind; // 0x254
        char bUseGravityOverride; // 0x255
        char bLinearSpring; // 0x255
        char bAngularSpring; // 0x255
        char bClamp; // 0x255
        struct FBoneReference ClampReferenceBone; // 0x258
        struct FVector ClampTranslationMin; // 0x268
        struct FVector ClampTranslationMax; // 0x274
        struct FRotator ClampRotationMin; // 0x280
        struct FRotator ClampRotationMax; // 0x28c
        char bChain; // 0x298
        struct FRotationRetargetingInfo RetargetingSettings; // 0x2a0

    };

    struct FRotationRetargetingInfo //ScriptStruct AnimGraphRuntime.RotationRetargetingInfo
    {
    //Children Prop Count (Fields): 15
    public:

        bool bEnabled; // 0x0
        struct FTransform Source; // 0x10
        struct FTransform Target; // 0x40
        enum class ERotationComponent RotationComponent; // 0x70
        struct FVector TwistAxis; // 0x74
        bool bUseAbsoluteAngle; // 0x80
        float SourceMinimum; // 0x84
        float SourceMaximum; // 0x88
        float TargetMinimum; // 0x8c
        float TargetMaximum; // 0x90
        enum class EEasingFuncType EasingType; // 0x94
        struct FRuntimeFloatCurve CustomCurve; // 0x98
        bool bFlipEasing; // 0x120
        float EasingWeight; // 0x124
        bool bClamp; // 0x128

    };

    struct FAnimPhysPlanarLimit //ScriptStruct AnimGraphRuntime.AnimPhysPlanarLimit
    {
    //Children Prop Count (Fields): 2
    public:

        struct FBoneReference DrivingBone; // 0x0
        struct FTransform PlaneTransform; // 0x10

    };

    struct FAnimPhysSphericalLimit //ScriptStruct AnimGraphRuntime.AnimPhysSphericalLimit
    {
    //Children Prop Count (Fields): 4
    public:

        struct FBoneReference DrivingBone; // 0x0
        struct FVector SphereLocalOffset; // 0x10
        float LimitRadius; // 0x1c
        enum class ESphericalLimitType LimitType; // 0x20

    };

    struct FAnimPhysConstraintSetup //ScriptStruct AnimGraphRuntime.AnimPhysConstraintSetup
    {
    //Children Prop Count (Fields): 12
    public:

        enum class AnimPhysLinearConstraintType LinearXLimitType; // 0x0
        enum class AnimPhysLinearConstraintType LinearYLimitType; // 0x1
        enum class AnimPhysLinearConstraintType LinearZLimitType; // 0x2
        struct FVector LinearAxesMin; // 0x4
        struct FVector LinearAxesMax; // 0x10
        enum class AnimPhysAngularConstraintType AngularConstraintType; // 0x1c
        enum class AnimPhysTwistAxis TwistAxis; // 0x1d
        enum class AnimPhysTwistAxis AngularTargetAxis; // 0x1e
        float ConeAngle; // 0x20
        struct FVector AngularLimitsMin; // 0x24
        struct FVector AngularLimitsMax; // 0x30
        struct FVector AngularTarget; // 0x3c

    };

    struct FAnimNode_ApplyAdditive : FAnimNode_Base //ScriptStruct AnimGraphRuntime.AnimNode_ApplyAdditive
    {
    //Children Prop Count (Fields): 10
    public:

        struct FPoseLink Base; // 0x10
        struct FPoseLink Additive; // 0x20
        float Alpha; // 0x30
        struct FInputScaleBias AlphaScaleBias; // 0x34
        int32_t LODThreshold; // 0x3c
        struct FInputAlphaBoolBlend AlphaBoolBlend; // 0x40
        struct FName AlphaCurveName; // 0x88
        struct FInputScaleBiasClamp AlphaScaleBiasClamp; // 0x90
        enum class EAnimAlphaInputType AlphaInputType; // 0xc4
        bool bAlphaBoolEnabled; // 0xc5

    };

    struct FAnimNode_ApplyLimits : FAnimNode_SkeletalControlBase //ScriptStruct AnimGraphRuntime.AnimNode_ApplyLimits
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<struct FAngularRangeLimit> AngularRangeLimits; // 0xd0
        struct TArray<struct FVector> AngularOffsets; // 0xe0
        struct TArray<struct FAngularRangeLimit> LocationRangeLimits; // 0xf0
        struct TArray<struct FVector> LocationOffsets; // 0x100

    };

    struct FAngularRangeLimit //ScriptStruct AnimGraphRuntime.AngularRangeLimit
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector LimitMin; // 0x0
        struct FVector LimitMax; // 0xc
        struct FBoneReference Bone; // 0x18

    };

    struct FAnimNode_BlendBoneByChannel : FAnimNode_Base //ScriptStruct AnimGraphRuntime.AnimNode_BlendBoneByChannel
    {
    //Children Prop Count (Fields): 6
    public:

        struct FPoseLink A; // 0x10
        struct FPoseLink B; // 0x20
        struct TArray<struct FBlendBoneByChannelEntry> BoneDefinitions; // 0x30
        float Alpha; // 0x50
        struct FInputScaleBias AlphaScaleBias; // 0x58
        enum class EBoneControlSpace TransformsSpace; // 0x60

    };

    struct FBlendBoneByChannelEntry //ScriptStruct AnimGraphRuntime.BlendBoneByChannelEntry
    {
    //Children Prop Count (Fields): 5
    public:

        struct FBoneReference SourceBone; // 0x0
        struct FBoneReference TargetBone; // 0x10
        bool bBlendTranslation; // 0x20
        bool bBlendRotation; // 0x21
        bool bBlendScale; // 0x22

    };

    struct FAnimNode_BlendListBase : FAnimNode_Base //ScriptStruct AnimGraphRuntime.AnimNode_BlendListBase
    {
    //Children Prop Count (Fields): 8
    public:

        struct TArray<struct FPoseLink> BlendPose; // 0x10
        struct TArray<float> BlendTime; // 0x20
        enum class EBlendListTransitionType TransitionType; // 0x30
        enum class EAlphaBlendOption BlendType; // 0x31
        bool bResetChildOnActivation; // 0x32
        bool bResetBlendingChildOnActivation; // 0x33
        class UCurveFloat* CustomBlendCurve; // 0x38
        class UBlendProfile* BlendProfile; // 0x40

    };

    struct FAnimNode_BlendListByBool : FAnimNode_BlendListBase //ScriptStruct AnimGraphRuntime.AnimNode_BlendListByBool
    {
    //Children Prop Count (Fields): 1
    public:

        bool bActiveValue; // 0x98

    };

    struct FAnimNode_BlendListByEnum : FAnimNode_BlendListBase //ScriptStruct AnimGraphRuntime.AnimNode_BlendListByEnum
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<int32_t> EnumToPoseIndex; // 0x98
        char ActiveEnumValue; // 0xa8

    };

    struct FAnimNode_BlendListByInt : FAnimNode_BlendListBase //ScriptStruct AnimGraphRuntime.AnimNode_BlendListByInt
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t ActiveChildIndex; // 0x98

    };

    struct FAnimNode_BlendSpaceEvaluator : FAnimNode_BlendSpacePlayer //ScriptStruct AnimGraphRuntime.AnimNode_BlendSpaceEvaluator
    {
    //Children Prop Count (Fields): 1
    public:

        float NormalizedTime; // 0x208

    };

    struct FAnimNode_BoneDrivenController : FAnimNode_SkeletalControlBase //ScriptStruct AnimGraphRuntime.AnimNode_BoneDrivenController
    {
    //Children Prop Count (Fields): 22
    public:

        struct FBoneReference SourceBone; // 0xd0
        class UCurveFloat* DrivingCurve; // 0xe0
        float Multiplier; // 0xe8
        float RangeMin; // 0xec
        float RangeMax; // 0xf0
        float RemappedMin; // 0xf4
        float RemappedMax; // 0xf8
        struct FName ParameterName; // 0xfc
        struct FBoneReference TargetBone; // 0x104
        enum class EDrivenDestinationMode DestinationMode; // 0x114
        enum class EDrivenBoneModificationMode ModificationMode; // 0x115
        enum class EComponentType SourceComponent; // 0x116
        char bUseRange; // 0x117
        char bAffectTargetTranslationX; // 0x117
        char bAffectTargetTranslationY; // 0x117
        char bAffectTargetTranslationZ; // 0x117
        char bAffectTargetRotationX; // 0x117
        char bAffectTargetRotationY; // 0x117
        char bAffectTargetRotationZ; // 0x117
        char bAffectTargetScaleX; // 0x117
        char bAffectTargetScaleY; // 0x118
        char bAffectTargetScaleZ; // 0x118

    };

    struct FAnimNode_CCDIK : FAnimNode_SkeletalControlBase //ScriptStruct AnimGraphRuntime.AnimNode_CCDIK
    {
    //Children Prop Count (Fields): 10
    public:

        struct FVector EffectorLocation; // 0xd0
        enum class EBoneControlSpace EffectorLocationSpace; // 0xdc
        struct FBoneSocketTarget EffectorTarget; // 0xe0
        struct FBoneReference TipBone; // 0x140
        struct FBoneReference RootBone; // 0x150
        float Precision; // 0x160
        int32_t MaxIterations; // 0x164
        bool bStartFromTail; // 0x168
        bool bEnableRotationLimit; // 0x169
        struct TArray<float> RotationLimitPerJoints; // 0x170

    };

    struct FAnimNode_Constraint : FAnimNode_SkeletalControlBase //ScriptStruct AnimGraphRuntime.AnimNode_Constraint
    {
    //Children Prop Count (Fields): 3
    public:

        struct FBoneReference BoneToModify; // 0xd0
        struct TArray<struct FConstraint> ConstraintSetup; // 0xe0
        struct TArray<float> ConstraintWeights; // 0xf0

    };

    struct FConstraint //ScriptStruct AnimGraphRuntime.Constraint
    {
    //Children Prop Count (Fields): 4
    public:

        struct FBoneReference TargetBone; // 0x0
        enum class EConstraintOffsetOption OffsetOption; // 0x10
        enum class ETransformConstraintType TransformType; // 0x11
        struct FFilterOptionPerAxis PerAxis; // 0x12

    };

    struct FAnimNode_CopyBone : FAnimNode_SkeletalControlBase //ScriptStruct AnimGraphRuntime.AnimNode_CopyBone
    {
    //Children Prop Count (Fields): 6
    public:

        struct FBoneReference SourceBone; // 0xd0
        struct FBoneReference TargetBone; // 0xe0
        bool bCopyTranslation; // 0xf0
        bool bCopyRotation; // 0xf1
        bool bCopyScale; // 0xf2
        enum class EBoneControlSpace ControlSpace; // 0xf3

    };

    struct FAnimNode_CopyBoneDelta : FAnimNode_SkeletalControlBase //ScriptStruct AnimGraphRuntime.AnimNode_CopyBoneDelta
    {
    //Children Prop Count (Fields): 9
    public:

        struct FBoneReference SourceBone; // 0xd0
        struct FBoneReference TargetBone; // 0xe0
        bool bCopyTranslation; // 0xf0
        bool bCopyRotation; // 0xf1
        bool bCopyScale; // 0xf2
        enum class CopyBoneDeltaMode CopyMode; // 0xf3
        float TranslationMultiplier; // 0xf4
        float RotationMultiplier; // 0xf8
        float ScaleMultiplier; // 0xfc

    };

    struct FAnimNode_CopyPoseFromMesh : FAnimNode_Base //ScriptStruct AnimGraphRuntime.AnimNode_CopyPoseFromMesh
    {
    //Children Prop Count (Fields): 6
    public:

        struct TWeakObjectPtr<struct USkeletalMeshComponent> SourceMeshComponent; // 0x10
        char bUseAttachedParent; // 0x18
        char bCopyCurves; // 0x18
        bool bCopyCustomAttributes; // 0x19
        char bUseMeshPose; // 0x1a
        struct FName RootBoneToCopy; // 0x1c

    };

    struct FAnimNode_CurveSource : FAnimNode_Base //ScriptStruct AnimGraphRuntime.AnimNode_CurveSource
    {
    //Children Prop Count (Fields): 4
    public:

        struct FPoseLink SourcePose; // 0x10
        struct FName SourceBinding; // 0x20
        float Alpha; // 0x28
        struct TScriptInterface<ICurveSourceInterface> CurveSource; // 0x30

    };

    struct FAnimNode_Fabrik : FAnimNode_SkeletalControlBase //ScriptStruct AnimGraphRuntime.AnimNode_Fabrik
    {
    //Children Prop Count (Fields): 8
    public:

        struct FTransform EffectorTransform; // 0xd0
        struct FBoneSocketTarget EffectorTarget; // 0x100
        struct FBoneReference TipBone; // 0x160
        struct FBoneReference RootBone; // 0x170
        float Precision; // 0x180
        int32_t MaxIterations; // 0x184
        enum class EBoneControlSpace EffectorTransformSpace; // 0x188
        enum class EBoneRotationSource EffectorRotationSource; // 0x189

    };

    struct FAnimNode_HandIKRetargeting : FAnimNode_SkeletalControlBase //ScriptStruct AnimGraphRuntime.AnimNode_HandIKRetargeting
    {
    //Children Prop Count (Fields): 6
    public:

        struct FBoneReference RightHandFK; // 0xd0
        struct FBoneReference LeftHandFK; // 0xe0
        struct FBoneReference RightHandIK; // 0xf0
        struct FBoneReference LeftHandIK; // 0x100
        struct TArray<struct FBoneReference> IKBonesToMove; // 0x110
        float HandFKWeight; // 0x120

    };

    struct FAnimNode_LayeredBoneBlend : FAnimNode_Base //ScriptStruct AnimGraphRuntime.AnimNode_LayeredBoneBlend
    {
    //Children Prop Count (Fields): 13
    public:

        struct FPoseLink BasePose; // 0x10
        struct TArray<struct FPoseLink> BlendPoses; // 0x20
        struct TArray<struct FInputBlendPose> LayerSetup; // 0x30
        struct TArray<float> BlendWeights; // 0x40
        bool bMeshSpaceRotationBlend; // 0x50
        bool bMeshSpaceScaleBlend; // 0x51
        enum class ECurveBlendOption CurveBlendOption; // 0x52
        int32_t DesiredCurveBlendIndex; // 0x54
        bool bBlendRootMotionBasedOnRootBone; // 0x58
        int32_t LODThreshold; // 0x5c
        struct TArray<struct FPerBoneBlendWeight> PerBoneBlendWeights; // 0x60
        struct FGuid SkeletonGuid; // 0x70
        struct FGuid VirtualBoneGuid; // 0x80

    };

    struct FPerBoneBlendWeight //ScriptStruct Engine.PerBoneBlendWeight
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t SourceIndex; // 0x0
        float BlendWeight; // 0x4

    };

    struct FAnimNode_LegIK : FAnimNode_SkeletalControlBase //ScriptStruct AnimGraphRuntime.AnimNode_LegIK
    {
    //Children Prop Count (Fields): 3
    public:

        float ReachPrecision; // 0xd0
        int32_t MaxIterations; // 0xd4
        struct TArray<struct FAnimLegIKDefinition> LegsDefinition; // 0xd8

    };

    struct FAnimLegIKDefinition //ScriptStruct AnimGraphRuntime.AnimLegIKDefinition
    {
    //Children Prop Count (Fields): 8
    public:

        struct FBoneReference IKFootBone; // 0x0
        struct FBoneReference FKFootBone; // 0x10
        int32_t NumBonesInLimb; // 0x20
        float MinRotationAngle; // 0x24
        enum class EAxis FootBoneForwardAxis; // 0x28
        enum class EAxis HingeRotationAxis; // 0x29
        bool bEnableRotationLimit; // 0x2a
        bool bEnableKneeTwistCorrection; // 0x2b

    };

    struct FAnimLegIKData //ScriptStruct AnimGraphRuntime.AnimLegIKData
    {
    public:


    };

    struct FIKChain //ScriptStruct AnimGraphRuntime.IKChain
    {
    public:


    };

    struct FIKChainLink //ScriptStruct AnimGraphRuntime.IKChainLink
    {
    public:


    };

    struct FAnimNode_LookAt : FAnimNode_SkeletalControlBase //ScriptStruct AnimGraphRuntime.AnimNode_LookAt
    {
    //Children Prop Count (Fields): 10
    public:

        struct FBoneReference BoneToModify; // 0xd0
        struct FBoneSocketTarget LookAtTarget; // 0xe0
        struct FVector LookAtLocation; // 0x140
        struct FAxis LookAt_Axis; // 0x14c
        bool bUseLookUpAxis; // 0x15c
        enum class EInterpolationBlend InterpolationType; // 0x15d
        struct FAxis LookUp_Axis; // 0x160
        float LookAtClamp; // 0x170
        float InterpolationTime; // 0x174
        float InterpolationTriggerThreashold; // 0x178

    };

    struct FAnimNode_MakeDynamicAdditive : FAnimNode_Base //ScriptStruct AnimGraphRuntime.AnimNode_MakeDynamicAdditive
    {
    //Children Prop Count (Fields): 3
    public:

        struct FPoseLink Base; // 0x10
        struct FPoseLink Additive; // 0x20
        bool bMeshSpaceAdditive; // 0x30

    };

    struct FAnimNode_ModifyBone : FAnimNode_SkeletalControlBase //ScriptStruct AnimGraphRuntime.AnimNode_ModifyBone
    {
    //Children Prop Count (Fields): 15
    public:

        struct FBoneReference BoneToModify; // 0xd0
        struct FVector Translation; // 0xe0
        struct FRotator Rotation; // 0xec
        struct FVector Scale; // 0xf8
        enum class EBoneModificationMode TranslationMode; // 0x104
        enum class EBoneModificationMode RotationMode; // 0x105
        enum class EBoneModificationMode ScaleMode; // 0x106
        enum class EBoneControlSpace TranslationSpace; // 0x107
        enum class EBoneControlSpace RotationSpace; // 0x108
        enum class EBoneControlSpace ScaleSpace; // 0x109
        bool bSkipEvaluateWhenBoneTransformUnchanged; // 0x10a
        struct FVector ActualTranslation; // 0x10c
        struct FRotator ActualRotation; // 0x118
        struct FInputVInterp TranslationInterp; // 0x124
        struct FInputRInterp RotationInterp; // 0x13c

    };

    struct FInputRInterp //ScriptStruct Engine.InputRInterp
    {
    //Children Prop Count (Fields): 4
    public:

        bool bInterpResult; // 0x0
        bool bConstInterp; // 0x1
        float InterpSpeedIncreasing; // 0x4
        float InterpSpeedDecreasing; // 0x8

    };

    struct FInputVInterp //ScriptStruct Engine.InputVInterp
    {
    //Children Prop Count (Fields): 4
    public:

        bool bInterpResult; // 0x0
        bool bConstInterp; // 0x1
        float InterpSpeedIncreasing; // 0x4
        float InterpSpeedDecreasing; // 0x8

    };

    struct FAnimNode_ModifyCurve : FAnimNode_Base //ScriptStruct AnimGraphRuntime.AnimNode_ModifyCurve
    {
    //Children Prop Count (Fields): 7
    public:

        struct FPoseLink SourcePose; // 0x10
        struct TArray<float> CurveValues; // 0x20
        struct TArray<struct FName> CurveNames; // 0x30
        float Alpha; // 0x50
        enum class EModifyCurveApplyMode ApplyMode; // 0x54
        float ActualAlpha; // 0x58
        struct FInputScaleBiasClamp AlphaScaleBiasClamp; // 0x5c

    };

    struct FAnimNode_MultiWayBlend : FAnimNode_Base //ScriptStruct AnimGraphRuntime.AnimNode_MultiWayBlend
    {
    //Children Prop Count (Fields): 5
    public:

        struct TArray<struct FPoseLink> Poses; // 0x10
        struct TArray<float> DesiredAlphas; // 0x20
        struct FInputScaleBias AlphaScaleBias; // 0x40
        bool bAdditiveNode; // 0x48
        bool bNormalizeAlpha; // 0x49

    };

    struct FAnimNode_ObserveBone : FAnimNode_SkeletalControlBase //ScriptStruct AnimGraphRuntime.AnimNode_ObserveBone
    {
    //Children Prop Count (Fields): 6
    public:

        struct FBoneReference BoneToObserve; // 0xd0
        enum class EBoneControlSpace DisplaySpace; // 0xe0
        bool bRelativeToRefPose; // 0xe1
        struct FVector Translation; // 0xe4
        struct FRotator Rotation; // 0xf0
        struct FVector Scale; // 0xfc

    };

    struct FAnimNode_PoseHandler : FAnimNode_AssetPlayerBase //ScriptStruct AnimGraphRuntime.AnimNode_PoseHandler
    {
    //Children Prop Count (Fields): 1
    public:

        class UPoseAsset* PoseAsset; // 0x120

    };

    struct FAnimNode_PoseBlendNode : FAnimNode_PoseHandler //ScriptStruct AnimGraphRuntime.AnimNode_PoseBlendNode
    {
    //Children Prop Count (Fields): 3
    public:

        struct FPoseLink SourcePose; // 0x168
        enum class EAlphaBlendOption BlendOption; // 0x178
        class UCurveFloat* CustomCurve; // 0x180

    };

    struct FAnimNode_PoseByName : FAnimNode_PoseHandler //ScriptStruct AnimGraphRuntime.AnimNode_PoseByName
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName PoseName; // 0x168
        float PoseWeight; // 0x170

    };

    struct FAnimNode_PoseDriver : FAnimNode_PoseHandler //ScriptStruct AnimGraphRuntime.AnimNode_PoseDriver
    {
    //Children Prop Count (Fields): 10
    public:

        struct FPoseLink SourcePose; // 0x168
        struct TArray<struct FBoneReference> SourceBones; // 0x178
        struct TArray<struct FBoneReference> OnlyDriveBones; // 0x188
        struct TArray<struct FPoseDriverTarget> PoseTargets; // 0x198
        struct FBoneReference EvalSpaceBone; // 0x1d8
        struct FRBFParams RBFParams; // 0x1e8
        enum class EPoseDriverSource DriveSource; // 0x214
        enum class EPoseDriverOutput DriveOutput; // 0x215
        char bOnlyDriveSelectedBones; // 0x216
        int32_t LODThreshold; // 0x218

    };

    struct FRBFParams //ScriptStruct AnimGraphRuntime.RBFParams
    {
    //Children Prop Count (Fields): 12
    public:

        int32_t TargetDimensions; // 0x0
        enum class ERBFSolverType SolverType; // 0x4
        float Radius; // 0x8
        bool bAutomaticRadius; // 0xc
        enum class ERBFFunctionType Function; // 0xd
        enum class ERBFDistanceMethod DistanceMethod; // 0xe
        enum class EBoneAxis TwistAxis; // 0xf
        float WeightThreshold; // 0x10
        enum class ERBFNormalizeMethod NormalizeMethod; // 0x14
        struct FVector MedianReference; // 0x18
        float MedianMin; // 0x24
        float MedianMax; // 0x28

    };

    struct FPoseDriverTarget //ScriptStruct AnimGraphRuntime.PoseDriverTarget
    {
    //Children Prop Count (Fields): 9
    public:

        struct TArray<struct FPoseDriverTransform> BoneTransforms; // 0x0
        struct FRotator TargetRotation; // 0x10
        float TargetScale; // 0x1c
        enum class ERBFDistanceMethod DistanceMethod; // 0x20
        enum class ERBFFunctionType FunctionType; // 0x21
        bool bApplyCustomCurve; // 0x22
        struct FRichCurve CustomCurve; // 0x28
        struct FName DrivenName; // 0xa8
        bool bIsHidden; // 0xb8

    };

    struct FPoseDriverTransform //ScriptStruct AnimGraphRuntime.PoseDriverTransform
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector TargetTranslation; // 0x0
        struct FRotator TargetRotation; // 0xc

    };

    struct FAnimNode_PoseSnapshot : FAnimNode_Base //ScriptStruct AnimGraphRuntime.AnimNode_PoseSnapshot
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName SnapshotName; // 0x10
        struct FPoseSnapshot Snapshot; // 0x18
        enum class ESnapshotSourceMode Mode; // 0x50

    };

    struct FAnimNode_RandomPlayer : FAnimNode_Base //ScriptStruct AnimGraphRuntime.AnimNode_RandomPlayer
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FRandomPlayerSequenceEntry> Entries; // 0x10
        bool bShuffleMode; // 0x70

    };

    struct FRandomPlayerSequenceEntry //ScriptStruct AnimGraphRuntime.RandomPlayerSequenceEntry
    {
    //Children Prop Count (Fields): 7
    public:

        class UAnimSequence* Sequence; // 0x0
        float ChanceToPlay; // 0x8
        int32_t MinLoopCount; // 0xc
        int32_t MaxLoopCount; // 0x10
        float MinPlayRate; // 0x14
        float MaxPlayRate; // 0x18
        struct FAlphaBlend BlendIn; // 0x20

    };

    struct FAnimNode_MeshSpaceRefPose : FAnimNode_Base //ScriptStruct AnimGraphRuntime.AnimNode_MeshSpaceRefPose
    {
    public:


    };

    struct FAnimNode_RefPose : FAnimNode_Base //ScriptStruct AnimGraphRuntime.AnimNode_RefPose
    {
    //Children Prop Count (Fields): 1
    public:

        enum class ERefPoseType RefPoseType; // 0x10

    };

    struct FAnimNode_ResetRoot : FAnimNode_SkeletalControlBase //ScriptStruct AnimGraphRuntime.AnimNode_ResetRoot
    {
    public:


    };

    struct FAnimNode_RigidBody : FAnimNode_SkeletalControlBase //ScriptStruct AnimGraphRuntime.AnimNode_RigidBody
    {
    //Children Prop Count (Fields): 40
    public:

        bool bUseSelfPhysicsAssetIfExist; // 0xd0
        class UPhysicsAsset* OverridePhysicsAsset; // 0xd8
        struct FVector OverrideWorldGravity; // 0x178
        struct FVector ExternalForce; // 0x184
        struct FVector ComponentLinearAccScale; // 0x190
        struct FVector ComponentLinearVelScale; // 0x19c
        struct FVector ComponentAppliedLinearAccClamp; // 0x1a8
        struct FSimSpaceSettings SimSpaceSettings; // 0x1b4
        float CachedBoundsScale; // 0x1f4
        struct FBoneReference BaseBoneRef; // 0x1f8
        enum class ECollisionChannel OverlapChannel; // 0x208
        enum class ESimulationSpace SimulationSpace; // 0x209
        bool bForceDisableCollisionBetweenConstraintBodies; // 0x20a
        char bEnableWorldGeometry; // 0x20c
        char bOverrideWorldGravity; // 0x20c
        char bTransferBoneVelocities; // 0x20c
        char bFreezeIncomingPoseOnStart; // 0x20c
        char bClampLinearTranslationLimitToRefPose; // 0x20c
        float WorldSpaceMinimumScale; // 0x210
        float EvaluationResetTime; // 0x214
        char bEnableExternalCollision; // 0x218
        struct FBoneReference ExternalCollisionBone; // 0x21c
        class USkeletalMeshComponent* ExternalCollisionTarget; // 0x230
        class USkeletalMeshComponent* ExternalCollisionTargetCached; // 0x238
        struct TArray<struct FRefPoseLimit> RefPoseLimits; // 0x298
        char EffectBodyIndex; // 0x2a8
        struct FPostPhysicsClampSettings WorldSpaceCorrection_Roll; // 0x2ac
        struct FPostPhysicsClampSettings LocalSpaceCorrection_X; // 0x2bc
        struct FPostPhysicsClampSettings LocalSpaceCorrection_Y; // 0x2cc
        struct FPostPhysicsClampSettings LocalSpaceCorrection_Z; // 0x2dc
        struct FPostPhysicsClampSettings LocalSpaceCorrection_Pitch; // 0x2ec
        struct FPostPhysicsClampSettings LocalSpaceCorrection_Yaw; // 0x2fc
        struct FPostPhysicsClampSettings LocalSpaceCorrection_Roll; // 0x30c
        bool bLimitLinearVelocity_Simulation; // 0x31c
        struct FVector MaxLinearVelocity_Simulation; // 0x320
        bool bLimitAngularVelocity_Simulation; // 0x32c
        struct FVector MaxAngularVelocity_Simulation; // 0x330
        bool bPrintTransformAfterPhysics; // 0x33c
        char PrintBodyIndex; // 0x33d
        bool bEnableDebug_Simulation; // 0x33e

    };

    struct FPostPhysicsClampSettings //ScriptStruct AnimGraphRuntime.PostPhysicsClampSettings
    {
    //Children Prop Count (Fields): 5
    public:

        char bEnableCorrection_Manual; // 0x0
        char bEnableCorrection_Auto; // 0x0
        float MinValue; // 0x4
        float MaxValue; // 0x8
        float RangeValue; // 0xc

    };

    struct FRefPoseLimit //ScriptStruct AnimGraphRuntime.RefPoseLimit
    {
    //Children Prop Count (Fields): 9
    public:

        struct FBoneReference TargetBone; // 0x0
        bool bConstraintTranslation; // 0x10
        struct FVector TranslationLimitMin; // 0x14
        struct FVector TranslationLimitMax; // 0x20
        bool bConstraintRotation; // 0x2c
        struct FVector RotationLimitMin; // 0x30
        struct FVector RotationLimitMax; // 0x3c
        bool bEnableSoftConstraint; // 0x48
        float Stiffness; // 0x4c

    };

    struct FSimSpaceSettings //ScriptStruct AnimGraphRuntime.SimSpaceSettings
    {
    //Children Prop Count (Fields): 10
    public:

        float MasterAlpha; // 0x0
        float VelocityScaleZ; // 0x4
        float MaxLinearVelocity; // 0x8
        float MaxAngularVelocity; // 0xc
        float MaxLinearAcceleration; // 0x10
        float MaxAngularAcceleration; // 0x14
        float ExternalLinearDrag; // 0x18
        struct FVector ExternalLinearDragV; // 0x1c
        struct FVector ExternalLinearVelocity; // 0x28
        struct FVector ExternalAngularVelocity; // 0x34

    };

    struct FAnimNode_RotateRootBone : FAnimNode_Base //ScriptStruct AnimGraphRuntime.AnimNode_RotateRootBone
    {
    //Children Prop Count (Fields): 6
    public:

        struct FPoseLink BasePose; // 0x10
        float Pitch; // 0x20
        float Yaw; // 0x24
        struct FInputScaleBiasClamp PitchScaleBiasClamp; // 0x28
        struct FInputScaleBiasClamp YawScaleBiasClamp; // 0x58
        struct FRotator MeshToComponent; // 0x88

    };

    struct FAnimNode_RotationMultiplier : FAnimNode_SkeletalControlBase //ScriptStruct AnimGraphRuntime.AnimNode_RotationMultiplier
    {
    //Children Prop Count (Fields): 5
    public:

        struct FBoneReference TargetBone; // 0xd0
        struct FBoneReference SourceBone; // 0xe0
        float Multiplier; // 0xf0
        enum class EBoneAxis RotationAxisToRefer; // 0xf4
        bool bIsAdditive; // 0xf5

    };

    struct FAnimNode_RotationOffsetBlendSpace : FAnimNode_BlendSpacePlayer //ScriptStruct AnimGraphRuntime.AnimNode_RotationOffsetBlendSpace
    {
    //Children Prop Count (Fields): 9
    public:

        struct FPoseLink BasePose; // 0x208
        int32_t LODThreshold; // 0x218
        float Alpha; // 0x21c
        struct FInputScaleBias AlphaScaleBias; // 0x220
        struct FInputAlphaBoolBlend AlphaBoolBlend; // 0x228
        struct FName AlphaCurveName; // 0x270
        struct FInputScaleBiasClamp AlphaScaleBiasClamp; // 0x278
        enum class EAnimAlphaInputType AlphaInputType; // 0x2ac
        bool bAlphaBoolEnabled; // 0x2ad

    };

    struct FAnimNode_ScaleChainLength : FAnimNode_Base //ScriptStruct AnimGraphRuntime.AnimNode_ScaleChainLength
    {
    //Children Prop Count (Fields): 8
    public:

        struct FPoseLink InputPose; // 0x10
        float DefaultChainLength; // 0x20
        struct FBoneReference ChainStartBone; // 0x24
        struct FBoneReference ChainEndBone; // 0x34
        struct FVector TargetLocation; // 0x44
        float Alpha; // 0x50
        struct FInputScaleBias AlphaScaleBias; // 0x58
        enum class EScaleChainInitialLength ChainInitialLength; // 0x60

    };

    struct FAnimNode_SequenceEvaluator : FAnimNode_AssetPlayerBase //ScriptStruct AnimGraphRuntime.AnimNode_SequenceEvaluator
    {
    //Children Prop Count (Fields): 7
    public:

        class UAnimSequenceBase* Sequence; // 0x120
        float ExplicitTime; // 0x128
        bool bShouldLoop; // 0x12c
        bool bTeleportToExplicitTime; // 0x12d
        enum class ESequenceEvalReinit ReinitializationBehavior; // 0x12e
        float StartPosition; // 0x130
        class UAnimSequenceBase* LastPlayAnimSeq; // 0x138

    };

    struct FAnimNode_Slot : FAnimNode_Base //ScriptStruct AnimGraphRuntime.AnimNode_Slot
    {
    //Children Prop Count (Fields): 3
    public:

        struct FPoseLink Source; // 0x10
        struct FName SlotName; // 0x20
        bool bAlwaysUpdateSourcePose; // 0x28

    };

    struct FAnimNode_SplineIK : FAnimNode_SkeletalControlBase //ScriptStruct AnimGraphRuntime.AnimNode_SplineIK
    {
    //Children Prop Count (Fields): 12
    public:

        struct FBoneReference StartBone; // 0xd0
        struct FBoneReference EndBone; // 0xe0
        enum class ESplineBoneAxis BoneAxis; // 0xf0
        bool bAutoCalculateSpline; // 0xf1
        int32_t PointCount; // 0xf4
        struct TArray<struct FTransform> ControlPoints; // 0xf8
        float Roll; // 0x108
        float TwistStart; // 0x10c
        float TwistEnd; // 0x110
        struct FAlphaBlend TwistBlend; // 0x118
        float Stretch; // 0x148
        float Offset; // 0x14c

    };

    struct FSplineIKCachedBoneData //ScriptStruct AnimGraphRuntime.SplineIKCachedBoneData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FBoneReference Bone; // 0x0
        int32_t RefSkeletonIndex; // 0x10

    };

    struct FAnimNode_SpringBone : FAnimNode_SkeletalControlBase //ScriptStruct AnimGraphRuntime.AnimNode_SpringBone
    {
    //Children Prop Count (Fields): 12
    public:

        struct FBoneReference SpringBone; // 0xd0
        float MaxDisplacement; // 0xe0
        float SpringStiffness; // 0xe4
        float SpringDamping; // 0xe8
        float ErrorResetThresh; // 0xec
        char bLimitDisplacement; // 0x12c
        char bTranslateX; // 0x12c
        char bTranslateY; // 0x12c
        char bTranslateZ; // 0x12c
        char bRotateX; // 0x12c
        char bRotateY; // 0x12c
        char bRotateZ; // 0x12c

    };

    struct FAnimNode_Root : FAnimNode_Base //ScriptStruct Engine.AnimNode_Root
    {
    //Children Prop Count (Fields): 3
    public:

        struct FPoseLink Result; // 0x10
        struct FName Name; // 0x20
        struct FName Group; // 0x28

    };

    struct FAnimNode_StateResult : FAnimNode_Root //ScriptStruct AnimGraphRuntime.AnimNode_StateResult
    {
    public:


    };

    struct FAnimNode_Trail : FAnimNode_SkeletalControlBase //ScriptStruct AnimGraphRuntime.AnimNode_Trail
    {
    //Children Prop Count (Fields): 20
    public:

        struct FBoneReference TrailBone; // 0x100
        int32_t ChainLength; // 0x110
        enum class EAxis ChainBoneAxis; // 0x114
        char bInvertChainBoneAxis; // 0x115
        char bLimitStretch; // 0x115
        char bLimitRotation; // 0x115
        char bUsePlanarLimit; // 0x115
        char bActorSpaceFakeVel; // 0x115
        char bReorientParentToChild; // 0x115
        float MaxDeltaTime; // 0x118
        float RelaxationSpeedScale; // 0x11c
        struct FRuntimeFloatCurve TrailRelaxationSpeed; // 0x120
        struct FInputScaleBiasClamp RelaxationSpeedScaleInputProcessor; // 0x1a8
        struct TArray<struct FRotationLimit> RotationLimits; // 0x1d8
        struct TArray<struct FVector> RotationOffsets; // 0x1e8
        struct TArray<struct FAnimPhysPlanarLimit> PlanarLimits; // 0x1f8
        float StretchLimit; // 0x208
        struct FVector FakeVelocity; // 0x20c
        struct FBoneReference BaseJoint; // 0x218
        float LastBoneRotationAnimAlphaBlend; // 0x228

    };

    struct FRotationLimit //ScriptStruct AnimGraphRuntime.RotationLimit
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector LimitMin; // 0x0
        struct FVector LimitMax; // 0xc

    };

    struct FAnimNode_TwistCorrectiveNode : FAnimNode_SkeletalControlBase //ScriptStruct AnimGraphRuntime.AnimNode_TwistCorrectiveNode
    {
    //Children Prop Count (Fields): 7
    public:

        struct FReferenceBoneFrame BaseFrame; // 0xd0
        struct FReferenceBoneFrame TwistFrame; // 0xf0
        struct FAxis TwistPlaneNormalAxis; // 0x110
        float RangeMax; // 0x120
        float RemappedMin; // 0x124
        float RemappedMax; // 0x128
        struct FAnimCurveParam Curve; // 0x12c

    };

    struct FAnimCurveParam //ScriptStruct Engine.AnimCurveParam
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName Name; // 0x0

    };

    struct FReferenceBoneFrame //ScriptStruct AnimGraphRuntime.ReferenceBoneFrame
    {
    //Children Prop Count (Fields): 2
    public:

        struct FBoneReference Bone; // 0x0
        struct FAxis Axis; // 0x10

    };

    struct FAnimNode_TwoBoneIK : FAnimNode_SkeletalControlBase //ScriptStruct AnimGraphRuntime.AnimNode_TwoBoneIK
    {
    //Children Prop Count (Fields): 14
    public:

        struct FBoneReference IKBone; // 0xd0
        float StartStretchRatio; // 0xe0
        float MaxStretchScale; // 0xe4
        struct FVector EffectorLocation; // 0xe8
        struct FBoneSocketTarget EffectorTarget; // 0x100
        struct FVector JointTargetLocation; // 0x160
        struct FBoneSocketTarget JointTarget; // 0x170
        struct FAxis TwistAxis; // 0x1d0
        enum class EBoneControlSpace EffectorLocationSpace; // 0x1e0
        enum class EBoneControlSpace JointTargetLocationSpace; // 0x1e1
        char bAllowStretching; // 0x1e2
        char bTakeRotationFromEffectorSpace; // 0x1e2
        char bMaintainEffectorRelRot; // 0x1e2
        char bAllowTwist; // 0x1e2

    };

    struct FAnimNode_TwoWayBlend : FAnimNode_Base //ScriptStruct AnimGraphRuntime.AnimNode_TwoWayBlend
    {
    //Children Prop Count (Fields): 11
    public:

        struct FPoseLink A; // 0x10
        struct FPoseLink B; // 0x20
        enum class EAnimAlphaInputType AlphaInputType; // 0x30
        char bAlphaBoolEnabled; // 0x31
        char bResetChildOnActivation; // 0x31
        float Alpha; // 0x34
        struct FInputScaleBias AlphaScaleBias; // 0x38
        struct FInputAlphaBoolBlend AlphaBoolBlend; // 0x40
        struct FName AlphaCurveName; // 0x88
        struct FInputScaleBiasClamp AlphaScaleBiasClamp; // 0x90
        int32_t LODThreshold; // 0xc4

    };

    struct FPositionHistory //ScriptStruct AnimGraphRuntime.PositionHistory
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FVector> Positions; // 0x0
        float Range; // 0x10

    };

    struct FRBFEntry //ScriptStruct AnimGraphRuntime.RBFEntry
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<float> Values; // 0x0

    };

    struct FRBFTarget : FRBFEntry //ScriptStruct AnimGraphRuntime.RBFTarget
    {
    //Children Prop Count (Fields): 5
    public:

        float ScaleFactor; // 0x10
        bool bApplyCustomCurve; // 0x14
        struct FRichCurve CustomCurve; // 0x18
        enum class ERBFDistanceMethod DistanceMethod; // 0x98
        enum class ERBFFunctionType FunctionType; // 0x99

    };

    struct FMovieScene3DPathSectionTemplate : FMovieSceneEvalTemplate //ScriptStruct MovieSceneTracks.MovieScene3DPathSectionTemplate
    {
    //Children Prop Count (Fields): 7
    public:

        struct FMovieSceneObjectBindingID PathBindingID; // 0x20
        struct FMovieSceneFloatChannel TimingCurve; // 0x38
        enum class MovieScene3DPathSection_Axis FrontAxisEnum; // 0xd8
        enum class MovieScene3DPathSection_Axis UpAxisEnum; // 0xd9
        char bFollow; // 0xdc
        char bReverse; // 0xdc
        char bForceUpright; // 0xdc

    };

    struct FMovieSceneTransformMask //ScriptStruct MovieSceneTracks.MovieSceneTransformMask
    {
    //Children Prop Count (Fields): 1
    public:

        uint32_t Mask; // 0x0

    };

    struct FMovieScene3DTransformKeyStruct : FMovieSceneKeyStruct //ScriptStruct MovieSceneTracks.MovieScene3DTransformKeyStruct
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector Location; // 0x8
        struct FRotator Rotation; // 0x14
        struct FVector Scale; // 0x20
        struct FFrameNumber Time; // 0x2c

    };

    struct FMovieScene3DScaleKeyStruct : FMovieSceneKeyStruct //ScriptStruct MovieSceneTracks.MovieScene3DScaleKeyStruct
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Scale; // 0x8
        struct FFrameNumber Time; // 0x14

    };

    struct FMovieScene3DRotationKeyStruct : FMovieSceneKeyStruct //ScriptStruct MovieSceneTracks.MovieScene3DRotationKeyStruct
    {
    //Children Prop Count (Fields): 2
    public:

        struct FRotator Rotation; // 0x8
        struct FFrameNumber Time; // 0x14

    };

    struct FMovieScene3DLocationKeyStruct : FMovieSceneKeyStruct //ScriptStruct MovieSceneTracks.MovieScene3DLocationKeyStruct
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Location; // 0x8
        struct FFrameNumber Time; // 0x14

    };

    struct FMovieScene3DTransformTemplateData //ScriptStruct MovieSceneTracks.MovieScene3DTransformTemplateData
    {
    //Children Prop Count (Fields): 7
    public:

        struct FMovieSceneFloatChannel TranslationCurve; // 0x0
        struct FMovieSceneFloatChannel RotationCurve; // 0x1e0
        struct FMovieSceneFloatChannel ScaleCurve; // 0x3c0
        struct FMovieSceneFloatChannel ManualWeight; // 0x5a0
        enum class EMovieSceneBlendType BlendType; // 0x640
        struct FMovieSceneTransformMask Mask; // 0x644
        bool bUseQuaternionInterpolation; // 0x648

    };

    struct FMovieSceneActorReferenceData : FMovieSceneChannel //ScriptStruct MovieSceneTracks.MovieSceneActorReferenceData
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FFrameNumber> KeyTimes; // 0x8
        struct TArray<struct FMovieSceneActorReferenceKey> KeyValues; // 0x40

    };

    struct FMovieSceneActorReferenceKey //ScriptStruct MovieSceneTracks.MovieSceneActorReferenceKey
    {
    //Children Prop Count (Fields): 3
    public:

        struct FMovieSceneObjectBindingID Object; // 0x0
        struct FName ComponentName; // 0x18
        struct FName SocketName; // 0x20

    };

    struct FMovieSceneActorReferenceSectionTemplate : FMovieSceneEvalTemplate //ScriptStruct MovieSceneTracks.MovieSceneActorReferenceSectionTemplate
    {
    //Children Prop Count (Fields): 2
    public:

        struct FMovieScenePropertySectionData PropertyData; // 0x20
        struct FMovieSceneActorReferenceData ActorReferenceData; // 0x38

    };

    struct FMovieSceneAudioSectionTemplate : FMovieSceneEvalTemplate //ScriptStruct MovieSceneTracks.MovieSceneAudioSectionTemplate
    {
    //Children Prop Count (Fields): 1
    public:

        class UMovieSceneAudioSection* AudioSection; // 0x20

    };

    struct FMovieSceneCameraAnimSectionData //ScriptStruct MovieSceneTracks.MovieSceneCameraAnimSectionData
    {
    //Children Prop Count (Fields): 6
    public:

        class UCameraAnim* CameraAnim; // 0x0
        float PlayRate; // 0x8
        float PlayScale; // 0xc
        float BlendInTime; // 0x10
        float BlendOutTime; // 0x14
        bool bLooping; // 0x18

    };

    struct FMovieSceneAdditiveCameraAnimationTemplate : FMovieSceneEvalTemplate //ScriptStruct MovieSceneTracks.MovieSceneAdditiveCameraAnimationTemplate
    {
    public:


    };

    struct FMovieSceneCameraShakeSectionTemplate : FMovieSceneAdditiveCameraAnimationTemplate //ScriptStruct MovieSceneTracks.MovieSceneCameraShakeSectionTemplate
    {
    //Children Prop Count (Fields): 2
    public:

        struct FMovieSceneCameraShakeSectionData SourceData; // 0x20
        struct FFrameNumber SectionStartTime; // 0x40

    };

    struct FMovieSceneCameraShakeSectionData //ScriptStruct MovieSceneTracks.MovieSceneCameraShakeSectionData
    {
    //Children Prop Count (Fields): 4
    public:

        class UMatineeCameraShake* ShakeClass; // 0x0
        float PlayScale; // 0x8
        enum class ECameraShakePlaySpace PlaySpace; // 0xc
        struct FRotator UserDefinedPlaySpace; // 0x10

    };

    struct FMovieSceneCameraAnimSectionTemplate : FMovieSceneAdditiveCameraAnimationTemplate //ScriptStruct MovieSceneTracks.MovieSceneCameraAnimSectionTemplate
    {
    //Children Prop Count (Fields): 2
    public:

        struct FMovieSceneCameraAnimSectionData SourceData; // 0x20
        struct FFrameNumber SectionStartTime; // 0x40

    };

    struct FMovieSceneCameraShakeSourceShakeSectionTemplate : FMovieSceneEvalTemplate //ScriptStruct MovieSceneTracks.MovieSceneCameraShakeSourceShakeSectionTemplate
    {
    //Children Prop Count (Fields): 3
    public:

        struct FMovieSceneCameraShakeSectionData SourceData; // 0x20
        struct FFrameNumber SectionStartTime; // 0x40
        struct FFrameNumber SectionEndTime; // 0x44

    };

    struct FMovieSceneCameraShakeSourceTriggerChannel : FMovieSceneChannel //ScriptStruct MovieSceneTracks.MovieSceneCameraShakeSourceTriggerChannel
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FFrameNumber> KeyTimes; // 0x8
        struct TArray<struct FMovieSceneCameraShakeSourceTrigger> KeyValues; // 0x18

    };

    struct FMovieSceneCameraShakeSourceTrigger //ScriptStruct MovieSceneTracks.MovieSceneCameraShakeSourceTrigger
    {
    //Children Prop Count (Fields): 4
    public:

        class UCameraShakeBase* ShakeClass; // 0x0
        float PlayScale; // 0x8
        enum class ECameraShakePlaySpace PlaySpace; // 0xc
        struct FRotator UserDefinedPlaySpace; // 0x10

    };

    struct FMovieSceneCameraShakeSourceTriggerSectionTemplate : FMovieSceneEvalTemplate //ScriptStruct MovieSceneTracks.MovieSceneCameraShakeSourceTriggerSectionTemplate
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FFrameNumber> triggertimes; // 0x20
        struct TArray<struct FMovieSceneCameraShakeSourceTrigger> TriggerValues; // 0x30

    };

    struct FMovieSceneColorKeyStruct : FMovieSceneKeyStruct //ScriptStruct MovieSceneTracks.MovieSceneColorKeyStruct
    {
    //Children Prop Count (Fields): 2
    public:

        struct FLinearColor Color; // 0x8
        struct FFrameNumber Time; // 0x18

    };

    struct FMovieSceneColorSectionTemplate : FMovieScenePropertySectionTemplate //ScriptStruct MovieSceneTracks.MovieSceneColorSectionTemplate
    {
    //Children Prop Count (Fields): 2
    public:

        struct FMovieSceneFloatChannel Curves; // 0x38
        enum class EMovieSceneBlendType BlendType; // 0x2b8

    };

    struct FMovieSceneEvent //ScriptStruct MovieSceneTracks.MovieSceneEvent
    {
    //Children Prop Count (Fields): 1
    public:

        struct FMovieSceneEventPtrs Ptrs; // 0x0

    };

    struct FMovieSceneEventPtrs //ScriptStruct MovieSceneTracks.MovieSceneEventPtrs
    {
    //Children Prop Count (Fields): 2
    public:

        class UFunction* Function; // 0x0
        struct TFieldPath<FProperty> BoundObjectProperty; // 0x8

    };

    struct FMovieSceneEventPayloadVariable //ScriptStruct MovieSceneTracks.MovieSceneEventPayloadVariable
    {
    //Children Prop Count (Fields): 1
    public:

        struct FString Value; // 0x0

    };

    struct FMovieSceneEventChannel : FMovieSceneChannel //ScriptStruct MovieSceneTracks.MovieSceneEventChannel
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FFrameNumber> KeyTimes; // 0x8
        struct TArray<struct FMovieSceneEvent> KeyValues; // 0x18

    };

    struct FMovieSceneEventSectionData : FMovieSceneChannel //ScriptStruct MovieSceneTracks.MovieSceneEventSectionData
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FFrameNumber> Times; // 0x8
        struct TArray<struct FEventPayload> KeyValues; // 0x18

    };

    struct FEventPayload //ScriptStruct MovieSceneTracks.EventPayload
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName EventName; // 0x0
        struct FMovieSceneEventParameters Parameters; // 0x8

    };

    struct FMovieSceneEventParameters //ScriptStruct MovieSceneTracks.MovieSceneEventParameters
    {
    public:


    };

    struct FMovieSceneEventTriggerData //ScriptStruct MovieSceneTracks.MovieSceneEventTriggerData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FMovieSceneEventPtrs Ptrs; // 0x0
        struct FGuid ObjectBindingID; // 0x28

    };

    struct FMovieSceneEventSectionTemplate : FMovieSceneEvalTemplate //ScriptStruct MovieSceneTracks.MovieSceneEventSectionTemplate
    {
    //Children Prop Count (Fields): 3
    public:

        struct FMovieSceneEventSectionData EventData; // 0x20
        char bFireEventsWhenForwards; // 0xa8
        char bFireEventsWhenBackwards; // 0xa8

    };

    struct FMovieSceneFadeSectionTemplate : FMovieSceneEvalTemplate //ScriptStruct MovieSceneTracks.MovieSceneFadeSectionTemplate
    {
    //Children Prop Count (Fields): 3
    public:

        struct FMovieSceneFloatChannel FadeCurve; // 0x20
        struct FLinearColor FadeColor; // 0xc0
        char bFadeAudio; // 0xd0

    };

    struct FMovieSceneMaterialParameterCollectionTemplate : FMovieSceneParameterSectionTemplate //ScriptStruct MovieSceneTracks.MovieSceneMaterialParameterCollectionTemplate
    {
    //Children Prop Count (Fields): 1
    public:

        class UMaterialParameterCollection* MPC; // 0x80

    };

    struct FMovieSceneObjectPropertyTemplate : FMovieScenePropertySectionTemplate //ScriptStruct MovieSceneTracks.MovieSceneObjectPropertyTemplate
    {
    //Children Prop Count (Fields): 1
    public:

        struct FMovieSceneObjectPathChannel ObjectChannel; // 0x38

    };

    struct FMovieSceneComponentMaterialSectionTemplate : FMovieSceneParameterSectionTemplate //ScriptStruct MovieSceneTracks.MovieSceneComponentMaterialSectionTemplate
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t MaterialIndex; // 0x80

    };

    struct FMovieSceneParticleParameterSectionTemplate : FMovieSceneParameterSectionTemplate //ScriptStruct MovieSceneTracks.MovieSceneParticleParameterSectionTemplate
    {
    public:


    };

    struct FMovieSceneParticleChannel : FMovieSceneByteChannel //ScriptStruct MovieSceneTracks.MovieSceneParticleChannel
    {
    public:


    };

    struct FMovieSceneParticleSectionTemplate : FMovieSceneEvalTemplate //ScriptStruct MovieSceneTracks.MovieSceneParticleSectionTemplate
    {
    //Children Prop Count (Fields): 1
    public:

        struct FMovieSceneParticleChannel ParticleKeys; // 0x20

    };

    struct FMovieScenePrimitiveMaterialTemplate : FMovieSceneEvalTemplate //ScriptStruct MovieSceneTracks.MovieScenePrimitiveMaterialTemplate
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t MaterialIndex; // 0x20
        struct FMovieSceneObjectPathChannel MaterialChannel; // 0x28

    };

    struct FMovieSceneVectorPropertySectionTemplate : FMovieScenePropertySectionTemplate //ScriptStruct MovieSceneTracks.MovieSceneVectorPropertySectionTemplate
    {
    //Children Prop Count (Fields): 3
    public:

        struct FMovieSceneFloatChannel ComponentCurves; // 0x38
        int32_t NumChannelsUsed; // 0x2b8
        enum class EMovieSceneBlendType BlendType; // 0x2bc

    };

    struct FMovieSceneStringPropertySectionTemplate : FMovieScenePropertySectionTemplate //ScriptStruct MovieSceneTracks.MovieSceneStringPropertySectionTemplate
    {
    //Children Prop Count (Fields): 1
    public:

        struct FMovieSceneStringChannel StringCurve; // 0x38

    };

    struct FMovieSceneStringChannel : FMovieSceneChannel //ScriptStruct MovieSceneTracks.MovieSceneStringChannel
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<struct FFrameNumber> Times; // 0x8
        struct TArray<struct FString> Values; // 0x18
        struct FString DefaultValue; // 0x28
        bool bHasDefaultValue; // 0x38

    };

    struct FMovieSceneIntegerPropertySectionTemplate : FMovieScenePropertySectionTemplate //ScriptStruct MovieSceneTracks.MovieSceneIntegerPropertySectionTemplate
    {
    //Children Prop Count (Fields): 2
    public:

        struct FMovieSceneIntegerChannel IntegerCurve; // 0x38
        enum class EMovieSceneBlendType BlendType; // 0xc8

    };

    struct FMovieSceneEnumPropertySectionTemplate : FMovieScenePropertySectionTemplate //ScriptStruct MovieSceneTracks.MovieSceneEnumPropertySectionTemplate
    {
    //Children Prop Count (Fields): 1
    public:

        struct FMovieSceneByteChannel EnumCurve; // 0x38

    };

    struct FMovieSceneBytePropertySectionTemplate : FMovieScenePropertySectionTemplate //ScriptStruct MovieSceneTracks.MovieSceneBytePropertySectionTemplate
    {
    //Children Prop Count (Fields): 1
    public:

        struct FMovieSceneByteChannel ByteCurve; // 0x38

    };

    struct FMovieSceneBoolPropertySectionTemplate : FMovieScenePropertySectionTemplate //ScriptStruct MovieSceneTracks.MovieSceneBoolPropertySectionTemplate
    {
    //Children Prop Count (Fields): 1
    public:

        struct FMovieSceneBoolChannel BoolCurve; // 0x38

    };

    struct FMovieSceneSkeletalAnimationParams //ScriptStruct MovieSceneTracks.MovieSceneSkeletalAnimationParams
    {
    //Children Prop Count (Fields): 12
    public:

        class UAnimSequenceBase* Animation; // 0x0
        struct FFrameNumber FirstLoopStartFrameOffset; // 0x8
        struct FFrameNumber StartFrameOffset; // 0xc
        struct FFrameNumber EndFrameOffset; // 0x10
        float PlayRate; // 0x14
        char bReverse; // 0x18
        struct FName SlotName; // 0x1c
        struct FMovieSceneFloatChannel Weight; // 0x28
        bool bSkipAnimNotifiers; // 0xc8
        bool bForceCustomMode; // 0xc9
        float StartOffset; // 0xcc
        float EndOffset; // 0xd0

    };

    struct FMovieSceneSkeletalAnimationSectionTemplate : FMovieSceneEvalTemplate //ScriptStruct MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplate
    {
    //Children Prop Count (Fields): 1
    public:

        struct FMovieSceneSkeletalAnimationSectionTemplateParameters Params; // 0x20

    };

    struct FMovieSceneSkeletalAnimationSectionTemplateParameters : FMovieSceneSkeletalAnimationParams //ScriptStruct MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplateParameters
    {
    //Children Prop Count (Fields): 2
    public:

        struct FFrameNumber SectionStartTime; // 0xd8
        struct FFrameNumber SectionEndTime; // 0xdc

    };

    struct FMovieSceneSkeletalAnimRootMotionTrackParams //ScriptStruct MovieSceneTracks.MovieSceneSkeletalAnimRootMotionTrackParams
    {
    public:


    };

    struct FMovieSceneSlomoSectionTemplate : FMovieSceneEvalTemplate //ScriptStruct MovieSceneTracks.MovieSceneSlomoSectionTemplate
    {
    //Children Prop Count (Fields): 1
    public:

        struct FMovieSceneFloatChannel SlomoCurve; // 0x20

    };

    struct FLevelVisibilityComponentData //ScriptStruct MovieSceneTracks.LevelVisibilityComponentData
    {
    //Children Prop Count (Fields): 1
    public:

        class UMovieSceneLevelVisibilitySection* Section; // 0x0

    };

    struct FMovieSceneVectorKeyStructBase : FMovieSceneKeyStruct //ScriptStruct MovieSceneTracks.MovieSceneVectorKeyStructBase
    {
    //Children Prop Count (Fields): 1
    public:

        struct FFrameNumber Time; // 0x8

    };

    struct FMovieSceneVector4KeyStruct : FMovieSceneVectorKeyStructBase //ScriptStruct MovieSceneTracks.MovieSceneVector4KeyStruct
    {
    //Children Prop Count (Fields): 1
    public:

        struct FVector4 Vector; // 0x30

    };

    struct FMovieSceneVectorKeyStruct : FMovieSceneVectorKeyStructBase //ScriptStruct MovieSceneTracks.MovieSceneVectorKeyStruct
    {
    //Children Prop Count (Fields): 1
    public:

        struct FVector Vector; // 0x28

    };

    struct FMovieSceneVector2DKeyStruct : FMovieSceneVectorKeyStructBase //ScriptStruct MovieSceneTracks.MovieSceneVector2DKeyStruct
    {
    //Children Prop Count (Fields): 1
    public:

        struct FVector2D Vector; // 0x28

    };

    struct FMovieSceneVisibilitySectionTemplate : FMovieSceneBoolPropertySectionTemplate //ScriptStruct MovieSceneTracks.MovieSceneVisibilitySectionTemplate
    {
    public:


    };

    struct FCachedPropertyPath //ScriptStruct PropertyPath.CachedPropertyPath
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FPropertyPathSegment> Segments; // 0x0
        class UFunction* CachedFunction; // 0x18

    };

    struct FPropertyPathSegment //ScriptStruct PropertyPath.PropertyPathSegment
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Name; // 0x0
        int32_t ArrayIndex; // 0x8
        class UStruct* Struct; // 0x10

    };

    struct FAnchorData //ScriptStruct UMG.AnchorData
    {
    //Children Prop Count (Fields): 3
    public:

        struct FMargin Offsets; // 0x0
        struct FAnchors Anchors; // 0x10
        struct FVector2D Alignment; // 0x20

    };

    struct FDynamicPropertyPath : FCachedPropertyPath //ScriptStruct UMG.DynamicPropertyPath
    {
    public:


    };

    struct FMovieScene2DTransformMask //ScriptStruct UMG.MovieScene2DTransformMask
    {
    //Children Prop Count (Fields): 1
    public:

        uint32_t Mask; // 0x0

    };

    struct FMovieSceneMarginSectionTemplate : FMovieScenePropertySectionTemplate //ScriptStruct UMG.MovieSceneMarginSectionTemplate
    {
    //Children Prop Count (Fields): 5
    public:

        struct FMovieSceneFloatChannel TopCurve; // 0x38
        struct FMovieSceneFloatChannel LeftCurve; // 0xd8
        struct FMovieSceneFloatChannel RightCurve; // 0x178
        struct FMovieSceneFloatChannel BottomCurve; // 0x218
        enum class EMovieSceneBlendType BlendType; // 0x2b8

    };

    struct FMovieSceneWidgetMaterialSectionTemplate : FMovieSceneParameterSectionTemplate //ScriptStruct UMG.MovieSceneWidgetMaterialSectionTemplate
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FName> BrushPropertyNamePath; // 0x80

    };

    struct FRadialBoxSettings //ScriptStruct UMG.RadialBoxSettings
    {
    //Children Prop Count (Fields): 3
    public:

        bool bDistributeItemsEvenly; // 0x0
        float AngleBetweenItems; // 0x4
        float StartingAngle; // 0x8

    };

    struct FRichTextStyleRow : FTableRowBase //ScriptStruct UMG.RichTextStyleRow
    {
    //Children Prop Count (Fields): 1
    public:

        struct FTextBlockStyle TextStyle; // 0x8

    };

    struct FRichImageRow : FTableRowBase //ScriptStruct UMG.RichImageRow
    {
    //Children Prop Count (Fields): 1
    public:

        struct FSlateBrush Brush; // 0x8

    };

    struct FSlateMeshVertex //ScriptStruct UMG.SlateMeshVertex
    {
    //Children Prop Count (Fields): 8
    public:

        struct FVector2D position; // 0x0
        struct FColor Color; // 0x8
        struct FVector2D UV0; // 0xc
        struct FVector2D UV1; // 0x14
        struct FVector2D UV2; // 0x1c
        struct FVector2D UV3; // 0x24
        struct FVector2D UV4; // 0x2c
        struct FVector2D UV5; // 0x34

    };

    struct FSlateChildSize //ScriptStruct UMG.SlateChildSize
    {
    //Children Prop Count (Fields): 2
    public:

        float Value; // 0x0
        enum class ESlateSizeRule SizeRule; // 0x4

    };

    struct FUserWidgetPool //ScriptStruct UMG.UserWidgetPool
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<class UUserWidget*> ActiveWidgets; // 0x0
        struct TArray<class UUserWidget*> InactiveWidgets; // 0x10

    };

    struct FWidgetAnimationBinding //ScriptStruct UMG.WidgetAnimationBinding
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName WidgetName; // 0x0
        struct FName SlotWidgetName; // 0x8
        struct FGuid AnimationGuid; // 0x10
        bool bIsRootWidget; // 0x20

    };

    struct FBlueprintWidgetAnimationDelegateBinding //ScriptStruct UMG.BlueprintWidgetAnimationDelegateBinding
    {
    //Children Prop Count (Fields): 4
    public:

        enum class EWidgetAnimationEvent Action; // 0x0
        struct FName AnimationToBind; // 0x4
        struct FName FunctionNameToBind; // 0xc
        struct FName UserTag; // 0x14

    };

    struct FDelegateRuntimeBinding //ScriptStruct UMG.DelegateRuntimeBinding
    {
    //Children Prop Count (Fields): 5
    public:

        struct FString ObjectName; // 0x0
        struct FName PropertyName; // 0x10
        struct FName FunctionName; // 0x18
        struct FDynamicPropertyPath SourcePath; // 0x20
        enum class EBindingKind Kind; // 0x48

    };

    struct FActorComponentInstanceData //ScriptStruct Engine.ActorComponentInstanceData
    {
    //Children Prop Count (Fields): 8
    public:

        class UObject* SourceComponentTemplate; // 0x8
        enum class EComponentCreationMethod SourceComponentCreationMethod; // 0x10
        int32_t SourceComponentTypeSerializedIndex; // 0x14
        struct TArray<char> SavedProperties; // 0x18
        struct FActorComponentDuplicatedObjectData UniqueTransientPackage; // 0x28
        struct TArray<struct FActorComponentDuplicatedObjectData> DuplicatedObjects; // 0x38
        struct TArray<class UObject*> ReferencedObjects; // 0x48
        struct TArray<struct FName> ReferencedNames; // 0x58

    };

    struct FActorComponentDuplicatedObjectData //ScriptStruct Engine.ActorComponentDuplicatedObjectData
    {
    public:


    };

    struct FSceneComponentInstanceData : FActorComponentInstanceData //ScriptStruct Engine.SceneComponentInstanceData
    {
    //Children Prop Count (Fields): 1
    public:

        struct TMap<class USceneComponent*, struct FTransform> AttachedInstanceComponents; // 0x68

    };

    struct FWidgetComponentInstanceData : FSceneComponentInstanceData //ScriptStruct UMG.WidgetComponentInstanceData
    {
    public:


    };

    struct FWidgetNavigationData //ScriptStruct UMG.WidgetNavigationData
    {
    //Children Prop Count (Fields): 4
    public:

        enum class EUINavigationRule Rule; // 0x0
        struct FName WidgetToFocus; // 0x4
        struct TWeakObjectPtr<struct UWidget> Widget; // 0xc
        struct FDelegate CustomDelegate; // 0x14

    };

    struct FLazyLoadBinding //ScriptStruct UMG.LazyLoadBinding
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString Name; // 0x0
        struct TWeakObjectPtr<struct UPanelSlot> PanelSlot; // 0x10
        enum class ESlateVisibility Visibility; // 0x18

    };

    struct FCameraLookatTrackingSettings //ScriptStruct CinematicCamera.CameraLookatTrackingSettings
    {
    //Children Prop Count (Fields): 6
    public:

        char bEnableLookAtTracking; // 0x0
        char bDrawDebugLookAtTrackingPosition; // 0x0
        float LookAtTrackingInterpSpeed; // 0x4
        struct TSoftObjectPtr<AActor> ActorToTrack; // 0x18
        struct FVector RelativeOffset; // 0x40
        char bAllowRoll; // 0x4c

    };

    struct FCameraFocusSettings //ScriptStruct CinematicCamera.CameraFocusSettings
    {
    //Children Prop Count (Fields): 8
    public:

        enum class ECameraFocusMethod FocusMethod; // 0x0
        float ManualFocusDistance; // 0x4
        struct FCameraTrackingFocusSettings TrackingFocusSettings; // 0x8
        char bDrawDebugFocusPlane; // 0x40
        struct FColor DebugFocusPlaneColor; // 0x44
        char bSmoothFocusChanges; // 0x48
        float FocusSmoothingInterpSpeed; // 0x4c
        float FocusOffset; // 0x50

    };

    struct FCameraTrackingFocusSettings //ScriptStruct CinematicCamera.CameraTrackingFocusSettings
    {
    //Children Prop Count (Fields): 3
    public:

        struct TSoftObjectPtr<AActor> ActorToTrack; // 0x0
        struct FVector RelativeOffset; // 0x28
        char bDrawDebugTrackingFocusPoint; // 0x34

    };

    struct FNamedLensPreset //ScriptStruct CinematicCamera.NamedLensPreset
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Name; // 0x0
        struct FCameraLensSettings LensSettings; // 0x10

    };

    struct FCameraLensSettings //ScriptStruct CinematicCamera.CameraLensSettings
    {
    //Children Prop Count (Fields): 6
    public:

        float MinFocalLength; // 0x0
        float MaxFocalLength; // 0x4
        float MinFStop; // 0x8
        float MaxFStop; // 0xc
        float MinimumFocusDistance; // 0x10
        int32_t DiaphragmBladeCount; // 0x14

    };

    struct FNamedFilmbackPreset //ScriptStruct CinematicCamera.NamedFilmbackPreset
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Name; // 0x0
        struct FCameraFilmbackSettings FilmbackSettings; // 0x10

    };

    struct FCameraFilmbackSettings //ScriptStruct CinematicCamera.CameraFilmbackSettings
    {
    //Children Prop Count (Fields): 3
    public:

        float SensorWidth; // 0x0
        float SensorHeight; // 0x4
        float SensorAspectRatio; // 0x8

    };

    struct FPlatformRuntimeAudioCompressionOverrides //ScriptStruct AudioPlatformConfiguration.PlatformRuntimeAudioCompressionOverrides
    {
    //Children Prop Count (Fields): 4
    public:

        bool bOverrideCompressionTimes; // 0x0
        float DurationThreshold; // 0x4
        int32_t MaxNumRandomBranches; // 0x8
        int32_t SoundCueQualityIndex; // 0xc

    };

    struct FSubmixEffectDynamicsProcessorSettings //ScriptStruct AudioMixer.SubmixEffectDynamicsProcessorSettings
    {
    //Children Prop Count (Fields): 18
    public:

        enum class ESubmixEffectDynamicsProcessorType DynamicsProcessorType; // 0x0
        enum class ESubmixEffectDynamicsPeakMode PeakMode; // 0x1
        enum class ESubmixEffectDynamicsChannelLinkMode LinkMode; // 0x2
        float InputGainDb; // 0x4
        float ThresholdDb; // 0x8
        float Ratio; // 0xc
        float KneeBandwidthDb; // 0x10
        float LookAheadMsec; // 0x14
        float AttackTimeMsec; // 0x18
        float ReleaseTimeMsec; // 0x1c
        class USoundSubmix* ExternalSubmix; // 0x20
        char bChannelLinked; // 0x28
        char bAnalogMode; // 0x28
        char bKeyAudition; // 0x28
        float KeyGainDb; // 0x2c
        float OutputGainDb; // 0x30
        struct FSubmixEffectDynamicProcessorFilterSettings KeyHighshelf; // 0x34
        struct FSubmixEffectDynamicProcessorFilterSettings KeyLowshelf; // 0x40

    };

    struct FSubmixEffectDynamicProcessorFilterSettings //ScriptStruct AudioMixer.SubmixEffectDynamicProcessorFilterSettings
    {
    //Children Prop Count (Fields): 3
    public:

        char bEnabled; // 0x0
        float Cutoff; // 0x4
        float GainDb; // 0x8

    };

    struct FSubmixEffectSubmixEQSettings //ScriptStruct AudioMixer.SubmixEffectSubmixEQSettings
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FSubmixEffectEQBand> EQBands; // 0x0

    };

    struct FSubmixEffectEQBand //ScriptStruct AudioMixer.SubmixEffectEQBand
    {
    //Children Prop Count (Fields): 4
    public:

        float Frequency; // 0x0
        float Bandwidth; // 0x4
        float GainDb; // 0x8
        char bEnabled; // 0xc

    };

    struct FSubmixEffectReverbSettings //ScriptStruct AudioMixer.SubmixEffectReverbSettings
    {
    //Children Prop Count (Fields): 16
    public:

        bool bBypassEarlyReflections; // 0x0
        float ReflectionsDelay; // 0x4
        float GainHF; // 0x8
        float ReflectionsGain; // 0xc
        bool bBypassLateReflections; // 0x10
        float LateDelay; // 0x14
        float DecayTime; // 0x18
        float Density; // 0x1c
        float Diffusion; // 0x20
        float AirAbsorptionGainHF; // 0x24
        float DecayHFRatio; // 0x28
        float LateGain; // 0x2c
        float Gain; // 0x30
        float WetLevel; // 0x34
        float DryLevel; // 0x38
        bool bBypass; // 0x3c

    };

    struct FNetAnalyticsDataConfig //ScriptStruct NetCore.NetAnalyticsDataConfig
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName DataName; // 0x0
        bool bEnabled; // 0x8

    };

    struct FTagAndValue //ScriptStruct AssetRegistry.TagAndValue
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Tag; // 0x0
        struct FString Value; // 0x8

    };

    struct FAssetRegistryDependencyOptions //ScriptStruct AssetRegistry.AssetRegistryDependencyOptions
    {
    //Children Prop Count (Fields): 5
    public:

        bool bIncludeSoftPackageReferences; // 0x0
        bool bIncludeHardPackageReferences; // 0x1
        bool bIncludeSearchableNames; // 0x2
        bool bIncludeSoftManagementReferences; // 0x3
        bool bIncludeHardManagementReferences; // 0x4

    };

    struct FEngineServiceNotification //ScriptStruct EngineMessages.EngineServiceNotification
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Text; // 0x0
        double TimeSeconds; // 0x10

    };

    struct FEngineServiceTerminate //ScriptStruct EngineMessages.EngineServiceTerminate
    {
    //Children Prop Count (Fields): 1
    public:

        struct FString userName; // 0x0

    };

    struct FEngineServiceExecuteCommand //ScriptStruct EngineMessages.EngineServiceExecuteCommand
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Command; // 0x0
        struct FString userName; // 0x10

    };

    struct FEngineServiceAuthGrant //ScriptStruct EngineMessages.EngineServiceAuthGrant
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString userName; // 0x0
        struct FString UserToGrant; // 0x10

    };

    struct FEngineServiceAuthDeny //ScriptStruct EngineMessages.EngineServiceAuthDeny
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString userName; // 0x0
        struct FString UserToDeny; // 0x10

    };

    struct FEngineServicePong //ScriptStruct EngineMessages.EngineServicePong
    {
    //Children Prop Count (Fields): 7
    public:

        struct FString CurrentLevel; // 0x0
        int32_t EngineVersion; // 0x10
        bool HasBegunPlay; // 0x14
        struct FGuid InstanceId; // 0x18
        struct FString InstanceType; // 0x28
        struct FGuid SessionId; // 0x38
        float WorldTimeSeconds; // 0x48

    };

    struct FEngineServicePing //ScriptStruct EngineMessages.EngineServicePing
    {
    public:


    };

    struct FGameplayTagCreationWidgetHelper //ScriptStruct GameplayTags.GameplayTagCreationWidgetHelper
    {
    public:


    };

    struct FGameplayTagReferenceHelper //ScriptStruct GameplayTags.GameplayTagReferenceHelper
    {
    public:


    };

    struct FGameplayTagNode //ScriptStruct GameplayTags.GameplayTagNode
    {
    public:


    };

    struct FGameplayTagSource //ScriptStruct GameplayTags.GameplayTagSource
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName SourceName; // 0x0
        enum class EGameplayTagSourceType SourceType; // 0x8
        class UGameplayTagsList* SourceTagList; // 0x10
        class URestrictedGameplayTagsList* SourceRestrictedTagList; // 0x18

    };

    struct FGameplayTagTableRow : FTableRowBase //ScriptStruct GameplayTags.GameplayTagTableRow
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Tag; // 0x8
        struct FString DevComment; // 0x10

    };

    struct FRestrictedGameplayTagTableRow : FGameplayTagTableRow //ScriptStruct GameplayTags.RestrictedGameplayTagTableRow
    {
    //Children Prop Count (Fields): 1
    public:

        bool bAllowNonRestrictedChildren; // 0x20

    };

    struct FRestrictedConfigInfo //ScriptStruct GameplayTags.RestrictedConfigInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString RestrictedConfigName; // 0x0
        struct TArray<struct FString> Owners; // 0x10

    };

    struct FGameplayTagCategoryRemap //ScriptStruct GameplayTags.GameplayTagCategoryRemap
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString BaseCategory; // 0x0
        struct TArray<struct FString> RemapCategories; // 0x10

    };

    struct FGameplayTagRedirect //ScriptStruct GameplayTags.GameplayTagRedirect
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName OldTagName; // 0x0
        struct FName NewTagName; // 0x8

    };

    struct FUVMapSettings //ScriptStruct StaticMeshDescription.UVMapSettings
    {
    //Children Prop Count (Fields): 5
    public:

        struct FVector Size; // 0x0
        struct FVector2D UVTile; // 0xc
        struct FVector position; // 0x14
        struct FRotator Rotation; // 0x20
        struct FVector Scale; // 0x2c

    };

    struct FPropertyAccessLibrary //ScriptStruct PropertyAccess.PropertyAccessLibrary
    {
    //Children Prop Count (Fields): 8
    public:

        struct TArray<struct FPropertyAccessSegment> PathSegments; // 0x0
        struct TArray<struct FPropertyAccessPath> SrcPaths; // 0x10
        struct TArray<struct FPropertyAccessPath> DestPaths; // 0x20
        struct FPropertyAccessCopyBatch CopyBatches; // 0x30
        struct TArray<struct FPropertyAccessIndirectionChain> SrcAccesses; // 0x70
        struct TArray<struct FPropertyAccessIndirectionChain> DestAccesses; // 0x80
        struct TArray<struct FPropertyAccessIndirection> Indirections; // 0x90
        struct TArray<int32_t> EventAccessIndices; // 0xa0

    };

    struct FPropertyAccessIndirection //ScriptStruct PropertyAccess.PropertyAccessIndirection
    {
    //Children Prop Count (Fields): 8
    public:

        struct TFieldPath<FArrayProperty> ArrayProperty; // 0x0
        class UFunction* Function; // 0x20
        int32_t ReturnBufferSize; // 0x28
        int32_t ReturnBufferAlignment; // 0x2c
        int32_t ArrayIndex; // 0x30
        uint32_t Offset; // 0x34
        enum class EPropertyAccessObjectType ObjectType; // 0x38
        enum class EPropertyAccessIndirectionType Type; // 0x39

    };

    struct FPropertyAccessIndirectionChain //ScriptStruct PropertyAccess.PropertyAccessIndirectionChain
    {
    //Children Prop Count (Fields): 4
    public:

        struct TFieldPath<FProperty> Property; // 0x0
        int32_t IndirectionStartIndex; // 0x20
        int32_t IndirectionEndIndex; // 0x24
        int32_t eventId; // 0x28

    };

    struct FPropertyAccessCopyBatch //ScriptStruct PropertyAccess.PropertyAccessCopyBatch
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FPropertyAccessCopy> Copies; // 0x0

    };

    struct FPropertyAccessCopy //ScriptStruct PropertyAccess.PropertyAccessCopy
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t AccessIndex; // 0x0
        int32_t DestAccessStartIndex; // 0x4
        int32_t DestAccessEndIndex; // 0x8
        enum class EPropertyAccessCopyType Type; // 0xc

    };

    struct FPropertyAccessPath //ScriptStruct PropertyAccess.PropertyAccessPath
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t PathSegmentStartIndex; // 0x0
        int32_t PathSegmentCount; // 0x4
        char bHasEvents; // 0x8

    };

    struct FPropertyAccessSegment //ScriptStruct PropertyAccess.PropertyAccessSegment
    {
    //Children Prop Count (Fields): 6
    public:

        struct FName Name; // 0x0
        class UStruct* Struct; // 0x8
        struct TFieldPath<FProperty> Property; // 0x10
        class UFunction* Function; // 0x30
        int32_t ArrayIndex; // 0x38
        uint16_t Flags; // 0x3c

    };

    struct FMessageRpcUnhandled //ScriptStruct MessagingRpc.MessageRpcUnhandled
    {
    //Children Prop Count (Fields): 1
    public:

        struct FGuid CallId; // 0x0

    };

    struct FMessageRpcProgress //ScriptStruct MessagingRpc.MessageRpcProgress
    {
    //Children Prop Count (Fields): 3
    public:

        float Completion; // 0x0
        struct FGuid CallId; // 0x4
        struct FString StatusText; // 0x18

    };

    struct FMessageRpcCancel //ScriptStruct MessagingRpc.MessageRpcCancel
    {
    //Children Prop Count (Fields): 1
    public:

        struct FGuid CallId; // 0x0

    };

    struct FRpcMessage //ScriptStruct MessagingRpc.RpcMessage
    {
    //Children Prop Count (Fields): 1
    public:

        struct FGuid CallId; // 0x0

    };

    struct FPortalRpcServer //ScriptStruct PortalRpc.PortalRpcServer
    {
    //Children Prop Count (Fields): 1
    public:

        struct FString ServerAddress; // 0x0

    };

    struct FPortalRpcLocateServer //ScriptStruct PortalRpc.PortalRpcLocateServer
    {
    //Children Prop Count (Fields): 4
    public:

        struct FGuid ProductId; // 0x0
        struct FString ProductVersion; // 0x10
        struct FString HostMacAddress; // 0x20
        struct FString HostUserId; // 0x30

    };

    struct FPortalUserIsEntitledToItemResult //ScriptStruct PortalServices.PortalUserIsEntitledToItemResult
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString ItemID; // 0x0
        bool IsEntitled; // 0x10
        enum class EEntitlementCacheLevelRetrieved RetrievedFromCacheLevel; // 0x11

    };

    struct FPortalUserDetails //ScriptStruct PortalServices.PortalUserDetails
    {
    //Children Prop Count (Fields): 4
    public:

        struct FText DisplayName; // 0x0
        struct FText Email; // 0x18
        struct FText RealName; // 0x30
        bool IsSignedIn; // 0x48

    };

    struct FClothCollisionData //ScriptStruct ClothingSystemRuntimeInterface.ClothCollisionData
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<struct FClothCollisionPrim_Sphere> Spheres; // 0x0
        struct TArray<struct FClothCollisionPrim_SphereConnection> SphereConnections; // 0x10
        struct TArray<struct FClothCollisionPrim_Convex> Convexes; // 0x20
        struct TArray<struct FClothCollisionPrim_Box> Boxes; // 0x30

    };

    struct FClothCollisionPrim_Box //ScriptStruct ClothingSystemRuntimeInterface.ClothCollisionPrim_Box
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector LocalPosition; // 0x0
        struct FQuat LocalRotation; // 0x10
        struct FVector HalfExtents; // 0x20
        int32_t BoneIndex; // 0x2c

    };

    struct FClothCollisionPrim_Convex //ScriptStruct ClothingSystemRuntimeInterface.ClothCollisionPrim_Convex
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FPlane> Planes; // 0x0
        struct TArray<struct FVector> SurfacePoints; // 0x10
        int32_t BoneIndex; // 0x20

    };

    struct FClothCollisionPrim_SphereConnection //ScriptStruct ClothingSystemRuntimeInterface.ClothCollisionPrim_SphereConnection
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t SphereIndices; // 0x0

    };

    struct FClothCollisionPrim_Sphere //ScriptStruct ClothingSystemRuntimeInterface.ClothCollisionPrim_Sphere
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t BoneIndex; // 0x0
        float Radius; // 0x4
        struct FVector LocalPosition; // 0x8

    };

    struct FClothVertBoneData //ScriptStruct ClothingSystemRuntimeInterface.ClothVertBoneData
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t NumInfluences; // 0x0
        uint16_t BoneIndices; // 0x4
        float BoneWeights; // 0x1c

    };

    struct FEyeTrackerStereoGazeData //ScriptStruct EyeTracker.EyeTrackerStereoGazeData
    {
    //Children Prop Count (Fields): 6
    public:

        struct FVector LeftEyeOrigin; // 0x0
        struct FVector LeftEyeDirection; // 0xc
        struct FVector RightEyeOrigin; // 0x18
        struct FVector RightEyeDirection; // 0x24
        struct FVector FixationPoint; // 0x30
        float ConfidenceValue; // 0x3c

    };

    struct FEyeTrackerGazeData //ScriptStruct EyeTracker.EyeTrackerGazeData
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector GazeOrigin; // 0x0
        struct FVector GazeDirection; // 0xc
        struct FVector FixationPoint; // 0x18
        float ConfidenceValue; // 0x24

    };

    struct FJsonObjectWrapper //ScriptStruct JsonUtilities.JsonObjectWrapper
    {
    //Children Prop Count (Fields): 1
    public:

        struct FString JsonString; // 0x0

    };

    struct FMediaPlayerOptions //ScriptStruct MediaUtils.MediaPlayerOptions
    {
    //Children Prop Count (Fields): 4
    public:

        struct FMediaPlayerTrackOptions Tracks; // 0x0
        struct FTimespan SeekTime; // 0x20
        enum class EMediaPlayerOptionBooleanOverride PlayOnOpen; // 0x28
        enum class EMediaPlayerOptionBooleanOverride Loop; // 0x29

    };

    struct FMediaPlayerTrackOptions //ScriptStruct MediaUtils.MediaPlayerTrackOptions
    {
    //Children Prop Count (Fields): 7
    public:

        int32_t Audio; // 0x0
        int32_t Caption; // 0x4
        int32_t MetaData; // 0x8
        int32_t Script; // 0xc
        int32_t Subtitle; // 0x10
        int32_t Text; // 0x14
        int32_t Video; // 0x18

    };

    struct FMediaCaptureDevice //ScriptStruct MediaAssets.MediaCaptureDevice
    {
    //Children Prop Count (Fields): 2
    public:

        struct FText DisplayName; // 0x0
        struct FString URL; // 0x18

    };

    struct FMediaSoundComponentSpectralData //ScriptStruct MediaAssets.MediaSoundComponentSpectralData
    {
    //Children Prop Count (Fields): 2
    public:

        float FrequencyHz; // 0x0
        float Magnitude; // 0x4

    };

    struct FLevelSequenceCameraSettings //ScriptStruct LevelSequence.LevelSequenceCameraSettings
    {
    //Children Prop Count (Fields): 2
    public:

        bool bOverrideAspectRatioAxisConstraint; // 0x0
        enum class EAspectRatioAxisConstraint AspectRatioAxisConstraint; // 0x1

    };

    struct FBoundActorProxy //ScriptStruct LevelSequence.BoundActorProxy
    {
    public:


    };

    struct FLevelSequenceAnimSequenceLinkItem //ScriptStruct LevelSequence.LevelSequenceAnimSequenceLinkItem
    {
    //Children Prop Count (Fields): 5
    public:

        struct FGuid SkelTrackGuid; // 0x0
        struct FSoftObjectPath PathToAnimSequence; // 0x10
        bool bExportTransforms; // 0x28
        bool bExportCurves; // 0x29
        bool bRecordInWorldSpace; // 0x2a

    };

    struct FLevelSequenceBindingReferences //ScriptStruct LevelSequence.LevelSequenceBindingReferences
    {
    //Children Prop Count (Fields): 2
    public:

        struct TMap<struct FGuid, struct FLevelSequenceBindingReferenceArray> BindingIdToReferences; // 0x0
        struct TSet<struct FGuid> AnimSequenceInstances; // 0x50

    };

    struct FLevelSequenceBindingReferenceArray //ScriptStruct LevelSequence.LevelSequenceBindingReferenceArray
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FLevelSequenceBindingReference> References; // 0x0

    };

    struct FLevelSequenceBindingReference //ScriptStruct LevelSequence.LevelSequenceBindingReference
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString PackageName; // 0x0
        struct FSoftObjectPath ExternalObjectPath; // 0x10
        struct FString ObjectPath; // 0x28

    };

    struct FLevelSequenceObjectReferenceMap //ScriptStruct LevelSequence.LevelSequenceObjectReferenceMap
    {
    public:


    };

    struct FLevelSequenceLegacyObjectReference //ScriptStruct LevelSequence.LevelSequenceLegacyObjectReference
    {
    public:


    };

    struct FLevelSequenceObject //ScriptStruct LevelSequence.LevelSequenceObject
    {
    //Children Prop Count (Fields): 3
    public:

        struct FLazyObjectProperty ObjectOrOwner; // 0x0
        struct FString ComponentName; // 0x20
        struct TWeakObjectPtr<struct UObject> CachedComponent; // 0x30

    };

    struct FLevelSequencePlayerSnapshot //ScriptStruct LevelSequence.LevelSequencePlayerSnapshot
    {
    //Children Prop Count (Fields): 11
    public:

        struct FString MasterName; // 0x0
        struct FQualifiedFrameTime MasterTime; // 0x10
        struct FQualifiedFrameTime SourceTime; // 0x20
        struct FString CurrentShotName; // 0x30
        struct FQualifiedFrameTime CurrentShotLocalTime; // 0x40
        struct FQualifiedFrameTime CurrentShotSourceTime; // 0x50
        struct FString SourceTimecode; // 0x60
        struct TSoftObjectPtr<UCameraComponent> CameraComponent; // 0x70
        struct FLevelSequenceSnapshotSettings Settings; // 0x98
        class ULevelSequence* ActiveShot; // 0xa8
        struct FMovieSceneSequenceID ShotID; // 0xb0

    };

    struct FLevelSequenceSnapshotSettings //ScriptStruct LevelSequence.LevelSequenceSnapshotSettings
    {
    //Children Prop Count (Fields): 2
    public:

        char ZeroPadAmount; // 0x0
        struct FFrameRate FrameRate; // 0x4

    };

    struct FCompositionGraphCapturePasses //ScriptStruct MovieSceneCapture.CompositionGraphCapturePasses
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FString> Value; // 0x0

    };

    struct FFrameMetrics //ScriptStruct MovieSceneCapture.FrameMetrics
    {
    //Children Prop Count (Fields): 4
    public:

        float TotalElapsedTime; // 0x0
        float FrameDelta; // 0x4
        int32_t FrameNumber; // 0x8
        int32_t NumDroppedFrames; // 0xc

    };

    struct FMovieSceneCaptureSettings //ScriptStruct MovieSceneCapture.MovieSceneCaptureSettings
    {
    //Children Prop Count (Fields): 21
    public:

        struct FDirectoryPath OutputDirectory; // 0x0
        class AGameModeBase* GameModeOverride; // 0x10
        struct FString OutputFormat; // 0x18
        bool bOverwriteExisting; // 0x28
        bool bUseRelativeFrameNumbers; // 0x29
        int32_t HandleFrames; // 0x2c
        struct FString MovieExtension; // 0x30
        char ZeroPadFrameNumbers; // 0x40
        struct FFrameRate FrameRate; // 0x44
        bool bUseCustomFrameRate; // 0x4c
        struct FFrameRate CustomFrameRate; // 0x50
        struct FCaptureResolution Resolution; // 0x58
        bool bEnableTextureStreaming; // 0x60
        bool bCinematicEngineScalability; // 0x61
        bool bCinematicMode; // 0x62
        bool bAllowMovement; // 0x63
        bool bAllowTurning; // 0x64
        bool bShowPlayer; // 0x65
        bool bShowHUD; // 0x66
        bool bUsePathTracer; // 0x67
        int32_t PathTracerSamplePerPixel; // 0x68

    };

    struct FCaptureResolution //ScriptStruct MovieSceneCapture.CaptureResolution
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t ResX; // 0x0
        int32_t ResY; // 0x4

    };

    struct FDirectoryPath //ScriptStruct Engine.DirectoryPath
    {
    //Children Prop Count (Fields): 1
    public:

        struct FString Path; // 0x0

    };

    struct FCapturedPixels //ScriptStruct MovieSceneCapture.CapturedPixels
    {
    public:


    };

    struct FCapturedPixelsID //ScriptStruct MovieSceneCapture.CapturedPixelsID
    {
    //Children Prop Count (Fields): 1
    public:

        struct TMap<struct FName, struct FName> Identifiers; // 0x0

    };

    struct FTickFinishSpawningInfo //ScriptStruct Engine.TickFinishSpawningInfo
    {
    public:


    };

    struct FKAggregateGeom //ScriptStruct Engine.KAggregateGeom
    {
    //Children Prop Count (Fields): 5
    public:

        struct TArray<struct FKSphereElem> SphereElems; // 0x0
        struct TArray<struct FKBoxElem> BoxElems; // 0x10
        struct TArray<struct FKSphylElem> SphylElems; // 0x20
        struct TArray<struct FKConvexElem> ConvexElems; // 0x30
        struct TArray<struct FKTaperedCapsuleElem> TaperedCapsuleElems; // 0x40

    };

    struct FKTaperedCapsuleElem : FKShapeElem //ScriptStruct Engine.KTaperedCapsuleElem
    {
    //Children Prop Count (Fields): 5
    public:

        struct FVector Center; // 0x30
        struct FRotator Rotation; // 0x3c
        float Radius0; // 0x48
        float Radius1; // 0x4c
        float Length; // 0x50

    };

    struct FKConvexElem : FKShapeElem //ScriptStruct Engine.KConvexElem
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<struct FVector> VertexData; // 0x30
        struct TArray<int32_t> IndexData; // 0x40
        struct FBox ElemBox; // 0x50
        struct FTransform Transform; // 0x70

    };

    struct FKSphylElem : FKShapeElem //ScriptStruct Engine.KSphylElem
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector Center; // 0x30
        struct FRotator Rotation; // 0x3c
        float Radius; // 0x48
        float Length; // 0x4c

    };

    struct FKBoxElem : FKShapeElem //ScriptStruct Engine.KBoxElem
    {
    //Children Prop Count (Fields): 5
    public:

        struct FVector Center; // 0x30
        struct FRotator Rotation; // 0x3c
        float X; // 0x48
        float Y; // 0x4c
        float Z; // 0x50

    };

    struct FKSphereElem : FKShapeElem //ScriptStruct Engine.KSphereElem
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Center; // 0x30
        float Radius; // 0x3c

    };

    struct FAnimationGroupReference //ScriptStruct Engine.AnimationGroupReference
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName GroupName; // 0x0
        enum class EAnimGroupRole GroupRole; // 0x8
        enum class EAnimSyncGroupScope GroupScope; // 0x9

    };

    struct FRootMotionMovementParams //ScriptStruct Engine.RootMotionMovementParams
    {
    //Children Prop Count (Fields): 3
    public:

        bool bHasRootMotion; // 0x0
        float BlendWeight; // 0x4
        struct FTransform RootMotionTransform; // 0x10

    };

    struct FAnimGroupInstance //ScriptStruct Engine.AnimGroupInstance
    {
    public:


    };

    struct FAnimTickRecord //ScriptStruct Engine.AnimTickRecord
    {
    //Children Prop Count (Fields): 1
    public:

        class UAnimationAsset* SourceAsset; // 0x0

    };

    struct FMarkerSyncAnimPosition //ScriptStruct Engine.MarkerSyncAnimPosition
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName PreviousMarkerName; // 0x0
        struct FName NextMarkerName; // 0x8
        float PositionBetweenMarkers; // 0x10

    };

    struct FBlendFilter //ScriptStruct Engine.BlendFilter
    {
    public:


    };

    struct FBlendSampleData //ScriptStruct Engine.BlendSampleData
    {
    //Children Prop Count (Fields): 6
    public:

        int32_t SampleDataIndex; // 0x0
        class UAnimSequence* Animation; // 0x8
        float TotalWeight; // 0x10
        float Time; // 0x14
        float PreviousTime; // 0x18
        float SamplePlayRate; // 0x1c

    };

    struct FAnimationRecordingSettings //ScriptStruct Engine.AnimationRecordingSettings
    {
    //Children Prop Count (Fields): 9
    public:

        bool bRecordInWorldSpace; // 0x0
        bool bRemoveRootAnimation; // 0x1
        bool bAutoSaveAsset; // 0x2
        float SampleRate; // 0x4
        float Length; // 0x8
        enum class ERichCurveInterpMode InterpMode; // 0xc
        enum class ERichCurveTangentMode TangentMode; // 0xd
        bool bRecordTransforms; // 0xf
        bool bRecordCurves; // 0x10

    };

    struct FComponentSpacePose //ScriptStruct Engine.ComponentSpacePose
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FTransform> Transforms; // 0x0
        struct TArray<struct FName> Names; // 0x10

    };

    struct FLocalSpacePose //ScriptStruct Engine.LocalSpacePose
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FTransform> Transforms; // 0x0
        struct TArray<struct FName> Names; // 0x10

    };

    struct FNamedTransform //ScriptStruct Engine.NamedTransform
    {
    //Children Prop Count (Fields): 2
    public:

        struct FTransform Value; // 0x0
        struct FName Name; // 0x30

    };

    struct FNamedColor //ScriptStruct Engine.NamedColor
    {
    //Children Prop Count (Fields): 2
    public:

        struct FColor Value; // 0x0
        struct FName Name; // 0x4

    };

    struct FNamedVector //ScriptStruct Engine.NamedVector
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Value; // 0x0
        struct FName Name; // 0xc

    };

    struct FNamedFloat //ScriptStruct Engine.NamedFloat
    {
    //Children Prop Count (Fields): 2
    public:

        float Value; // 0x0
        struct FName Name; // 0x4

    };

    struct FAnimParentNodeAssetOverride //ScriptStruct Engine.AnimParentNodeAssetOverride
    {
    //Children Prop Count (Fields): 2
    public:

        class UAnimationAsset* NewAsset; // 0x0
        struct FGuid ParentNodeGuid; // 0x8

    };

    struct FAnimGroupInfo //ScriptStruct Engine.AnimGroupInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Name; // 0x0
        struct FLinearColor Color; // 0x8

    };

    struct FAnimBlueprintDebugData //ScriptStruct Engine.AnimBlueprintDebugData
    {
    public:


    };

    struct FAnimationFrameSnapshot //ScriptStruct Engine.AnimationFrameSnapshot
    {
    public:


    };

    struct FStateMachineDebugData //ScriptStruct Engine.StateMachineDebugData
    {
    public:


    };

    struct FStateMachineStateDebugData //ScriptStruct Engine.StateMachineStateDebugData
    {
    public:


    };

    struct FAnimBlueprintFunctionData //ScriptStruct Engine.AnimBlueprintFunctionData
    {
    //Children Prop Count (Fields): 3
    public:

        struct TFieldPath<FStructProperty> OutputPoseNodeProperty; // 0x0
        struct TArray<struct TFieldPath<FStructProperty>> InputPoseNodeProperties; // 0x20
        struct TArray<struct TFieldPath<FProperty>> InputProperties; // 0x30

    };

    struct FAnimGraphBlendOptions //ScriptStruct Engine.AnimGraphBlendOptions
    {
    //Children Prop Count (Fields): 2
    public:

        float BlendInTime; // 0x0
        float BlendOutTime; // 0x4

    };

    struct FGraphAssetPlayerInformation //ScriptStruct Engine.GraphAssetPlayerInformation
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<int32_t> PlayerNodeIndices; // 0x0

    };

    struct FCachedPoseIndices //ScriptStruct Engine.CachedPoseIndices
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<int32_t> OrderedSavedPoseNodeIndices; // 0x0

    };

    struct FAnimBlueprintFunction //ScriptStruct Engine.AnimBlueprintFunction
    {
    //Children Prop Count (Fields): 6
    public:

        struct FName Name; // 0x0
        struct FName Group; // 0x8
        int32_t OutputPoseNodeIndex; // 0x10
        struct TArray<struct FName> InputPoseNames; // 0x18
        struct TArray<int32_t> InputPoseNodeIndices; // 0x28
        bool bImplemented; // 0x60

    };

    struct FAnimTrack //ScriptStruct Engine.AnimTrack
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FAnimSegment> AnimSegments; // 0x0

    };

    struct FAnimSegment //ScriptStruct Engine.AnimSegment
    {
    //Children Prop Count (Fields): 6
    public:

        class UAnimSequenceBase* AnimReference; // 0x0
        float StartPos; // 0x8
        float AnimStartTime; // 0xc
        float AnimEndTime; // 0x10
        float AnimPlayRate; // 0x14
        int32_t LoopingCount; // 0x18

    };

    struct FRootMotionExtractionStep //ScriptStruct Engine.RootMotionExtractionStep
    {
    //Children Prop Count (Fields): 3
    public:

        class UAnimSequence* AnimSequence; // 0x0
        float StartPosition; // 0x8
        float EndPosition; // 0xc

    };

    struct FAnimationErrorStats //ScriptStruct Engine.AnimationErrorStats
    {
    public:


    };

    struct FRawCurveTracks //ScriptStruct Engine.RawCurveTracks
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FFloatCurve> FloatCurves; // 0x0

    };

    struct FAnimCurveBase //ScriptStruct Engine.AnimCurveBase
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName LastObservedName; // 0x0
        struct FSmartName Name; // 0x8
        int32_t CurveTypeFlags; // 0x14

    };

    struct FSmartName //ScriptStruct Engine.SmartName
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName DisplayName; // 0x0

    };

    struct FFloatCurve : FAnimCurveBase //ScriptStruct Engine.FloatCurve
    {
    //Children Prop Count (Fields): 1
    public:

        struct FRichCurve FloatCurve; // 0x18

    };

    struct FTransformCurve : FAnimCurveBase //ScriptStruct Engine.TransformCurve
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVectorCurve TranslationCurve; // 0x18
        struct FVectorCurve RotationCurve; // 0x1b0
        struct FVectorCurve ScaleCurve; // 0x348

    };

    struct FVectorCurve : FAnimCurveBase //ScriptStruct Engine.VectorCurve
    {
    //Children Prop Count (Fields): 1
    public:

        struct FRichCurve FloatCurves; // 0x18

    };

    struct FSlotEvaluationPose //ScriptStruct Engine.SlotEvaluationPose
    {
    //Children Prop Count (Fields): 2
    public:

        enum class EAdditiveAnimationType AdditiveType; // 0x0
        float Weight; // 0x4

    };

    struct FA2Pose //ScriptStruct Engine.A2Pose
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FTransform> Bones; // 0x0

    };

    struct FA2CSPose : FA2Pose //ScriptStruct Engine.A2CSPose
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<char> ComponentSpaceFlags; // 0x18

    };

    struct FQueuedDrawDebugItem //ScriptStruct Engine.QueuedDrawDebugItem
    {
    //Children Prop Count (Fields): 14
    public:

        enum class EDrawDebugItemType ItemType; // 0x0
        struct FVector StartLoc; // 0x4
        struct FVector EndLoc; // 0x10
        struct FVector Center; // 0x1c
        struct FRotator Rotation; // 0x28
        float Radius; // 0x34
        float Size; // 0x38
        int32_t Segments; // 0x3c
        struct FColor Color; // 0x40
        bool bPersistentLines; // 0x44
        float LifeTime; // 0x48
        float Thickness; // 0x4c
        struct FString Message; // 0x50
        struct FVector2D TextScale; // 0x60

    };

    struct FAnimInstanceSubsystemData //ScriptStruct Engine.AnimInstanceSubsystemData
    {
    public:


    };

    struct FAnimLinkableElement //ScriptStruct Engine.AnimLinkableElement
    {
    //Children Prop Count (Fields): 9
    public:

        class UAnimMontage* LinkedMontage; // 0x8
        int32_t SlotIndex; // 0x10
        int32_t SegmentIndex; // 0x14
        enum class EAnimLinkMethod LinkMethod; // 0x18
        enum class EAnimLinkMethod CachedLinkMethod; // 0x19
        float SegmentBeginTime; // 0x1c
        float SegmentLength; // 0x20
        float LinkValue; // 0x24
        class UAnimSequenceBase* LinkedSequence; // 0x28

    };

    struct FAnimMontageInstance //ScriptStruct Engine.AnimMontageInstance
    {
    //Children Prop Count (Fields): 10
    public:

        class UAnimMontage* Montage; // 0x0
        bool bPlaying; // 0x28
        float DefaultBlendTimeMultiplier; // 0x2c
        struct TArray<int32_t> NextSections; // 0xe8
        struct TArray<int32_t> PrevSections; // 0xf8
        struct TArray<struct FAnimNotifyEvent> ActiveStateBranchingPoints; // 0x118
        float position; // 0x128
        float PlayRate; // 0x12c
        struct FAlphaBlend Blend; // 0x130
        int32_t DisableRootMotionCount; // 0x18c

    };

    struct FAnimNotifyEvent : FAnimLinkableElement //ScriptStruct Engine.AnimNotifyEvent
    {
    //Children Prop Count (Fields): 17
    public:

        float DisplayTime; // 0x30
        float TriggerTimeOffset; // 0x34
        float EndTriggerTimeOffset; // 0x38
        float TriggerWeightThreshold; // 0x3c
        struct FName NotifyName; // 0x40
        class UAnimNotify* Notify; // 0x48
        class UAnimNotifyState* NotifyStateClass; // 0x50
        float Duration; // 0x58
        struct FAnimLinkableElement EndLink; // 0x60
        bool bConvertedFromBranchingPoint; // 0x90
        enum class EMontageNotifyTickType MontageTickType; // 0x91
        float NotifyTriggerChance; // 0x94
        enum class ENotifyFilterType NotifyFilterType; // 0x98
        int32_t NotifyFilterLOD; // 0x9c
        bool bTriggerOnDedicatedServer; // 0xa0
        bool bTriggerOnFollower; // 0xa1
        int32_t TrackIndex; // 0xa4

    };

    struct FBranchingPointMarker //ScriptStruct Engine.BranchingPointMarker
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t NotifyIndex; // 0x0
        float TriggerTime; // 0x4
        enum class EAnimNotifyEventType NotifyEventType; // 0x8

    };

    struct FBranchingPoint : FAnimLinkableElement //ScriptStruct Engine.BranchingPoint
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName EventName; // 0x30
        float DisplayTime; // 0x38
        float TriggerTimeOffset; // 0x3c

    };

    struct FSlotAnimationTrack //ScriptStruct Engine.SlotAnimationTrack
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName SlotName; // 0x0
        struct FAnimTrack AnimTrack; // 0x8

    };

    struct FCompositeSection : FAnimLinkableElement //ScriptStruct Engine.CompositeSection
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName SectionName; // 0x30
        float StartTime; // 0x38
        struct FName NextSectionName; // 0x3c
        struct TArray<class UAnimMetaData*> MetaData; // 0x48

    };

    struct FAnimNode_ApplyMeshSpaceAdditive : FAnimNode_Base //ScriptStruct Engine.AnimNode_ApplyMeshSpaceAdditive
    {
    //Children Prop Count (Fields): 10
    public:

        struct FPoseLink Base; // 0x10
        struct FPoseLink Additive; // 0x20
        enum class EAnimAlphaInputType AlphaInputType; // 0x30
        float Alpha; // 0x34
        char bAlphaBoolEnabled; // 0x38
        struct FInputAlphaBoolBlend AlphaBoolBlend; // 0x40
        struct FName AlphaCurveName; // 0x88
        struct FInputScaleBias AlphaScaleBias; // 0x90
        struct FInputScaleBiasClamp AlphaScaleBiasClamp; // 0x98
        int32_t LODThreshold; // 0xc8

    };

    struct FAnimNode_Inertialization : FAnimNode_Base //ScriptStruct Engine.AnimNode_Inertialization
    {
    //Children Prop Count (Fields): 1
    public:

        struct FPoseLink Source; // 0x10

    };

    struct FInertializationPoseDiff //ScriptStruct Engine.InertializationPoseDiff
    {
    public:


    };

    struct FInertializationCurveDiff //ScriptStruct Engine.InertializationCurveDiff
    {
    public:


    };

    struct FInertializationBoneDiff //ScriptStruct Engine.InertializationBoneDiff
    {
    public:


    };

    struct FInertializationPose //ScriptStruct Engine.InertializationPose
    {
    public:


    };

    struct FAnimNode_LinkedAnimGraph : FAnimNode_CustomProperty //ScriptStruct Engine.AnimNode_LinkedAnimGraph
    {
    //Children Prop Count (Fields): 6
    public:

        struct TArray<struct FPoseLink> InputPoses; // 0x58
        struct TArray<struct FName> InputPoseNames; // 0x68
        class UAnimInstance* InstanceClass; // 0x78
        struct FName Tag; // 0x80
        char bReceiveNotifiesFromLinkedInstances; // 0x9c
        char bPropagateNotifiesToLinkedInstances; // 0x9c

    };

    struct FAnimNode_LinkedAnimLayer : FAnimNode_LinkedAnimGraph //ScriptStruct Engine.AnimNode_LinkedAnimLayer
    {
    //Children Prop Count (Fields): 2
    public:

        class UAnimLayerInterface* Interface; // 0xa0
        struct FName Layer; // 0xa8

    };

    struct FAnimNode_LinkedInputPose : FAnimNode_Base //ScriptStruct Engine.AnimNode_LinkedInputPose
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Name; // 0x10
        struct FName Graph; // 0x18
        struct FPoseLink InputPose; // 0x20

    };

    struct FAnimNode_SaveCachedPose : FAnimNode_Base //ScriptStruct Engine.AnimNode_SaveCachedPose
    {
    //Children Prop Count (Fields): 3
    public:

        struct FPoseLink Pose; // 0x10
        struct FName CachePoseName; // 0x20
        bool bCachePoseInAnimInstanceProxy; // 0x2c

    };

    struct FAnimNode_SequencePlayer : FAnimNode_AssetPlayerBase //ScriptStruct Engine.AnimNode_SequencePlayer
    {
    //Children Prop Count (Fields): 9
    public:

        class UAnimSequenceBase* Sequence; // 0x120
        float PlayRateBasis; // 0x128
        float PlayRate; // 0x12c
        struct FInputScaleBiasClamp PlayRateScaleBiasClamp; // 0x130
        float StartPosition; // 0x160
        bool bLoopAnimation; // 0x164
        bool bResetAccumulateTimeWhenActive; // 0x165
        bool bSyncPlayTimeRatio; // 0x16c
        class UAnimSequenceBase* LastPlayAnimSeq; // 0x170

    };

    struct FAnimNode_StateMachine : FAnimNode_Base //ScriptStruct Engine.AnimNode_StateMachine
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t StateMachineIndexInClass; // 0x10
        int32_t MaxTransitionsPerFrame; // 0x14
        bool bSkipFirstUpdateTransition; // 0x18
        bool bReinitializeOnBecomingRelevant; // 0x19

    };

    struct FAnimationPotentialTransition //ScriptStruct Engine.AnimationPotentialTransition
    {
    public:


    };

    struct FAnimationActiveTransitionEntry //ScriptStruct Engine.AnimationActiveTransitionEntry
    {
    //Children Prop Count (Fields): 1
    public:

        class UBlendProfile* BlendProfile; // 0xb8

    };

    struct FAnimNode_TransitionPoseEvaluator : FAnimNode_Base //ScriptStruct Engine.AnimNode_TransitionPoseEvaluator
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t FramesToCachePose; // 0xe8
        enum class EEvaluatorDataSource DataSource; // 0xf0
        enum class EEvaluatorMode EvaluatorMode; // 0xf1

    };

    struct FAnimNode_TransitionResult : FAnimNode_Base //ScriptStruct Engine.AnimNode_TransitionResult
    {
    //Children Prop Count (Fields): 1
    public:

        bool bCanEnterTransition; // 0x10

    };

    struct FAnimNode_UseCachedPose : FAnimNode_Base //ScriptStruct Engine.AnimNode_UseCachedPose
    {
    //Children Prop Count (Fields): 2
    public:

        struct FPoseLink LinkToCachingNode; // 0x10
        struct FName CachePoseName; // 0x20

    };

    struct FExposedValueHandler //ScriptStruct Engine.ExposedValueHandler
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName BoundFunction; // 0x0
        struct TArray<struct FExposedValueCopyRecord> CopyRecords; // 0x8
        class UFunction* Function; // 0x18
        struct TFieldPath<FStructProperty> ValueHandlerNodeProperty; // 0x20

    };

    struct FExposedValueCopyRecord //ScriptStruct Engine.ExposedValueCopyRecord
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t CopyIndex; // 0x0
        enum class EPostCopyOperation PostCopyOperation; // 0x4

    };

    struct FAnimNode_ConvertLocalToComponentSpace : FAnimNode_Base //ScriptStruct Engine.AnimNode_ConvertLocalToComponentSpace
    {
    //Children Prop Count (Fields): 1
    public:

        struct FPoseLink LocalPose; // 0x10

    };

    struct FAnimNode_ConvertComponentToLocalSpace : FAnimNode_Base //ScriptStruct Engine.AnimNode_ConvertComponentToLocalSpace
    {
    //Children Prop Count (Fields): 1
    public:

        struct FComponentSpacePoseLink ComponentPose; // 0x10

    };

    struct FAnimNotifyQueue //ScriptStruct Engine.AnimNotifyQueue
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FAnimNotifyEventReference> AnimNotifies; // 0x10
        struct TMap<struct FName, struct FAnimNotifyArray> UnfilteredMontageAnimNotifies; // 0x20

    };

    struct FAnimNotifyArray //ScriptStruct Engine.AnimNotifyArray
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FAnimNotifyEventReference> Notifies; // 0x0

    };

    struct FAnimNotifyEventReference //ScriptStruct Engine.AnimNotifyEventReference
    {
    //Children Prop Count (Fields): 1
    public:

        class UObject* NotifySource; // 0x8

    };

    struct FCompressedTrack //ScriptStruct Engine.CompressedTrack
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<char> ByteStream; // 0x0
        struct TArray<float> Times; // 0x10
        float Mins; // 0x20
        float Ranges; // 0x2c

    };

    struct FCurveTrack //ScriptStruct Engine.CurveTrack
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName CurveName; // 0x0
        struct TArray<float> CurveWeights; // 0x8

    };

    struct FScaleTrack //ScriptStruct Engine.ScaleTrack
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FVector> ScaleKeys; // 0x0
        struct TArray<float> Times; // 0x10

    };

    struct FRotationTrack //ScriptStruct Engine.RotationTrack
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FQuat> RotKeys; // 0x0
        struct TArray<float> Times; // 0x10

    };

    struct FTranslationTrack //ScriptStruct Engine.TranslationTrack
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FVector> PosKeys; // 0x0
        struct TArray<float> Times; // 0x10

    };

    struct FAnimSequenceTrackContainer //ScriptStruct Engine.AnimSequenceTrackContainer
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FRawAnimSequenceTrack> AnimationTracks; // 0x0
        struct TArray<struct FName> TrackNames; // 0x10

    };

    struct FRawAnimSequenceTrack //ScriptStruct Engine.RawAnimSequenceTrack
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FVector> PosKeys; // 0x0
        struct TArray<struct FQuat> RotKeys; // 0x10
        struct TArray<struct FVector> ScaleKeys; // 0x20

    };

    struct FAnimSetMeshLinkup //ScriptStruct Engine.AnimSetMeshLinkup
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<int32_t> BoneToTrackTable; // 0x0

    };

    struct FAnimSingleNodeInstanceProxy : FAnimInstanceProxy //ScriptStruct Engine.AnimSingleNodeInstanceProxy
    {
    public:


    };

    struct FAnimNode_SingleNode : FAnimNode_Base //ScriptStruct Engine.AnimNode_SingleNode
    {
    //Children Prop Count (Fields): 1
    public:

        struct FPoseLink SourcePose; // 0x10

    };

    struct FBakedAnimationStateMachine //ScriptStruct Engine.BakedAnimationStateMachine
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName MachineName; // 0x0
        int32_t InitialState; // 0x8
        struct TArray<struct FBakedAnimationState> States; // 0x10
        struct TArray<struct FAnimationTransitionBetweenStates> Transitions; // 0x20

    };

    struct FAnimationStateBase //ScriptStruct Engine.AnimationStateBase
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName StateName; // 0x0

    };

    struct FAnimationTransitionBetweenStates : FAnimationStateBase //ScriptStruct Engine.AnimationTransitionBetweenStates
    {
    //Children Prop Count (Fields): 10
    public:

        int32_t PreviousState; // 0x8
        int32_t NextState; // 0xc
        float CrossfadeDuration; // 0x10
        int32_t StartNotify; // 0x14
        int32_t EndNotify; // 0x18
        int32_t InterruptNotify; // 0x1c
        enum class EAlphaBlendOption BlendMode; // 0x20
        class UCurveFloat* CustomCurve; // 0x28
        class UBlendProfile* BlendProfile; // 0x30
        enum class ETransitionLogicType LogicType; // 0x38

    };

    struct FBakedAnimationState //ScriptStruct Engine.BakedAnimationState
    {
    //Children Prop Count (Fields): 11
    public:

        struct FName StateName; // 0x0
        struct TArray<struct FBakedStateExitTransition> Transitions; // 0x8
        int32_t StateRootNodeIndex; // 0x18
        int32_t StartNotify; // 0x1c
        int32_t EndNotify; // 0x20
        int32_t FullyBlendedNotify; // 0x24
        bool bIsAConduit; // 0x28
        int32_t EntryRuleNodeIndex; // 0x2c
        struct TArray<int32_t> PlayerNodeIndices; // 0x30
        struct TArray<int32_t> LayerNodeIndices; // 0x40
        bool bAlwaysResetOnEntry; // 0x50

    };

    struct FBakedStateExitTransition //ScriptStruct Engine.BakedStateExitTransition
    {
    //Children Prop Count (Fields): 6
    public:

        int32_t CanTakeDelegateIndex; // 0x0
        int32_t CustomResultNodeIndex; // 0x4
        int32_t TransitionIndex; // 0x8
        bool bDesiredTransitionReturnValue; // 0xc
        bool bAutomaticRemainingTimeRule; // 0xd
        struct TArray<int32_t> PoseEvaluatorLinks; // 0x10

    };

    struct FAnimationState : FAnimationStateBase //ScriptStruct Engine.AnimationState
    {
    //Children Prop Count (Fields): 5
    public:

        struct TArray<struct FAnimationTransitionRule> Transitions; // 0x8
        int32_t StateRootNodeIndex; // 0x18
        int32_t StartNotify; // 0x1c
        int32_t EndNotify; // 0x20
        int32_t FullyBlendedNotify; // 0x24

    };

    struct FAnimationTransitionRule //ScriptStruct Engine.AnimationTransitionRule
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName RuleToExecute; // 0x0
        bool TransitionReturnVal; // 0x8
        int32_t TransitionIndex; // 0xc

    };

    struct FTrackToSkeletonMap //ScriptStruct Engine.TrackToSkeletonMap
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t BoneTreeIndex; // 0x0

    };

    struct FMarkerSyncData //ScriptStruct Engine.MarkerSyncData
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FAnimSyncMarker> AuthoredSyncMarkers; // 0x0

    };

    struct FAnimSyncMarker //ScriptStruct Engine.AnimSyncMarker
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName MarkerName; // 0x0
        float Time; // 0x8

    };

    struct FAnimNotifyTrack //ScriptStruct Engine.AnimNotifyTrack
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName TrackName; // 0x0
        struct FLinearColor TrackColor; // 0x8

    };

    struct FPerBoneBlendWeights //ScriptStruct Engine.PerBoneBlendWeights
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FPerBoneBlendWeight> BoneBlendWeights; // 0x0

    };

    struct FAssetImportInfo //ScriptStruct Engine.AssetImportInfo
    {
    public:


    };

    struct FPrimaryAssetRulesCustomOverride //ScriptStruct Engine.PrimaryAssetRulesCustomOverride
    {
    //Children Prop Count (Fields): 4
    public:

        struct FPrimaryAssetType PrimaryAssetType; // 0x0
        struct FDirectoryPath FilterDirectory; // 0x8
        struct FString FilterString; // 0x18
        struct FPrimaryAssetRules rules; // 0x28

    };

    struct FPrimaryAssetRules //ScriptStruct Engine.PrimaryAssetRules
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t Priority; // 0x0
        int32_t ChunkId; // 0x4
        bool bApplyRecursively; // 0x8
        enum class EPrimaryAssetCookRule CookRule; // 0x9

    };

    struct FPrimaryAssetRulesOverride //ScriptStruct Engine.PrimaryAssetRulesOverride
    {
    //Children Prop Count (Fields): 2
    public:

        struct FPrimaryAssetId PrimaryAssetId; // 0x0
        struct FPrimaryAssetRules rules; // 0x10

    };

    struct FAssetManagerRedirect //ScriptStruct Engine.AssetManagerRedirect
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Old; // 0x0
        struct FString New; // 0x10

    };

    struct FPrimaryAssetTypeInfo //ScriptStruct Engine.PrimaryAssetTypeInfo
    {
    //Children Prop Count (Fields): 11
    public:

        struct FName PrimaryAssetType; // 0x0
        struct FSoftClassProperty AssetBaseClass; // 0x8
        class UObject* AssetBaseClassLoaded; // 0x30
        bool bHasBlueprintClasses; // 0x38
        bool bIsEditorOnly; // 0x39
        struct TArray<struct FDirectoryPath> Directories; // 0x40
        struct TArray<struct FSoftObjectPath> SpecificAssets; // 0x50
        struct FPrimaryAssetRules rules; // 0x60
        struct TArray<struct FString> AssetScanPaths; // 0x70
        bool bIsDynamicAsset; // 0x80
        int32_t NumberOfAssets; // 0x84

    };

    struct FAssetMapping //ScriptStruct Engine.AssetMapping
    {
    //Children Prop Count (Fields): 2
    public:

        class UAnimationAsset* SourceAsset; // 0x0
        class UAnimationAsset* TargetAsset; // 0x8

    };

    struct FAtmospherePrecomputeInstanceData : FSceneComponentInstanceData //ScriptStruct Engine.AtmospherePrecomputeInstanceData
    {
    public:


    };

    struct FAtmospherePrecomputeParameters //ScriptStruct Engine.AtmospherePrecomputeParameters
    {
    //Children Prop Count (Fields): 11
    public:

        float DensityHeight; // 0x0
        float DecayHeight; // 0x4
        int32_t MaxScatteringOrder; // 0x8
        int32_t TransmittanceTexWidth; // 0xc
        int32_t TransmittanceTexHeight; // 0x10
        int32_t IrradianceTexWidth; // 0x14
        int32_t IrradianceTexHeight; // 0x18
        int32_t InscatterAltitudeSampleNum; // 0x1c
        int32_t InscatterMuNum; // 0x20
        int32_t InscatterMuSNum; // 0x24
        int32_t InscatterNuNum; // 0x28

    };

    struct FBaseAttenuationSettings //ScriptStruct Engine.BaseAttenuationSettings
    {
    //Children Prop Count (Fields): 8
    public:

        enum class EAttenuationDistanceModel DistanceAlgorithm; // 0x8
        enum class EAttenuationShape AttenuationShape; // 0x9
        float dBAttenuationAtMax; // 0xc
        enum class ENaturalSoundFalloffMode FalloffMode; // 0x10
        struct FVector AttenuationShapeExtents; // 0x14
        float ConeOffset; // 0x20
        float FalloffDistance; // 0x24
        struct FRuntimeFloatCurve CustomAttenuationCurve; // 0x28

    };

    struct FAudioComponentParam //ScriptStruct Engine.AudioComponentParam
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName ParamName; // 0x0
        float FloatParam; // 0x8
        bool BoolParam; // 0xc
        int32_t IntParam; // 0x10
        class USoundWave* SoundWaveParam; // 0x18

    };

    struct FAudioEffectParameters //ScriptStruct Engine.AudioEffectParameters
    {
    public:


    };

    struct FAudioReverbEffect : FAudioEffectParameters //ScriptStruct Engine.AudioReverbEffect
    {
    public:


    };

    struct FAudioQualitySettings //ScriptStruct Engine.AudioQualitySettings
    {
    //Children Prop Count (Fields): 2
    public:

        struct FText DisplayName; // 0x0
        int32_t MaxChannels; // 0x18

    };

    struct FInteriorSettings //ScriptStruct Engine.InteriorSettings
    {
    //Children Prop Count (Fields): 9
    public:

        bool bIsWorldSettings; // 0x0
        float ExteriorVolume; // 0x4
        float ExteriorTime; // 0x8
        float ExteriorLPF; // 0xc
        float ExteriorLPFTime; // 0x10
        float InteriorVolume; // 0x14
        float InteriorTime; // 0x18
        float InteriorLPF; // 0x1c
        float InteriorLPFTime; // 0x20

    };

    struct FAudioVolumeSubmixOverrideSettings //ScriptStruct Engine.AudioVolumeSubmixOverrideSettings
    {
    //Children Prop Count (Fields): 3
    public:

        class USoundSubmix* Submix; // 0x0
        struct TArray<class USoundEffectSubmixPreset*> SubmixEffectChain; // 0x8
        float CrossfadeTime; // 0x18

    };

    struct FAudioVolumeSubmixSendSettings //ScriptStruct Engine.AudioVolumeSubmixSendSettings
    {
    //Children Prop Count (Fields): 3
    public:

        enum class EAudioVolumeLocationState ListenerLocationState; // 0x0
        enum class EAudioVolumeLocationState SourceLocationState; // 0x1
        struct TArray<struct FSoundSubmixSendInfo> SubmixSends; // 0x8

    };

    struct FSoundSubmixSendInfo //ScriptStruct Engine.SoundSubmixSendInfo
    {
    //Children Prop Count (Fields): 9
    public:

        enum class ESendLevelControlMethod SendLevelControlMethod; // 0x0
        enum class ESubmixSendStage SendStage; // 0x1
        class USoundSubmixBase* SoundSubmix; // 0x8
        float SendLevel; // 0x10
        float MinSendLevel; // 0x14
        float MaxSendLevel; // 0x18
        float MinSendDistance; // 0x1c
        float MaxSendDistance; // 0x20
        struct FRuntimeFloatCurve CustomSendLevelCurve; // 0x28

    };

    struct FAutoColorGradingIdxAndWeight //ScriptStruct Engine.AutoColorGradingIdxAndWeight
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t Idx; // 0x0
        float Weight; // 0x4
        struct TArray<float> Extra; // 0x8

    };

    struct FAutoColorGradingLayer //ScriptStruct Engine.AutoColorGradingLayer
    {
    //Children Prop Count (Fields): 7
    public:

        struct FString LayerName; // 0x0
        struct TArray<float> LayerSpec; // 0x10
        struct TArray<struct FAutoColorGradingData> Parameters; // 0x20
        float MinHistogramIdx; // 0x30
        float MaxHistogramIdx; // 0x34
        float MinHistogramDiff; // 0x38
        float MaxHistogramDiff; // 0x3c

    };

    struct FAutoColorGradingData //ScriptStruct Engine.AutoColorGradingData
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector4 Parameter; // 0x0
        struct FVector4 ExtraData; // 0x10
        bool Enabled; // 0x20

    };

    struct FLaunchOnTestSettings //ScriptStruct Engine.LaunchOnTestSettings
    {
    //Children Prop Count (Fields): 2
    public:

        struct FFilePath LaunchOnTestmap; // 0x0
        struct FString DeviceID; // 0x10

    };

    struct FFilePath //ScriptStruct Engine.FilePath
    {
    //Children Prop Count (Fields): 1
    public:

        struct FString FilePath; // 0x0

    };

    struct FEditorMapPerformanceTestDefinition //ScriptStruct Engine.EditorMapPerformanceTestDefinition
    {
    //Children Prop Count (Fields): 2
    public:

        struct FSoftObjectPath PerformanceTestmap; // 0x0
        int32_t TestTimer; // 0x18

    };

    struct FBuildPromotionTestSettings //ScriptStruct Engine.BuildPromotionTestSettings
    {
    //Children Prop Count (Fields): 5
    public:

        struct FFilePath DefaultStaticMeshAsset; // 0x0
        struct FBuildPromotionImportWorkflowSettings ImportWorkflow; // 0x10
        struct FBuildPromotionOpenAssetSettings OpenAssets; // 0x160
        struct FBuildPromotionNewProjectSettings NewProjectSettings; // 0x1c0
        struct FFilePath SourceControlMaterial; // 0x1e0

    };

    struct FBuildPromotionNewProjectSettings //ScriptStruct Engine.BuildPromotionNewProjectSettings
    {
    //Children Prop Count (Fields): 2
    public:

        struct FDirectoryPath NewProjectFolderOverride; // 0x0
        struct FString NewProjectNameOverride; // 0x10

    };

    struct FBuildPromotionOpenAssetSettings //ScriptStruct Engine.BuildPromotionOpenAssetSettings
    {
    //Children Prop Count (Fields): 6
    public:

        struct FFilePath BlueprintAsset; // 0x0
        struct FFilePath MaterialAsset; // 0x10
        struct FFilePath ParticleSystemAsset; // 0x20
        struct FFilePath SkeletalMeshAsset; // 0x30
        struct FFilePath StaticMeshAsset; // 0x40
        struct FFilePath TextureAsset; // 0x50

    };

    struct FBuildPromotionImportWorkflowSettings //ScriptStruct Engine.BuildPromotionImportWorkflowSettings
    {
    //Children Prop Count (Fields): 11
    public:

        struct FEditorImportWorkflowDefinition Diffuse; // 0x0
        struct FEditorImportWorkflowDefinition Normal; // 0x20
        struct FEditorImportWorkflowDefinition StaticMesh; // 0x40
        struct FEditorImportWorkflowDefinition ReimportStaticMesh; // 0x60
        struct FEditorImportWorkflowDefinition BlendShapeMesh; // 0x80
        struct FEditorImportWorkflowDefinition MorphMesh; // 0xa0
        struct FEditorImportWorkflowDefinition SkeletalMesh; // 0xc0
        struct FEditorImportWorkflowDefinition Animation; // 0xe0
        struct FEditorImportWorkflowDefinition Sound; // 0x100
        struct FEditorImportWorkflowDefinition SurroundSound; // 0x120
        struct TArray<struct FEditorImportWorkflowDefinition> OtherAssetsToImport; // 0x140

    };

    struct FEditorImportWorkflowDefinition //ScriptStruct Engine.EditorImportWorkflowDefinition
    {
    //Children Prop Count (Fields): 2
    public:

        struct FFilePath ImportFilePath; // 0x0
        struct TArray<struct FImportFactorySettingValues> FactorySettings; // 0x10

    };

    struct FImportFactorySettingValues //ScriptStruct Engine.ImportFactorySettingValues
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString SettingName; // 0x0
        struct FString Value; // 0x10

    };

    struct FBlueprintEditorPromotionSettings //ScriptStruct Engine.BlueprintEditorPromotionSettings
    {
    //Children Prop Count (Fields): 3
    public:

        struct FFilePath FirstMeshPath; // 0x0
        struct FFilePath SecondMeshPath; // 0x10
        struct FFilePath DefaultParticleAsset; // 0x20

    };

    struct FParticleEditorPromotionSettings //ScriptStruct Engine.ParticleEditorPromotionSettings
    {
    //Children Prop Count (Fields): 1
    public:

        struct FFilePath DefaultParticleAsset; // 0x0

    };

    struct FMaterialEditorPromotionSettings //ScriptStruct Engine.MaterialEditorPromotionSettings
    {
    //Children Prop Count (Fields): 3
    public:

        struct FFilePath DefaultMaterialAsset; // 0x0
        struct FFilePath DefaultDiffuseTexture; // 0x10
        struct FFilePath DefaultNormalTexture; // 0x20

    };

    struct FEditorImportExportTestDefinition //ScriptStruct Engine.EditorImportExportTestDefinition
    {
    //Children Prop Count (Fields): 4
    public:

        struct FFilePath ImportFilePath; // 0x0
        struct FString ExportFileExtension; // 0x10
        bool bSkipExport; // 0x20
        struct TArray<struct FImportFactorySettingValues> FactorySettings; // 0x28

    };

    struct FExternalToolDefinition //ScriptStruct Engine.ExternalToolDefinition
    {
    //Children Prop Count (Fields): 6
    public:

        struct FString ToolName; // 0x0
        struct FFilePath ExecutablePath; // 0x10
        struct FString CommandLineOptions; // 0x20
        struct FDirectoryPath WorkingDirectory; // 0x30
        struct FString ScriptExtension; // 0x40
        struct FDirectoryPath ScriptDirectory; // 0x50

    };

    struct FNavAvoidanceData //ScriptStruct Engine.NavAvoidanceData
    {
    public:


    };

    struct FBandwidthTestGenerator //ScriptStruct Engine.BandwidthTestGenerator
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FBandwidthTestItem> ReplicatedBuffers; // 0x0

    };

    struct FBandwidthTestItem //ScriptStruct Engine.BandwidthTestItem
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<char> Kilobyte; // 0x0

    };

    struct FBlendProfileBoneEntry //ScriptStruct Engine.BlendProfileBoneEntry
    {
    //Children Prop Count (Fields): 2
    public:

        struct FBoneReference BoneReference; // 0x0
        float BlendScale; // 0x10

    };

    struct FPerBoneInterpolation //ScriptStruct Engine.PerBoneInterpolation
    {
    //Children Prop Count (Fields): 2
    public:

        struct FBoneReference BoneReference; // 0x0
        float InterpolationSpeedPerSec; // 0x10

    };

    struct FGridBlendSample //ScriptStruct Engine.GridBlendSample
    {
    //Children Prop Count (Fields): 2
    public:

        struct FEditorElement GridElement; // 0x0
        float BlendWeight; // 0x18

    };

    struct FEditorElement //ScriptStruct Engine.EditorElement
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t Indices; // 0x0
        float Weights; // 0xc

    };

    struct FBlendSample //ScriptStruct Engine.BlendSample
    {
    //Children Prop Count (Fields): 3
    public:

        class UAnimSequence* Animation; // 0x0
        struct FVector SampleValue; // 0x8
        float RateScale; // 0x14

    };

    struct FBlendParameter //ScriptStruct Engine.BlendParameter
    {
    //Children Prop Count (Fields): 4
    public:

        struct FString DisplayName; // 0x0
        float Min; // 0x10
        float Max; // 0x14
        int32_t GridNum; // 0x18

    };

    struct FBPEditorBookmarkNode //ScriptStruct Engine.BPEditorBookmarkNode
    {
    //Children Prop Count (Fields): 3
    public:

        struct FGuid NodeGuid; // 0x0
        struct FGuid ParentGuid; // 0x10
        struct FText DisplayName; // 0x20

    };

    struct FEditedDocumentInfo //ScriptStruct Engine.EditedDocumentInfo
    {
    //Children Prop Count (Fields): 4
    public:

        struct FSoftObjectPath EditedObjectPath; // 0x0
        struct FVector2D SavedViewOffset; // 0x18
        float SavedZoomAmount; // 0x20
        class UObject* EditedObject; // 0x28

    };

    struct FBPInterfaceDescription //ScriptStruct Engine.BPInterfaceDescription
    {
    //Children Prop Count (Fields): 2
    public:

        class UInterface* Interface; // 0x0
        struct TArray<class UEdGraph*> Graphs; // 0x8

    };

    struct FBPVariableDescription //ScriptStruct Engine.BPVariableDescription
    {
    //Children Prop Count (Fields): 10
    public:

        struct FName VarName; // 0x0
        struct FGuid VarGuid; // 0x8
        struct FEdGraphPinType VarType; // 0x18
        struct FString FriendlyName; // 0x70
        struct FText Category; // 0x80
        uint64_t PropertyFlags; // 0x98
        struct FName RepNotifyFunc; // 0xa0
        enum class ELifetimeCondition ReplicationCondition; // 0xa8
        struct TArray<struct FBPVariableMetaDataEntry> MetaDataArray; // 0xb0
        struct FString DefaultValue; // 0xc0

    };

    struct FBPVariableMetaDataEntry //ScriptStruct Engine.BPVariableMetaDataEntry
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName DataKey; // 0x0
        struct FString DataValue; // 0x8

    };

    struct FEdGraphPinType //ScriptStruct Engine.EdGraphPinType
    {
    //Children Prop Count (Fields): 11
    public:

        struct FName PinCategory; // 0x0
        struct FName PinSubCategory; // 0x8
        struct TWeakObjectPtr<struct UObject> PinSubCategoryObject; // 0x10
        struct FSimpleMemberReference PinSubCategoryMemberReference; // 0x18
        struct FEdGraphTerminalType PinValueType; // 0x38
        enum class EPinContainerType ContainerType; // 0x54
        char bIsArray; // 0x55
        char bIsReference; // 0x55
        char bIsConst; // 0x55
        char bIsWeakPointer; // 0x55
        char bIsUObjectWrapper; // 0x55

    };

    struct FEdGraphTerminalType //ScriptStruct Engine.EdGraphTerminalType
    {
    //Children Prop Count (Fields): 6
    public:

        struct FName TerminalCategory; // 0x0
        struct FName TerminalSubCategory; // 0x8
        struct TWeakObjectPtr<struct UObject> TerminalSubCategoryObject; // 0x10
        bool bTerminalIsConst; // 0x18
        bool bTerminalIsWeakPointer; // 0x19
        bool bTerminalIsUObjectWrapper; // 0x1a

    };

    struct FBlueprintMacroCosmeticInfo //ScriptStruct Engine.BlueprintMacroCosmeticInfo
    {
    public:


    };

    struct FCompilerNativizationOptions //ScriptStruct Engine.CompilerNativizationOptions
    {
    //Children Prop Count (Fields): 7
    public:

        struct FName PlatformName; // 0x0
        bool ServerOnlyPlatform; // 0x8
        bool ClientOnlyPlatform; // 0x9
        bool bExcludeMonolithicHeaders; // 0xa
        struct TArray<struct FName> ExcludedModules; // 0x10
        struct TSet<struct FSoftObjectPath> ExcludedAssets; // 0x20
        struct TArray<struct FString> ExcludedFolderPaths; // 0x70

    };

    struct FBPComponentClassOverride //ScriptStruct Engine.BPComponentClassOverride
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName ComponentName; // 0x0
        class UObject* ComponentClass; // 0x8

    };

    struct FBlueprintCookedComponentInstancingData //ScriptStruct Engine.BlueprintCookedComponentInstancingData
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FBlueprintComponentChangedPropertyInfo> ChangedPropertyList; // 0x0
        bool bHasValidCookedData; // 0x21

    };

    struct FBlueprintComponentChangedPropertyInfo //ScriptStruct Engine.BlueprintComponentChangedPropertyInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName PropertyName; // 0x0
        int32_t ArrayIndex; // 0x8
        class UStruct* PropertyScope; // 0x10

    };

    struct FEventGraphFastCallPair //ScriptStruct Engine.EventGraphFastCallPair
    {
    //Children Prop Count (Fields): 2
    public:

        class UFunction* FunctionToPatch; // 0x0
        int32_t EventGraphCallOffset; // 0x8

    };

    struct FBlueprintDebugData //ScriptStruct Engine.BlueprintDebugData
    {
    public:


    };

    struct FPointerToUberGraphFrame //ScriptStruct Engine.PointerToUberGraphFrame
    {
    public:


    };

    struct FDebuggingInfoForSingleFunction //ScriptStruct Engine.DebuggingInfoForSingleFunction
    {
    public:


    };

    struct FNodeToCodeAssociation //ScriptStruct Engine.NodeToCodeAssociation
    {
    public:


    };

    struct FAnimCurveType //ScriptStruct Engine.AnimCurveType
    {
    public:


    };

    struct FBookmarkBaseJumpToSettings //ScriptStruct Engine.BookmarkBaseJumpToSettings
    {
    public:


    };

    struct FBookmarkJumpToSettings : FBookmarkBaseJumpToSettings //ScriptStruct Engine.BookmarkJumpToSettings
    {
    public:


    };

    struct FBookmark2DJumpToSettings //ScriptStruct Engine.Bookmark2DJumpToSettings
    {
    public:


    };

    struct FGeomSelection //ScriptStruct Engine.GeomSelection
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t Type; // 0x0
        int32_t Index; // 0x4
        int32_t SelectionIndex; // 0x8

    };

    struct FBuilderPoly //ScriptStruct Engine.BuilderPoly
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<int32_t> VertexIndices; // 0x0
        int32_t Direction; // 0x10
        struct FName ItemName; // 0x14
        int32_t PolyFlags; // 0x1c

    };

    struct FCachedAnimTransitionData //ScriptStruct Engine.CachedAnimTransitionData
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName StateMachineName; // 0x0
        struct FName FromStateName; // 0x8
        struct FName ToStateName; // 0x10

    };

    struct FCachedAnimRelevancyData //ScriptStruct Engine.CachedAnimRelevancyData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName StateMachineName; // 0x0
        struct FName StateName; // 0x8

    };

    struct FCachedAnimAssetPlayerData //ScriptStruct Engine.CachedAnimAssetPlayerData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName StateMachineName; // 0x0
        struct FName StateName; // 0x8

    };

    struct FCachedAnimStateArray //ScriptStruct Engine.CachedAnimStateArray
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FCachedAnimStateData> States; // 0x0

    };

    struct FCachedAnimStateData //ScriptStruct Engine.CachedAnimStateData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName StateMachineName; // 0x0
        struct FName StateName; // 0x8

    };

    struct FActiveCameraShakeInfo //ScriptStruct Engine.ActiveCameraShakeInfo
    {
    //Children Prop Count (Fields): 2
    public:

        class UCameraShakeBase* ShakeInstance; // 0x0
        struct TWeakObjectPtr<struct UCameraShakeSourceComponent> ShakeSource; // 0x8

    };

    struct FPooledCameraShakes //ScriptStruct Engine.PooledCameraShakes
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class UCameraShakeBase*> PooledShakes; // 0x0

    };

    struct FVOscillator //ScriptStruct Engine.VOscillator
    {
    //Children Prop Count (Fields): 3
    public:

        struct FFOscillator X; // 0x0
        struct FFOscillator Y; // 0xc
        struct FFOscillator Z; // 0x18

    };

    struct FFOscillator //ScriptStruct Engine.FOscillator
    {
    //Children Prop Count (Fields): 4
    public:

        float Amplitude; // 0x0
        float Frequency; // 0x4
        enum class EInitialOscillatorOffset InitialOffset; // 0x8
        enum class EOscillatorWaveform Waveform; // 0x9

    };

    struct FROscillator //ScriptStruct Engine.ROscillator
    {
    //Children Prop Count (Fields): 3
    public:

        struct FFOscillator Pitch; // 0x0
        struct FFOscillator Yaw; // 0xc
        struct FFOscillator Roll; // 0x18

    };

    struct FCameraShakeInfo //ScriptStruct Engine.CameraShakeInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FCameraShakeDuration Duration; // 0x0
        float BlendIn; // 0x8
        float BlendOut; // 0xc

    };

    struct FCameraShakeDuration //ScriptStruct Engine.CameraShakeDuration
    {
    //Children Prop Count (Fields): 2
    public:

        float Duration; // 0x0
        enum class ECameraShakeDurationType Type; // 0x4

    };

    struct FCameraShakeUpdateResult //ScriptStruct Engine.CameraShakeUpdateResult
    {
    public:


    };

    struct FCameraShakeUpdateParams //ScriptStruct Engine.CameraShakeUpdateParams
    {
    public:


    };

    struct FDummySpacerCameraTypes //ScriptStruct Engine.DummySpacerCameraTypes
    {
    public:


    };

    struct FMinimalViewInfo //ScriptStruct Engine.MinimalViewInfo
    {
    //Children Prop Count (Fields): 15
    public:

        struct FVector Location; // 0x0
        struct FRotator Rotation; // 0xc
        float FOV; // 0x18
        float DesiredFOV; // 0x1c
        float OrthoWidth; // 0x20
        float OrthoNearClipPlane; // 0x24
        float OrthoFarClipPlane; // 0x28
        float AspectRatio; // 0x2c
        char bConstrainAspectRatio; // 0x30
        char bUseFieldOfViewForLOD; // 0x30
        enum class ECameraProjectionMode ProjectionMode; // 0x34
        float PostProcessBlendWeight; // 0x38
        struct FPostProcessSettings PostProcessSettings; // 0x40
        struct FVector2D OffCenterProjectionOffset; // 0x630
        enum class ECameraFOVMode FOVMode; // 0x638

    };

    struct FPostProcessSettings //ScriptStruct Engine.PostProcessSettings
    {
    //Children Prop Count (Fields): 454
    public:

        char bOverride_WhiteTemp; // 0x0
        char bOverride_WhiteTint; // 0x0
        char bOverride_ColorSaturation; // 0x0
        char bOverride_ColorContrast; // 0x0
        char bOverride_ColorGamma; // 0x0
        char bOverride_ColorGain; // 0x0
        char bOverride_ColorOffset; // 0x0
        char bOverride_MobileLDRColorSaturation; // 0x1
        char bOverride_MobileLDRColorOffset; // 0x1
        char bOverride_MobileLDRColorGain; // 0x1
        char bOverride_ColorSaturationShadows; // 0x1
        char bOverride_ColorContrastShadows; // 0x1
        char bOverride_ColorGammaShadows; // 0x1
        char bOverride_ColorGainShadows; // 0x1
        char bOverride_ColorOffsetShadows; // 0x1
        char bOverride_ColorSaturationMidtones; // 0x2
        char bOverride_ColorContrastMidtones; // 0x2
        char bOverride_ColorGammaMidtones; // 0x2
        char bOverride_ColorGainMidtones; // 0x2
        char bOverride_ColorOffsetMidtones; // 0x2
        char bOverride_ColorSaturationHighlights; // 0x2
        char bOverride_ColorContrastHighlights; // 0x2
        char bOverride_ColorGammaHighlights; // 0x2
        char bOverride_ColorGainHighlights; // 0x3
        char bOverride_ColorOffsetHighlights; // 0x3
        char bOverride_ColorCorrectionShadowsMax; // 0x3
        char bOverride_ColorCorrectionHighlightsMin; // 0x3
        char bOverride_BlueCorrection; // 0x3
        char bOverride_ExpandGamut; // 0x3
        char bOverride_ToneCurveAmount; // 0x3
        char bOverride_FilmWhitePoint; // 0x3
        char bOverride_FilmSaturation; // 0x4
        char bOverride_FilmChannelMixerRed; // 0x4
        char bOverride_FilmChannelMixerGreen; // 0x4
        char bOverride_FilmChannelMixerBlue; // 0x4
        char bOverride_FilmContrast; // 0x4
        char bOverride_FilmDynamicRange; // 0x4
        char bOverride_FilmHealAmount; // 0x4
        char bOverride_FilmToeAmount; // 0x4
        char bOverride_FilmShadowTint; // 0x5
        char bOverride_FilmShadowTintBlend; // 0x5
        char bOverride_FilmShadowTintAmount; // 0x5
        char bOverride_FilmSlope; // 0x5
        char bOverride_FilmToe; // 0x5
        char bOverride_FilmShoulder; // 0x5
        char bOverride_FilmBlackClip; // 0x5
        char bOverride_FilmWhiteClip; // 0x5
        char bOverride_SceneColorTint; // 0x6
        char bOverride_SceneFringeIntensity; // 0x6
        char bOverride_ChromaticAberrationStartOffset; // 0x6
        char bOverride_AmbientCubemapTint; // 0x6
        char bOverride_AmbientCubemapIntensity; // 0x6
        char bOverride_BloomMethod; // 0x6
        char bOverride_BloomIntensity; // 0x6
        char bOverride_BloomThreshold; // 0x6
        char bOverride_Bloom1Tint; // 0x7
        char bOverride_Bloom1Size; // 0x7
        char bOverride_Bloom2Size; // 0x7
        char bOverride_Bloom2Tint; // 0x7
        char bOverride_Bloom3Tint; // 0x7
        char bOverride_Bloom3Size; // 0x7
        char bOverride_Bloom4Tint; // 0x7
        char bOverride_Bloom4Size; // 0x7
        char bOverride_Bloom5Tint; // 0x8
        char bOverride_Bloom5Size; // 0x8
        char bOverride_Bloom6Tint; // 0x8
        char bOverride_Bloom6Size; // 0x8
        char bOverride_BloomSizeScale; // 0x8
        char bOverride_BloomConvolutionTexture; // 0x8
        char bOverride_BloomConvolutionSize; // 0x8
        char bOverride_BloomConvolutionCenterUV; // 0x8
        char bOverride_BloomConvolutionPreFilter; // 0x9
        char bOverride_BloomConvolutionPreFilterMin; // 0x9
        char bOverride_BloomConvolutionPreFilterMax; // 0x9
        char bOverride_BloomConvolutionPreFilterMult; // 0x9
        char bOverride_BloomConvolutionBufferScale; // 0x9
        char bOverride_BloomDirtMaskIntensity; // 0x9
        char bOverride_BloomDirtMaskTint; // 0x9
        char bOverride_BloomDirtMask; // 0x9
        char bOverride_CameraShutterSpeed; // 0xa
        char bOverride_CameraISO; // 0xa
        char bOverride_AutoExposureMethod; // 0xa
        char bOverride_AutoExposureLowPercent; // 0xa
        char bOverride_AutoExposureHighPercent; // 0xa
        char bOverride_AutoExposureMinBrightness; // 0xa
        char bOverride_AutoExposureMaxBrightness; // 0xa
        char bOverride_AutoExposureCalibrationConstant; // 0xa
        char bOverride_AutoExposureSpeedUp; // 0xb
        char bOverride_AutoExposureSpeedDown; // 0xb
        char bOverride_AutoExposureBias; // 0xb
        char bOverride_AutoExposureBiasCurve; // 0xb
        char bOverride_FXExposureCompensationOffset; // 0xb
        char bOverride_FXExposureCompensationSlope; // 0xb
        char bOverride_FXExposureCompensationSecondSlope; // 0xb
        char bOverride_AutoExposureMeterMask; // 0xb
        char bOverride_AutoExposureMeterMaskWeight; // 0xc
        char bOverride_AutoExposureApplyPhysicalCameraExposure; // 0xc
        char bOverride_HistogramLogMin; // 0xc
        char bOverride_HistogramLogMax; // 0xc
        char bOverride_AutoExposureMeterMaskWeightAdjustmentMin; // 0xc
        char bOverride_AutoExposureMeterMaskWeightAdjustmentMax; // 0xc
        char bOverride_AutoExposureMeterMaskWeightAdjustmentPower; // 0xc
        char bOverride_LocalExposureContrastScale; // 0xc
        char bOverride_LocalExposureHighlightContrastScale; // 0xd
        char bOverride_LocalExposureShadowContrastScale; // 0xd
        char bOverride_LocalExposureDetailStrength; // 0xd
        char bOverride_LocalExposureBlurredLuminanceBlend; // 0xd
        char bOverride_LocalExposureBlurredLuminanceKernelSizePercent; // 0xd
        char bOverride_LocalExposureMiddleGreyBias; // 0xd
        char bOverride_LensFlareIntensity; // 0xd
        char bOverride_LensFlareTint; // 0xd
        char bOverride_LensFlareTints; // 0xe
        char bOverride_LensFlareBokehSize; // 0xe
        char bOverride_LensFlareBokehShape; // 0xe
        char bOverride_LensFlareThreshold; // 0xe
        char bOverride_VignetteIntensity; // 0xe
        char bOverride_GrainIntensity; // 0xe
        char bOverride_GrainJitter; // 0xe
        char bOverride_AmbientOcclusionIntensity; // 0xe
        char bOverride_AmbientOcclusionIntensityFoliage; // 0xf
        char bOverride_AmbientOcclusionStaticFraction; // 0xf
        char bOverride_AmbientOcclusionRadius; // 0xf
        char bOverride_AmbientOcclusionFarRadius; // 0xf
        char bOverride_AmbientOcclusionFadeDistance; // 0xf
        char bOverride_AmbientOcclusionFadeRadius; // 0xf
        char bOverride_AmbientOcclusionDistance; // 0xf
        char bOverride_AmbientOcclusionRadiusInWS; // 0xf
        char bOverride_AmbientOcclusionPower; // 0x10
        char bOverride_AmbientOcclusionBias; // 0x10
        char bOverride_AmbientOcclusionQuality; // 0x10
        char bOverride_AmbientOcclusionMipBlend; // 0x10
        char bOverride_AmbientOcclusionMipScale; // 0x10
        char bOverride_AmbientOcclusionMipThreshold; // 0x10
        char bOverride_AmbientOcclusionTemporalBlendWeight; // 0x10
        char bOverride_RayTracingAO; // 0x14
        char bOverride_RayTracingAOSamplesPerPixel; // 0x14
        char bOverride_RayTracingAOIntensity; // 0x14
        char bOverride_RayTracingAORadius; // 0x14
        char bOverride_LPVIntensity; // 0x18
        char bOverride_LPVDirectionalOcclusionIntensity; // 0x18
        char bOverride_LPVDirectionalOcclusionRadius; // 0x18
        char bOverride_LPVDiffuseOcclusionExponent; // 0x18
        char bOverride_LPVSpecularOcclusionExponent; // 0x18
        char bOverride_LPVDiffuseOcclusionIntensity; // 0x18
        char bOverride_LPVSpecularOcclusionIntensity; // 0x18
        char bOverride_LPVSize; // 0x18
        char bOverride_LPVSecondaryOcclusionIntensity; // 0x19
        char bOverride_LPVSecondaryBounceIntensity; // 0x19
        char bOverride_LPVGeometryVolumeBias; // 0x19
        char bOverride_LPVVplInjectionBias; // 0x19
        char bOverride_LPVEmissiveInjectionIntensity; // 0x19
        char bOverride_LPVFadeRange; // 0x19
        char bOverride_LPVDirectionalOcclusionFadeRange; // 0x19
        char bOverride_IndirectLightingColor; // 0x19
        char bOverride_IndirectLightingIntensity; // 0x1a
        char bOverride_SkyVisibilityScale; // 0x1a
        char bOverride_TODGIAndSkyVisibilityScaleChangeSpeed; // 0x1a
        char bOverride_ShadowReduceSpecularAOIntensity; // 0x1a
        char bOverride_MinimalIndirectLightingLuminance; // 0x1a
        char bOverride_LocalTonemappingBrighterAreaIntensity; // 0x1a
        char bOverride_LocalTonemappingBrighterAreaEVDiffThreshold; // 0x1a
        char bOverride_LocalTonemappingDarkerAreaIntensity; // 0x1a
        char bOverride_LocalTonemappingDarkerAreaEVDiffThreshold; // 0x1b
        char bOverride_LocalTonemappingSceneEVOffset; // 0x1b
        char bOverride_LocalTonemappingMinSkyVisibility; // 0x1b
        char bOverride_ColorGradingIntensity; // 0x1b
        char bOverride_ColorGradingLUT; // 0x1b
        char bOverride_DepthOfFieldFocalDistance; // 0x1b
        char bOverride_EnableForegroundOnlyDOF; // 0x1b
        char bOverride_DepthOfFieldCustomFOVForegroundOnly; // 0x1b
        char bOverride_DepthOfFieldMaxBackgroundRadius; // 0x1c
        char bOverride_DepthOfFieldFstop; // 0x1c
        char bOverride_DepthOfFieldMinFstop; // 0x1c
        char bOverride_DepthOfFieldBladeCount; // 0x1c
        char bOverride_DepthOfFieldSensorWidth; // 0x1c
        char bOverride_DepthOfFieldDepthBlurRadius; // 0x1c
        char bOverride_DepthOfFieldDepthBlurAmount; // 0x1c
        char bOverride_DepthOfFieldFocalRegion; // 0x1c
        char bOverride_DepthOfFieldNearTransitionRegion; // 0x1d
        char bOverride_DepthOfFieldFarTransitionRegion; // 0x1d
        char bOverride_DepthOfFieldScale; // 0x1d
        char bOverride_DepthOfFieldNearBlurSize; // 0x1d
        char bOverride_DepthOfFieldFarBlurSize; // 0x1d
        char bOverride_MobileHQGaussian; // 0x1d
        char bOverride_DepthOfFieldOcclusion; // 0x1d
        char bOverride_DepthOfFieldSkyFocusDistance; // 0x1d
        char bOverride_DepthOfFieldVignetteSize; // 0x1e
        char bOverride_UABlurScopeRadius; // 0x1e
        char bOverride_UABlurScopeThreshold; // 0x1e
        char bOverride_UABlurCircle; // 0x1e
        char bOverride_UABlurOptimal; // 0x1e
        char bOverride_MotionBlurAmount; // 0x1e
        char bOverride_MotionBlurMax; // 0x1e
        char bOverride_MotionBlurTargetFPS; // 0x1e
        char bOverride_MotionBlurPerObjectSize; // 0x1f
        char bOverride_ScreenPercentage; // 0x1f
        char bOverride_ScreenSpaceReflectionIntensity; // 0x1f
        char bOverride_ScreenSpaceReflectionQuality; // 0x1f
        char bOverride_ScreenSpaceReflectionMaxRoughness; // 0x1f
        char bOverride_ScreenSpaceReflectionRoughnessScale; // 0x1f
        char bOverride_ReflectionsType; // 0x20
        char bOverride_RayTracingReflectionsMaxRoughness; // 0x20
        char bOverride_RayTracingReflectionsMaxBounces; // 0x20
        char bOverride_RayTracingReflectionsSamplesPerPixel; // 0x20
        char bOverride_RayTracingReflectionsShadows; // 0x20
        char bOverride_RayTracingReflectionsTranslucency; // 0x20
        char bOverride_TranslucencyType; // 0x20
        char bOverride_RayTracingTranslucencyMaxRoughness; // 0x20
        char bOverride_RayTracingTranslucencyRefractionRays; // 0x21
        char bOverride_RayTracingTranslucencySamplesPerPixel; // 0x21
        char bOverride_RayTracingTranslucencyShadows; // 0x21
        char bOverride_RayTracingTranslucencyRefraction; // 0x21
        char bOverride_LumenSceneDetail; // 0x21
        char bOverride_LumenSceneLightingUpdateSpeed; // 0x21
        char bOverride_LumenFinalGatherQuality; // 0x21
        char bOverride_LumenSkylightLeaking; // 0x21
        char bOverride_LumenTraceMeshSDFs; // 0x24
        char bOverride_RayTracingGI; // 0x28
        char bOverride_RayTracingGIMaxBounces; // 0x28
        char bOverride_RayTracingGISamplesPerPixel; // 0x28
        char bOverride_PathTracingMaxBounces; // 0x28
        char bOverride_PathTracingSamplesPerPixel; // 0x28
        char bMobileHQGaussian; // 0x2c
        enum class EBloomMethod BloomMethod; // 0x2d
        enum class EAutoExposureMethod AutoExposureMethod; // 0x2e
        float WhiteTemp; // 0x30
        float WhiteTint; // 0x34
        struct FVector4 ColorSaturation; // 0x40
        struct FVector4 ColorContrast; // 0x50
        struct FVector4 ColorGamma; // 0x60
        struct FVector4 ColorGain; // 0x70
        struct FVector4 ColorOffset; // 0x80
        float ColorVibrance; // 0x90
        struct FVector4 MobileLDRColorSaturation; // 0xa0
        struct FVector4 MobileLDRColorGain; // 0xb0
        struct FVector4 MobileLDRColorOffset; // 0xc0
        struct FVector4 ColorSaturationShadows; // 0xd0
        struct FVector4 ColorContrastShadows; // 0xe0
        struct FVector4 ColorGammaShadows; // 0xf0
        struct FVector4 ColorGainShadows; // 0x100
        struct FVector4 ColorOffsetShadows; // 0x110
        struct FVector4 ColorSaturationMidtones; // 0x120
        struct FVector4 ColorContrastMidtones; // 0x130
        struct FVector4 ColorGammaMidtones; // 0x140
        struct FVector4 ColorGainMidtones; // 0x150
        struct FVector4 ColorOffsetMidtones; // 0x160
        struct FVector4 ColorSaturationHighlights; // 0x170
        struct FVector4 ColorContrastHighlights; // 0x180
        struct FVector4 ColorGammaHighlights; // 0x190
        struct FVector4 ColorGainHighlights; // 0x1a0
        struct FVector4 ColorOffsetHighlights; // 0x1b0
        float ColorCorrectionHighlightsMin; // 0x1c0
        float ColorCorrectionShadowsMax; // 0x1c4
        float BlueCorrection; // 0x1c8
        float ExpandGamut; // 0x1cc
        float ToneCurveAmount; // 0x1d0
        float FilmSlope; // 0x1d4
        float FilmToe; // 0x1d8
        float FilmShoulder; // 0x1dc
        float FilmBlackClip; // 0x1e0
        float FilmWhiteClip; // 0x1e4
        struct FLinearColor FilmWhitePoint; // 0x1e8
        struct FLinearColor FilmShadowTint; // 0x1f8
        float FilmShadowTintBlend; // 0x208
        float FilmShadowTintAmount; // 0x20c
        float FilmSaturation; // 0x210
        struct FLinearColor FilmChannelMixerRed; // 0x214
        struct FLinearColor FilmChannelMixerGreen; // 0x224
        struct FLinearColor FilmChannelMixerBlue; // 0x234
        float FilmContrast; // 0x244
        float FilmToeAmount; // 0x248
        float FilmHealAmount; // 0x24c
        float FilmDynamicRange; // 0x250
        struct FLinearColor SceneColorTint; // 0x254
        float SceneFringeIntensity; // 0x264
        float ChromaticAberrationStartOffset; // 0x268
        float BloomIntensity; // 0x26c
        float BloomThreshold; // 0x270
        float BloomSizeScale; // 0x274
        float Bloom1Size; // 0x278
        float Bloom2Size; // 0x27c
        float Bloom3Size; // 0x280
        float Bloom4Size; // 0x284
        float Bloom5Size; // 0x288
        float Bloom6Size; // 0x28c
        struct FLinearColor Bloom1Tint; // 0x290
        struct FLinearColor Bloom2Tint; // 0x2a0
        struct FLinearColor Bloom3Tint; // 0x2b0
        struct FLinearColor Bloom4Tint; // 0x2c0
        struct FLinearColor Bloom5Tint; // 0x2d0
        struct FLinearColor Bloom6Tint; // 0x2e0
        float BloomConvolutionSize; // 0x2f0
        class UTexture2D* BloomConvolutionTexture; // 0x2f8
        struct FVector2D BloomConvolutionCenterUV; // 0x300
        float BloomConvolutionPreFilterMin; // 0x308
        float BloomConvolutionPreFilterMax; // 0x30c
        float BloomConvolutionPreFilterMult; // 0x310
        float BloomConvolutionBufferScale; // 0x314
        class UTexture* BloomDirtMask; // 0x318
        float BloomDirtMaskIntensity; // 0x320
        struct FLinearColor BloomDirtMaskTint; // 0x324
        struct FLinearColor AmbientCubemapTint; // 0x334
        float AmbientCubemapIntensity; // 0x344
        class UTextureCube* AmbientCubemap; // 0x348
        float CameraShutterSpeed; // 0x350
        float CameraISO; // 0x354
        float DepthOfFieldFstop; // 0x358
        float DepthOfFieldMinFstop; // 0x35c
        int32_t DepthOfFieldBladeCount; // 0x360
        float AutoExposureBias; // 0x364
        float AutoExposureBiasBackup; // 0x368
        char bOverride_AutoExposureBiasBackup; // 0x36c
        char AutoExposureApplyPhysicalCameraExposure; // 0x370
        class UCurveFloat* AutoExposureBiasCurve; // 0x378
        class UTexture* AutoExposureMeterMask; // 0x380
        float AutoExposureMeterMaskWeightAdjustmentMin; // 0x388
        float AutoExposureMeterMaskWeightAdjustmentMax; // 0x38c
        float AutoExposureMeterMaskWeightAdjustmentPower; // 0x390
        float AutoExposureMeterMaskWeight; // 0x394
        float AutoExposureLowPercent; // 0x398
        float AutoExposureHighPercent; // 0x39c
        float AutoExposureMinBrightness; // 0x3a0
        float AutoExposureMaxBrightness; // 0x3a4
        float AutoExposureSpeedUp; // 0x3a8
        float AutoExposureSpeedDown; // 0x3ac
        float FXExposureCompensationOffset; // 0x3b0
        float FXExposureCompensationSlope; // 0x3b4
        float FXExposureCompensationSecondSlope; // 0x3b8
        float HistogramLogMin; // 0x3bc
        float HistogramLogMax; // 0x3c0
        float AutoExposureCalibrationConstant; // 0x3c4
        float LocalExposureContrastScale; // 0x3c8
        float LocalExposureHighlightContrastScale; // 0x3cc
        float LocalExposureShadowContrastScale; // 0x3d0
        float LocalExposureDetailStrength; // 0x3d4
        float LocalExposureBlurredLuminanceBlend; // 0x3d8
        float LocalExposureBlurredLuminanceKernelSizePercent; // 0x3dc
        float LocalExposureMiddleGreyBias; // 0x3e0
        float LensFlareIntensity; // 0x3e4
        struct FLinearColor LensFlareTint; // 0x3e8
        float LensFlareBokehSize; // 0x3f8
        float LensFlareThreshold; // 0x3fc
        class UTexture* LensFlareBokehShape; // 0x400
        struct TArray<struct FLinearColor> LensFlareTints; // 0x408
        float VignetteIntensity; // 0x418
        float GrainJitter; // 0x41c
        float GrainIntensity; // 0x420
        float AmbientOcclusionIntensity; // 0x424
        float AmbientOcclusionIntensityFoliage; // 0x428
        float AmbientOcclusionFarIntensity; // 0x42c
        float AmbientOcclusionFadeOutRadius; // 0x430
        float AmbientOcclusionFadeOutDistance; // 0x434
        float AmbientOcclusionStaticFraction; // 0x438
        float AmbientOcclusionRadius; // 0x43c
        float AmbientOcclusionFarRadius; // 0x440
        char AmbientOcclusionRadiusInWS; // 0x444
        float AmbientOcclusionFadeDistance; // 0x448
        float AmbientOcclusionFadeRadius; // 0x44c
        float AmbientOcclusionDistance; // 0x450
        float AmbientOcclusionPower; // 0x454
        float AmbientOcclusionBias; // 0x458
        float AmbientOcclusionQuality; // 0x45c
        float AmbientOcclusionMipBlend; // 0x460
        float AmbientOcclusionMipScale; // 0x464
        float AmbientOcclusionMipThreshold; // 0x468
        float AmbientOcclusionTemporalBlendWeight; // 0x46c
        char RayTracingAO; // 0x470
        int32_t RayTracingAOSamplesPerPixel; // 0x474
        float RayTracingAOIntensity; // 0x478
        float RayTracingAORadius; // 0x47c
        struct FLinearColor IndirectLightingColor; // 0x480
        float IndirectLightingIntensity; // 0x490
        float LumenSceneDetail; // 0x494
        float LumenSceneLightingUpdateSpeed; // 0x498
        float LumenFinalGatherQuality; // 0x49c
        float LumenSkylightLeaking; // 0x4a0
        char LumenTraceMeshSDFs; // 0x4a4
        float SkyVisibilityScale; // 0x4a8
        float TODGIAndSkyVisibilityScaleChangeSpeed; // 0x4ac
        float ShadowReduceSpecularAOIntensity; // 0x4b0
        float MinimalIndirectLightingLuminance; // 0x4b4
        float LocalTonemappingBrighterAreaIntensity; // 0x4b8
        float LocalTonemappingBrighterAreaEVDiffThreshold; // 0x4bc
        float LocalTonemappingDarkerAreaIntensity; // 0x4c0
        float LocalTonemappingDarkerAreaEVDiffThreshold; // 0x4c4
        float LocalTonemappingSceneEVOffset; // 0x4c8
        float LocalTonemappingMinSkyVisibility; // 0x4cc
        float ColorGainMultiplier; // 0x4d0
        float ColorSaturationMultiplier; // 0x4d4
        float ColorContrastMultiplier; // 0x4d8
        struct FVector ColorGammaMultiplier; // 0x4dc
        enum class ERayTracingGlobalIlluminationType RayTracingGIType; // 0x4e8
        int32_t RayTracingGIMaxBounces; // 0x4ec
        int32_t RayTracingGISamplesPerPixel; // 0x4f0
        float ColorGradingIntensity; // 0x4f4
        class UTexture* ColorGradingLUT; // 0x4f8
        float DepthOfFieldSensorWidth; // 0x500
        float DepthOfFieldFocalDistance; // 0x504
        char EnableForegroundOnlyDOF; // 0x508
        float DepthOfFieldCustomFOVForegroundOnly; // 0x50c
        float DepthOfFieldMaxBackgroundRadius; // 0x510
        float DepthOfFieldDepthBlurAmount; // 0x514
        float DepthOfFieldDepthBlurRadius; // 0x518
        float DepthOfFieldFocalRegion; // 0x51c
        float DepthOfFieldNearTransitionRegion; // 0x520
        float DepthOfFieldFarTransitionRegion; // 0x524
        float DepthOfFieldScale; // 0x528
        float DepthOfFieldNearBlurSize; // 0x52c
        float DepthOfFieldFarBlurSize; // 0x530
        float DepthOfFieldOcclusion; // 0x534
        float DepthOfFieldSkyFocusDistance; // 0x538
        float DepthOfFieldVignetteSize; // 0x53c
        float UABlurScopeRadius; // 0x540
        float UABlurScopeThreshold; // 0x544
        char bUABlurCircle; // 0x548
        char bUABlurOptimal; // 0x548
        float MotionBlurAmount; // 0x54c
        float MotionBlurMax; // 0x550
        int32_t MotionBlurTargetFPS; // 0x554
        float MotionBlurPerObjectSize; // 0x558
        float LPVIntensity; // 0x55c
        float LPVVplInjectionBias; // 0x560
        float LPVSize; // 0x564
        float LPVSecondaryOcclusionIntensity; // 0x568
        float LPVSecondaryBounceIntensity; // 0x56c
        float LPVGeometryVolumeBias; // 0x570
        float LPVEmissiveInjectionIntensity; // 0x574
        float LPVDirectionalOcclusionIntensity; // 0x578
        float LPVDirectionalOcclusionRadius; // 0x57c
        float LPVDiffuseOcclusionExponent; // 0x580
        float LPVSpecularOcclusionExponent; // 0x584
        float LPVDiffuseOcclusionIntensity; // 0x588
        float LPVSpecularOcclusionIntensity; // 0x58c
        enum class EReflectionsType ReflectionsType; // 0x590
        float ScreenSpaceReflectionIntensity; // 0x594
        float ScreenSpaceReflectionQuality; // 0x598
        float ScreenSpaceReflectionMaxRoughness; // 0x59c
        float RayTracingReflectionsMaxRoughness; // 0x5a0
        int32_t RayTracingReflectionsMaxBounces; // 0x5a4
        int32_t RayTracingReflectionsSamplesPerPixel; // 0x5a8
        enum class EReflectedAndRefractedRayTracedShadows RayTracingReflectionsShadows; // 0x5ac
        char RayTracingReflectionsTranslucency; // 0x5ad
        enum class ETranslucencyType TranslucencyType; // 0x5ae
        float RayTracingTranslucencyMaxRoughness; // 0x5b0
        int32_t RayTracingTranslucencyRefractionRays; // 0x5b4
        int32_t RayTracingTranslucencySamplesPerPixel; // 0x5b8
        enum class EReflectedAndRefractedRayTracedShadows RayTracingTranslucencyShadows; // 0x5bc
        char RayTracingTranslucencyRefraction; // 0x5bd
        int32_t PathTracingMaxBounces; // 0x5c0
        int32_t PathTracingSamplesPerPixel; // 0x5c4
        float LPVFadeRange; // 0x5c8
        float LPVDirectionalOcclusionFadeRange; // 0x5cc
        float ScreenPercentage; // 0x5d0
        struct FWeightedBlendables WeightedBlendables; // 0x5d8

    };

    struct FWeightedBlendables //ScriptStruct Engine.WeightedBlendables
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FWeightedBlendable> Array; // 0x0

    };

    struct FWeightedBlendable //ScriptStruct Engine.WeightedBlendable
    {
    //Children Prop Count (Fields): 2
    public:

        float Weight; // 0x0
        class UObject* Object; // 0x8

    };

    struct FCanvasIcon //ScriptStruct Engine.CanvasIcon
    {
    //Children Prop Count (Fields): 5
    public:

        class UTexture* Texture; // 0x0
        float U; // 0x8
        float V; // 0xc
        float UL; // 0x10
        float VL; // 0x14

    };

    struct FWrappedStringElement //ScriptStruct Engine.WrappedStringElement
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Value; // 0x0
        struct FVector2D LineExtent; // 0x10

    };

    struct FTextSizingParameters //ScriptStruct Engine.TextSizingParameters
    {
    //Children Prop Count (Fields): 7
    public:

        float DrawX; // 0x0
        float DrawY; // 0x4
        float DrawXL; // 0x8
        float DrawYL; // 0xc
        struct FVector2D Scaling; // 0x10
        class UFont* DrawFont; // 0x18
        struct FVector2D SpacingAdjust; // 0x20

    };

    struct FBasedMovementInfo //ScriptStruct Engine.BasedMovementInfo
    {
    //Children Prop Count (Fields): 8
    public:

        class UPrimitiveComponent* MovementBase; // 0x0
        struct FName BoneName; // 0x8
        struct FVector_NetQuantize100 Location; // 0x10
        struct FRotator Rotation; // 0x1c
        bool bServerHasBaseComponent; // 0x28
        bool bRelativeRotation; // 0x29
        bool bServerHasVelocity; // 0x2a
        class UPhysicalMaterial* PhysMaterial; // 0x30

    };

    struct FSimulatedRootMotionReplicatedMove //ScriptStruct Engine.SimulatedRootMotionReplicatedMove
    {
    //Children Prop Count (Fields): 2
    public:

        float Time; // 0x0
        struct FRepRootMotionMontage RootMotion; // 0x8

    };

    struct FRepRootMotionMontage //ScriptStruct Engine.RepRootMotionMontage
    {
    //Children Prop Count (Fields): 12
    public:

        bool bIsActive; // 0x0
        class UAnimMontage* AnimMontage; // 0x8
        float position; // 0x10
        struct FVector_NetQuantize100 Location; // 0x14
        struct FRotator Rotation; // 0x20
        class UPrimitiveComponent* MovementBase; // 0x30
        struct FName MovementBaseBoneName; // 0x38
        bool bRelativePosition; // 0x40
        bool bRelativeRotation; // 0x41
        struct FRootMotionSourceGroup AuthoritativeRootMotion; // 0x48
        struct FVector_NetQuantize10 Acceleration; // 0x80
        struct FVector_NetQuantize10 LinearVelocity; // 0x8c

    };

    struct FRootMotionSourceGroup //ScriptStruct Engine.RootMotionSourceGroup
    {
    //Children Prop Count (Fields): 6
    public:

        char bHasAdditiveSources; // 0x28
        char bHasOverrideSources; // 0x28
        char bHasOverrideSourcesWithIgnoreZAccumulate; // 0x28
        char bIsAdditiveVelocityApplied; // 0x28
        struct FRootMotionSourceSettings LastAccumulatedSettings; // 0x29
        struct FVector_NetQuantize10 LastPreAdditiveVelocity; // 0x2c

    };

    struct FRootMotionSourceSettings //ScriptStruct Engine.RootMotionSourceSettings
    {
    //Children Prop Count (Fields): 1
    public:

        char Flags; // 0x0

    };

    struct FCharacterMovementComponentPostPhysicsTickFunction : FTickFunction //ScriptStruct Engine.CharacterMovementComponentPostPhysicsTickFunction
    {
    public:


    };

    struct FFindFloorResult //ScriptStruct Engine.FindFloorResult
    {
    //Children Prop Count (Fields): 6
    public:

        char bBlockingHit; // 0x0
        char bWalkableFloor; // 0x0
        char bLineTrace; // 0x0
        float FloorDist; // 0x4
        float LineDist; // 0x8
        struct FHitResult HitResult; // 0x10

    };

    struct FCharacterNetworkSerializationPackedBits //ScriptStruct Engine.CharacterNetworkSerializationPackedBits
    {
    public:


    };

    struct FCharacterMoveResponsePackedBits : FCharacterNetworkSerializationPackedBits //ScriptStruct Engine.CharacterMoveResponsePackedBits
    {
    public:


    };

    struct FCharacterServerMovePackedBits : FCharacterNetworkSerializationPackedBits //ScriptStruct Engine.CharacterServerMovePackedBits
    {
    public:


    };

    struct FChildActorComponentInstanceData : FSceneComponentInstanceData //ScriptStruct Engine.ChildActorComponentInstanceData
    {
    //Children Prop Count (Fields): 3
    public:

        class AActor* ChildActorClass; // 0xb8
        struct FName ChildActorName; // 0xc0
        struct TArray<struct FChildActorAttachedActorInfo> AttachedActors; // 0xc8

    };

    struct FChildActorAttachedActorInfo //ScriptStruct Engine.ChildActorAttachedActorInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct TWeakObjectPtr<struct AActor> Actor; // 0x0
        struct FName SocketName; // 0x8
        struct FTransform RelativeTransform; // 0x10

    };

    struct FCustomProfile //ScriptStruct Engine.CustomProfile
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Name; // 0x0
        struct TArray<struct FResponseChannel> CustomResponses; // 0x8

    };

    struct FCustomChannelSetup //ScriptStruct Engine.CustomChannelSetup
    {
    //Children Prop Count (Fields): 5
    public:

        enum class ECollisionChannel Channel; // 0x0
        enum class ECollisionResponse DefaultResponse; // 0x1
        bool bTraceType; // 0x2
        bool bStaticObject; // 0x3
        struct FName Name; // 0x4

    };

    struct FCollisionResponseTemplate //ScriptStruct Engine.CollisionResponseTemplate
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName Name; // 0x0
        enum class ECollisionEnabled CollisionEnabled; // 0x8
        bool bCanModify; // 0xa
        struct FName ObjectTypeName; // 0x2c
        struct TArray<struct FResponseChannel> CustomResponses; // 0x38

    };

    struct FBlueprintComponentDelegateBinding //ScriptStruct Engine.BlueprintComponentDelegateBinding
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName ComponentPropertyName; // 0x0
        struct FName DelegatePropertyName; // 0x8
        struct FName FunctionNameToBind; // 0x10

    };

    struct FMeshUVChannelInfo //ScriptStruct Engine.MeshUVChannelInfo
    {
    //Children Prop Count (Fields): 3
    public:

        bool bInitialized; // 0x0
        bool bOverrideDensities; // 0x1
        float LocalUVDensities; // 0x4

    };

    struct FAutoCompleteNode //ScriptStruct Engine.AutoCompleteNode
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t IndexChar; // 0x0
        struct TArray<int32_t> AutoCompleteListIndices; // 0x8

    };

    struct FAngularDriveConstraint //ScriptStruct Engine.AngularDriveConstraint
    {
    //Children Prop Count (Fields): 6
    public:

        struct FConstraintDrive TwistDrive; // 0x0
        struct FConstraintDrive SwingDrive; // 0x10
        struct FConstraintDrive SlerpDrive; // 0x20
        struct FRotator OrientationTarget; // 0x30
        struct FVector AngularVelocityTarget; // 0x3c
        enum class EAngularDriveMode AngularDriveMode; // 0x48

    };

    struct FConstraintDrive //ScriptStruct Engine.ConstraintDrive
    {
    //Children Prop Count (Fields): 5
    public:

        float Stiffness; // 0x0
        float Damping; // 0x4
        float MaxForce; // 0x8
        char bEnablePositionDrive; // 0xc
        char bEnableVelocityDrive; // 0xc

    };

    struct FLinearDriveConstraint //ScriptStruct Engine.LinearDriveConstraint
    {
    //Children Prop Count (Fields): 6
    public:

        struct FVector PositionTarget; // 0x0
        struct FVector VelocityTarget; // 0xc
        struct FConstraintDrive XDrive; // 0x18
        struct FConstraintDrive YDrive; // 0x28
        struct FConstraintDrive ZDrive; // 0x38
        char bEnablePositionDrive; // 0x48

    };

    struct FConstraintInstanceBase //ScriptStruct Engine.ConstraintInstanceBase
    {
    public:


    };

    struct FConstraintInstance : FConstraintInstanceBase //ScriptStruct Engine.ConstraintInstance
    {
    //Children Prop Count (Fields): 12
    public:

        struct FName JointName; // 0x18
        struct FName ConstraintBone1; // 0x20
        struct FName ConstraintBone2; // 0x28
        struct FVector Pos1; // 0x30
        struct FVector PriAxis1; // 0x3c
        struct FVector SecAxis1; // 0x48
        struct FVector Pos2; // 0x54
        struct FVector PriAxis2; // 0x60
        struct FVector SecAxis2; // 0x6c
        struct FRotator AngularRotationOffset; // 0x78
        char bScaleLinearLimits; // 0x84
        struct FConstraintProfileProperties ProfileInstance; // 0x8c

    };

    struct FConstraintProfileProperties //ScriptStruct Engine.ConstraintProfileProperties
    {
    //Children Prop Count (Fields): 17
    public:

        float ProjectionLinearTolerance; // 0x0
        float ProjectionAngularTolerance; // 0x4
        float ProjectionLinearAlpha; // 0x8
        float ProjectionAngularAlpha; // 0xc
        float LinearBreakThreshold; // 0x10
        float AngularBreakThreshold; // 0x14
        struct FLinearConstraint LinearLimit; // 0x18
        struct FConeConstraint ConeLimit; // 0x34
        struct FTwistConstraint TwistLimit; // 0x54
        struct FLinearDriveConstraint LinearDrive; // 0x70
        struct FAngularDriveConstraint AngularDrive; // 0xbc
        char bDisableCollision; // 0x108
        char bParentDominates; // 0x108
        char bEnableProjection; // 0x108
        char bEnableSoftProjection; // 0x108
        char bAngularBreakable; // 0x108
        char bLinearBreakable; // 0x108

    };

    struct FConstraintBaseParams //ScriptStruct Engine.ConstraintBaseParams
    {
    //Children Prop Count (Fields): 5
    public:

        float Stiffness; // 0x0
        float Damping; // 0x4
        float Restitution; // 0x8
        float ContactDistance; // 0xc
        char bSoftConstraint; // 0x10

    };

    struct FTwistConstraint : FConstraintBaseParams //ScriptStruct Engine.TwistConstraint
    {
    //Children Prop Count (Fields): 2
    public:

        float TwistLimitDegrees; // 0x14
        enum class EAngularConstraintMotion TwistMotion; // 0x18

    };

    struct FConeConstraint : FConstraintBaseParams //ScriptStruct Engine.ConeConstraint
    {
    //Children Prop Count (Fields): 4
    public:

        float Swing1LimitDegrees; // 0x14
        float Swing2LimitDegrees; // 0x18
        enum class EAngularConstraintMotion Swing1Motion; // 0x1c
        enum class EAngularConstraintMotion Swing2Motion; // 0x1d

    };

    struct FLinearConstraint : FConstraintBaseParams //ScriptStruct Engine.LinearConstraint
    {
    //Children Prop Count (Fields): 4
    public:

        float Limit; // 0x14
        enum class ELinearConstraintMotion XMotion; // 0x18
        enum class ELinearConstraintMotion YMotion; // 0x19
        enum class ELinearConstraintMotion ZMotion; // 0x1a

    };

    struct FCullDistanceSizePair //ScriptStruct Engine.CullDistanceSizePair
    {
    //Children Prop Count (Fields): 2
    public:

        float Size; // 0x0
        float CullDistance; // 0x4

    };

    struct FRuntimeCurveLinearColor //ScriptStruct Engine.RuntimeCurveLinearColor
    {
    //Children Prop Count (Fields): 2
    public:

        struct FRichCurve ColorCurves; // 0x0
        class UCurveLinearColor* ExternalCurve; // 0x200

    };

    struct FNamedCurveValue //ScriptStruct Engine.NamedCurveValue
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Name; // 0x0
        float Value; // 0x8

    };

    struct FBakedCustomAttributePerBoneData //ScriptStruct Engine.BakedCustomAttributePerBoneData
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t BoneTreeIndex; // 0x0
        struct TArray<struct FBakedStringCustomAttribute> StringAttributes; // 0x8
        struct TArray<struct FBakedIntegerCustomAttribute> IntAttributes; // 0x18
        struct TArray<struct FBakedFloatCustomAttribute> FloatAttributes; // 0x28

    };

    struct FBakedFloatCustomAttribute //ScriptStruct Engine.BakedFloatCustomAttribute
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName AttributeName; // 0x0
        struct FSimpleCurve FloatCurve; // 0x8

    };

    struct FSimpleCurve : FRealCurve //ScriptStruct Engine.SimpleCurve
    {
    //Children Prop Count (Fields): 2
    public:

        enum class ERichCurveInterpMode InterpMode; // 0x70
        struct TArray<struct FSimpleCurveKey> Keys; // 0x78

    };

    struct FSimpleCurveKey //ScriptStruct Engine.SimpleCurveKey
    {
    //Children Prop Count (Fields): 2
    public:

        float Time; // 0x0
        float Value; // 0x4

    };

    struct FBakedIntegerCustomAttribute //ScriptStruct Engine.BakedIntegerCustomAttribute
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName AttributeName; // 0x0
        struct FIntegralCurve IntCurve; // 0x8

    };

    struct FIntegralCurve : FIndexedCurve //ScriptStruct Engine.IntegralCurve
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FIntegralKey> Keys; // 0x68
        int32_t DefaultValue; // 0x78
        bool bUseDefaultValueBeforeFirstKey; // 0x7c

    };

    struct FIntegralKey //ScriptStruct Engine.IntegralKey
    {
    //Children Prop Count (Fields): 2
    public:

        float Time; // 0x0
        int32_t Value; // 0x4

    };

    struct FBakedStringCustomAttribute //ScriptStruct Engine.BakedStringCustomAttribute
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName AttributeName; // 0x0
        struct FStringCurve StringCurve; // 0x8

    };

    struct FStringCurve : FIndexedCurve //ScriptStruct Engine.StringCurve
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString DefaultValue; // 0x68
        struct TArray<struct FStringCurveKey> Keys; // 0x78

    };

    struct FStringCurveKey //ScriptStruct Engine.StringCurveKey
    {
    //Children Prop Count (Fields): 2
    public:

        float Time; // 0x0
        struct FString Value; // 0x8

    };

    struct FCustomAttributePerBoneData //ScriptStruct Engine.CustomAttributePerBoneData
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t BoneTreeIndex; // 0x0
        struct TArray<struct FCustomAttribute> Attributes; // 0x8

    };

    struct FCustomAttribute //ScriptStruct Engine.CustomAttribute
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Name; // 0x0
        int32_t VariantType; // 0x8
        struct TArray<float> Times; // 0x10

    };

    struct FCustomAttributeSetting //ScriptStruct Engine.CustomAttributeSetting
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString Name; // 0x0
        struct FString Meaning; // 0x10

    };

    struct FDataTableCategoryHandle //ScriptStruct Engine.DataTableCategoryHandle
    {
    //Children Prop Count (Fields): 3
    public:

        class UDataTable* DataTable; // 0x0
        struct FName ColumnName; // 0x8
        struct FName RowContents; // 0x10

    };

    struct FDataTableRowHandle //ScriptStruct Engine.DataTableRowHandle
    {
    //Children Prop Count (Fields): 2
    public:

        class UDataTable* DataTable; // 0x0
        struct FName RowName; // 0x8

    };

    struct FDebugCameraControllerSettingsViewModeIndex //ScriptStruct Engine.DebugCameraControllerSettingsViewModeIndex
    {
    //Children Prop Count (Fields): 1
    public:

        enum class EViewModeIndex ViewModeIndex; // 0x8

    };

    struct FDebugDisplayProperty //ScriptStruct Engine.DebugDisplayProperty
    {
    //Children Prop Count (Fields): 2
    public:

        class UObject* Obj; // 0x0
        class UObject* WithinClass; // 0x8

    };

    struct FDebugTextInfo //ScriptStruct Engine.DebugTextInfo
    {
    //Children Prop Count (Fields): 13
    public:

        class AActor* SrcActor; // 0x0
        struct FVector SrcActorOffset; // 0x8
        struct FVector SrcActorDesiredOffset; // 0x14
        struct FString DebugText; // 0x20
        float TimeRemaining; // 0x30
        float Duration; // 0x34
        struct FColor TextColor; // 0x38
        char bAbsoluteLocation; // 0x3c
        char bKeepAttachedToActor; // 0x3c
        char bDrawShadow; // 0x3c
        struct FVector OrigActorLocation; // 0x40
        class UFont* Font; // 0x50
        float FontScale; // 0x58

    };

    struct FMulticastRecordOptions //ScriptStruct Engine.MulticastRecordOptions
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString FuncPathName; // 0x0
        bool bServerSkip; // 0x10
        bool bClientSkip; // 0x11

    };

    struct FRollbackNetStartupActorInfo //ScriptStruct Engine.RollbackNetStartupActorInfo
    {
    //Children Prop Count (Fields): 3
    public:

        class UObject* Archetype; // 0x8
        class ULevel* Level; // 0x38
        struct TArray<class UObject*> ObjReferences; // 0xa0

    };

    struct FDialogueWaveParameter //ScriptStruct Engine.DialogueWaveParameter
    {
    //Children Prop Count (Fields): 2
    public:

        class UDialogueWave* DialogueWave; // 0x0
        struct FDialogueContext Context; // 0x8

    };

    struct FDialogueContext //ScriptStruct Engine.DialogueContext
    {
    //Children Prop Count (Fields): 2
    public:

        class UDialogueVoice* Speaker; // 0x0
        struct TArray<class UDialogueVoice*> Targets; // 0x8

    };

    struct FDialogueContextMapping //ScriptStruct Engine.DialogueContextMapping
    {
    //Children Prop Count (Fields): 4
    public:

        struct FDialogueContext Context; // 0x0
        class USoundWave* SoundWave; // 0x18
        struct FString LocalizationKeyFormat; // 0x20
        class UDialogueSoundWaveProxy* Proxy; // 0x30

    };

    struct FRawDistributionFloat : FRawDistribution //ScriptStruct Engine.RawDistributionFloat
    {
    //Children Prop Count (Fields): 3
    public:

        float MinValue; // 0x20
        float MaxValue; // 0x24
        class UDistributionFloat* Distribution; // 0x28

    };

    struct FRawDistributionVector : FRawDistribution //ScriptStruct Engine.RawDistributionVector
    {
    //Children Prop Count (Fields): 5
    public:

        float MinValue; // 0x20
        float MaxValue; // 0x24
        struct FVector MinValueVec; // 0x28
        struct FVector MaxValueVec; // 0x34
        class UDistributionVector* Distribution; // 0x40

    };

    struct FGraphReference //ScriptStruct Engine.GraphReference
    {
    //Children Prop Count (Fields): 3
    public:

        class UEdGraph* MacroGraph; // 0x0
        class UBlueprint* GraphBlueprint; // 0x8
        struct FGuid GraphGuid; // 0x10

    };

    struct FEdGraphPinReference //ScriptStruct Engine.EdGraphPinReference
    {
    //Children Prop Count (Fields): 2
    public:

        struct TWeakObjectPtr<struct UEdGraphNode> OwningNode; // 0x0
        struct FGuid PinId; // 0x8

    };

    struct FEdGraphSchemaAction //ScriptStruct Engine.EdGraphSchemaAction
    {
    //Children Prop Count (Fields): 15
    public:

        struct FText MenuDescription; // 0x8
        struct FText TooltipDescription; // 0x20
        struct FText Category; // 0x38
        struct FText Keywords; // 0x50
        int32_t Grouping; // 0x68
        int32_t SectionID; // 0x6c
        struct TArray<struct FString> MenuDescriptionArray; // 0x70
        struct TArray<struct FString> FullSearchTitlesArray; // 0x80
        struct TArray<struct FString> FullSearchKeywordsArray; // 0x90
        struct TArray<struct FString> FullSearchCategoryArray; // 0xa0
        struct TArray<struct FString> LocalizedMenuDescriptionArray; // 0xb0
        struct TArray<struct FString> LocalizedFullSearchTitlesArray; // 0xc0
        struct TArray<struct FString> LocalizedFullSearchKeywordsArray; // 0xd0
        struct TArray<struct FString> LocalizedFullSearchCategoryArray; // 0xe0
        struct FString SearchText; // 0xf0

    };

    struct FEdGraphSchemaAction_NewNode : FEdGraphSchemaAction //ScriptStruct Engine.EdGraphSchemaAction_NewNode
    {
    //Children Prop Count (Fields): 1
    public:

        class UEdGraphNode* NodeTemplate; // 0x100

    };

    struct FPluginRedirect //ScriptStruct Engine.PluginRedirect
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString OldPluginName; // 0x0
        struct FString NewPluginName; // 0x10

    };

    struct FStructRedirect //ScriptStruct Engine.StructRedirect
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName OldStructName; // 0x0
        struct FName NewStructName; // 0x8

    };

    struct FClassRedirect //ScriptStruct Engine.ClassRedirect
    {
    //Children Prop Count (Fields): 8
    public:

        struct FName ObjectName; // 0x0
        struct FName OldClassName; // 0x8
        struct FName NewClassName; // 0x10
        struct FName OldSubobjName; // 0x18
        struct FName NewSubobjName; // 0x20
        struct FName NewClassClass; // 0x28
        struct FName NewClassPackage; // 0x30
        bool InstanceOnly; // 0x38

    };

    struct FGameNameRedirect //ScriptStruct Engine.GameNameRedirect
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName OldGameName; // 0x0
        struct FName NewGameName; // 0x8

    };

    struct FScreenMessageString //ScriptStruct Engine.ScreenMessageString
    {
    //Children Prop Count (Fields): 6
    public:

        uint64_t Key; // 0x0
        struct FString ScreenMessage; // 0x8
        struct FColor DisplayColor; // 0x18
        float TimeToDisplay; // 0x1c
        float CurrentTimeDisplayed; // 0x20
        struct FVector2D TextScale; // 0x24

    };

    struct FDropNoteInfo //ScriptStruct Engine.DropNoteInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Location; // 0x0
        struct FRotator Rotation; // 0xc
        struct FString Comment; // 0x18

    };

    struct FStatColorMapping //ScriptStruct Engine.StatColorMapping
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString StatName; // 0x0
        struct TArray<struct FStatColorMapEntry> ColorMap; // 0x10
        char DisableBlend; // 0x20

    };

    struct FStatColorMapEntry //ScriptStruct Engine.StatColorMapEntry
    {
    //Children Prop Count (Fields): 2
    public:

        float In; // 0x0
        struct FColor Out; // 0x4

    };

    struct FWorldContext //ScriptStruct Engine.WorldContext
    {
    //Children Prop Count (Fields): 10
    public:

        struct FURL LastURL; // 0xd0
        struct FURL LastRemoteURL; // 0x138
        class UPendingNetGame* PendingNetGame; // 0x1a0
        struct TArray<struct FFullyLoadedPackagesInfo> PackagesToFullyLoad; // 0x1a8
        struct TArray<class ULevel*> LoadedLevelsForPendingMapChange; // 0x1c8
        struct TArray<class UObjectReferencer*> ObjectReferencers; // 0x1f0
        struct TArray<struct FLevelStreamingStatus> PendingLevelStreamingStatusUpdates; // 0x200
        class UGameViewportClient* GameViewport; // 0x210
        class UGameInstance* OwningGameInstance; // 0x218
        struct TArray<struct FNamedNetDriver> ActiveNetDrivers; // 0x220

    };

    struct FNamedNetDriver //ScriptStruct Engine.NamedNetDriver
    {
    //Children Prop Count (Fields): 1
    public:

        class UNetDriver* NetDriver; // 0x0

    };

    struct FLevelStreamingStatus //ScriptStruct Engine.LevelStreamingStatus
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName PackageName; // 0x0
        char bShouldBeLoaded; // 0x8
        char bShouldBeVisible; // 0x8
        uint32_t LODIndex; // 0xc

    };

    struct FFullyLoadedPackagesInfo //ScriptStruct Engine.FullyLoadedPackagesInfo
    {
    //Children Prop Count (Fields): 4
    public:

        enum class EFullyLoadPackageType FullyLoadType; // 0x0
        struct FString Tag; // 0x8
        struct TArray<struct FName> PackagesToLoad; // 0x18
        struct TArray<class UObject*> LoadedObjects; // 0x28

    };

    struct FNetDriverDefinition //ScriptStruct Engine.NetDriverDefinition
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName DefName; // 0x0
        struct FName DriverClassName; // 0x8
        struct FName DriverClassNameFallback; // 0x10

    };

    struct FExposureSettings //ScriptStruct Engine.ExposureSettings
    {
    //Children Prop Count (Fields): 2
    public:

        float FixedEV100; // 0x0
        bool bFixed; // 0x4

    };

    struct FTickPrerequisite //ScriptStruct Engine.TickPrerequisite
    {
    public:


    };

    struct FCanvasUVTri //ScriptStruct Engine.CanvasUVTri
    {
    //Children Prop Count (Fields): 9
    public:

        struct FVector2D V0_Pos; // 0x0
        struct FVector2D V0_UV; // 0x8
        struct FLinearColor V0_Color; // 0x10
        struct FVector2D V1_Pos; // 0x20
        struct FVector2D V1_UV; // 0x28
        struct FLinearColor V1_Color; // 0x30
        struct FVector2D V2_Pos; // 0x40
        struct FVector2D V2_UV; // 0x48
        struct FLinearColor V2_Color; // 0x50

    };

    struct FFontRenderInfo //ScriptStruct Engine.FontRenderInfo
    {
    //Children Prop Count (Fields): 3
    public:

        char bClipText; // 0x0
        char bEnableShadow; // 0x0
        struct FDepthFieldGlowInfo GlowInfo; // 0x4

    };

    struct FDepthFieldGlowInfo //ScriptStruct Engine.DepthFieldGlowInfo
    {
    //Children Prop Count (Fields): 4
    public:

        char bEnableGlow; // 0x0
        struct FLinearColor GlowColor; // 0x4
        struct FVector2D GlowOuterRadius; // 0x14
        struct FVector2D GlowInnerRadius; // 0x1c

    };

    struct FRedirector //ScriptStruct Engine.Redirector
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName OldName; // 0x0
        struct FName NewName; // 0x8

    };

    struct FCollectionReference //ScriptStruct Engine.CollectionReference
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName CollectionName; // 0x0

    };

    struct FConstrainComponentPropName //ScriptStruct Engine.ConstrainComponentPropName
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName ComponentName; // 0x0

    };

    struct FSkeletalMeshBuildSettings //ScriptStruct Engine.SkeletalMeshBuildSettings
    {
    //Children Prop Count (Fields): 12
    public:

        char bRecomputeNormals; // 0x0
        char bRecomputeTangents; // 0x0
        char bUseMikkTSpace; // 0x0
        char bComputeWeightedNormals; // 0x0
        char bRemoveDegenerates; // 0x0
        char bUseHighPrecisionTangentBasis; // 0x0
        char bUseFullPrecisionUVs; // 0x0
        char bBuildAdjacencyBuffer; // 0x0
        float ThresholdPosition; // 0x4
        float ThresholdTangentNormal; // 0x8
        float ThresholdUV; // 0xc
        float MorphThresholdPosition; // 0x10

    };

    struct FMeshBuildSettings //ScriptStruct Engine.MeshBuildSettings
    {
    //Children Prop Count (Fields): 25
    public:

        char bUseMikkTSpace; // 0x0
        char bRecomputeNormals; // 0x0
        char bRecomputeTangents; // 0x0
        char bComputeWeightedNormals; // 0x0
        char bRemoveDegenerates; // 0x0
        char bBuildAdjacencyBuffer; // 0x0
        char bBuildReversedIndexBuffer; // 0x0
        char bUseHighPrecisionTangentBasis; // 0x0
        char bUseFullPrecisionUVs; // 0x1
        char bGenerateLightmapUVs; // 0x1
        char bGenerateDistanceFieldAsIfTwoSided; // 0x1
        char bSupportFaceRemap; // 0x1
        int32_t MinLightmapResolution; // 0x4
        int32_t SrcLightmapIndex; // 0x8
        int32_t DstLightmapIndex; // 0xc
        float BuildScale; // 0x10
        struct FVector BuildScale3D; // 0x14
        float DistanceFieldResolutionScale; // 0x20
        class UStaticMesh* DistanceFieldReplacementMesh; // 0x28
        float RandomPosPickRate; // 0x30
        float HitBackRatioThreshold; // 0x34
        float MinDistanceClamp; // 0x38
        char bUseOriginalAlgorithm; // 0x3c
        float BackfaceClampDistance; // 0x40
        float DistanceFieldShrink; // 0x44

    };

    struct FPOV //ScriptStruct Engine.POV
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Location; // 0x0
        struct FRotator Rotation; // 0xc
        float FOV; // 0x18

    };

    struct FAnimUpdateRateParameters //ScriptStruct Engine.AnimUpdateRateParameters
    {
    //Children Prop Count (Fields): 29
    public:

        enum class EUpdateRateShiftBucket ShiftBucket; // 0x1
        char bInterpolateSkippedFrames; // 0x2
        char bShouldUseLodMap; // 0x2
        char bShouldUseMinLod; // 0x2
        char bSkipUpdate; // 0x2
        char bSkipEvaluation; // 0x2
        int32_t UpdateRate; // 0x4
        int32_t EvaluationRate; // 0x8
        float TickedPoseOffestTime; // 0xc
        float AdditionalTime; // 0x10
        int32_t BaseNonRenderedUpdateRate; // 0x18
        int32_t MaxEvalRateForInterpolation; // 0x1c
        struct TArray<float> BaseVisibleDistanceFactorThesholds; // 0x20
        struct TMap<int32_t, int32_t> LODToFrameSkipMap; // 0x30
        int32_t SkippedUpdateFrames; // 0x80
        int32_t SkippedEvalFrames; // 0x84
        bool bEnableLoadBalance; // 0x88
        int32_t LogicUpdateRate; // 0x8c
        struct FName LoadBalanceTag; // 0x90
        int32_t LoadBalanceTrackerNum; // 0x98
        int32_t MaxEvalRateForInterpolationAfterLoadBalance; // 0x9c
        float LoadBalanceBudget; // 0xa0
        float LoadBalanceBudgetUsed; // 0xa4
        float LoadBalanceBudgetUsedOptimized; // 0xa8
        int32_t UpdateRateBeforeLoadBalance; // 0xac
        bool bUseParentURO; // 0xb0
        bool bOnlyUseFirstRegisteredComponentDistFactor; // 0xb1
        bool bNeedsEveryFrameWhenPlayingMontage; // 0xb2
        bool bNeedsEveryFrame; // 0xb3

    };

    struct FAnimSlotDesc //ScriptStruct Engine.AnimSlotDesc
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName SlotName; // 0x0
        int32_t NumChannels; // 0x8

    };

    struct FAnimSlotInfo //ScriptStruct Engine.AnimSlotInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName SlotName; // 0x0
        struct TArray<float> ChannelWeights; // 0x8

    };

    struct FMTDResult //ScriptStruct Engine.MTDResult
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Direction; // 0x0
        float Distance; // 0xc

    };

    struct FOverlapResult //ScriptStruct Engine.OverlapResult
    {
    //Children Prop Count (Fields): 3
    public:

        struct TWeakObjectPtr<struct AActor> Actor; // 0x0
        struct TWeakObjectPtr<struct UPrimitiveComponent> Component; // 0x8
        char bBlockingHit; // 0x14

    };

    struct FPrimitiveMaterialRef //ScriptStruct Engine.PrimitiveMaterialRef
    {
    //Children Prop Count (Fields): 3
    public:

        class UPrimitiveComponent* Primitive; // 0x0
        class UDecalComponent* Decal; // 0x8
        int32_t ElementIndex; // 0x10

    };

    struct FSwarmDebugOptions //ScriptStruct Engine.SwarmDebugOptions
    {
    //Children Prop Count (Fields): 3
    public:

        char bDistributionEnabled; // 0x0
        char bForceContentExport; // 0x0
        char bInitialized; // 0x0

    };

    struct FLightmassDebugOptions //ScriptStruct Engine.LightmassDebugOptions
    {
    //Children Prop Count (Fields): 16
    public:

        char bDebugMode; // 0x0
        char bStatsEnabled; // 0x0
        char bGatherBSPSurfacesAcrossComponents; // 0x0
        float CoplanarTolerance; // 0x4
        char bUseImmediateImport; // 0x8
        char bImmediateProcessMappings; // 0x8
        char bSortMappings; // 0x8
        char bDumpBinaryFiles; // 0x8
        char bDebugMaterials; // 0x8
        char bPadMappings; // 0x8
        char bDebugPaddings; // 0x8
        char bOnlyCalcDebugTexelMappings; // 0x8
        char bUseRandomColors; // 0x9
        char bColorBordersGreen; // 0x9
        char bColorByExecutionTime; // 0x9
        float ExecutionTimeDivisor; // 0xc

    };

    struct FLightmassPrimitiveSettings //ScriptStruct Engine.LightmassPrimitiveSettings
    {
    //Children Prop Count (Fields): 9
    public:

        char bUseTwoSidedLighting; // 0x0
        char bShadowIndirectOnly; // 0x0
        char bUseEmissiveForStaticLighting; // 0x0
        char bUseVertexNormalForHemisphereGather; // 0x0
        float EmissiveLightFalloffExponent; // 0x4
        float EmissiveLightExplicitInfluenceRadius; // 0x8
        float EmissiveBoost; // 0xc
        float DiffuseBoost; // 0x10
        float FullyOccludedSamplesFraction; // 0x14

    };

    struct FLightmassLightSettings //ScriptStruct Engine.LightmassLightSettings
    {
    //Children Prop Count (Fields): 3
    public:

        float IndirectLightingSaturation; // 0x0
        float ShadowExponent; // 0x4
        bool bUseAreaShadowsForStationaryLight; // 0x8

    };

    struct FLightmassDirectionalLightSettings : FLightmassLightSettings //ScriptStruct Engine.LightmassDirectionalLightSettings
    {
    //Children Prop Count (Fields): 1
    public:

        float LightSourceAngle; // 0xc

    };

    struct FLightmassPointLightSettings : FLightmassLightSettings //ScriptStruct Engine.LightmassPointLightSettings
    {
    public:


    };

    struct FBasedPosition //ScriptStruct Engine.BasedPosition
    {
    //Children Prop Count (Fields): 5
    public:

        class AActor* Base; // 0x0
        struct FVector position; // 0x8
        struct FVector CachedBaseLocation; // 0x14
        struct FRotator CachedBaseRotation; // 0x20
        struct FVector CachedTransPosition; // 0x2c

    };

    struct FFractureEffect //ScriptStruct Engine.FractureEffect
    {
    //Children Prop Count (Fields): 2
    public:

        class UParticleSystem* ParticleSystem; // 0x0
        class USoundBase* Sound; // 0x8

    };

    struct FCollisionImpactData //ScriptStruct Engine.CollisionImpactData
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<struct FRigidBodyContactInfo> ContactInfos; // 0x0
        struct FVector TotalNormalImpulse; // 0x10
        struct FVector TotalFrictionImpulse; // 0x1c
        bool bIsVelocityDeltaUnderThreshold; // 0x28

    };

    struct FRigidBodyContactInfo //ScriptStruct Engine.RigidBodyContactInfo
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector ContactPosition; // 0x0
        struct FVector ContactNormal; // 0xc
        float ContactPenetration; // 0x18
        class UPhysicalMaterial* PhysMaterial; // 0x20

    };

    struct FRigidBodyErrorCorrection //ScriptStruct Engine.RigidBodyErrorCorrection
    {
    //Children Prop Count (Fields): 13
    public:

        float PingExtrapolation; // 0x0
        float PingLimit; // 0x4
        float ErrorPerLinearDifference; // 0x8
        float ErrorPerAngularDifference; // 0xc
        float MaxRestoredStateError; // 0x10
        float MaxLinearHardSnapDistance; // 0x14
        float PositionLerp; // 0x18
        float AngleLerp; // 0x1c
        float LinearVelocityCoefficient; // 0x20
        float AngularVelocityCoefficient; // 0x24
        float ErrorAccumulationSeconds; // 0x28
        float ErrorAccumulationDistanceSq; // 0x2c
        float ErrorAccumulationSimilarity; // 0x30

    };

    struct FRigidBodyState //ScriptStruct Engine.RigidBodyState
    {
    //Children Prop Count (Fields): 6
    public:

        struct FVector_NetQuantize100 position; // 0x0
        struct FQuat Quaternion; // 0x10
        struct FVector_NetQuantize100 LinVel; // 0x20
        struct FVector_NetQuantize100 AngVel; // 0x2c
        char Flags; // 0x38
        float Timestamp; // 0x3c

    };

    struct FMaterialShadingModelField //ScriptStruct Engine.MaterialShadingModelField
    {
    //Children Prop Count (Fields): 1
    public:

        uint16_t ShadingModelField; // 0x0

    };

    struct FExponentialHeightFogData //ScriptStruct Engine.ExponentialHeightFogData
    {
    //Children Prop Count (Fields): 3
    public:

        float FogDensity; // 0x0
        float FogHeightFalloff; // 0x4
        float FogHeightOffset; // 0x8

    };

    struct FFontCharacter //ScriptStruct Engine.FontCharacter
    {
    //Children Prop Count (Fields): 6
    public:

        int32_t StartU; // 0x0
        int32_t StartV; // 0x4
        int32_t USize; // 0x8
        int32_t VSize; // 0xc
        char TextureIndex; // 0x10
        int32_t VerticalOffset; // 0x14

    };

    struct FFontImportOptionsData //ScriptStruct Engine.FontImportOptionsData
    {
    //Children Prop Count (Fields): 29
    public:

        struct FString FontName; // 0x0
        float Height; // 0x10
        char bEnableAntialiasing; // 0x14
        char bEnableBold; // 0x14
        char bEnableItalic; // 0x14
        char bEnableUnderline; // 0x14
        char bAlphaOnly; // 0x14
        enum class EFontImportCharacterSet CharacterSet; // 0x18
        struct FString Chars; // 0x20
        struct FString UnicodeRange; // 0x30
        struct FString CharsFilePath; // 0x40
        struct FString CharsFileWildcard; // 0x50
        char bCreatePrintableOnly; // 0x60
        char bIncludeASCIIRange; // 0x60
        struct FLinearColor ForegroundColor; // 0x64
        char bEnableDropShadow; // 0x74
        int32_t TexturePageWidth; // 0x78
        int32_t TexturePageMaxHeight; // 0x7c
        int32_t XPadding; // 0x80
        int32_t YPadding; // 0x84
        int32_t ExtendBoxTop; // 0x88
        int32_t ExtendBoxBottom; // 0x8c
        int32_t ExtendBoxRight; // 0x90
        int32_t ExtendBoxLeft; // 0x94
        char bEnableLegacyMode; // 0x98
        int32_t Kerning; // 0x9c
        char bUseDistanceFieldAlpha; // 0xa0
        int32_t DistanceFieldScaleFactor; // 0xa4
        float DistanceFieldScanRadiusScale; // 0xa8

    };

    struct FForceFeedbackAttenuationSettings : FBaseAttenuationSettings //ScriptStruct Engine.ForceFeedbackAttenuationSettings
    {
    public:


    };

    struct FForceFeedbackChannelDetails //ScriptStruct Engine.ForceFeedbackChannelDetails
    {
    //Children Prop Count (Fields): 5
    public:

        char bAffectsLeftLarge; // 0x0
        char bAffectsLeftSmall; // 0x0
        char bAffectsRightLarge; // 0x0
        char bAffectsRightSmall; // 0x0
        struct FRuntimeFloatCurve Curve; // 0x8

    };

    struct FPredictProjectilePathResult //ScriptStruct Engine.PredictProjectilePathResult
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FPredictProjectilePathPointData> PathData; // 0x0
        struct FPredictProjectilePathPointData LastTraceDestination; // 0x10
        struct FHitResult HitResult; // 0x30

    };

    struct FPredictProjectilePathPointData //ScriptStruct Engine.PredictProjectilePathPointData
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Location; // 0x0
        struct FVector Velocity; // 0xc
        float Time; // 0x18

    };

    struct FPredictProjectilePathParams //ScriptStruct Engine.PredictProjectilePathParams
    {
    //Children Prop Count (Fields): 14
    public:

        struct FVector StartLocation; // 0x0
        struct FVector LaunchVelocity; // 0xc
        bool bTraceWithCollision; // 0x18
        float ProjectileRadius; // 0x1c
        float MaxSimTime; // 0x20
        bool bTraceWithChannel; // 0x24
        enum class ECollisionChannel TraceChannel; // 0x25
        struct TArray<enum class EObjectTypeQuery> ObjectTypes; // 0x28
        struct TArray<class AActor*> ActorsToIgnore; // 0x38
        float SimFrequency; // 0x48
        float OverrideGravityZ; // 0x4c
        enum class EDrawDebugTrace DrawDebugType; // 0x50
        float DrawDebugTime; // 0x54
        bool bTraceComplex; // 0x58

    };

    struct FGlobalDFShadowSettings //ScriptStruct Engine.GlobalDFShadowSettings
    {
    //Children Prop Count (Fields): 3
    public:

        float TraceStart; // 0x0
        float HitDistance; // 0x4
        float SmoothDistance; // 0x8

    };

    struct FActiveHapticFeedbackEffect //ScriptStruct Engine.ActiveHapticFeedbackEffect
    {
    //Children Prop Count (Fields): 1
    public:

        class UHapticFeedbackEffect_Base* HapticEffect; // 0x0

    };

    struct FHapticFeedbackDetails_Curve //ScriptStruct Engine.HapticFeedbackDetails_Curve
    {
    //Children Prop Count (Fields): 2
    public:

        struct FRuntimeFloatCurve Frequency; // 0x0
        struct FRuntimeFloatCurve Amplitude; // 0x88

    };

    struct FClusterNode //ScriptStruct Engine.ClusterNode
    {
    //Children Prop Count (Fields): 8
    public:

        struct FVector BoundMin; // 0x0
        int32_t FirstChild; // 0xc
        struct FVector BoundMax; // 0x10
        int32_t LastChild; // 0x1c
        int32_t FirstInstance; // 0x20
        int32_t LastInstance; // 0x24
        struct FVector MinInstanceScale; // 0x28
        struct FVector MaxInstanceScale; // 0x34

    };

    struct FClusterNode_DEPRECATED //ScriptStruct Engine.ClusterNode_DEPRECATED
    {
    //Children Prop Count (Fields): 6
    public:

        struct FVector BoundMin; // 0x0
        int32_t FirstChild; // 0xc
        struct FVector BoundMax; // 0x10
        int32_t LastChild; // 0x1c
        int32_t FirstInstance; // 0x20
        int32_t LastInstance; // 0x24

    };

    struct FHLODISMComponentDesc //ScriptStruct Engine.HLODISMComponentDesc
    {
    //Children Prop Count (Fields): 3
    public:

        class UStaticMesh* StaticMesh; // 0x0
        class UMaterialInterface* Material; // 0x8
        struct TArray<struct FTransform> Instances; // 0x10

    };

    struct FHLODProxyMesh //ScriptStruct Engine.HLODProxyMesh
    {
    //Children Prop Count (Fields): 3
    public:

        struct FLazyObjectProperty LODActor; // 0x0
        class UStaticMesh* StaticMesh; // 0x20
        struct FName Key; // 0x28

    };

    struct FImportanceTexture //ScriptStruct Engine.ImportanceTexture
    {
    //Children Prop Count (Fields): 7
    public:

        struct FIntPoint Size; // 0x0
        int32_t NumMips; // 0x8
        struct TArray<float> MarginalCDF; // 0x10
        struct TArray<float> ConditionalCDF; // 0x20
        struct TArray<struct FColor> TextureData; // 0x30
        struct TWeakObjectPtr<struct UTexture2D> Texture; // 0x40
        enum class EImportanceWeight Weighting; // 0x48

    };

    struct FComponentOverrideRecord //ScriptStruct Engine.ComponentOverrideRecord
    {
    //Children Prop Count (Fields): 4
    public:

        class UObject* ComponentClass; // 0x0
        class UActorComponent* ComponentTemplate; // 0x8
        struct FComponentKey ComponentKey; // 0x10
        struct FBlueprintCookedComponentInstancingData CookedComponentInstancingData; // 0x30

    };

    struct FComponentKey //ScriptStruct Engine.ComponentKey
    {
    //Children Prop Count (Fields): 3
    public:

        class UObject* OwnerClass; // 0x0
        struct FName SCSVariableName; // 0x8
        struct FGuid AssociatedGuid; // 0x10

    };

    struct FBlueprintInputDelegateBinding //ScriptStruct Engine.BlueprintInputDelegateBinding
    {
    //Children Prop Count (Fields): 3
    public:

        char bConsumeInput; // 0x0
        char bExecuteWhenPaused; // 0x0
        char bOverrideParentBinding; // 0x0

    };

    struct FBlueprintInputActionDelegateBinding : FBlueprintInputDelegateBinding //ScriptStruct Engine.BlueprintInputActionDelegateBinding
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName InputActionName; // 0x4
        enum class EInputEvent InputKeyEvent; // 0xc
        struct FName FunctionNameToBind; // 0x10

    };

    struct FBlueprintInputAxisDelegateBinding : FBlueprintInputDelegateBinding //ScriptStruct Engine.BlueprintInputAxisDelegateBinding
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName InputAxisName; // 0x4
        struct FName FunctionNameToBind; // 0xc

    };

    struct FBlueprintInputAxisKeyDelegateBinding : FBlueprintInputDelegateBinding //ScriptStruct Engine.BlueprintInputAxisKeyDelegateBinding
    {
    //Children Prop Count (Fields): 2
    public:

        struct FKey AxisKey; // 0x8
        struct FName FunctionNameToBind; // 0x20

    };

    struct FCachedKeyToActionInfo //ScriptStruct Engine.CachedKeyToActionInfo
    {
    //Children Prop Count (Fields): 1
    public:

        class UPlayerInput* PlayerInput; // 0x0

    };

    struct FBlueprintInputKeyDelegateBinding : FBlueprintInputDelegateBinding //ScriptStruct Engine.BlueprintInputKeyDelegateBinding
    {
    //Children Prop Count (Fields): 3
    public:

        struct FInputChord InputChord; // 0x8
        enum class EInputEvent InputKeyEvent; // 0x28
        struct FName FunctionNameToBind; // 0x2c

    };

    struct FBlueprintInputTouchDelegateBinding : FBlueprintInputDelegateBinding //ScriptStruct Engine.BlueprintInputTouchDelegateBinding
    {
    //Children Prop Count (Fields): 2
    public:

        enum class EInputEvent InputKeyEvent; // 0x4
        struct FName FunctionNameToBind; // 0x8

    };

    struct FInstancedStaticMeshComponentInstanceData : FSceneComponentInstanceData //ScriptStruct Engine.InstancedStaticMeshComponentInstanceData
    {
    //Children Prop Count (Fields): 5
    public:

        class UStaticMesh* StaticMesh; // 0xb8
        struct FInstancedStaticMeshLightMapInstanceData CachedStaticLighting; // 0xc0
        struct TArray<struct FInstancedStaticMeshInstanceData> PerInstanceSMData; // 0x100
        struct TArray<float> PerInstanceSMCustomData; // 0x110
        int32_t InstancingRandomSeed; // 0x140

    };

    struct FInstancedStaticMeshInstanceData //ScriptStruct Engine.InstancedStaticMeshInstanceData
    {
    //Children Prop Count (Fields): 1
    public:

        struct FMatrix Transform; // 0x0

    };

    struct FInstancedStaticMeshLightMapInstanceData //ScriptStruct Engine.InstancedStaticMeshLightMapInstanceData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FTransform Transform; // 0x0
        struct TArray<struct FGuid> MapBuildDataIds; // 0x30

    };

    struct FInstancedStaticMeshMappingInfo //ScriptStruct Engine.InstancedStaticMeshMappingInfo
    {
    public:


    };

    struct FCurveEdTab //ScriptStruct Engine.CurveEdTab
    {
    //Children Prop Count (Fields): 6
    public:

        struct FString TabName; // 0x0
        struct TArray<struct FCurveEdEntry> Curves; // 0x10
        float ViewStartInput; // 0x20
        float ViewEndInput; // 0x24
        float ViewStartOutput; // 0x28
        float ViewEndOutput; // 0x2c

    };

    struct FCurveEdEntry //ScriptStruct Engine.CurveEdEntry
    {
    //Children Prop Count (Fields): 9
    public:

        class UObject* CurveObject; // 0x0
        struct FColor CurveColor; // 0x8
        struct FString CurveName; // 0x10
        int32_t bHideCurve; // 0x20
        int32_t bColorCurve; // 0x24
        int32_t bFloatingPointColorCurve; // 0x28
        int32_t bClamp; // 0x2c
        float ClampLow; // 0x30
        float ClampHigh; // 0x34

    };

    struct FInterpEdSelKey //ScriptStruct Engine.InterpEdSelKey
    {
    //Children Prop Count (Fields): 4
    public:

        class UInterpGroup* Group; // 0x0
        class UInterpTrack* Track; // 0x8
        int32_t KeyIndex; // 0x10
        float UnsnappedPosition; // 0x14

    };

    struct FCameraPreviewInfo //ScriptStruct Engine.CameraPreviewInfo
    {
    //Children Prop Count (Fields): 5
    public:

        class APawn* PawnClass; // 0x0
        class UAnimSequence* AnimSeq; // 0x8
        struct FVector Location; // 0x10
        struct FRotator Rotation; // 0x1c
        class APawn* PawnInst; // 0x28

    };

    struct FSubTrackGroup //ScriptStruct Engine.SubTrackGroup
    {
    //Children Prop Count (Fields): 4
    public:

        struct FString GroupName; // 0x0
        struct TArray<int32_t> TrackIndices; // 0x10
        char bIsCollapsed; // 0x20
        char bIsSelected; // 0x20

    };

    struct FSupportedSubTrackInfo //ScriptStruct Engine.SupportedSubTrackInfo
    {
    //Children Prop Count (Fields): 3
    public:

        class UInterpTrack* SupportedClass; // 0x0
        struct FString SubTrackName; // 0x8
        int32_t GroupIndex; // 0x18

    };

    struct FAnimControlTrackKey //ScriptStruct Engine.AnimControlTrackKey
    {
    //Children Prop Count (Fields): 7
    public:

        float StartTime; // 0x0
        class UAnimSequence* AnimSeq; // 0x8
        float AnimStartOffset; // 0x10
        float AnimEndOffset; // 0x14
        float AnimPlayRate; // 0x18
        char bLooping; // 0x1c
        char bReverse; // 0x1c

    };

    struct FBoolTrackKey //ScriptStruct Engine.BoolTrackKey
    {
    //Children Prop Count (Fields): 2
    public:

        float Time; // 0x0
        char Value; // 0x4

    };

    struct FDirectorTrackCut //ScriptStruct Engine.DirectorTrackCut
    {
    //Children Prop Count (Fields): 4
    public:

        float Time; // 0x0
        float TransitionTime; // 0x4
        struct FName TargetCamGroup; // 0x8
        int32_t ShotNumber; // 0x10

    };

    struct FEventTrackKey //ScriptStruct Engine.EventTrackKey
    {
    //Children Prop Count (Fields): 2
    public:

        float Time; // 0x0
        struct FName EventName; // 0x4

    };

    struct FInterpLookupTrack //ScriptStruct Engine.InterpLookupTrack
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FInterpLookupPoint> Points; // 0x0

    };

    struct FInterpLookupPoint //ScriptStruct Engine.InterpLookupPoint
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName GroupName; // 0x0
        float Time; // 0x8

    };

    struct FParticleReplayTrackKey //ScriptStruct Engine.ParticleReplayTrackKey
    {
    //Children Prop Count (Fields): 3
    public:

        float Time; // 0x0
        float Duration; // 0x4
        int32_t ClipIDNumber; // 0x8

    };

    struct FSoundTrackKey //ScriptStruct Engine.SoundTrackKey
    {
    //Children Prop Count (Fields): 4
    public:

        float Time; // 0x0
        float Volume; // 0x4
        float Pitch; // 0x8
        class USoundBase* Sound; // 0x10

    };

    struct FToggleTrackKey //ScriptStruct Engine.ToggleTrackKey
    {
    //Children Prop Count (Fields): 2
    public:

        float Time; // 0x0
        enum class ETrackToggleAction ToggleAction; // 0x4

    };

    struct FVisibilityTrackKey //ScriptStruct Engine.VisibilityTrackKey
    {
    //Children Prop Count (Fields): 3
    public:

        float Time; // 0x0
        enum class EVisibilityTrackAction Action; // 0x4
        enum class EVisibilityTrackCondition ActiveCondition; // 0x5

    };

    struct FVectorSpringState //ScriptStruct Engine.VectorSpringState
    {
    public:


    };

    struct FFloatSpringState //ScriptStruct Engine.FloatSpringState
    {
    public:


    };

    struct FDrawToRenderTargetContext //ScriptStruct Engine.DrawToRenderTargetContext
    {
    //Children Prop Count (Fields): 1
    public:

        class UTextureRenderTarget2D* RenderTarget; // 0x0

    };

    struct FLatentActionManager //ScriptStruct Engine.LatentActionManager
    {
    public:


    };

    struct FLayerActorStats //ScriptStruct Engine.LayerActorStats
    {
    //Children Prop Count (Fields): 2
    public:

        class UObject* Type; // 0x0
        int32_t Total; // 0x8

    };

    struct FReplicatedStaticActorDestructionInfo //ScriptStruct Engine.ReplicatedStaticActorDestructionInfo
    {
    //Children Prop Count (Fields): 1
    public:

        class UObject* ObjClass; // 0x30

    };

    struct FLevelSimplificationDetails //ScriptStruct Engine.LevelSimplificationDetails
    {
    //Children Prop Count (Fields): 16
    public:

        bool bCreatePackagePerAsset; // 0x0
        float DetailsPercentage; // 0x4
        struct FMaterialProxySettings StaticMeshMaterialSettings; // 0x8
        bool bOverrideLandscapeExportLOD; // 0x98
        int32_t LandscapeExportLOD; // 0x9c
        struct FMaterialProxySettings LandscapeMaterialSettings; // 0xa0
        bool bBakeFoliageToLandscape; // 0x130
        bool bBakeGrassToLandscape; // 0x131
        bool bGenerateMeshNormalMap; // 0x132
        bool bGenerateMeshMetallicMap; // 0x133
        bool bGenerateMeshRoughnessMap; // 0x134
        bool bGenerateMeshSpecularMap; // 0x135
        bool bGenerateLandscapeNormalMap; // 0x136
        bool bGenerateLandscapeMetallicMap; // 0x137
        bool bGenerateLandscapeRoughnessMap; // 0x138
        bool bGenerateLandscapeSpecularMap; // 0x139

    };

    struct FMaterialProxySettings //ScriptStruct Engine.MaterialProxySettings
    {
    //Children Prop Count (Fields): 36
    public:

        struct FIntPoint TextureSize; // 0x0
        char bDetermineTextureSizeByMaterials; // 0x8
        float DetermineTextureSizeScale; // 0xc
        float GutterSpace; // 0x10
        float MetallicConstant; // 0x14
        float RoughnessConstant; // 0x18
        float AnisotropyConstant; // 0x1c
        float SpecularConstant; // 0x20
        float OpacityConstant; // 0x24
        float OpacityMaskConstant; // 0x28
        float AmbientOcclusionConstant; // 0x2c
        enum class ETextureSizingType TextureSizingType; // 0x30
        enum class EMaterialMergeType MaterialMergeType; // 0x31
        enum class EBlendMode BlendMode; // 0x32
        char bAllowTwoSidedMaterial; // 0x33
        char bNormalMap; // 0x33
        char bTangentMap; // 0x33
        char bMetallicMap; // 0x33
        char bRoughnessMap; // 0x33
        char bAnisotropyMap; // 0x33
        char bSpecularMap; // 0x33
        char bEmissiveMap; // 0x33
        char bOpacityMap; // 0x34
        char bOpacityMaskMap; // 0x34
        char bAmbientOcclusionMap; // 0x34
        struct FIntPoint DiffuseTextureSize; // 0x38
        struct FIntPoint NormalTextureSize; // 0x40
        struct FIntPoint TangentTextureSize; // 0x48
        struct FIntPoint MetallicTextureSize; // 0x50
        struct FIntPoint RoughnessTextureSize; // 0x58
        struct FIntPoint AnisotropyTextureSize; // 0x60
        struct FIntPoint SpecularTextureSize; // 0x68
        struct FIntPoint EmissiveTextureSize; // 0x70
        struct FIntPoint OpacityTextureSize; // 0x78
        struct FIntPoint OpacityMaskTextureSize; // 0x80
        struct FIntPoint AmbientOcclusionTextureSize; // 0x88

    };

    struct FStreamableTextureInstance //ScriptStruct Engine.StreamableTextureInstance
    {
    public:


    };

    struct FDynamicTextureInstance : FStreamableTextureInstance //ScriptStruct Engine.DynamicTextureInstance
    {
    //Children Prop Count (Fields): 3
    public:

        class UTexture2D* Texture; // 0x28
        bool bAttached; // 0x30
        float OriginalRadius; // 0x34

    };

    struct FPrecomputedLightInstanceData : FSceneComponentInstanceData //ScriptStruct Engine.PrecomputedLightInstanceData
    {
    //Children Prop Count (Fields): 3
    public:

        struct FTransform Transform; // 0xc0
        struct FGuid LightGuid; // 0xf0
        int32_t PreviewShadowMapChannel; // 0x100

    };

    struct FBatchedPoint //ScriptStruct Engine.BatchedPoint
    {
    //Children Prop Count (Fields): 5
    public:

        struct FVector position; // 0x0
        struct FLinearColor Color; // 0xc
        float PointSize; // 0x1c
        float RemainingLifeTime; // 0x20
        char DepthPriority; // 0x24

    };

    struct FBatchedLine //ScriptStruct Engine.BatchedLine
    {
    //Children Prop Count (Fields): 6
    public:

        struct FVector Start; // 0x0
        struct FVector End; // 0xc
        struct FLinearColor Color; // 0x18
        float Thickness; // 0x28
        float RemainingLifeTime; // 0x2c
        char DepthPriority; // 0x30

    };

    struct FClientReceiveData //ScriptStruct Engine.ClientReceiveData
    {
    //Children Prop Count (Fields): 7
    public:

        class APlayerController* LocalPC; // 0x0
        struct FName MessageType; // 0x8
        int32_t MessageIndex; // 0x10
        struct FString MessageString; // 0x18
        class APlayerState* RelatedPlayerState_2; // 0x28
        class APlayerState* RelatedPlayerState_3; // 0x30
        class UObject* OptionalObject; // 0x38

    };

    struct FHLODGridInfo //ScriptStruct Engine.HLODGridInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FString> RelatedLevels; // 0x0
        struct TArray<struct FString> RelatedActorNames; // 0x10
        struct TArray<struct FHLODGridComponentInfo> RelatedComponents; // 0x20

    };

    struct FHLODGridComponentInfo //ScriptStruct Engine.HLODGridComponentInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FTransform> RelatedTransforms; // 0x0
        struct TArray<struct FString> ComponentNames; // 0x10

    };

    struct FComponentSync //ScriptStruct Engine.ComponentSync
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Name; // 0x0
        enum class ESyncOption SyncOption; // 0x8

    };

    struct FLODMappingData //ScriptStruct Engine.LODMappingData
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<int32_t> Mapping; // 0x0
        struct TArray<int32_t> InverseMapping; // 0x10

    };

    struct FParameterGroupData //ScriptStruct Engine.ParameterGroupData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString GroupName; // 0x0
        int32_t GroupSortPriority; // 0x10

    };

    struct FMaterialSpriteElement //ScriptStruct Engine.MaterialSpriteElement
    {
    //Children Prop Count (Fields): 6
    public:

        class UMaterialInterface* Material; // 0x0
        class UCurveFloat* DistanceToOpacityCurve; // 0x8
        char bSizeIsInScreenSpace; // 0x10
        float BaseSizeX; // 0x14
        float BaseSizeY; // 0x18
        class UCurveFloat* DistanceToSizeCurve; // 0x20

    };

    struct FMaterialCachedExpressionData //ScriptStruct Engine.MaterialCachedExpressionData
    {
    //Children Prop Count (Fields): 11
    public:

        struct FMaterialCachedParameters Parameters; // 0x0
        struct TArray<class UObject*> ReferencedTextures; // 0x1a0
        struct TArray<struct FMaterialFunctionInfo> FunctionInfos; // 0x1b0
        struct TArray<struct FMaterialParameterCollectionInfo> ParameterCollectionInfos; // 0x1c0
        struct TArray<class UMaterialFunctionInterface*> DefaultLayers; // 0x1d0
        struct TArray<class UMaterialFunctionInterface*> DefaultLayerBlends; // 0x1e0
        struct TArray<class ULandscapeGrassType*> GrassTypes; // 0x1f0
        struct TArray<struct FName> DynamicParameterNames; // 0x200
        struct TArray<bool> QualityLevelsUsed; // 0x210
        char bHasRuntimeVirtualTextureOutput; // 0x220
        char bHasSceneColor; // 0x220

    };

    struct FMaterialParameterCollectionInfo //ScriptStruct Engine.MaterialParameterCollectionInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FGuid StateId; // 0x0
        class UMaterialParameterCollection* ParameterCollection; // 0x10

    };

    struct FMaterialFunctionInfo //ScriptStruct Engine.MaterialFunctionInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FGuid StateId; // 0x0
        class UMaterialFunctionInterface* Function; // 0x10

    };

    struct FMaterialCachedParameters //ScriptStruct Engine.MaterialCachedParameters
    {
    //Children Prop Count (Fields): 7
    public:

        struct FMaterialCachedParameterEntry RuntimeEntries; // 0x0
        struct TArray<float> ScalarValues; // 0x140
        struct TArray<struct FLinearColor> VectorValues; // 0x150
        struct TArray<class UTexture*> TextureValues; // 0x160
        struct TArray<class UFont*> FontValues; // 0x170
        struct TArray<int32_t> FontPageValues; // 0x180
        struct TArray<class URuntimeVirtualTexture*> RuntimeVirtualTextureValues; // 0x190

    };

    struct FMaterialCachedParameterEntry //ScriptStruct Engine.MaterialCachedParameterEntry
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<uint64_t> NameHashes; // 0x0
        struct TArray<struct FMaterialParameterInfo> ParameterInfos; // 0x10
        struct TArray<struct FGuid> ExpressionGuids; // 0x20
        struct TArray<bool> Overrides; // 0x30

    };

    struct FMaterialParameterInfo //ScriptStruct Engine.MaterialParameterInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Name; // 0x0
        enum class EMaterialParameterAssociation Association; // 0x8
        int32_t Index; // 0xc

    };

    struct FStaticComponentMaskValue //ScriptStruct Engine.StaticComponentMaskValue
    {
    //Children Prop Count (Fields): 4
    public:

        bool R; // 0x0
        bool G; // 0x1
        bool B; // 0x2
        bool A; // 0x3

    };

    struct FParameterChannelNames //ScriptStruct Engine.ParameterChannelNames
    {
    //Children Prop Count (Fields): 4
    public:

        struct FText R; // 0x0
        struct FText G; // 0x18
        struct FText B; // 0x30
        struct FText A; // 0x48

    };

    struct FCustomDefine //ScriptStruct Engine.CustomDefine
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString DefineName; // 0x0
        struct FString DefineValue; // 0x10

    };

    struct FCustomOutput //ScriptStruct Engine.CustomOutput
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName OutputName; // 0x0
        enum class ECustomMaterialOutputType OutputType; // 0x8

    };

    struct FCustomInput //ScriptStruct Engine.CustomInput
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName InputName; // 0x0
        struct FExpressionInput Input; // 0x8

    };

    struct FFunctionExpressionOutput //ScriptStruct Engine.FunctionExpressionOutput
    {
    //Children Prop Count (Fields): 3
    public:

        class UMaterialExpressionFunctionOutput* ExpressionOutput; // 0x0
        struct FGuid ExpressionOutputId; // 0x8
        struct FExpressionOutput Output; // 0x18

    };

    struct FFunctionExpressionInput //ScriptStruct Engine.FunctionExpressionInput
    {
    //Children Prop Count (Fields): 3
    public:

        class UMaterialExpressionFunctionInput* ExpressionInput; // 0x0
        struct FGuid ExpressionInputId; // 0x8
        struct FExpressionInput Input; // 0x18

    };

    struct FFontParameterValue //ScriptStruct Engine.FontParameterValue
    {
    //Children Prop Count (Fields): 4
    public:

        struct FMaterialParameterInfo ParameterInfo; // 0x0
        class UFont* FontValue; // 0x10
        int32_t FontPage; // 0x18
        struct FGuid ExpressionGUID; // 0x1c

    };

    struct FRuntimeVirtualTextureParameterValue //ScriptStruct Engine.RuntimeVirtualTextureParameterValue
    {
    //Children Prop Count (Fields): 3
    public:

        struct FMaterialParameterInfo ParameterInfo; // 0x0
        class URuntimeVirtualTexture* ParameterValue; // 0x10
        struct FGuid ExpressionGUID; // 0x18

    };

    struct FTextureParameterValue //ScriptStruct Engine.TextureParameterValue
    {
    //Children Prop Count (Fields): 3
    public:

        struct FMaterialParameterInfo ParameterInfo; // 0x0
        class UTexture* ParameterValue; // 0x10
        struct FGuid ExpressionGUID; // 0x18

    };

    struct FVectorParameterValue //ScriptStruct Engine.VectorParameterValue
    {
    //Children Prop Count (Fields): 3
    public:

        struct FMaterialParameterInfo ParameterInfo; // 0x0
        struct FLinearColor ParameterValue; // 0x10
        struct FGuid ExpressionGUID; // 0x20

    };

    struct FScalarParameterValue //ScriptStruct Engine.ScalarParameterValue
    {
    //Children Prop Count (Fields): 3
    public:

        struct FMaterialParameterInfo ParameterInfo; // 0x0
        float ParameterValue; // 0x10
        struct FGuid ExpressionGUID; // 0x14

    };

    struct FScalarParameterAtlasInstanceData //ScriptStruct Engine.ScalarParameterAtlasInstanceData
    {
    //Children Prop Count (Fields): 3
    public:

        bool bIsUsedAsAtlasPosition; // 0x0
        struct TSoftObjectPtr<UCurveLinearColor> Curve; // 0x8
        struct TSoftObjectPtr<UCurveLinearColorAtlas> Atlas; // 0x30

    };

    struct FMaterialInstanceBasePropertyOverrides //ScriptStruct Engine.MaterialInstanceBasePropertyOverrides
    {
    //Children Prop Count (Fields): 32
    public:

        char bOverride_OpacityMaskClipValue; // 0x0
        char bOverride_ShadowBiasScale; // 0x0
        char bOverride_ShadowSlopeBiasScale; // 0x0
        char bOverride_ScreenSpaceVariance; // 0x0
        char bOverride_Threshold; // 0x0
        char bOverride_TranslucencySortPriorityOffset; // 0x0
        char bOverride_MaterialStencilTypeForMpe; // 0x0
        char bOverride_RenderInEarlyDepthPass; // 0x0
        char bOverride_MaterialFloatPrecisionMode; // 0x1
        char bOverride_MaterialFloatPrecisionModeVulkanOverride; // 0x1
        char bOverride_ForceDisableDynamicLightShadow; // 0x1
        char bOverride_BlendMode; // 0x1
        char bOverride_ShadingModel; // 0x1
        char bOverride_DitheredLODTransition; // 0x1
        char bOverride_CastDynamicShadowAsMasked; // 0x1
        char bOverride_TwoSided; // 0x1
        char TwoSided; // 0x2
        char DitheredLODTransition; // 0x2
        char bCastDynamicShadowAsMasked; // 0x2
        enum class EBlendMode BlendMode; // 0x3
        enum class EMaterialShadingModel ShadingModel; // 0x4
        float OpacityMaskClipValue; // 0x8
        float ShadowBiasScale; // 0xc
        float ShadowSlopeBiasScale; // 0x10
        float ScreenSpaceVariance; // 0x14
        float threshold; // 0x18
        int16_t TranslucencySortPriorityOffset; // 0x1c
        int16_t MaterialStencilTypeForMpe; // 0x1e
        bool bRenderInEarlyDepthPass; // 0x20
        enum class EMaterialFloatPrecisionMode FloatPrecisionMode; // 0x21
        enum class EMaterialFloatPrecisionModeVulkanOverride FloatPrecisionModeVulkanOverride; // 0x22
        bool bForceDisableDynamicLightShadow; // 0x23

    };

    struct FMaterialTextureInfo //ScriptStruct Engine.MaterialTextureInfo
    {
    //Children Prop Count (Fields): 3
    public:

        float SamplingScale; // 0x0
        int32_t UVChannelIndex; // 0x4
        struct FName TextureName; // 0x8

    };

    struct FLightmassMaterialInterfaceSettings //ScriptStruct Engine.LightmassMaterialInterfaceSettings
    {
    //Children Prop Count (Fields): 9
    public:

        float EmissiveBoost; // 0x0
        float DiffuseBoost; // 0x4
        float ExportResolutionScale; // 0x8
        char bCastShadowAsMasked; // 0xc
        char bOverrideCastShadowAsMasked; // 0xc
        char bOverrideEmissiveBoost; // 0xc
        char bOverrideDiffuseBoost; // 0xc
        char bOverrideExportResolutionScale; // 0xc
        enum class EDawnSpecialMaterial SpecialMode; // 0xd

    };

    struct FMaterialLayersFunctions //ScriptStruct Engine.MaterialLayersFunctions
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<class UMaterialFunctionInterface*> Layers; // 0x0
        struct TArray<class UMaterialFunctionInterface*> Blends; // 0x10
        struct TArray<bool> LayerStates; // 0x20
        struct FString KeyString; // 0x30

    };

    struct FCollectionParameterBase //ScriptStruct Engine.CollectionParameterBase
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName ParameterName; // 0x0
        struct FGuid ID; // 0x8

    };

    struct FCollectionVectorParameter : FCollectionParameterBase //ScriptStruct Engine.CollectionVectorParameter
    {
    //Children Prop Count (Fields): 1
    public:

        struct FLinearColor DefaultValue; // 0x18

    };

    struct FCollectionScalarParameter : FCollectionParameterBase //ScriptStruct Engine.CollectionScalarParameter
    {
    //Children Prop Count (Fields): 1
    public:

        float DefaultValue; // 0x18

    };

    struct FInterpGroupActorInfo //ScriptStruct Engine.InterpGroupActorInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName ObjectName; // 0x0
        struct TArray<class AActor*> Actors; // 0x8

    };

    struct FCameraCutInfo //ScriptStruct Engine.CameraCutInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Location; // 0x0
        float Timestamp; // 0xc

    };

    struct FMemberReference //ScriptStruct Engine.MemberReference
    {
    //Children Prop Count (Fields): 6
    public:

        class UObject* MemberParent; // 0x0
        struct FString MemberScope; // 0x8
        struct FName MemberName; // 0x18
        struct FGuid MemberGuid; // 0x20
        bool bSelfContext; // 0x30
        bool bWasDeprecated; // 0x31

    };

    struct FMeshInstancingSettings //ScriptStruct Engine.MeshInstancingSettings
    {
    //Children Prop Count (Fields): 6
    public:

        class AActor* ActorClassToUse; // 0x0
        int32_t InstanceReplacementThreshold; // 0x8
        enum class EMeshInstancingReplacementMethod MeshReplacementMethod; // 0xc
        bool bSkipMeshesWithVertexColors; // 0xd
        bool bUseHLODVolumes; // 0xe
        class UInstancedStaticMeshComponent* ISMComponentToUse; // 0x10

    };

    struct FMeshMergingSettings //ScriptStruct Engine.MeshMergingSettings
    {
    //Children Prop Count (Fields): 20
    public:

        int32_t TargetLightMapResolution; // 0x0
        enum class EUVOutput OutputUVs; // 0x4
        struct FMaterialProxySettings MaterialSettings; // 0xc
        int32_t GutterSize; // 0x9c
        int32_t SpecificLOD; // 0xa0
        enum class EMeshLODSelectionType LODSelectionType; // 0xa4
        char bGenerateLightMapUV; // 0xa5
        char bComputedLightMapResolution; // 0xa5
        char bPivotPointAtZero; // 0xa5
        char bMergePhysicsData; // 0xa5
        char bMergeMaterials; // 0xa5
        char bCreateMergedMaterial; // 0xa5
        char bBakeVertexDataToMesh; // 0xa5
        char bUseVertexDataForBakingMaterial; // 0xa5
        char bUseTextureBinning; // 0xa6
        char bReuseMeshLightmapUVs; // 0xa6
        char bMergeEquivalentMaterials; // 0xa6
        char bUseLandscapeCulling; // 0xa6
        char bIncludeImposters; // 0xa6
        char bAllowDistanceField; // 0xa6

    };

    struct FMeshProxySettings //ScriptStruct Engine.MeshProxySettings
    {
    //Children Prop Count (Fields): 23
    public:

        int32_t ScreenSize; // 0x0
        float VoxelSize; // 0x4
        struct FMaterialProxySettings MaterialSettings; // 0x8
        float MergeDistance; // 0x98
        struct FColor UnresolvedGeometryColor; // 0x9c
        float MaxRayCastDist; // 0xa0
        float HardAngleThreshold; // 0xa4
        int32_t LightMapResolution; // 0xa8
        enum class EProxyNormalComputationMethod NormalCalculationMethod; // 0xac
        enum class ELandscapeCullingPrecision LandscapeCullingPrecision; // 0xad
        char bCalculateCorrectLODModel; // 0xae
        char bOverrideVoxelSize; // 0xae
        char bOverrideTransferDistance; // 0xae
        char bUseHardAngleThreshold; // 0xae
        char bComputeLightMapResolution; // 0xae
        char bRecalculateNormals; // 0xae
        char bUseLandscapeCulling; // 0xae
        char bAllowAdjacency; // 0xae
        char bAllowDistanceField; // 0xaf
        char bReuseMeshLightmapUVs; // 0xaf
        char bCreateCollision; // 0xaf
        char bAllowVertexColors; // 0xaf
        char bGenerateLightmapUVs; // 0xaf

    };

    struct FMeshReductionSettings //ScriptStruct Engine.MeshReductionSettings
    {
    //Children Prop Count (Fields): 19
    public:

        float PercentTriangles; // 0x0
        float PercentVertices; // 0x4
        float MaxDeviation; // 0x8
        float PixelError; // 0xc
        float WeldingThreshold; // 0x10
        float HardAngleThreshold; // 0x14
        int32_t BaseLODModel; // 0x18
        enum class EMeshFeatureImportance SilhouetteImportance; // 0x1c
        enum class EMeshFeatureImportance TextureImportance; // 0x1d
        enum class EMeshFeatureImportance ShadingImportance; // 0x1e
        char bRecalculateNormals; // 0x1f
        char bGenerateUniqueLightmapUVs; // 0x1f
        char bKeepSymmetry; // 0x1f
        char bVisibilityAided; // 0x1f
        char bCullOccluded; // 0x1f
        enum class EStaticMeshReductionTerimationCriterion TerminationCriterion; // 0x20
        enum class EMeshFeatureImportance VisibilityAggressiveness; // 0x21
        enum class EMeshFeatureImportance VertexColorImportance; // 0x22
        int32_t MaxLOD0Triangles; // 0x24

    };

    struct FPurchaseInfo //ScriptStruct Engine.PurchaseInfo
    {
    //Children Prop Count (Fields): 4
    public:

        struct FString Identifier; // 0x0
        struct FString DisplayName; // 0x10
        struct FString DisplayDescription; // 0x20
        struct FString DisplayPrice; // 0x30

    };

    struct FNameCurve : FIndexedCurve //ScriptStruct Engine.NameCurve
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FNameCurveKey> Keys; // 0x68

    };

    struct FNameCurveKey //ScriptStruct Engine.NameCurveKey
    {
    //Children Prop Count (Fields): 2
    public:

        float Time; // 0x0
        struct FName Value; // 0x4

    };

    struct FNavAvoidanceMask //ScriptStruct Engine.NavAvoidanceMask
    {
    //Children Prop Count (Fields): 32
    public:

        char bGroup0; // 0x0
        char bGroup1; // 0x0
        char bGroup2; // 0x0
        char bGroup3; // 0x0
        char bGroup4; // 0x0
        char bGroup5; // 0x0
        char bGroup6; // 0x0
        char bGroup7; // 0x0
        char bGroup8; // 0x1
        char bGroup9; // 0x1
        char bGroup10; // 0x1
        char bGroup11; // 0x1
        char bGroup12; // 0x1
        char bGroup13; // 0x1
        char bGroup14; // 0x1
        char bGroup15; // 0x1
        char bGroup16; // 0x2
        char bGroup17; // 0x2
        char bGroup18; // 0x2
        char bGroup19; // 0x2
        char bGroup20; // 0x2
        char bGroup21; // 0x2
        char bGroup22; // 0x2
        char bGroup23; // 0x2
        char bGroup24; // 0x3
        char bGroup25; // 0x3
        char bGroup26; // 0x3
        char bGroup27; // 0x3
        char bGroup28; // 0x3
        char bGroup29; // 0x3
        char bGroup30; // 0x3
        char bGroup31; // 0x3

    };

    struct FMovementProperties //ScriptStruct Engine.MovementProperties
    {
    //Children Prop Count (Fields): 5
    public:

        char bCanCrouch; // 0x0
        char bCanJump; // 0x0
        char bCanWalk; // 0x0
        char bCanSwim; // 0x0
        char bCanFly; // 0x0

    };

    struct FNavAgentProperties : FMovementProperties //ScriptStruct Engine.NavAgentProperties
    {
    //Children Prop Count (Fields): 5
    public:

        float AgentRadius; // 0x4
        float AgentHeight; // 0x8
        float AgentStepHeight; // 0xc
        float NavWalkingSearchHeightScale; // 0x10
        struct FSoftClassPath PreferredNavData; // 0x18

    };

    struct FNavDataConfig : FNavAgentProperties //ScriptStruct Engine.NavDataConfig
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName Name; // 0x30
        struct FColor Color; // 0x38
        struct FVector DefaultQueryExtent; // 0x3c
        class AActor* NavigationDataClass; // 0x48
        struct FSoftClassProperty NavDataClass; // 0x50

    };

    struct FNavAgentSelector //ScriptStruct Engine.NavAgentSelector
    {
    //Children Prop Count (Fields): 16
    public:

        char bSupportsAgent0; // 0x0
        char bSupportsAgent1; // 0x0
        char bSupportsAgent2; // 0x0
        char bSupportsAgent3; // 0x0
        char bSupportsAgent4; // 0x0
        char bSupportsAgent5; // 0x0
        char bSupportsAgent6; // 0x0
        char bSupportsAgent7; // 0x0
        char bSupportsAgent8; // 0x1
        char bSupportsAgent9; // 0x1
        char bSupportsAgent10; // 0x1
        char bSupportsAgent11; // 0x1
        char bSupportsAgent12; // 0x1
        char bSupportsAgent13; // 0x1
        char bSupportsAgent14; // 0x1
        char bSupportsAgent15; // 0x1

    };

    struct FNavigationLinkBase //ScriptStruct Engine.NavigationLinkBase
    {
    //Children Prop Count (Fields): 33
    public:

        float LeftProjectHeight; // 0x0
        float MaxFallDownLength; // 0x4
        float SnapRadius; // 0xc
        float SnapHeight; // 0x10
        struct FNavAgentSelector SupportedAgents; // 0x14
        char bSupportsAgent0; // 0x18
        char bSupportsAgent1; // 0x18
        char bSupportsAgent2; // 0x18
        char bSupportsAgent3; // 0x18
        char bSupportsAgent4; // 0x18
        char bSupportsAgent5; // 0x18
        char bSupportsAgent6; // 0x18
        char bSupportsAgent7; // 0x18
        char bSupportsAgent8; // 0x19
        char bSupportsAgent9; // 0x19
        char bSupportsAgent10; // 0x19
        char bSupportsAgent11; // 0x19
        char bSupportsAgent12; // 0x19
        char bSupportsAgent13; // 0x19
        char bSupportsAgent14; // 0x19
        char bSupportsAgent15; // 0x19
        enum class ENavLinkDirection Direction; // 0x1c
        char bUseSnapHeight; // 0x1d
        char bSnapToCheapestArea; // 0x1d
        char bCustomFlag0; // 0x1d
        char bCustomFlag1; // 0x1d
        char bCustomFlag2; // 0x1d
        char bCustomFlag3; // 0x1d
        char bCustomFlag4; // 0x1d
        char bCustomFlag5; // 0x1d
        char bCustomFlag6; // 0x1e
        char bCustomFlag7; // 0x1e
        class UNavAreaBase* AreaClass; // 0x20

    };

    struct FNavigationSegmentLink : FNavigationLinkBase //ScriptStruct Engine.NavigationSegmentLink
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector LeftStart; // 0x30
        struct FVector LeftEnd; // 0x3c
        struct FVector RightStart; // 0x48
        struct FVector RightEnd; // 0x54

    };

    struct FNavigationLink : FNavigationLinkBase //ScriptStruct Engine.NavigationLink
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Left; // 0x30
        struct FVector Right; // 0x3c

    };

    struct FRPCMonitorStruct //ScriptStruct Engine.RPCMonitorStruct
    {
    //Children Prop Count (Fields): 4
    public:

        double BeginTime; // 0x0
        struct TArray<class UObject*> Objs; // 0x8
        int32_t RPCNum; // 0x18
        struct TMap<struct FName, int32_t> RPCMap; // 0x20

    };

    struct FChannelDefinition //ScriptStruct Engine.ChannelDefinition
    {
    //Children Prop Count (Fields): 9
    public:

        struct FName ChannelName; // 0x0
        struct FName ClassName; // 0x8
        class UObject* ChannelClass; // 0x10
        int32_t StaticChannelIndex; // 0x18
        bool bTickOnCreate; // 0x1c
        bool bServerOpen; // 0x1d
        bool bClientOpen; // 0x1e
        bool bInitialServer; // 0x1f
        bool bInitialClient; // 0x20

    };

    struct FPacketSimulationSettings //ScriptStruct Engine.PacketSimulationSettings
    {
    //Children Prop Count (Fields): 13
    public:

        int32_t PktLoss; // 0x0
        int32_t PktLossMaxSize; // 0x4
        int32_t PktLossMinSize; // 0x8
        int32_t PktOrder; // 0xc
        int32_t PktDup; // 0x10
        int32_t PktLag; // 0x14
        int32_t PktLagVariance; // 0x18
        int32_t PktLagMin; // 0x1c
        int32_t PktLagMax; // 0x20
        int32_t PktIncomingLagMin; // 0x24
        int32_t PktIncomingLagMax; // 0x28
        int32_t PktIncomingLoss; // 0x2c
        int32_t PktJitter; // 0x30

    };

    struct FNetTickFinishSpawningInfo //ScriptStruct Engine.NetTickFinishSpawningInfo
    {
    public:


    };

    struct FNetworkObjPoolJIT //ScriptStruct Engine.NetworkObjPoolJIT
    {
    public:


    };

    struct FNetworkObjPool //ScriptStruct Engine.NetworkObjPool
    {
    public:


    };

    struct FNetworkObjPoolManagerTickFunction : FTickFunction //ScriptStruct Engine.NetworkObjPoolManagerTickFunction
    {
    public:


    };

    struct FNetworkEmulationProfileDescription //ScriptStruct Engine.NetworkEmulationProfileDescription
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString ProfileName; // 0x0
        struct FString ToolTip; // 0x10

    };

    struct FNodeItem //ScriptStruct Engine.NodeItem
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName ParentName; // 0x0
        struct FTransform Transform; // 0x10

    };

    struct FParticleBurst //ScriptStruct Engine.ParticleBurst
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t Count; // 0x0
        int32_t CountLow; // 0x4
        float Time; // 0x8

    };

    struct FParticleRandomSeedInfo //ScriptStruct Engine.ParticleRandomSeedInfo
    {
    //Children Prop Count (Fields): 6
    public:

        struct FName ParameterName; // 0x0
        char bGetSeedFromInstance; // 0x8
        char bInstanceSeedIsIndex; // 0x8
        char bResetSeedOnEmitterLooping; // 0x8
        char bRandomlySelectSeedArray; // 0x8
        struct TArray<int32_t> RandomSeeds; // 0x10

    };

    struct FParticleCurvePair //ScriptStruct Engine.ParticleCurvePair
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString CurveName; // 0x0
        class UObject* CurveObject; // 0x10

    };

    struct FBeamModifierOptions //ScriptStruct Engine.BeamModifierOptions
    {
    //Children Prop Count (Fields): 3
    public:

        char bModify; // 0x0
        char bScale; // 0x0
        char bLock; // 0x0

    };

    struct FParticleEvent_GenerateInfo //ScriptStruct Engine.ParticleEvent_GenerateInfo
    {
    //Children Prop Count (Fields): 9
    public:

        enum class EParticleEventType Type; // 0x0
        int32_t Frequency; // 0x4
        int32_t ParticleFrequency; // 0x8
        char FirstTimeOnly; // 0xc
        char LastTimeOnly; // 0xc
        char UseReflectedImpactVector; // 0xc
        char bUseOrbitOffset; // 0xc
        struct FName CustomName; // 0x10
        struct TArray<class UParticleModuleEventSendToGame*> ParticleModuleEventsToSendToGame; // 0x18

    };

    struct FLocationBoneSocketInfo //ScriptStruct Engine.LocationBoneSocketInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName BoneSocketName; // 0x0
        struct FVector Offset; // 0x8

    };

    struct FOrbitOptions //ScriptStruct Engine.OrbitOptions
    {
    //Children Prop Count (Fields): 3
    public:

        char bProcessDuringSpawn; // 0x0
        char bProcessDuringUpdate; // 0x0
        char bUseEmitterTime; // 0x0

    };

    struct FEmitterDynamicParameter //ScriptStruct Engine.EmitterDynamicParameter
    {
    //Children Prop Count (Fields): 6
    public:

        struct FName ParamName; // 0x0
        char bUseEmitterTime; // 0x8
        char bSpawnTimeOnly; // 0x8
        enum class EEmitterDynamicParameterValue ValueMethod; // 0xc
        char bScaleVelocityByParamValue; // 0x10
        struct FRawDistributionFloat ParamValue; // 0x18

    };

    struct FBeamTargetData //ScriptStruct Engine.BeamTargetData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName TargetName; // 0x0
        float TargetPercentage; // 0x8

    };

    struct FGPUSpriteResourceData //ScriptStruct Engine.GPUSpriteResourceData
    {
    //Children Prop Count (Fields): 40
    public:

        struct TArray<struct FColor> QuantizedColorSamples; // 0x0
        struct TArray<struct FColor> QuantizedMiscSamples; // 0x10
        struct TArray<struct FColor> QuantizedSimulationAttrSamples; // 0x20
        struct FVector4 ColorScale; // 0x30
        struct FVector4 ColorBias; // 0x40
        struct FVector4 MiscScale; // 0x50
        struct FVector4 MiscBias; // 0x60
        struct FVector4 SimulationAttrCurveScale; // 0x70
        struct FVector4 SimulationAttrCurveBias; // 0x80
        struct FVector4 SubImageSize; // 0x90
        struct FVector4 SizeBySpeed; // 0xa0
        struct FVector ConstantAcceleration; // 0xb0
        struct FVector OrbitOffsetBase; // 0xbc
        struct FVector OrbitOffsetRange; // 0xc8
        struct FVector OrbitFrequencyBase; // 0xd4
        struct FVector OrbitFrequencyRange; // 0xe0
        struct FVector OrbitPhaseBase; // 0xec
        struct FVector OrbitPhaseRange; // 0xf8
        float GlobalVectorFieldScale; // 0x104
        float GlobalVectorFieldTightness; // 0x108
        float PerParticleVectorFieldScale; // 0x10c
        float PerParticleVectorFieldBias; // 0x110
        float DragCoefficientScale; // 0x114
        float DragCoefficientBias; // 0x118
        float ResilienceScale; // 0x11c
        float ResilienceBias; // 0x120
        float CollisionRadiusScale; // 0x124
        float CollisionRadiusBias; // 0x128
        float CollisionTimeBias; // 0x12c
        float CollisionRandomSpread; // 0x130
        float CollisionRandomDistribution; // 0x134
        float OneMinusFriction; // 0x138
        float RotationRateScale; // 0x13c
        float CameraMotionBlurAmount; // 0x140
        enum class EParticleScreenAlignment ScreenAlignment; // 0x144
        enum class EParticleAxisLock LockAxisFlag; // 0x145
        struct FVector2D PivotOffset; // 0x148
        char bRemoveHMDRoll; // 0x150
        float MinFacingCameraBlendDistance; // 0x154
        float MaxFacingCameraBlendDistance; // 0x158

    };

    struct FGPUSpriteEmitterInfo //ScriptStruct Engine.GPUSpriteEmitterInfo
    {
    //Children Prop Count (Fields): 29
    public:

        class UParticleModuleRequired* RequiredModule; // 0x0
        class UParticleModuleSpawn* SpawnModule; // 0x8
        class UParticleModuleSpawnPerUnit* SpawnPerUnitModule; // 0x10
        struct TArray<class UParticleModule*> SpawnModules; // 0x18
        struct FGPUSpriteLocalVectorFieldInfo LocalVectorField; // 0x30
        struct FFloatDistribution VectorFieldScale; // 0xa0
        struct FFloatDistribution DragCoefficient; // 0xc0
        struct FFloatDistribution PointAttractorStrength; // 0xe0
        struct FFloatDistribution Resilience; // 0x100
        struct FVector ConstantAcceleration; // 0x120
        struct FVector PointAttractorPosition; // 0x12c
        float PointAttractorRadiusSq; // 0x138
        struct FVector OrbitOffsetBase; // 0x13c
        struct FVector OrbitOffsetRange; // 0x148
        struct FVector2D InvMaxSize; // 0x154
        float InvRotationRateScale; // 0x15c
        float MaxLifetime; // 0x160
        int32_t MaxParticleCount; // 0x164
        enum class EParticleScreenAlignment ScreenAlignment; // 0x168
        enum class EParticleAxisLock LockAxisFlag; // 0x169
        char bEnableCollision; // 0x16c
        enum class EParticleCollisionMode CollisionMode; // 0x170
        char bRemoveHMDRoll; // 0x174
        float MinFacingCameraBlendDistance; // 0x178
        float MaxFacingCameraBlendDistance; // 0x17c
        struct FRawDistributionVector DynamicColor; // 0x180
        struct FRawDistributionFloat DynamicAlpha; // 0x1c8
        struct FRawDistributionVector DynamicColorScale; // 0x1f8
        struct FRawDistributionFloat DynamicAlphaScale; // 0x240

    };

    struct FGPUSpriteLocalVectorFieldInfo //ScriptStruct Engine.GPUSpriteLocalVectorFieldInfo
    {
    //Children Prop Count (Fields): 12
    public:

        class UVectorField* Field; // 0x0
        struct FTransform Transform; // 0x10
        struct FRotator MinInitialRotation; // 0x40
        struct FRotator MaxInitialRotation; // 0x4c
        struct FRotator RotationRate; // 0x58
        float Intensity; // 0x64
        float Tightness; // 0x68
        char bIgnoreComponentTransform; // 0x6c
        char bTileX; // 0x6c
        char bTileY; // 0x6c
        char bTileZ; // 0x6c
        char bUseFixDT; // 0x6c

    };

    struct FNamedEmitterMaterial //ScriptStruct Engine.NamedEmitterMaterial
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Name; // 0x0
        class UMaterialInterface* Material; // 0x8

    };

    struct FLODSoloTrack //ScriptStruct Engine.LODSoloTrack
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<char> SoloEnableSetting; // 0x0

    };

    struct FParticleSystemLOD //ScriptStruct Engine.ParticleSystemLOD
    {
    public:


    };

    struct FParticleSystemWorldManagerTickFunction : FTickFunction //ScriptStruct Engine.ParticleSystemWorldManagerTickFunction
    {
    public:


    };

    struct FParticleSystemReplayFrame //ScriptStruct Engine.ParticleSystemReplayFrame
    {
    public:


    };

    struct FParticleEmitterReplayFrame //ScriptStruct Engine.ParticleEmitterReplayFrame
    {
    public:


    };

    struct FPerPlatformBool //ScriptStruct Engine.PerPlatformBool
    {
    //Children Prop Count (Fields): 1
    public:

        bool Default; // 0x0

    };

    struct FFreezablePerPlatformInt //ScriptStruct Engine.FreezablePerPlatformInt
    {
    public:


    };

    struct FPhysicalAnimationData //ScriptStruct Engine.PhysicalAnimationData
    {
    //Children Prop Count (Fields): 8
    public:

        struct FName BodyName; // 0x0
        char bIsLocalSimulation; // 0x8
        float OrientationStrength; // 0xc
        float AngularVelocityStrength; // 0x10
        float PositionStrength; // 0x14
        float VelocityStrength; // 0x18
        float MaxLinearForce; // 0x1c
        float MaxAngularForce; // 0x20

    };

    struct FPhysicalAnimationProfile //ScriptStruct Engine.PhysicalAnimationProfile
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName ProfileName; // 0x0
        struct FPhysicalAnimationData PhysicalAnimationData; // 0x8

    };

    struct FSolverIterations //ScriptStruct Engine.SolverIterations
    {
    //Children Prop Count (Fields): 7
    public:

        float FixedTimeStep; // 0x0
        int32_t SolverIterations; // 0x4
        int32_t JointIterations; // 0x8
        int32_t CollisionIterations; // 0xc
        int32_t SolverPushOutIterations; // 0x10
        int32_t JointPushOutIterations; // 0x14
        int32_t CollisionPushOutIterations; // 0x18

    };

    struct FPhysicsConstraintProfileHandle //ScriptStruct Engine.PhysicsConstraintProfileHandle
    {
    //Children Prop Count (Fields): 2
    public:

        struct FConstraintProfileProperties ProfileProperties; // 0x0
        struct FName ProfileName; // 0x10c

    };

    struct FChaosPhysicsSettings //ScriptStruct Engine.ChaosPhysicsSettings
    {
    //Children Prop Count (Fields): 3
    public:

        enum class EChaosThreadingMode DefaultThreadingModel; // 0x0
        enum class EChaosSolverTickMode DedicatedThreadTickMode; // 0x1
        enum class EChaosBufferMode DedicatedThreadBufferMode; // 0x2

    };

    struct FPhysicalSurfaceName //ScriptStruct Engine.PhysicalSurfaceName
    {
    //Children Prop Count (Fields): 2
    public:

        enum class EPhysicalSurface Type; // 0x0
        struct FName Name; // 0x4

    };

    struct FDelegateArray //ScriptStruct Engine.DelegateArray
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FDelegate> Delegates; // 0x0

    };

    struct FTViewTarget //ScriptStruct Engine.TViewTarget
    {
    //Children Prop Count (Fields): 3
    public:

        class AActor* Target; // 0x0
        struct FMinimalViewInfo POV; // 0x10
        class APlayerState* PlayerState; // 0x690

    };

    struct FCameraCacheEntry //ScriptStruct Engine.CameraCacheEntry
    {
    //Children Prop Count (Fields): 2
    public:

        float Timestamp; // 0x0
        struct FMinimalViewInfo POV; // 0x10

    };

    struct FInputActionSpeechMapping //ScriptStruct Engine.InputActionSpeechMapping
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName ActionName; // 0x0
        struct FName SpeechKeyword; // 0x8

    };

    struct FInputAxisKeyMapping //ScriptStruct Engine.InputAxisKeyMapping
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName AxisName; // 0x0
        float Scale; // 0x8
        struct FKey Key; // 0x10

    };

    struct FInputActionKeyMapping //ScriptStruct Engine.InputActionKeyMapping
    {
    //Children Prop Count (Fields): 6
    public:

        struct FName ActionName; // 0x0
        char bShift; // 0x8
        char bCtrl; // 0x8
        char bAlt; // 0x8
        char bCmd; // 0x8
        struct FKey Key; // 0x10

    };

    struct FInputAxisConfigEntry //ScriptStruct Engine.InputAxisConfigEntry
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName AxisKeyName; // 0x0
        struct FInputAxisProperties AxisProperties; // 0x8

    };

    struct FInputAxisProperties //ScriptStruct Engine.InputAxisProperties
    {
    //Children Prop Count (Fields): 4
    public:

        float DeadZone; // 0x0
        float Sensitivity; // 0x4
        float Exponent; // 0x8
        char bInvert; // 0xc

    };

    struct FKeyBind //ScriptStruct Engine.KeyBind
    {
    //Children Prop Count (Fields): 11
    public:

        struct FKey Key; // 0x0
        struct FString Command; // 0x18
        char Control; // 0x28
        char Shift; // 0x28
        char Alt; // 0x28
        char Cmd; // 0x28
        char bIgnoreCtrl; // 0x28
        char bIgnoreShift; // 0x28
        char bIgnoreAlt; // 0x28
        char bIgnoreCmd; // 0x28
        char bDisabled; // 0x29

    };

    struct FPlayerMuteList //ScriptStruct Engine.PlayerMuteList
    {
    //Children Prop Count (Fields): 2
    public:

        bool bHasVoiceHandshakeCompleted; // 0x30
        int32_t VoiceChannelIdx; // 0x34

    };

    struct FPoseDataContainer //ScriptStruct Engine.PoseDataContainer
    {
    //Children Prop Count (Fields): 5
    public:

        struct TArray<struct FSmartName> PoseNames; // 0x0
        struct TArray<struct FName> Tracks; // 0x10
        struct TMap<struct FName, int32_t> TrackMap; // 0x20
        struct TArray<struct FPoseData> Poses; // 0x70
        struct TArray<struct FAnimCurveBase> Curves; // 0x80

    };

    struct FPoseData //ScriptStruct Engine.PoseData
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FTransform> LocalSpacePose; // 0x0
        struct TMap<int32_t, int32_t> TrackToBufferIndex; // 0x10
        struct TArray<float> CurveData; // 0x60

    };

    struct FPreviewAssetAttachContainer //ScriptStruct Engine.PreviewAssetAttachContainer
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FPreviewAttachedObjectPair> AttachedObjects; // 0x0

    };

    struct FPreviewAttachedObjectPair //ScriptStruct Engine.PreviewAttachedObjectPair
    {
    //Children Prop Count (Fields): 3
    public:

        struct TSoftObjectPtr<UObject> AttachedObject; // 0x0
        class UObject* Object; // 0x28
        struct FName AttachedTo; // 0x30

    };

    struct FPreviewMeshCollectionEntry //ScriptStruct Engine.PreviewMeshCollectionEntry
    {
    //Children Prop Count (Fields): 1
    public:

        struct TSoftObjectPtr<USkeletalMesh> SkeletalMesh; // 0x0

    };

    struct FPrimitiveComponentInstanceData : FSceneComponentInstanceData //ScriptStruct Engine.PrimitiveComponentInstanceData
    {
    //Children Prop Count (Fields): 3
    public:

        struct FTransform ComponentTransform; // 0xc0
        int32_t VisibilityId; // 0xf0
        class UPrimitiveComponent* LODParent; // 0xf8

    };

    struct FSpriteCategoryInfo //ScriptStruct Engine.SpriteCategoryInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Category; // 0x0
        struct FText DisplayName; // 0x8
        struct FText Description; // 0x20

    };

    struct FQuartzClockSettings //ScriptStruct Engine.QuartzClockSettings
    {
    //Children Prop Count (Fields): 2
    public:

        struct FQuartzTimeSignature TimeSignature; // 0x0
        bool bIgnoreLevelChange; // 0x18

    };

    struct FQuartzTimeSignature //ScriptStruct Engine.QuartzTimeSignature
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t NumBeats; // 0x0
        enum class EQuartzTimeSignatureQuantization BeatType; // 0x4
        struct TArray<struct FQuartzPulseOverrideStep> OptionalPulseOverride; // 0x8

    };

    struct FQuartzPulseOverrideStep //ScriptStruct Engine.QuartzPulseOverrideStep
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t NumberOfPulses; // 0x0
        enum class EQuartzCommandQuantization PulseDuration; // 0x4

    };

    struct FQuartzQuantizationBoundary //ScriptStruct Engine.QuartzQuantizationBoundary
    {
    //Children Prop Count (Fields): 3
    public:

        enum class EQuartzCommandQuantization Quantization; // 0x0
        float Multiplier; // 0x4
        enum class EQuarztQuantizationReference CountingReferencePoint; // 0x8

    };

    struct FQuartzTransportTimeStamp //ScriptStruct Engine.QuartzTransportTimeStamp
    {
    public:


    };

    struct FLevelNameAndTime //ScriptStruct Engine.LevelNameAndTime
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString LevelName; // 0x0
        uint32_t LevelChangeTimeInMS; // 0x10

    };

    struct FReverbSettings //ScriptStruct Engine.ReverbSettings
    {
    //Children Prop Count (Fields): 5
    public:

        bool bApplyReverb; // 0x0
        class UReverbEffect* ReverbEffect; // 0x8
        class USoundEffectSubmixPreset* ReverbPluginEffect; // 0x10
        float Volume; // 0x18
        float FadeTime; // 0x1c

    };

    struct FCompressedRichCurve //ScriptStruct Engine.CompressedRichCurve
    {
    public:


    };

    struct FTransformBase //ScriptStruct Engine.TransformBase
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Node; // 0x0
        struct FTransformBaseConstraint Constraints; // 0x8

    };

    struct FTransformBaseConstraint //ScriptStruct Engine.TransformBaseConstraint
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FRigTransformConstraint> TransformConstraints; // 0x0

    };

    struct FRigTransformConstraint //ScriptStruct Engine.RigTransformConstraint
    {
    //Children Prop Count (Fields): 3
    public:

        enum class EConstraintTransform TranformType; // 0x0
        struct FName ParentSpace; // 0x4
        float Weight; // 0xc

    };

    struct FNode //ScriptStruct Engine.Node
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName Name; // 0x0
        struct FName ParentName; // 0x8
        struct FTransform Transform; // 0x10
        struct FString DisplayName; // 0x40
        bool bAdvanced; // 0x50

    };

    struct FRootMotionSource //ScriptStruct Engine.RootMotionSource
    {
    //Children Prop Count (Fields): 13
    public:

        uint16_t Priority; // 0x10
        uint16_t LocalID; // 0x12
        enum class ERootMotionAccumulateMode AccumulateMode; // 0x14
        struct FName InstanceName; // 0x18
        float StartTime; // 0x20
        float CurrentTime; // 0x24
        float PreviousTime; // 0x28
        float Duration; // 0x2c
        struct FRootMotionSourceStatus status; // 0x30
        struct FRootMotionSourceSettings Settings; // 0x31
        bool bInLocalSpace; // 0x32
        struct FRootMotionMovementParams RootMotionParams; // 0x40
        struct FRootMotionFinishVelocitySettings FinishVelocityParams; // 0x80

    };

    struct FRootMotionFinishVelocitySettings //ScriptStruct Engine.RootMotionFinishVelocitySettings
    {
    //Children Prop Count (Fields): 3
    public:

        enum class ERootMotionFinishVelocityMode Mode; // 0x0
        struct FVector SetVelocity; // 0x4
        float ClampVelocity; // 0x10

    };

    struct FRootMotionSourceStatus //ScriptStruct Engine.RootMotionSourceStatus
    {
    //Children Prop Count (Fields): 1
    public:

        char Flags; // 0x0

    };

    struct FRootMotionSource_JumpForce : FRootMotionSource //ScriptStruct Engine.RootMotionSource_JumpForce
    {
    //Children Prop Count (Fields): 6
    public:

        struct FRotator Rotation; // 0x98
        float Distance; // 0xa4
        float Height; // 0xa8
        bool bDisableTimeout; // 0xac
        class UCurveVector* PathOffsetCurve; // 0xb0
        class UCurveFloat* TimeMappingCurve; // 0xb8

    };

    struct FRootMotionSource_MoveToDynamicForce : FRootMotionSource //ScriptStruct Engine.RootMotionSource_MoveToDynamicForce
    {
    //Children Prop Count (Fields): 6
    public:

        struct FVector StartLocation; // 0x98
        struct FVector InitialTargetLocation; // 0xa4
        struct FVector TargetLocation; // 0xb0
        bool bRestrictSpeedToExpected; // 0xbc
        class UCurveVector* PathOffsetCurve; // 0xc0
        class UCurveFloat* TimeMappingCurve; // 0xc8

    };

    struct FRootMotionSource_MoveToForce : FRootMotionSource //ScriptStruct Engine.RootMotionSource_MoveToForce
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector StartLocation; // 0x98
        struct FVector TargetLocation; // 0xa4
        bool bRestrictSpeedToExpected; // 0xb0
        class UCurveVector* PathOffsetCurve; // 0xb8

    };

    struct FRootMotionSource_RadialForce : FRootMotionSource //ScriptStruct Engine.RootMotionSource_RadialForce
    {
    //Children Prop Count (Fields): 10
    public:

        struct FVector Location; // 0x98
        class AActor* LocationActor; // 0xa8
        float Radius; // 0xb0
        float Strength; // 0xb4
        bool bIsPush; // 0xb8
        bool bNoZForce; // 0xb9
        class UCurveFloat* StrengthDistanceFalloff; // 0xc0
        class UCurveFloat* StrengthOverTime; // 0xc8
        bool bUseFixedWorldDirection; // 0xd0
        struct FRotator FixedWorldDirection; // 0xd4

    };

    struct FRootMotionSource_ConstantForce : FRootMotionSource //ScriptStruct Engine.RootMotionSource_ConstantForce
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Force; // 0x98
        class UCurveFloat* StrengthOverTime; // 0xa8

    };

    struct FSceneSOCSettings //ScriptStruct Engine.SceneSOCSettings
    {
    //Children Prop Count (Fields): 2
    public:

        bool bUseLandscapeAsOccluder; // 0x0
        bool bUseMeshAsOccluder; // 0x1

    };

    struct FCameraExposureSettings //ScriptStruct Engine.CameraExposureSettings
    {
    //Children Prop Count (Fields): 14
    public:

        enum class EAutoExposureMethod Method; // 0x0
        float LowPercent; // 0x4
        float HighPercent; // 0x8
        float MinBrightness; // 0xc
        float MaxBrightness; // 0x10
        float SpeedUp; // 0x14
        float SpeedDown; // 0x18
        float Bias; // 0x1c
        class UCurveFloat* BiasCurve; // 0x20
        class UTexture* MeterMask; // 0x28
        float HistogramLogMin; // 0x30
        float HistogramLogMax; // 0x34
        float CalibrationConstant; // 0x38
        char ApplyPhysicalCameraExposure; // 0x3c

    };

    struct FLensSettings //ScriptStruct Engine.LensSettings
    {
    //Children Prop Count (Fields): 3
    public:

        struct FLensBloomSettings Bloom; // 0x0
        struct FLensImperfectionSettings Imperfections; // 0xb8
        float ChromaticAberration; // 0xd8

    };

    struct FLensImperfectionSettings //ScriptStruct Engine.LensImperfectionSettings
    {
    //Children Prop Count (Fields): 3
    public:

        class UTexture* DirtMask; // 0x0
        float DirtMaskIntensity; // 0x8
        struct FLinearColor DirtMaskTint; // 0xc

    };

    struct FLensBloomSettings //ScriptStruct Engine.LensBloomSettings
    {
    //Children Prop Count (Fields): 3
    public:

        struct FGaussianSumBloomSettings GaussianSum; // 0x0
        struct FConvolutionBloomSettings Convolution; // 0x88
        enum class EBloomMethod Method; // 0xb0

    };

    struct FConvolutionBloomSettings //ScriptStruct Engine.ConvolutionBloomSettings
    {
    //Children Prop Count (Fields): 7
    public:

        class UTexture2D* Texture; // 0x0
        float Size; // 0x8
        struct FVector2D CenterUV; // 0xc
        float PreFilterMin; // 0x14
        float PreFilterMax; // 0x18
        float PreFilterMult; // 0x1c
        float BufferScale; // 0x20

    };

    struct FGaussianSumBloomSettings //ScriptStruct Engine.GaussianSumBloomSettings
    {
    //Children Prop Count (Fields): 15
    public:

        float Intensity; // 0x0
        float threshold; // 0x4
        float SizeScale; // 0x8
        float Filter1Size; // 0xc
        float Filter2Size; // 0x10
        float Filter3Size; // 0x14
        float Filter4Size; // 0x18
        float Filter5Size; // 0x1c
        float Filter6Size; // 0x20
        struct FLinearColor Filter1Tint; // 0x24
        struct FLinearColor Filter2Tint; // 0x34
        struct FLinearColor Filter3Tint; // 0x44
        struct FLinearColor Filter4Tint; // 0x54
        struct FLinearColor Filter5Tint; // 0x64
        struct FLinearColor Filter6Tint; // 0x74

    };

    struct FFilmStockSettings //ScriptStruct Engine.FilmStockSettings
    {
    //Children Prop Count (Fields): 5
    public:

        float Slope; // 0x0
        float Toe; // 0x4
        float Shoulder; // 0x8
        float BlackClip; // 0xc
        float WhiteClip; // 0x10

    };

    struct FColorGradingSettings //ScriptStruct Engine.ColorGradingSettings
    {
    //Children Prop Count (Fields): 6
    public:

        struct FColorGradePerRangeSettings Global; // 0x0
        struct FColorGradePerRangeSettings Shadows; // 0x60
        struct FColorGradePerRangeSettings Midtones; // 0xc0
        struct FColorGradePerRangeSettings Highlights; // 0x120
        float ShadowsMax; // 0x180
        float HighlightsMin; // 0x184

    };

    struct FColorGradePerRangeSettings //ScriptStruct Engine.ColorGradePerRangeSettings
    {
    //Children Prop Count (Fields): 6
    public:

        struct FVector4 Saturation; // 0x0
        struct FVector4 Contrast; // 0x10
        struct FVector4 Gamma; // 0x20
        struct FVector4 Gain; // 0x30
        struct FVector4 Offset; // 0x40
        float Vibrance; // 0x50

    };

    struct FEngineShowFlagsSetting //ScriptStruct Engine.EngineShowFlagsSetting
    {
    //Children Prop Count (Fields): 2
    public:

        struct FString ShowFlagName; // 0x0
        bool Enabled; // 0x10

    };

    struct FSceneViewExtensionIsActiveFunctor //ScriptStruct Engine.SceneViewExtensionIsActiveFunctor
    {
    public:


    };

    struct FSingleAnimationPlayData //ScriptStruct Engine.SingleAnimationPlayData
    {
    //Children Prop Count (Fields): 5
    public:

        class UAnimationAsset* AnimToPlay; // 0x0
        char bSavedLooping; // 0x8
        char bSavedPlaying; // 0x8
        float SavedPosition; // 0xc
        float SavedPlayRate; // 0x10

    };

    struct FSkeletalMaterial //ScriptStruct Engine.SkeletalMaterial
    {
    //Children Prop Count (Fields): 3
    public:

        class UMaterialInterface* MaterialInterface; // 0x0
        struct FName MaterialSlotName; // 0x8
        struct FMeshUVChannelInfo UVChannelData; // 0x10

    };

    struct FClothingAssetData_Legacy //ScriptStruct Engine.ClothingAssetData_Legacy
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName AssetName; // 0x0
        struct FString ApexFileName; // 0x8
        bool bClothPropertiesChanged; // 0x18
        struct FClothPhysicsProperties_Legacy PhysicsProperties; // 0x1c

    };

    struct FClothPhysicsProperties_Legacy //ScriptStruct Engine.ClothPhysicsProperties_Legacy
    {
    //Children Prop Count (Fields): 20
    public:

        float VerticalResistance; // 0x0
        float HorizontalResistance; // 0x4
        float BendResistance; // 0x8
        float ShearResistance; // 0xc
        float Friction; // 0x10
        float Damping; // 0x14
        float TetherStiffness; // 0x18
        float TetherLimit; // 0x1c
        float Drag; // 0x20
        float StiffnessFrequency; // 0x24
        float GravityScale; // 0x28
        float MassScale; // 0x2c
        float InertiaBlend; // 0x30
        float SelfCollisionThickness; // 0x34
        float SelfCollisionSquashScale; // 0x38
        float SelfCollisionStiffness; // 0x3c
        float SolverFrequency; // 0x40
        float FiberCompression; // 0x44
        float FiberExpansion; // 0x48
        float FiberResistance; // 0x4c

    };

    struct FSkeletalMeshLODInfo //ScriptStruct Engine.SkeletalMeshLODInfo
    {
    //Children Prop Count (Fields): 16
    public:

        struct FPerPlatformFloat ScreenSize; // 0x0
        float LODHysteresis; // 0x4
        struct TArray<int32_t> LODMaterialMap; // 0x8
        struct FSkeletalMeshBuildSettings BuildSettings; // 0x18
        struct FSkeletalMeshOptimizationSettings ReductionSettings; // 0x2c
        struct TArray<struct FBoneReference> BonesToRemove; // 0x68
        struct TArray<struct FBoneReference> BonesToPrioritize; // 0x78
        float WeightOfPrioritization; // 0x88
        class UAnimSequence* BakePose; // 0x90
        class UAnimSequence* BakePoseOverride; // 0x98
        struct FString SourceImportFilename; // 0xa0
        enum class ESkinCacheUsage SkinCacheUsage; // 0xb0
        char bHasBeenSimplified; // 0xb1
        char bHasPerLODVertexColors; // 0xb1
        char bAllowCPUAccess; // 0xb1
        char bSupportUniformlyDistributedSampling; // 0xb1

    };

    struct FSkeletalMeshOptimizationSettings //ScriptStruct Engine.SkeletalMeshOptimizationSettings
    {
    //Children Prop Count (Fields): 21
    public:

        enum class SkeletalMeshTerminationCriterion TerminationCriterion; // 0x0
        float NumOfTrianglesPercentage; // 0x4
        float NumOfVertPercentage; // 0x8
        uint32_t MaxNumOfTriangles; // 0xc
        uint32_t MaxNumOfVerts; // 0x10
        float MaxDeviationPercentage; // 0x14
        enum class SkeletalMeshOptimizationType ReductionMethod; // 0x18
        enum class SkeletalMeshOptimizationImportance SilhouetteImportance; // 0x19
        enum class SkeletalMeshOptimizationImportance TextureImportance; // 0x1a
        enum class SkeletalMeshOptimizationImportance ShadingImportance; // 0x1b
        enum class SkeletalMeshOptimizationImportance SkinningImportance; // 0x1c
        char bRemapMorphTargets; // 0x1d
        char bRecalcNormals; // 0x1d
        float WeldingThreshold; // 0x20
        float NormalsThreshold; // 0x24
        int32_t MaxBonesPerVertex; // 0x28
        char bEnforceBoneBoundaries; // 0x2c
        float VolumeImportance; // 0x30
        char bLockEdges; // 0x34
        char bLockColorBounaries; // 0x34
        int32_t BaseLOD; // 0x38

    };

    struct FSkeletalMeshClothBuildParams //ScriptStruct Engine.SkeletalMeshClothBuildParams
    {
    //Children Prop Count (Fields): 8
    public:

        struct TWeakObjectPtr<struct UClothingAssetBase> TargetAsset; // 0x0
        int32_t TargetLod; // 0x8
        bool bRemapParameters; // 0xc
        struct FString AssetName; // 0x10
        int32_t LODIndex; // 0x20
        int32_t SourceSection; // 0x24
        bool bRemoveFromMesh; // 0x28
        struct TSoftObjectPtr<UPhysicsAsset> PhysicsAsset; // 0x30

    };

    struct FBoneMirrorExport //ScriptStruct Engine.BoneMirrorExport
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName BoneName; // 0x0
        struct FName SourceBoneName; // 0x8
        enum class EAxis BoneFlipAxis; // 0x10

    };

    struct FBoneMirrorInfo //ScriptStruct Engine.BoneMirrorInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t SourceIndex; // 0x0
        enum class EAxis BoneFlipAxis; // 0x4

    };

    struct FSkeletalMeshComponentClothTickFunction : FTickFunction //ScriptStruct Engine.SkeletalMeshComponentClothTickFunction
    {
    public:


    };

    struct FSkeletalMeshComponentEndPhysicsTickFunction : FTickFunction //ScriptStruct Engine.SkeletalMeshComponentEndPhysicsTickFunction
    {
    public:


    };

    struct FSkeletalMeshLODGroupSettings //ScriptStruct Engine.SkeletalMeshLODGroupSettings
    {
    //Children Prop Count (Fields): 8
    public:

        struct FPerPlatformFloat ScreenSize; // 0x0
        float LODHysteresis; // 0x4
        enum class EBoneFilterActionOption BoneFilterActionOption; // 0x8
        struct TArray<struct FBoneFilter> BoneList; // 0x10
        struct TArray<struct FName> BonesToPrioritize; // 0x20
        float WeightOfPrioritization; // 0x30
        class UAnimSequence* BakePose; // 0x38
        struct FSkeletalMeshOptimizationSettings ReductionSettings; // 0x40

    };

    struct FBoneFilter //ScriptStruct Engine.BoneFilter
    {
    //Children Prop Count (Fields): 2
    public:

        bool bExcludeSelf; // 0x0
        struct FName BoneName; // 0x4

    };

    struct FSkeletalMeshSamplingInfo //ScriptStruct Engine.SkeletalMeshSamplingInfo
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FSkeletalMeshSamplingRegion> Regions; // 0x0
        struct FSkeletalMeshSamplingBuiltData BuiltData; // 0x10

    };

    struct FSkeletalMeshSamplingBuiltData //ScriptStruct Engine.SkeletalMeshSamplingBuiltData
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FSkeletalMeshSamplingLODBuiltData> WholeMeshBuiltData; // 0x0
        struct TArray<struct FSkeletalMeshSamplingRegionBuiltData> RegionBuiltData; // 0x10

    };

    struct FSkeletalMeshSamplingRegionBuiltData //ScriptStruct Engine.SkeletalMeshSamplingRegionBuiltData
    {
    public:


    };

    struct FSkeletalMeshSamplingLODBuiltData //ScriptStruct Engine.SkeletalMeshSamplingLODBuiltData
    {
    public:


    };

    struct FSkeletalMeshSamplingRegion //ScriptStruct Engine.SkeletalMeshSamplingRegion
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName Name; // 0x0
        int32_t LODIndex; // 0x8
        char bSupportUniformlyDistributedSampling; // 0xc
        struct TArray<struct FSkeletalMeshSamplingRegionMaterialFilter> MaterialFilters; // 0x10
        struct TArray<struct FSkeletalMeshSamplingRegionBoneFilter> BoneFilters; // 0x20

    };

    struct FSkeletalMeshSamplingRegionBoneFilter //ScriptStruct Engine.SkeletalMeshSamplingRegionBoneFilter
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName BoneName; // 0x0
        char bIncludeOrExclude; // 0x8
        char bApplyToChildren; // 0x8

    };

    struct FSkeletalMeshSamplingRegionMaterialFilter //ScriptStruct Engine.SkeletalMeshSamplingRegionMaterialFilter
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName MaterialName; // 0x0

    };

    struct FVirtualBone //ScriptStruct Engine.VirtualBone
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName SourceBoneName; // 0x0
        struct FName TargetBoneName; // 0x8
        struct FName VirtualBoneName; // 0x10

    };

    struct FAnimSlotGroup //ScriptStruct Engine.AnimSlotGroup
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName GroupName; // 0x0
        struct TArray<struct FName> SlotNames; // 0x8

    };

    struct FRigConfiguration //ScriptStruct Engine.RigConfiguration
    {
    //Children Prop Count (Fields): 2
    public:

        class URig* Rig; // 0x0
        struct TArray<struct FNameMapping> BoneMappingTable; // 0x8

    };

    struct FNameMapping //ScriptStruct Engine.NameMapping
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName NodeName; // 0x0
        struct FName BoneName; // 0x8

    };

    struct FBoneReductionSetting //ScriptStruct Engine.BoneReductionSetting
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FName> BonesToRemove; // 0x0

    };

    struct FReferencePose //ScriptStruct Engine.ReferencePose
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName PoseName; // 0x0
        struct TArray<struct FTransform> ReferencePose; // 0x8

    };

    struct FBoneNode //ScriptStruct Engine.BoneNode
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Name; // 0x0
        int32_t ParentIndex; // 0x8
        enum class EBoneTranslationRetargetingMode TranslationRetargetingMode; // 0xc

    };

    struct FSkeletonToMeshLinkup //ScriptStruct Engine.SkeletonToMeshLinkup
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<int32_t> SkeletonToMeshTable; // 0x0
        struct TArray<int32_t> MeshToSkeletonTable; // 0x10

    };

    struct FVertexOffsetUsage //ScriptStruct Engine.VertexOffsetUsage
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t Usage; // 0x0

    };

    struct FSkelMeshComponentLODInfo //ScriptStruct Engine.SkelMeshComponentLODInfo
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<bool> HiddenMaterials; // 0x0

    };

    struct FSkelMeshSkinWeightInfo //ScriptStruct Engine.SkelMeshSkinWeightInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t Bones; // 0x0
        char Weights; // 0x30

    };

    struct FSkinWeightProfileInfo //ScriptStruct Engine.SkinWeightProfileInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName Name; // 0x0
        struct FPerPlatformBool DefaultProfile; // 0x8
        struct FPerPlatformInt DefaultProfileFromLODIndex; // 0xc

    };

    struct FSkinWeightProfileManagerTickFunction : FTickFunction //ScriptStruct Engine.SkinWeightProfileManagerTickFunction
    {
    public:


    };

    struct FTentDistribution //ScriptStruct Engine.TentDistribution
    {
    //Children Prop Count (Fields): 3
    public:

        float TipAltitude; // 0x0
        float TipValue; // 0x4
        float Width; // 0x8

    };

    struct FPrecomputedSkyLightInstanceData : FSceneComponentInstanceData //ScriptStruct Engine.PrecomputedSkyLightInstanceData
    {
    //Children Prop Count (Fields): 2
    public:

        struct FGuid LightGuid; // 0xb8
        float AverageBrightness; // 0xc8

    };

    struct FSmartNameContainer //ScriptStruct Engine.SmartNameContainer
    {
    public:


    };

    struct FSmartNameMapping //ScriptStruct Engine.SmartNameMapping
    {
    public:


    };

    struct FCurveMetaData //ScriptStruct Engine.CurveMetaData
    {
    public:


    };

    struct FSoundAttenuationSettings : FBaseAttenuationSettings //ScriptStruct Engine.SoundAttenuationSettings
    {
    //Children Prop Count (Fields): 55
    public:

        char bAttenuate; // 0xb0
        char bSpatialize; // 0xb0
        char bAttenuateWithLPF; // 0xb0
        char bEnableListenerFocus; // 0xb0
        char bEnableFocusInterpolation; // 0xb0
        char bEnableOcclusion; // 0xb0
        char bUseComplexCollisionForOcclusion; // 0xb0
        char bEnableReverbSend; // 0xb0
        char bEnablePriorityAttenuation; // 0xb1
        char bApplyNormalizationToStereoSounds; // 0xb1
        char bEnableLogFrequencyScaling; // 0xb1
        char bEnableSubmixSends; // 0xb1
        enum class ESoundSpatializationAlgorithm SpatializationAlgorithm; // 0xb2
        float BinauralRadius; // 0xb4
        enum class EAirAbsorptionMethod AbsorptionMethod; // 0xb8
        enum class ECollisionChannel OcclusionTraceChannel; // 0xb9
        enum class EReverbSendMethod ReverbSendMethod; // 0xba
        enum class EPriorityAttenuationMethod PriorityAttenuationMethod; // 0xbb
        float OmniRadius; // 0xbc
        float StereoSpread; // 0xc0
        float LPFRadiusMin; // 0xc4
        float LPFRadiusMax; // 0xc8
        struct FRuntimeFloatCurve CustomLowpassAirAbsorptionCurve; // 0xd0
        struct FRuntimeFloatCurve CustomHighpassAirAbsorptionCurve; // 0x158
        float LPFFrequencyAtMin; // 0x1e0
        float LPFFrequencyAtMax; // 0x1e4
        float HPFFrequencyAtMin; // 0x1e8
        float HPFFrequencyAtMax; // 0x1ec
        float FocusAzimuth; // 0x1f0
        float NonFocusAzimuth; // 0x1f4
        float FocusDistanceScale; // 0x1f8
        float NonFocusDistanceScale; // 0x1fc
        float FocusPriorityScale; // 0x200
        float NonFocusPriorityScale; // 0x204
        float FocusVolumeAttenuation; // 0x208
        float NonFocusVolumeAttenuation; // 0x20c
        float FocusAttackInterpSpeed; // 0x210
        float FocusReleaseInterpSpeed; // 0x214
        float OcclusionLowPassFilterFrequency; // 0x218
        float OcclusionVolumeAttenuation; // 0x21c
        float OcclusionInterpolationTime; // 0x220
        float ReverbWetLevelMin; // 0x224
        float ReverbWetLevelMax; // 0x228
        float ReverbDistanceMin; // 0x22c
        float ReverbDistanceMax; // 0x230
        float ManualReverbSendLevel; // 0x234
        struct FRuntimeFloatCurve CustomReverbSendCurve; // 0x238
        struct TArray<struct FAttenuationSubmixSendSettings> SubmixSendSettings; // 0x2c0
        float PriorityAttenuationMin; // 0x2d0
        float PriorityAttenuationMax; // 0x2d4
        float PriorityAttenuationDistanceMin; // 0x2d8
        float PriorityAttenuationDistanceMax; // 0x2dc
        float ManualPriorityAttenuation; // 0x2e0
        struct FRuntimeFloatCurve CustomPriorityAttenuationCurve; // 0x2e8
        struct FSoundAttenuationPluginSettings PluginSettings; // 0x370

    };

    struct FSoundAttenuationPluginSettings //ScriptStruct Engine.SoundAttenuationPluginSettings
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<class USpatializationPluginSourceSettingsBase*> SpatializationPluginSettingsArray; // 0x0
        struct TArray<class UOcclusionPluginSourceSettingsBase*> OcclusionPluginSettingsArray; // 0x10
        struct TArray<class UReverbPluginSourceSettingsBase*> ReverbPluginSettingsArray; // 0x20

    };

    struct FAttenuationSubmixSendSettings //ScriptStruct Engine.AttenuationSubmixSendSettings
    {
    //Children Prop Count (Fields): 8
    public:

        class USoundSubmixBase* Submix; // 0x0
        enum class ESubmixSendMethod SubmixSendMethod; // 0x8
        float SubmixSendLevelMin; // 0xc
        float SubmixSendLevelMax; // 0x10
        float SubmixSendDistanceMin; // 0x14
        float SubmixSendDistanceMax; // 0x18
        float ManualSubmixSendLevel; // 0x1c
        struct FRuntimeFloatCurve CustomSubmixSendCurve; // 0x20

    };

    struct FPassiveSoundMixModifier //ScriptStruct Engine.PassiveSoundMixModifier
    {
    //Children Prop Count (Fields): 3
    public:

        class USoundMix* SoundMix; // 0x0
        float MinVolumeThreshold; // 0x8
        float MaxVolumeThreshold; // 0xc

    };

    struct FSoundClassProperties //ScriptStruct Engine.SoundClassProperties
    {
    //Children Prop Count (Fields): 21
    public:

        float Volume; // 0x0
        float Pitch; // 0x4
        float LowPassFilterFrequency; // 0x8
        float AttenuationDistanceScale; // 0xc
        float StereoBleed; // 0x10
        float LFEBleed; // 0x14
        float VoiceCenterChannelVolume; // 0x18
        float RadioFilterVolume; // 0x1c
        float RadioFilterVolumeThreshold; // 0x20
        char bApplyEffects; // 0x24
        char bAlwaysPlay; // 0x24
        char bIsUISound; // 0x24
        char bIsMusic; // 0x24
        char bCenterChannelOnly; // 0x24
        char bApplyAmbientVolumes; // 0x24
        char bReverb; // 0x24
        float Default2DReverbSendAmount; // 0x28
        struct FSoundModulationDefaultSettings ModulationSettings; // 0x30
        enum class EAudioOutputTarget OutputTarget; // 0x70
        enum class ESoundWaveLoadingBehavior LoadingBehavior; // 0x71
        class USoundSubmix* DefaultSubmix; // 0x78

    };

    struct FSoundModulationDefaultSettings //ScriptStruct Engine.SoundModulationDefaultSettings
    {
    //Children Prop Count (Fields): 4
    public:

        struct FSoundModulationDestinationSettings VolumeModulationDestination; // 0x0
        struct FSoundModulationDestinationSettings PitchModulationDestination; // 0x10
        struct FSoundModulationDestinationSettings HighpassModulationDestination; // 0x20
        struct FSoundModulationDestinationSettings LowpassModulationDestination; // 0x30

    };

    struct FSoundModulationDestinationSettings //ScriptStruct Engine.SoundModulationDestinationSettings
    {
    //Children Prop Count (Fields): 2
    public:

        float Value; // 0x0
        class USoundModulatorBase* Modulator; // 0x8

    };

    struct FSoundClassEditorData //ScriptStruct Engine.SoundClassEditorData
    {
    public:


    };

    struct FSoundConcurrencySettings //ScriptStruct Engine.SoundConcurrencySettings
    {
    //Children Prop Count (Fields): 10
    public:

        int32_t MaxCount; // 0x0
        char bLimitToOwner; // 0x4
        enum class EMaxConcurrentResolutionRule ResolutionRule; // 0x8
        float RetriggerTime; // 0xc
        float VolumeScale; // 0x10
        enum class EConcurrencyVolumeScaleMode VolumeScaleMode; // 0x14
        float VolumeScaleAttackTime; // 0x18
        char bVolumeScaleCanRelease; // 0x1c
        float VolumeScaleReleaseTime; // 0x20
        float VoiceStealReleaseTime; // 0x24

    };

    struct FSoundNodeEditorData //ScriptStruct Engine.SoundNodeEditorData
    {
    public:


    };

    struct FSourceEffectChainEntry //ScriptStruct Engine.SourceEffectChainEntry
    {
    //Children Prop Count (Fields): 2
    public:

        class USoundEffectSourcePreset* Preset; // 0x0
        char bBypass; // 0x8

    };

    struct FSoundGroup //ScriptStruct Engine.SoundGroup
    {
    //Children Prop Count (Fields): 4
    public:

        enum class ESoundGroup SoundGroup; // 0x0
        struct FString DisplayName; // 0x8
        char bAlwaysDecompressOnLoad; // 0x18
        float DecompressedDuration; // 0x1c

    };

    struct FSoundClassAdjuster //ScriptStruct Engine.SoundClassAdjuster
    {
    //Children Prop Count (Fields): 6
    public:

        class USoundClass* SoundClassObject; // 0x0
        float VolumeAdjuster; // 0x8
        float PitchAdjuster; // 0xc
        float LowPassFilterFrequency; // 0x10
        char bApplyToChildren; // 0x14
        float VoiceCenterChannelVolumeAdjuster; // 0x18

    };

    struct FAudioEQEffect : FAudioEffectParameters //ScriptStruct Engine.AudioEQEffect
    {
    //Children Prop Count (Fields): 12
    public:

        float FrequencyCenter0; // 0x10
        float Gain0; // 0x14
        float Bandwidth0; // 0x18
        float FrequencyCenter1; // 0x1c
        float Gain1; // 0x20
        float Bandwidth1; // 0x24
        float FrequencyCenter2; // 0x28
        float Gain2; // 0x2c
        float Bandwidth2; // 0x30
        float FrequencyCenter3; // 0x34
        float Gain3; // 0x38
        float Bandwidth3; // 0x3c

    };

    struct FSoundModulationDefaultRoutingSettings : FSoundModulationDefaultSettings //ScriptStruct Engine.SoundModulationDefaultRoutingSettings
    {
    //Children Prop Count (Fields): 4
    public:

        enum class EModulationRouting VolumeRouting; // 0x40
        enum class EModulationRouting PitchRouting; // 0x41
        enum class EModulationRouting HighpassRouting; // 0x42
        enum class EModulationRouting LowpassRouting; // 0x43

    };

    struct FDistanceDatum //ScriptStruct Engine.DistanceDatum
    {
    //Children Prop Count (Fields): 5
    public:

        float FadeInDistanceStart; // 0x0
        float FadeInDistanceEnd; // 0x4
        float FadeOutDistanceStart; // 0x8
        float FadeOutDistanceEnd; // 0xc
        float Volume; // 0x10

    };

    struct FModulatorContinuousParams //ScriptStruct Engine.ModulatorContinuousParams
    {
    //Children Prop Count (Fields): 7
    public:

        struct FName ParameterName; // 0x0
        float Default; // 0x8
        float MinInput; // 0xc
        float MaxInput; // 0x10
        float MinOutput; // 0x14
        float MaxOutput; // 0x18
        enum class ModulationParamMode ParamMode; // 0x1c

    };

    struct FSoundSourceBusSendInfo //ScriptStruct Engine.SoundSourceBusSendInfo
    {
    //Children Prop Count (Fields): 9
    public:

        enum class ESourceBusSendLevelControlMethod SourceBusSendLevelControlMethod; // 0x0
        class USoundSourceBus* SoundSourceBus; // 0x8
        class UAudioBus* AudioBus; // 0x10
        float SendLevel; // 0x18
        float MinSendLevel; // 0x1c
        float MaxSendLevel; // 0x20
        float MinSendDistance; // 0x24
        float MaxSendDistance; // 0x28
        struct FRuntimeFloatCurve CustomSendLevelCurve; // 0x30

    };

    struct FSoundSubmixSpectralAnalysisBandSettings //ScriptStruct Engine.SoundSubmixSpectralAnalysisBandSettings
    {
    //Children Prop Count (Fields): 4
    public:

        float BandFrequency; // 0x0
        int32_t AttackTimeMsec; // 0x4
        int32_t ReleaseTimeMsec; // 0x8
        float QFactor; // 0xc

    };

    struct FSoundWaveEnvelopeTimeData //ScriptStruct Engine.SoundWaveEnvelopeTimeData
    {
    //Children Prop Count (Fields): 2
    public:

        float Amplitude; // 0x0
        float TimeSec; // 0x4

    };

    struct FSoundWaveSpectralTimeData //ScriptStruct Engine.SoundWaveSpectralTimeData
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<struct FSoundWaveSpectralDataEntry> Data; // 0x0
        float TimeSec; // 0x10

    };

    struct FSoundWaveSpectralDataEntry //ScriptStruct Engine.SoundWaveSpectralDataEntry
    {
    //Children Prop Count (Fields): 2
    public:

        float Magnitude; // 0x0
        float NormalizedMagnitude; // 0x4

    };

    struct FSoundWaveEnvelopeDataPerSound //ScriptStruct Engine.SoundWaveEnvelopeDataPerSound
    {
    //Children Prop Count (Fields): 3
    public:

        float Envelope; // 0x0
        float PlaybackTime; // 0x4
        class USoundWave* SoundWave; // 0x8

    };

    struct FSoundWaveSpectralDataPerSound //ScriptStruct Engine.SoundWaveSpectralDataPerSound
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FSoundWaveSpectralData> SpectralData; // 0x0
        float PlaybackTime; // 0x10
        class USoundWave* SoundWave; // 0x18

    };

    struct FSoundWaveSpectralData //ScriptStruct Engine.SoundWaveSpectralData
    {
    //Children Prop Count (Fields): 3
    public:

        float FrequencyHz; // 0x0
        float Magnitude; // 0x4
        float NormalizedMagnitude; // 0x8

    };

    struct FStreamedAudioPlatformData //ScriptStruct Engine.StreamedAudioPlatformData
    {
    public:


    };

    struct FSplineInstanceData : FSceneComponentInstanceData //ScriptStruct Engine.SplineInstanceData
    {
    //Children Prop Count (Fields): 3
    public:

        bool bSplineHasBeenEdited; // 0xb8
        struct FSplineCurves SplineCurves; // 0xc0
        struct FSplineCurves SplineCurvesPreUCS; // 0x130

    };

    struct FSplineCurves //ScriptStruct Engine.SplineCurves
    {
    //Children Prop Count (Fields): 6
    public:

        struct FInterpCurveVector position; // 0x0
        struct FInterpCurveQuat Rotation; // 0x18
        struct FInterpCurveVector Scale; // 0x30
        struct FInterpCurveFloat ReparamTable; // 0x48
        class USplineMetadata* MetaData; // 0x60
        uint32_t Version; // 0x68

    };

    struct FSplinePoint //ScriptStruct Engine.SplinePoint
    {
    //Children Prop Count (Fields): 7
    public:

        float InputKey; // 0x0
        struct FVector position; // 0x4
        struct FVector ArriveTangent; // 0x10
        struct FVector LeaveTangent; // 0x1c
        struct FRotator Rotation; // 0x28
        struct FVector Scale; // 0x34
        enum class ESplinePointType Type; // 0x40

    };

    struct FSplineMeshInstanceData : FSceneComponentInstanceData //ScriptStruct Engine.SplineMeshInstanceData
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector StartPos; // 0xb8
        struct FVector EndPos; // 0xc4
        struct FVector StartTangent; // 0xd0
        struct FVector EndTangent; // 0xdc

    };

    struct FSplineMeshParams //ScriptStruct Engine.SplineMeshParams
    {
    //Children Prop Count (Fields): 10
    public:

        struct FVector StartPos; // 0x0
        struct FVector StartTangent; // 0xc
        struct FVector2D StartScale; // 0x18
        float StartRoll; // 0x20
        struct FVector2D StartOffset; // 0x24
        struct FVector EndPos; // 0x2c
        struct FVector2D EndScale; // 0x38
        struct FVector EndTangent; // 0x40
        float EndRoll; // 0x4c
        struct FVector2D EndOffset; // 0x50

    };

    struct FMaterialRemapIndex //ScriptStruct Engine.MaterialRemapIndex
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t ImportVersionKey; // 0x0
        struct TArray<int32_t> MaterialRemap; // 0x8

    };

    struct FStaticMaterial //ScriptStruct Engine.StaticMaterial
    {
    //Children Prop Count (Fields): 4
    public:

        class UMaterialInterface* MaterialInterface; // 0x0
        struct FName MaterialSlotName; // 0x8
        struct FName ImportedMaterialSlotName; // 0x10
        struct FMeshUVChannelInfo UVChannelData; // 0x18

    };

    struct FAssetEditorOrbitCameraPosition //ScriptStruct Engine.AssetEditorOrbitCameraPosition
    {
    //Children Prop Count (Fields): 4
    public:

        bool bIsSet; // 0x0
        struct FVector CamOrbitPoint; // 0x4
        struct FVector CamOrbitZoom; // 0x10
        struct FRotator CamOrbitRotation; // 0x1c

    };

    struct FMeshSectionInfoMap //ScriptStruct Engine.MeshSectionInfoMap
    {
    //Children Prop Count (Fields): 1
    public:

        struct TMap<uint32_t, struct FMeshSectionInfo> Map; // 0x0

    };

    struct FMeshSectionInfo //ScriptStruct Engine.MeshSectionInfo
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t MaterialIndex; // 0x0
        bool bEnableCollision; // 0x4
        bool bCastShadow; // 0x5
        bool bVisibleInRayTracing; // 0x6
        bool bForceOpaque; // 0x7

    };

    struct FStaticMeshSourceModel //ScriptStruct Engine.StaticMeshSourceModel
    {
    //Children Prop Count (Fields): 5
    public:

        struct FMeshBuildSettings BuildSettings; // 0x0
        struct FMeshReductionSettings ReductionSettings; // 0x48
        float LODDistance; // 0x70
        struct FPerPlatformFloat ScreenSize; // 0x74
        struct FString SourceImportFilename; // 0x78

    };

    struct FStaticMeshOptimizationSettings //ScriptStruct Engine.StaticMeshOptimizationSettings
    {
    //Children Prop Count (Fields): 9
    public:

        enum class EOptimizationType ReductionMethod; // 0x0
        float NumOfTrianglesPercentage; // 0x4
        float MaxDeviationPercentage; // 0x8
        float WeldingThreshold; // 0xc
        bool bRecalcNormals; // 0x10
        float NormalsThreshold; // 0x14
        char SilhouetteImportance; // 0x18
        char TextureImportance; // 0x19
        char ShadingImportance; // 0x1a

    };

    struct FMFGpuDrivenMeshSettings //ScriptStruct Engine.MFGpuDrivenMeshSettings
    {
    //Children Prop Count (Fields): 1
    public:

        enum class EMFGpuDrivenMeshType Type; // 0x0

    };

    struct FStaticMeshComponentInstanceData : FPrimitiveComponentInstanceData //ScriptStruct Engine.StaticMeshComponentInstanceData
    {
    //Children Prop Count (Fields): 4
    public:

        class UStaticMesh* StaticMesh; // 0x100
        struct TArray<struct FStaticMeshVertexColorLODData> VertexColorLODs; // 0x108
        struct TArray<struct FGuid> CachedStaticLighting; // 0x118
        struct TArray<struct FStreamingTextureBuildInfo> StreamingTextureData; // 0x128

    };

    struct FStreamingTextureBuildInfo //ScriptStruct Engine.StreamingTextureBuildInfo
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t PackedRelativeBox; // 0x0
        int32_t TextureLevelIndex; // 0x4
        float TexelFactor; // 0x8

    };

    struct FStaticMeshVertexColorLODData //ScriptStruct Engine.StaticMeshVertexColorLODData
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FPaintedVertex> PaintedVertices; // 0x0
        struct TArray<struct FColor> VertexBufferColors; // 0x10
        uint32_t LODIndex; // 0x20

    };

    struct FPaintedVertex //ScriptStruct Engine.PaintedVertex
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector position; // 0x0
        struct FColor Color; // 0xc
        struct FVector4 Normal; // 0x10

    };

    struct FStaticMeshComponentLODInfo //ScriptStruct Engine.StaticMeshComponentLODInfo
    {
    public:


    };

    struct FStaticParameterSet //ScriptStruct Engine.StaticParameterSet
    {
    //Children Prop Count (Fields): 4
    public:

        struct TArray<struct FStaticSwitchParameter> StaticSwitchParameters; // 0x0
        struct TArray<struct FStaticComponentMaskParameter> StaticComponentMaskParameters; // 0x10
        struct TArray<struct FStaticTerrainLayerWeightParameter> TerrainLayerWeightParameters; // 0x20
        struct TArray<struct FStaticMaterialLayersParameter> MaterialLayersParameters; // 0x30

    };

    struct FStaticParameterBase //ScriptStruct Engine.StaticParameterBase
    {
    //Children Prop Count (Fields): 3
    public:

        struct FMaterialParameterInfo ParameterInfo; // 0x0
        bool bOverride; // 0x10
        struct FGuid ExpressionGUID; // 0x14

    };

    struct FStaticMaterialLayersParameter : FStaticParameterBase //ScriptStruct Engine.StaticMaterialLayersParameter
    {
    //Children Prop Count (Fields): 1
    public:

        struct FMaterialLayersFunctions Value; // 0x28

    };

    struct FStaticTerrainLayerWeightParameter : FStaticParameterBase //ScriptStruct Engine.StaticTerrainLayerWeightParameter
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t WeightmapIndex; // 0x24
        bool bWeightBasedBlend; // 0x28

    };

    struct FStaticComponentMaskParameter : FStaticParameterBase //ScriptStruct Engine.StaticComponentMaskParameter
    {
    //Children Prop Count (Fields): 4
    public:

        bool R; // 0x24
        bool G; // 0x25
        bool B; // 0x26
        bool A; // 0x27

    };

    struct FStaticSwitchParameter : FStaticParameterBase //ScriptStruct Engine.StaticSwitchParameter
    {
    //Children Prop Count (Fields): 1
    public:

        bool Value; // 0x24

    };

    struct FEquirectProps //ScriptStruct Engine.EquirectProps
    {
    //Children Prop Count (Fields): 6
    public:

        struct FBox2D LeftUVRect; // 0x0
        struct FBox2D RightUVRect; // 0x14
        struct FVector2D LeftScale; // 0x28
        struct FVector2D RightScale; // 0x30
        struct FVector2D LeftBias; // 0x38
        struct FVector2D RightBias; // 0x40

    };

    struct FSubsurfaceProfileStruct //ScriptStruct Engine.SubsurfaceProfileStruct
    {
    //Children Prop Count (Fields): 17
    public:

        struct FLinearColor SurfaceAlbedo; // 0x0
        struct FLinearColor MeanFreePathColor; // 0x10
        float MeanFreePathDistance; // 0x20
        float WorldUnitScale; // 0x24
        bool bEnableBurley; // 0x28
        float ScatterRadius; // 0x2c
        struct FLinearColor SubsurfaceColor; // 0x30
        struct FLinearColor FalloffColor; // 0x40
        struct FLinearColor BoundaryColorBleed; // 0x50
        float ExtinctionScale; // 0x60
        float NormalScale; // 0x64
        float ScatteringDistribution; // 0x68
        float IOR; // 0x6c
        float Roughness0; // 0x70
        float Roughness1; // 0x74
        float LobeMix; // 0x78
        struct FLinearColor TransmissionTintColor; // 0x7c

    };

    struct FTextureFormatSettings //ScriptStruct Engine.TextureFormatSettings
    {
    //Children Prop Count (Fields): 5
    public:

        enum class TextureCompressionSettings CompressionSettings; // 0x0
        char CompressionNoAlpha; // 0x1
        char CompressionNone; // 0x1
        char CompressionYCoCg; // 0x1
        char SRGB; // 0x1

    };

    struct FTexturePlatformData //ScriptStruct Engine.TexturePlatformData
    {
    public:


    };

    struct FTextureSource //ScriptStruct Engine.TextureSource
    {
    public:


    };

    struct FTextureSourceBlock //ScriptStruct Engine.TextureSourceBlock
    {
    //Children Prop Count (Fields): 6
    public:

        int32_t BlockX; // 0x0
        int32_t BlockY; // 0x4
        int32_t SizeX; // 0x8
        int32_t SizeY; // 0xc
        int32_t NumSlices; // 0x10
        int32_t NumMips; // 0x14

    };

    struct FTextureLODGroup //ScriptStruct Engine.TextureLODGroup
    {
    //Children Prop Count (Fields): 24
    public:

        enum class TextureGroup Group; // 0x0
        int32_t ASTCSizeExpected; // 0xc
        int32_t LODBias; // 0x10
        int32_t LODBias_Smaller; // 0x14
        int32_t LODBias_Smallest; // 0x18
        int32_t NumStreamedMips; // 0x20
        enum class TextureMipGenSettings MipGenSettings; // 0x24
        int32_t MinLODSize; // 0x28
        int32_t MaxLODSize; // 0x2c
        int32_t MaxLODSize_Smaller; // 0x30
        int32_t MaxLODSize_Smallest; // 0x34
        int32_t OptionalLODBias; // 0x38
        int32_t OptionalMaxLODSize; // 0x3c
        int32_t NoStreamMipCount; // 0x44
        struct FName MinMagFilter; // 0x48
        struct FName MipFilter; // 0x50
        enum class ETextureMipLoadOptions MipLoadOptions; // 0x58
        bool DuplicateNonOptionalMips; // 0x59
        struct TArray<struct FTextureLODGroupUseScene> ArrayLODBiasValues; // 0x60
        float ExtraBoost; // 0x70
        float Downscale; // 0x74
        enum class ETextureDownscaleOptions DownscaleOptions; // 0x78
        int32_t VirtualTextureTileCountBias; // 0x7c
        int32_t VirtualTextureTileSizeBias; // 0x80

    };

    struct FTextureLODGroupUseScene //ScriptStruct Engine.TextureLODGroupUseScene
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<char> ArrayBiasValue; // 0x0

    };

    struct FStreamingRenderAssetPrimitiveInfo //ScriptStruct Engine.StreamingRenderAssetPrimitiveInfo
    {
    //Children Prop Count (Fields): 5
    public:

        class UStreamableRenderAsset* RenderAsset; // 0x0
        struct FBoxSphereBounds Bounds; // 0x8
        float TexelFactor; // 0x24
        uint32_t PackedRelativeBox; // 0x28
        char bAllowInvalidTexelFactorWhenUnregistered; // 0x2c

    };

    struct FTimeline //ScriptStruct Engine.Timeline
    {
    //Children Prop Count (Fields): 15
    public:

        enum class ETimelineLengthMode LengthMode; // 0x0
        char bLooping; // 0x1
        char bReversePlayback; // 0x1
        char bPlaying; // 0x1
        float Length; // 0x4
        float PlayRate; // 0x8
        float position; // 0xc
        struct TArray<struct FTimelineEventEntry> Events; // 0x10
        struct TArray<struct FTimelineVectorTrack> InterpVectors; // 0x20
        struct TArray<struct FTimelineFloatTrack> InterpFloats; // 0x30
        struct TArray<struct FTimelineLinearColorTrack> InterpLinearColors; // 0x40
        struct FDelegate TimelinePostUpdateFunc; // 0x50
        struct FDelegate TimelineFinishedFunc; // 0x60
        struct TWeakObjectPtr<struct UObject> PropertySetObject; // 0x70
        struct FName DirectionPropertyName; // 0x78

    };

    struct FTimelineLinearColorTrack //ScriptStruct Engine.TimelineLinearColorTrack
    {
    //Children Prop Count (Fields): 4
    public:

        class UCurveLinearColor* LinearColorCurve; // 0x0
        struct FDelegate InterpFunc; // 0x8
        struct FName TrackName; // 0x18
        struct FName LinearColorPropertyName; // 0x20

    };

    struct FTimelineFloatTrack //ScriptStruct Engine.TimelineFloatTrack
    {
    //Children Prop Count (Fields): 4
    public:

        class UCurveFloat* FloatCurve; // 0x0
        struct FDelegate InterpFunc; // 0x8
        struct FName TrackName; // 0x18
        struct FName FloatPropertyName; // 0x20

    };

    struct FTimelineVectorTrack //ScriptStruct Engine.TimelineVectorTrack
    {
    //Children Prop Count (Fields): 4
    public:

        class UCurveVector* VectorCurve; // 0x0
        struct FDelegate InterpFunc; // 0x8
        struct FName TrackName; // 0x18
        struct FName VectorPropertyName; // 0x20

    };

    struct FTimelineEventEntry //ScriptStruct Engine.TimelineEventEntry
    {
    //Children Prop Count (Fields): 2
    public:

        float Time; // 0x0
        struct FDelegate EventFunc; // 0x4

    };

    struct FTTTrackBase //ScriptStruct Engine.TTTrackBase
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName TrackName; // 0x8
        bool bIsExternalCurve; // 0x10

    };

    struct FTTPropertyTrack : FTTTrackBase //ScriptStruct Engine.TTPropertyTrack
    {
    //Children Prop Count (Fields): 1
    public:

        struct FName PropertyName; // 0x18

    };

    struct FTTLinearColorTrack : FTTPropertyTrack //ScriptStruct Engine.TTLinearColorTrack
    {
    //Children Prop Count (Fields): 1
    public:

        class UCurveLinearColor* CurveLinearColor; // 0x20

    };

    struct FTTVectorTrack : FTTPropertyTrack //ScriptStruct Engine.TTVectorTrack
    {
    //Children Prop Count (Fields): 1
    public:

        class UCurveVector* CurveVector; // 0x20

    };

    struct FTTFloatTrack : FTTPropertyTrack //ScriptStruct Engine.TTFloatTrack
    {
    //Children Prop Count (Fields): 1
    public:

        class UCurveFloat* CurveFloat; // 0x20

    };

    struct FTTEventTrack : FTTTrackBase //ScriptStruct Engine.TTEventTrack
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName FunctionName; // 0x18
        class UCurveFloat* CurveKeys; // 0x20

    };

    struct FTTTrackId //ScriptStruct Engine.TTTrackId
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t TrackType; // 0x0
        int32_t TrackIndex; // 0x4

    };

    struct FTimeStretchCurveInstance //ScriptStruct Engine.TimeStretchCurveInstance
    {
    //Children Prop Count (Fields): 1
    public:

        bool bHasValidData; // 0x0

    };

    struct FTimeStretchCurve //ScriptStruct Engine.TimeStretchCurve
    {
    //Children Prop Count (Fields): 4
    public:

        float SamplingRate; // 0x0
        float CurveValueMinPrecision; // 0x4
        struct TArray<struct FTimeStretchCurveMarker> Markers; // 0x8
        float Sum_dT_i_by_C_i; // 0x18

    };

    struct FTimeStretchCurveMarker //ScriptStruct Engine.TimeStretchCurveMarker
    {
    //Children Prop Count (Fields): 2
    public:

        float Time; // 0x0
        float Alpha; // 0xc

    };

    struct FTouchInputControl //ScriptStruct Engine.TouchInputControl
    {
    //Children Prop Count (Fields): 9
    public:

        class UTexture2D* Image1; // 0x0
        class UTexture2D* Image2; // 0x8
        struct FVector2D Center; // 0x10
        struct FVector2D VisualSize; // 0x18
        struct FVector2D ThumbSize; // 0x20
        struct FVector2D InteractionSize; // 0x28
        struct FVector2D InputScale; // 0x30
        struct FKey MainInputKey; // 0x38
        struct FKey AltInputKey; // 0x50

    };

    struct FHardwareCursorReference //ScriptStruct Engine.HardwareCursorReference
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName CursorPath; // 0x0
        struct FVector2D HotSpot; // 0x8

    };

    struct FVirtualTextureBuildSettings //ScriptStruct Engine.VirtualTextureBuildSettings
    {
    //Children Prop Count (Fields): 4
    public:

        int32_t TileSize; // 0x0
        int32_t TileBorderSize; // 0x4
        bool bEnableCompressCrunch; // 0x8
        bool bEnableCompressZlib; // 0x9

    };

    struct FVirtualTextureSpacePoolConfig //ScriptStruct Engine.VirtualTextureSpacePoolConfig
    {
    //Children Prop Count (Fields): 7
    public:

        int32_t MinTileSize; // 0x0
        int32_t MaxTileSize; // 0x4
        struct TArray<enum class EPixelFormat> Formats; // 0x8
        int32_t SizeInMegabyte; // 0x18
        bool bAllowSizeScale; // 0x1c
        uint32_t ScalabilityGroup; // 0x20
        struct TArray<float> SizeScales; // 0x28

    };

    struct FVoiceSettings //ScriptStruct Engine.VoiceSettings
    {
    //Children Prop Count (Fields): 3
    public:

        class USceneComponent* ComponentToAttachTo; // 0x0
        class USoundAttenuation* AttenuationSettings; // 0x8
        class USoundEffectSourcePresetChain* SourceEffectChain; // 0x10

    };

    struct FStreamingLevelsToConsider //ScriptStruct Engine.StreamingLevelsToConsider
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class ULevelStreaming*> StreamingLevels; // 0x0

    };

    struct FLevelCollection //ScriptStruct Engine.LevelCollection
    {
    //Children Prop Count (Fields): 5
    public:

        class AGameStateBase* GameState; // 0x8
        class UNetDriver* NetDriver; // 0x10
        class UDemoNetDriver* DemoNetDriver; // 0x18
        class ULevel* PersistentLevel; // 0x20
        struct TSet<class ULevel*> Levels; // 0x28

    };

    struct FEndPhysicsTickFunction : FTickFunction //ScriptStruct Engine.EndPhysicsTickFunction
    {
    public:


    };

    struct FStartPhysicsTickFunction : FTickFunction //ScriptStruct Engine.StartPhysicsTickFunction
    {
    public:


    };

    struct FLevelViewportInfo //ScriptStruct Engine.LevelViewportInfo
    {
    //Children Prop Count (Fields): 4
    public:

        struct FVector CamPosition; // 0x0
        struct FRotator CamRotation; // 0xc
        float CamOrthoZoom; // 0x18
        bool CamUpdated; // 0x1c

    };

    struct FSMCCollisionInfoStruct //ScriptStruct Engine.SMCCollisionInfoStruct
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class UMaterialInterface*> SavedMaterials; // 0x30

    };

    struct FWorldPSCPool //ScriptStruct Engine.WorldPSCPool
    {
    //Children Prop Count (Fields): 1
    public:

        struct TMap<class UParticleSystem*, struct FPSCPool> WorldParticleSystemPools; // 0x0

    };

    struct FPSCPool //ScriptStruct Engine.PSCPool
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<struct FPSCPoolElem> FreeElements; // 0x0
        struct TArray<class UParticleSystemComponent*> InUseComponents_Auto; // 0x10
        struct TArray<class UParticleSystemComponent*> InUseComponents_Manual; // 0x20

    };

    struct FPSCPoolElem //ScriptStruct Engine.PSCPoolElem
    {
    //Children Prop Count (Fields): 1
    public:

        class UParticleSystemComponent* PSC; // 0x0

    };

    struct FBroadphaseSettings //ScriptStruct Engine.BroadphaseSettings
    {
    //Children Prop Count (Fields): 6
    public:

        bool bUseMBPOnClient; // 0x0
        bool bUseMBPOnServer; // 0x1
        bool bUseMBPOuterBounds; // 0x2
        struct FBox MBPBounds; // 0x4
        struct FBox MBPOuterBounds; // 0x20
        uint32_t MBPNumSubdivs; // 0x3c

    };

    struct FHierarchicalSimplification //ScriptStruct Engine.HierarchicalSimplification
    {
    //Children Prop Count (Fields): 13
    public:

        float TransitionScreenSize; // 0x0
        float OverrideDrawDistance; // 0x4
        char bUseOverrideDrawDistance; // 0x8
        char bAllowSpecificExclusion; // 0x8
        float MinExtentSizeSquared; // 0xc
        char bSimplifyMesh; // 0x10
        char bOnlyGenerateClustersForVolumes; // 0x10
        char bReusePreviousLevelClusters; // 0x10
        struct FMeshProxySettings ProxySetting; // 0x14
        struct FMeshMergingSettings MergeSetting; // 0xc4
        float DesiredBoundRadius; // 0x16c
        float DesiredFillingPercentage; // 0x170
        int32_t MinNumberOfActorsToBuild; // 0x174

    };

    struct FNetViewer //ScriptStruct Engine.NetViewer
    {
    //Children Prop Count (Fields): 5
    public:

        class UNetConnection* Connection; // 0x0
        class AActor* InViewer; // 0x8
        class AActor* ViewTarget; // 0x10
        struct FVector ViewLocation; // 0x18
        struct FVector ViewDir; // 0x24

    };

    struct FLightmassWorldInfoSettings //ScriptStruct Engine.LightmassWorldInfoSettings
    {
    //Children Prop Count (Fields): 32
    public:

        float StaticLightingLevelScale; // 0x0
        int32_t NumIndirectLightingBounces; // 0x4
        int32_t NumSkyLightingBounces; // 0x8
        float IndirectLightingQuality; // 0xc
        float IndirectLightingSmoothness; // 0x10
        struct FColor EnvironmentColor; // 0x14
        float EnvironmentIntensity; // 0x18
        float EmissiveBoost; // 0x1c
        float DiffuseBoost; // 0x20
        enum class EVolumeLightingMethod VolumeLightingMethod; // 0x24
        char bUseAmbientOcclusion; // 0x25
        char bGenerateAmbientOcclusionMaterialMask; // 0x25
        char bVisualizeMaterialDiffuse; // 0x25
        char bVisualizeAmbientOcclusion; // 0x25
        char bCompressLightmaps; // 0x25
        char bPackSkyVisibilityIntoLQLightmap; // 0x25
        char bNoLightmapForLandscape; // 0x25
        char bNoShadowmap; // 0x25
        char bForceLODsShareStaticLighting; // 0x26
        char bBuildStaticShadowMaskForLightmap; // 0x26
        float VolumetricLightmapDetailCellSize; // 0x28
        float VolumetricLightmapMaximumBrickMemoryMb; // 0x2c
        float VolumetricLightmapSphericalHarmonicSmoothing; // 0x30
        char bVolumetricLightmapFilterForBorder; // 0x34
        float VolumeLightSamplePlacementScale; // 0x38
        float VolumeLightSampleSmoothing; // 0x3c
        char bDiscardExteriorVolumeLightSamples; // 0x40
        float DirectIlluminationOcclusionFraction; // 0x44
        float IndirectIlluminationOcclusionFraction; // 0x48
        float OcclusionExponent; // 0x4c
        float FullyOccludedSamplesFraction; // 0x50
        float MaxOcclusionDistance; // 0x54

    };

    struct FStructSerializerTestStruct //ScriptStruct Serialization.StructSerializerTestStruct
    {
    //Children Prop Count (Fields): 7
    public:

        struct FStructSerializerNumericTestStruct Numerics; // 0x0
        struct FStructSerializerBooleanTestStruct Booleans; // 0x30
        struct FStructSerializerObjectTestStruct Objects; // 0x38
        struct FStructSerializerBuiltinTestStruct Builtins; // 0xe0
        struct FStructSerializerArrayTestStruct Arrays; // 0x170
        struct FStructSerializerMapTestStruct Maps; // 0x1d0
        struct FStructSerializerSetTestStruct Sets; // 0x310

    };

    struct FStructSerializerSetTestStruct //ScriptStruct Serialization.StructSerializerSetTestStruct
    {
    //Children Prop Count (Fields): 4
    public:

        struct TSet<struct FString> StrSet; // 0x0
        struct TSet<int32_t> IntSet; // 0x50
        struct TSet<struct FName> NameSet; // 0xa0
        struct TSet<struct FStructSerializerBuiltinTestStruct> StructSet; // 0xf0

    };

    struct FStructSerializerBuiltinTestStruct //ScriptStruct Serialization.StructSerializerBuiltinTestStruct
    {
    //Children Prop Count (Fields): 9
    public:

        struct FGuid Guid; // 0x0
        struct FName Name; // 0x10
        struct FString String; // 0x18
        struct FText Text; // 0x28
        struct FVector Vector; // 0x40
        struct FVector4 Vector4; // 0x50
        struct FRotator Rotator; // 0x60
        struct FQuat Quat; // 0x70
        struct FColor Color; // 0x80

    };

    struct FStructSerializerMapTestStruct //ScriptStruct Serialization.StructSerializerMapTestStruct
    {
    //Children Prop Count (Fields): 4
    public:

        struct TMap<int32_t, struct FString> IntToStr; // 0x0
        struct TMap<struct FString, struct FString> StrToStr; // 0x50
        struct TMap<struct FString, struct FVector> StrToVec; // 0xa0
        struct TMap<struct FString, struct FStructSerializerBuiltinTestStruct> StrToStruct; // 0xf0

    };

    struct FStructSerializerArrayTestStruct //ScriptStruct Serialization.StructSerializerArrayTestStruct
    {
    //Children Prop Count (Fields): 7
    public:

        struct TArray<int32_t> Int32Array; // 0x0
        struct TArray<char> ByteArray; // 0x10
        int32_t StaticSingleElement; // 0x20
        int32_t StaticInt32Array; // 0x24
        float StaticFloatArray; // 0x30
        struct TArray<struct FVector> VectorArray; // 0x40
        struct TArray<struct FStructSerializerBuiltinTestStruct> StructArray; // 0x50

    };

    struct FStructSerializerObjectTestStruct //ScriptStruct Serialization.StructSerializerObjectTestStruct
    {
    //Children Prop Count (Fields): 8
    public:

        class UObject* Class; // 0x0
        class UMetaData* SubClass; // 0x8
        struct FSoftClassProperty SoftClass; // 0x10
        class UObject* Object; // 0x38
        struct TWeakObjectPtr<struct UMetaData> WeakObject; // 0x40
        struct TSoftObjectPtr<UMetaData> SoftObject; // 0x48
        struct FSoftClassPath ClassPath; // 0x70
        struct FSoftObjectPath ObjectPath; // 0x88

    };

    struct FStructSerializerBooleanTestStruct //ScriptStruct Serialization.StructSerializerBooleanTestStruct
    {
    //Children Prop Count (Fields): 10
    public:

        bool BoolFalse; // 0x0
        bool BoolTrue; // 0x1
        char Bitfield0; // 0x2
        char Bitfield1; // 0x2
        char Bitfield2Set; // 0x2
        char Bitfield3; // 0x2
        char Bitfield4Set; // 0x2
        char Bitfield5Set; // 0x2
        char Bitfield6; // 0x2
        char Bitfield7Set; // 0x2

    };

    struct FStructSerializerNumericTestStruct //ScriptStruct Serialization.StructSerializerNumericTestStruct
    {
    //Children Prop Count (Fields): 10
    public:

        int8_t int8; // 0x0
        int16_t int16; // 0x2
        int32_t int32; // 0x4
        int64_t int64; // 0x8
        char uint8; // 0x10
        uint16_t uint16; // 0x12
        uint32_t uint32; // 0x14
        uint64_t uint64; // 0x18
        float float; // 0x20
        double Double; // 0x28

    };

    struct FStructSerializerByteArray //ScriptStruct Serialization.StructSerializerByteArray
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t Dummy1; // 0x0
        struct TArray<char> ByteArray; // 0x8
        int32_t Dummy2; // 0x18
        struct TArray<int8_t> Int8Array; // 0x20
        int32_t Dummy3; // 0x30

    };

    struct FOverlayItem //ScriptStruct Overlay.OverlayItem
    {
    //Children Prop Count (Fields): 4
    public:

        struct FTimespan StartTime; // 0x0
        struct FTimespan EndTime; // 0x8
        struct FString Text; // 0x10
        struct FVector2D position; // 0x20

    };

    struct FClothConfig_Legacy //ScriptStruct ClothingSystemRuntimeCommon.ClothConfig_Legacy
    {
    //Children Prop Count (Fields): 27
    public:

        enum class EClothingWindMethod_Legacy WindMethod; // 0x0
        struct FClothConstraintSetup_Legacy VerticalConstraintConfig; // 0x4
        struct FClothConstraintSetup_Legacy HorizontalConstraintConfig; // 0x14
        struct FClothConstraintSetup_Legacy BendConstraintConfig; // 0x24
        struct FClothConstraintSetup_Legacy ShearConstraintConfig; // 0x34
        float SelfCollisionRadius; // 0x44
        float SelfCollisionStiffness; // 0x48
        float SelfCollisionCullScale; // 0x4c
        struct FVector Damping; // 0x50
        float Friction; // 0x5c
        float WindDragCoefficient; // 0x60
        float WindLiftCoefficient; // 0x64
        struct FVector LinearDrag; // 0x68
        struct FVector AngularDrag; // 0x74
        struct FVector LinearInertiaScale; // 0x80
        struct FVector AngularInertiaScale; // 0x8c
        struct FVector CentrifugalInertiaScale; // 0x98
        float SolverFrequency; // 0xa4
        float StiffnessFrequency; // 0xa8
        float GravityScale; // 0xac
        struct FVector GravityOverride; // 0xb0
        bool bUseGravityOverride; // 0xbc
        float TetherStiffness; // 0xc0
        float TetherLimit; // 0xc4
        float CollisionThickness; // 0xc8
        float AnimDriveSpringStiffness; // 0xcc
        float AnimDriveDamperStiffness; // 0xd0

    };

    struct FClothConstraintSetup_Legacy //ScriptStruct ClothingSystemRuntimeCommon.ClothConstraintSetup_Legacy
    {
    //Children Prop Count (Fields): 4
    public:

        float Stiffness; // 0x0
        float StiffnessMultiplier; // 0x4
        float StretchLimit; // 0x8
        float CompressionLimit; // 0xc

    };

    struct FClothLODDataCommon //ScriptStruct ClothingSystemRuntimeCommon.ClothLODDataCommon
    {
    //Children Prop Count (Fields): 4
    public:

        struct FClothPhysicalMeshData PhysicalMeshData; // 0x0
        struct FClothCollisionData CollisionData; // 0xf8
        bool bUseMultipleInfluences; // 0x138
        float SkinningKernelRadius; // 0x13c

    };

    struct FClothPhysicalMeshData //ScriptStruct ClothingSystemRuntimeCommon.ClothPhysicalMeshData
    {
    //Children Prop Count (Fields): 13
    public:

        struct TArray<struct FVector> Vertices; // 0x0
        struct TArray<struct FVector> Normals; // 0x10
        struct TArray<uint32_t> Indices; // 0x20
        struct TMap<uint32_t, struct FPointWeightMap> WeightMaps; // 0x30
        struct TArray<float> InverseMasses; // 0x80
        struct TArray<struct FClothVertBoneData> BoneData; // 0x90
        int32_t MaxBoneWeights; // 0xa0
        int32_t NumFixedVerts; // 0xa4
        struct TArray<uint32_t> SelfCollisionIndices; // 0xa8
        struct TArray<float> MaxDistances; // 0xb8
        struct TArray<float> BackstopDistances; // 0xc8
        struct TArray<float> BackstopRadiuses; // 0xd8
        struct TArray<float> AnimDriveMultipliers; // 0xe8

    };

    struct FPointWeightMap //ScriptStruct ClothingSystemRuntimeCommon.PointWeightMap
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<float> Values; // 0x0

    };

    struct FClothParameterMask_Legacy //ScriptStruct ClothingSystemRuntimeCommon.ClothParameterMask_Legacy
    {
    //Children Prop Count (Fields): 6
    public:

        struct FName MaskName; // 0x0
        enum class EWeightMapTargetCommon CurrentTarget; // 0x8
        float MaxValue; // 0xc
        float MinValue; // 0x10
        struct TArray<float> Values; // 0x18
        bool bEnabled; // 0x28

    };

    struct FClothConstraintSetupNv //ScriptStruct ClothingSystemRuntimeNv.ClothConstraintSetupNv
    {
    //Children Prop Count (Fields): 4
    public:

        float Stiffness; // 0x0
        float StiffnessMultiplier; // 0x4
        float StretchLimit; // 0x8
        float CompressionLimit; // 0xc

    };

    struct FSessionServiceLogUnsubscribe //ScriptStruct SessionMessages.SessionServiceLogUnsubscribe
    {
    public:


    };

    struct FSessionServiceLogSubscribe //ScriptStruct SessionMessages.SessionServiceLogSubscribe
    {
    public:


    };

    struct FSessionServiceLog //ScriptStruct SessionMessages.SessionServiceLog
    {
    //Children Prop Count (Fields): 5
    public:

        struct FName Category; // 0x0
        struct FString Data; // 0x8
        struct FGuid InstanceId; // 0x18
        double TimeSeconds; // 0x28
        char Verbosity; // 0x30

    };

    struct FSessionServicePong //ScriptStruct SessionMessages.SessionServicePong
    {
    //Children Prop Count (Fields): 10
    public:

        bool Authorized; // 0x0
        struct FString BuildDate; // 0x8
        struct FString DeviceName; // 0x18
        struct FGuid InstanceId; // 0x28
        struct FString InstanceName; // 0x38
        struct FString PlatformName; // 0x48
        struct FGuid SessionId; // 0x58
        struct FString SessionName; // 0x68
        struct FString SessionOwner; // 0x78
        bool Standalone; // 0x88

    };

    struct FSessionServicePing //ScriptStruct SessionMessages.SessionServicePing
    {
    //Children Prop Count (Fields): 1
    public:

        struct FString userName; // 0x0

    };

    struct FBrushStampData //ScriptStruct InteractiveToolsFramework.BrushStampData
    {
    public:


    };

    struct FBehaviorInfo //ScriptStruct InteractiveToolsFramework.BehaviorInfo
    {
    //Children Prop Count (Fields): 1
    public:

        class UInputBehavior* Behavior; // 0x0

    };

    struct FInputRayHit //ScriptStruct InteractiveToolsFramework.InputRayHit
    {
    public:


    };

    struct FActiveGizmo //ScriptStruct InteractiveToolsFramework.ActiveGizmo
    {
    public:


    };

    struct FGizmoFloatParameterChange //ScriptStruct InteractiveToolsFramework.GizmoFloatParameterChange
    {
    //Children Prop Count (Fields): 2
    public:

        float InitialValue; // 0x0
        float CurrentValue; // 0x4

    };

    struct FGizmoVec2ParameterChange //ScriptStruct InteractiveToolsFramework.GizmoVec2ParameterChange
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector2D InitialValue; // 0x0
        struct FVector2D CurrentValue; // 0x8

    };

    struct FNavCollisionBox //ScriptStruct NavigationSystem.NavCollisionBox
    {
    //Children Prop Count (Fields): 2
    public:

        struct FVector Offset; // 0x0
        struct FVector Extent; // 0xc

    };

    struct FNavCollisionCylinder //ScriptStruct NavigationSystem.NavCollisionCylinder
    {
    //Children Prop Count (Fields): 3
    public:

        struct FVector Offset; // 0x0
        float Radius; // 0xc
        float Height; // 0x10

    };

    struct FSupportedAreaData //ScriptStruct NavigationSystem.SupportedAreaData
    {
    //Children Prop Count (Fields): 3
    public:

        struct FString AreaClassName; // 0x0
        int32_t AreaID; // 0x10
        class UObject* AreaClass; // 0x18

    };

    struct FNavGraphNode //ScriptStruct NavigationSystem.NavGraphNode
    {
    //Children Prop Count (Fields): 1
    public:

        class UObject* Owner; // 0x0

    };

    struct FNavGraphEdge //ScriptStruct NavigationSystem.NavGraphEdge
    {
    public:


    };

    struct FNavigationFilterFlags //ScriptStruct NavigationSystem.NavigationFilterFlags
    {
    //Children Prop Count (Fields): 16
    public:

        char bNavFlag0; // 0x0
        char bNavFlag1; // 0x0
        char bNavFlag2; // 0x0
        char bNavFlag3; // 0x0
        char bNavFlag4; // 0x0
        char bNavFlag5; // 0x0
        char bNavFlag6; // 0x0
        char bNavFlag7; // 0x0
        char bNavFlag8; // 0x1
        char bNavFlag9; // 0x1
        char bNavFlag10; // 0x1
        char bNavFlag11; // 0x1
        char bNavFlag12; // 0x1
        char bNavFlag13; // 0x1
        char bNavFlag14; // 0x1
        char bNavFlag15; // 0x1

    };

    struct FNavigationFilterArea //ScriptStruct NavigationSystem.NavigationFilterArea
    {
    //Children Prop Count (Fields): 6
    public:

        class UNavArea* AreaClass; // 0x0
        float TravelCostOverride; // 0x8
        float EnteringCostOverride; // 0xc
        char bIsExcluded; // 0x10
        char bOverrideTravelCost; // 0x10
        char bOverrideEnteringCost; // 0x10

    };

    struct FNavLinkCustomInstanceData : FActorComponentInstanceData //ScriptStruct NavigationSystem.NavLinkCustomInstanceData
    {
    //Children Prop Count (Fields): 1
    public:

        uint32_t NavLinkUserId; // 0x68

    };

    struct FNavMeshTileData //ScriptStruct NavigationSystem.NavMeshTileData
    {
    public:


    };

    struct FRecastNavMeshGenerationProperties //ScriptStruct NavigationSystem.RecastNavMeshGenerationProperties
    {
    //Children Prop Count (Fields): 23
    public:

        int32_t TilePoolSize; // 0x0
        float TileSizeUU; // 0x4
        float CellSize; // 0x8
        float CellHeight; // 0xc
        float AgentRadius; // 0x10
        float AgentHeight; // 0x14
        float AgentMaxSlope; // 0x18
        float AgentMaxStepHeight; // 0x1c
        float MinRegionArea; // 0x20
        float MergeRegionSize; // 0x24
        float MaxSimplificationError; // 0x28
        int32_t TileNumberHardLimit; // 0x2c
        enum class ERecastPartitioning RegionPartitioning; // 0x30
        enum class ERecastPartitioning LayerPartitioning; // 0x31
        int32_t RegionChunkSplits; // 0x34
        int32_t LayerChunkSplits; // 0x38
        char bSortNavigationAreasByCost; // 0x3c
        char bPerformVoxelFiltering; // 0x3c
        char bMarkLowHeightAreas; // 0x3c
        char bUseExtraTopCellWhenMarkingAreas; // 0x3c
        char bFilterLowSpanSequences; // 0x3c
        char bFilterLowSpanFromTileCache; // 0x3c
        char bFixedTilePoolSize; // 0x3c

    };

    struct FINTLLuaBPVar //ScriptStruct LISlua425.INTLLuaBPVar
    {
    public:


    };

    struct FChaosHandlerSet //ScriptStruct ChaosSolverEngine.ChaosHandlerSet
    {
    //Children Prop Count (Fields): 1
    public:

        struct TSet<class UObject*> ChaosHandlers; // 0x8

    };

    struct FBreakEventCallbackWrapper //ScriptStruct ChaosSolverEngine.BreakEventCallbackWrapper
    {
    public:


    };

    struct FChaosDebugSubstepControl //ScriptStruct ChaosSolverEngine.ChaosDebugSubstepControl
    {
    //Children Prop Count (Fields): 3
    public:

        bool bPause; // 0x0
        bool bSubstep; // 0x1
        bool bStep; // 0x2

    };

    struct FChaosBreakingEventRequestSettings //ScriptStruct GeometryCollectionEngine.ChaosBreakingEventRequestSettings
    {
    //Children Prop Count (Fields): 6
    public:

        int32_t MaxNumberOfResults; // 0x0
        float MinRadius; // 0x4
        float MinSpeed; // 0x8
        float MinMass; // 0xc
        float MaxDistance; // 0x10
        enum class EChaosBreakingSortMethod SortMethod; // 0x14

    };

    struct FChaosCollisionEventRequestSettings //ScriptStruct GeometryCollectionEngine.ChaosCollisionEventRequestSettings
    {
    //Children Prop Count (Fields): 6
    public:

        int32_t MaxNumberResults; // 0x0
        float MinMass; // 0x4
        float MinSpeed; // 0x8
        float MinImpulse; // 0xc
        float MaxDistance; // 0x10
        enum class EChaosCollisionSortMethod SortMethod; // 0x14

    };

    struct FChaosTrailingEventRequestSettings //ScriptStruct GeometryCollectionEngine.ChaosTrailingEventRequestSettings
    {
    //Children Prop Count (Fields): 6
    public:

        int32_t MaxNumberOfResults; // 0x0
        float MinMass; // 0x4
        float MinSpeed; // 0x8
        float MinAngularSpeed; // 0xc
        float MaxDistance; // 0x10
        enum class EChaosTrailingSortMethod SortMethod; // 0x14

    };

    struct FGeometryCollectionDebugDrawActorSelectedRigidBody //ScriptStruct GeometryCollectionEngine.GeometryCollectionDebugDrawActorSelectedRigidBody
    {
    //Children Prop Count (Fields): 3
    public:

        int32_t ID; // 0x0
        class AChaosSolverActor* Solver; // 0x8
        class AGeometryCollectionActor* GeometryCollection; // 0x10

    };

    struct FGeometryCollectionDebugDrawWarningMessage //ScriptStruct GeometryCollectionEngine.GeometryCollectionDebugDrawWarningMessage
    {
    public:


    };

    struct FGeometryCollectionSizeSpecificData //ScriptStruct GeometryCollectionEngine.GeometryCollectionSizeSpecificData
    {
    //Children Prop Count (Fields): 10
    public:

        float MaxSize; // 0x0
        enum class ECollisionTypeEnum CollisionType; // 0x4
        enum class EImplicitTypeEnum ImplicitType; // 0x5
        int32_t MinLevelSetResolution; // 0x8
        int32_t MaxLevelSetResolution; // 0xc
        int32_t MinClusterLevelSetResolution; // 0x10
        int32_t MaxClusterLevelSetResolution; // 0x14
        int32_t CollisionObjectReductionPercentage; // 0x18
        float CollisionParticlesFraction; // 0x1c
        int32_t MaximumCollisionParticles; // 0x20

    };

    struct FGeometryCollectionSource //ScriptStruct GeometryCollectionEngine.GeometryCollectionSource
    {
    //Children Prop Count (Fields): 3
    public:

        struct FSoftObjectPath SourceGeometryObject; // 0x0
        struct FTransform LocalTransform; // 0x20
        struct TArray<class UMaterialInterface*> SourceMaterial; // 0x50

    };

    struct FRigVMParameter //ScriptStruct RigVM.RigVMParameter
    {
    //Children Prop Count (Fields): 6
    public:

        enum class ERigVMParameterType Type; // 0x0
        struct FName Name; // 0x4
        int32_t RegisterIndex; // 0xc
        struct FString CPPType; // 0x10
        class UScriptStruct* ScriptStruct; // 0x20
        struct FName ScriptStructPath; // 0x28

    };

    struct FRigVMByteCode //ScriptStruct RigVM.RigVMByteCode
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<char> ByteCode; // 0x0
        int32_t NumInstructions; // 0x10
        struct TArray<struct FRigVMByteCodeEntry> Entries; // 0x18

    };

    struct FRigVMByteCodeEntry //ScriptStruct RigVM.RigVMByteCodeEntry
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Name; // 0x0
        int32_t InstructionIndex; // 0x8

    };

    struct FRigVMInstructionArray //ScriptStruct RigVM.RigVMInstructionArray
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FRigVMInstruction> Instructions; // 0x0

    };

    struct FRigVMInstruction //ScriptStruct RigVM.RigVMInstruction
    {
    //Children Prop Count (Fields): 3
    public:

        uint64_t ByteCodeIndex; // 0x0
        enum class ERigVMOpCode OpCode; // 0x8
        char OperandAlignment; // 0x9

    };

    struct FRigVMBaseOp //ScriptStruct RigVM.RigVMBaseOp
    {
    public:


    };

    struct FRigVMUnaryOp : FRigVMBaseOp //ScriptStruct RigVM.RigVMUnaryOp
    {
    public:


    };

    struct FRigVMChangeTypeOp : FRigVMUnaryOp //ScriptStruct RigVM.RigVMChangeTypeOp
    {
    public:


    };

    struct FRigVMJumpIfOp : FRigVMUnaryOp //ScriptStruct RigVM.RigVMJumpIfOp
    {
    public:


    };

    struct FRigVMJumpOp : FRigVMBaseOp //ScriptStruct RigVM.RigVMJumpOp
    {
    public:


    };

    struct FRigVMComparisonOp : FRigVMBaseOp //ScriptStruct RigVM.RigVMComparisonOp
    {
    public:


    };

    struct FRigVMCopyOp : FRigVMBaseOp //ScriptStruct RigVM.RigVMCopyOp
    {
    public:


    };

    struct FRigVMBinaryOp : FRigVMBaseOp //ScriptStruct RigVM.RigVMBinaryOp
    {
    public:


    };

    struct FRigVMExecuteOp : FRigVMBaseOp //ScriptStruct RigVM.RigVMExecuteOp
    {
    public:


    };

    struct FRigVMSlice //ScriptStruct RigVM.RigVMSlice
    {
    public:


    };

    struct FRigVMMemoryContainer //ScriptStruct RigVM.RigVMMemoryContainer
    {
    //Children Prop Count (Fields): 8
    public:

        bool bUseNameMap; // 0x0
        enum class ERigVMMemoryType MemoryType; // 0x1
        struct TArray<struct FRigVMRegister> Registers; // 0x8
        struct TArray<struct FRigVMRegisterOffset> RegisterOffsets; // 0x18
        struct TArray<char> Data; // 0x28
        struct TArray<class UScriptStruct*> ScriptStructs; // 0x38
        struct TMap<struct FName, int32_t> NameMap; // 0x48
        bool bEncounteredErrorDuringLoad; // 0x98

    };

    struct FRigVMRegisterOffset //ScriptStruct RigVM.RigVMRegisterOffset
    {
    //Children Prop Count (Fields): 8
    public:

        struct TArray<int32_t> Segments; // 0x0
        enum class ERigVMRegisterType Type; // 0x10
        struct FName CPPType; // 0x14
        class UScriptStruct* ScriptStruct; // 0x20
        class UScriptStruct* ParentScriptStruct; // 0x28
        int32_t ArrayIndex; // 0x30
        uint16_t ElementSize; // 0x34
        struct FString CachedSegmentPath; // 0x38

    };

    struct FRigVMRegister //ScriptStruct RigVM.RigVMRegister
    {
    //Children Prop Count (Fields): 11
    public:

        enum class ERigVMRegisterType Type; // 0x0
        uint32_t ByteIndex; // 0x4
        uint16_t ElementSize; // 0x8
        uint16_t ElementCount; // 0xa
        uint16_t SliceCount; // 0xc
        char AlignmentBytes; // 0xe
        uint16_t TrailingBytes; // 0x10
        struct FName Name; // 0x14
        int32_t ScriptStructIndex; // 0x1c
        bool bIsArray; // 0x20
        bool bIsDynamic; // 0x21

    };

    struct FRigVMOperand //ScriptStruct RigVM.RigVMOperand
    {
    //Children Prop Count (Fields): 3
    public:

        enum class ERigVMMemoryType MemoryType; // 0x0
        uint16_t RegisterIndex; // 0x2
        uint16_t RegisterOffset; // 0x4

    };

    struct FRigVMStatistics //ScriptStruct RigVM.RigVMStatistics
    {
    //Children Prop Count (Fields): 6
    public:

        uint32_t BytesForCDO; // 0x0
        uint32_t BytesPerInstance; // 0x4
        struct FRigVMMemoryStatistics LiteralMemory; // 0x8
        struct FRigVMMemoryStatistics WorkMemory; // 0x14
        uint32_t BytesForCaching; // 0x20
        struct FRigVMByteCodeStatistics ByteCode; // 0x24

    };

    struct FRigVMByteCodeStatistics //ScriptStruct RigVM.RigVMByteCodeStatistics
    {
    //Children Prop Count (Fields): 2
    public:

        uint32_t InstructionCount; // 0x0
        uint32_t DataBytes; // 0x4

    };

    struct FRigVMMemoryStatistics //ScriptStruct RigVM.RigVMMemoryStatistics
    {
    //Children Prop Count (Fields): 3
    public:

        uint32_t RegisterCount; // 0x0
        uint32_t DataBytes; // 0x4
        uint32_t TotalBytes; // 0x8

    };

    struct FAIDataProviderBoolValue : FAIDataProviderTypedValue //ScriptStruct AIModule.AIDataProviderBoolValue
    {
    //Children Prop Count (Fields): 1
    public:

        bool DefaultValue; // 0x30

    };

    struct FAIDataProviderFloatValue : FAIDataProviderTypedValue //ScriptStruct AIModule.AIDataProviderFloatValue
    {
    //Children Prop Count (Fields): 1
    public:

        float DefaultValue; // 0x30

    };

    struct FAIDataProviderIntValue : FAIDataProviderTypedValue //ScriptStruct AIModule.AIDataProviderIntValue
    {
    //Children Prop Count (Fields): 1
    public:

        int32_t DefaultValue; // 0x30

    };

    struct FAIDataProviderStructValue : FAIDataProviderValue //ScriptStruct AIModule.AIDataProviderStructValue
    {
    public:


    };

    struct FActorPerceptionBlueprintInfo //ScriptStruct AIModule.ActorPerceptionBlueprintInfo
    {
    //Children Prop Count (Fields): 3
    public:

        class AActor* Target; // 0x0
        struct TArray<struct FAIStimulus> LastSensedStimuli; // 0x8
        char bIsHostile; // 0x18

    };

    struct FAISenseAffiliationFilter //ScriptStruct AIModule.AISenseAffiliationFilter
    {
    //Children Prop Count (Fields): 3
    public:

        char bDetectEnemies; // 0x0
        char bDetectNeutrals; // 0x0
        char bDetectFriendlies; // 0x0

    };

    struct FAIPredictionEvent //ScriptStruct AIModule.AIPredictionEvent
    {
    //Children Prop Count (Fields): 2
    public:

        class AActor* Requestor; // 0x0
        class AActor* PredictedActor; // 0x8

    };

    struct FAISightEvent //ScriptStruct AIModule.AISightEvent
    {
    //Children Prop Count (Fields): 2
    public:

        class AActor* SeenActor; // 0x8
        class AActor* Observer; // 0x10

    };

    struct FAITeamStimulusEvent //ScriptStruct AIModule.AITeamStimulusEvent
    {
    //Children Prop Count (Fields): 2
    public:

        class AActor* Broadcaster; // 0x28
        class AActor* Enemy; // 0x30

    };

    struct FAITouchEvent //ScriptStruct AIModule.AITouchEvent
    {
    //Children Prop Count (Fields): 2
    public:

        class AActor* TouchReceiver; // 0x10
        class AActor* OtherActor; // 0x18

    };

    struct FIntervalCountdown //ScriptStruct AIModule.IntervalCountdown
    {
    //Children Prop Count (Fields): 1
    public:

        float Interval; // 0x0

    };

    struct FBehaviorTreeTemplateInfo //ScriptStruct AIModule.BehaviorTreeTemplateInfo
    {
    //Children Prop Count (Fields): 2
    public:

        class UBehaviorTree* Asset; // 0x0
        class UBTCompositeNode* Template; // 0x8

    };

    struct FBlackboardKeySelector //ScriptStruct AIModule.BlackboardKeySelector
    {
    //Children Prop Count (Fields): 5
    public:

        struct TArray<class UBlackboardKeyType*> AllowedTypes; // 0x0
        struct FName SelectedKeyName; // 0x10
        class UBlackboardKeyType* SelectedKeyType; // 0x18
        char SelectedKeyID; // 0x20
        char bNoneIsAllowedValue; // 0x24

    };

    struct FBlackboardEntry //ScriptStruct AIModule.BlackboardEntry
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName EntryName; // 0x0
        class UBlackboardKeyType* KeyType; // 0x8
        char bInstanceSynced; // 0x10
        struct FName Category; // 0x14

    };

    struct FBTCompositeChild //ScriptStruct AIModule.BTCompositeChild
    {
    //Children Prop Count (Fields): 4
    public:

        class UBTCompositeNode* ChildComposite; // 0x0
        class UBTTaskNode* ChildTask; // 0x8
        struct TArray<class UBTDecorator*> Decorators; // 0x10
        struct TArray<struct FBTDecoratorLogic> DecoratorOps; // 0x20

    };

    struct FBTDecoratorLogic //ScriptStruct AIModule.BTDecoratorLogic
    {
    //Children Prop Count (Fields): 2
    public:

        enum class EBTDecoratorLogic Operation; // 0x0
        uint16_t Number; // 0x2

    };

    struct FCrowdAvoidanceSamplingPattern //ScriptStruct AIModule.CrowdAvoidanceSamplingPattern
    {
    //Children Prop Count (Fields): 2
    public:

        struct TArray<float> Angles; // 0x0
        struct TArray<float> Radii; // 0x10

    };

    struct FCrowdAvoidanceConfig //ScriptStruct AIModule.CrowdAvoidanceConfig
    {
    //Children Prop Count (Fields): 10
    public:

        float VelocityBias; // 0x0
        float DesiredVelocityWeight; // 0x4
        float CurrentVelocityWeight; // 0x8
        float SideBiasWeight; // 0xc
        float ImpactTimeWeight; // 0x10
        float ImpactTimeRange; // 0x14
        char CustomPatternIdx; // 0x18
        char AdaptiveDivisions; // 0x19
        char AdaptiveRings; // 0x1a
        char AdaptiveDepth; // 0x1b

    };

    struct FEnvQueryInstanceCache //ScriptStruct AIModule.EnvQueryInstanceCache
    {
    //Children Prop Count (Fields): 1
    public:

        class UEnvQuery* Template; // 0x0

    };

    struct FEnvQueryRequest //ScriptStruct AIModule.EnvQueryRequest
    {
    //Children Prop Count (Fields): 3
    public:

        class UEnvQuery* QueryTemplate; // 0x0
        class UObject* Owner; // 0x8
        class UWorld* World; // 0x10

    };

    struct FEQSParametrizedQueryExecutionRequest //ScriptStruct AIModule.EQSParametrizedQueryExecutionRequest
    {
    //Children Prop Count (Fields): 5
    public:

        class UEnvQuery* QueryTemplate; // 0x0
        struct TArray<struct FAIDynamicParam> QueryConfig; // 0x8
        struct FBlackboardKeySelector EQSQueryBlackboardKey; // 0x18
        enum class EEnvQueryRunMode RunMode; // 0x40
        char bUseBBKeyForQueryTemplate; // 0x44

    };

    struct FAIDynamicParam //ScriptStruct AIModule.AIDynamicParam
    {
    //Children Prop Count (Fields): 4
    public:

        struct FName ParamName; // 0x0
        enum class EAIParamType ParamType; // 0x8
        float Value; // 0xc
        struct FBlackboardKeySelector BBKey; // 0x10

    };

    struct FEnvQueryResult //ScriptStruct AIModule.EnvQueryResult
    {
    //Children Prop Count (Fields): 3
    public:

        class UEnvQueryItemType* ItemType; // 0x10
        int32_t OptionIndex; // 0x2c
        int32_t QueryID; // 0x30

    };

    struct FEnvOverlapData //ScriptStruct AIModule.EnvOverlapData
    {
    //Children Prop Count (Fields): 9
    public:

        float ExtentX; // 0x0
        float ExtentY; // 0x4
        float ExtentZ; // 0x8
        struct FVector ShapeOffset; // 0xc
        enum class ECollisionChannel OverlapChannel; // 0x18
        enum class EEnvOverlapShape OverlapShape; // 0x19
        char bOnlyBlockingHits; // 0x1c
        char bOverlapComplex; // 0x1c
        char bSkipOverlapQuerier; // 0x1c

    };

    struct FEnvTraceData //ScriptStruct AIModule.EnvTraceData
    {
    //Children Prop Count (Fields): 18
    public:

        int32_t VersionNum; // 0x0
        class UNavigationQueryFilter* NavigationFilter; // 0x8
        float ProjectDown; // 0x10
        float ProjectUp; // 0x14
        float ExtentX; // 0x18
        float ExtentY; // 0x1c
        float ExtentZ; // 0x20
        float PostProjectionVerticalOffset; // 0x24
        enum class ETraceTypeQuery TraceChannel; // 0x28
        enum class ECollisionChannel SerializedChannel; // 0x29
        enum class EEnvTraceShape TraceShape; // 0x2a
        enum class EEnvQueryTrace TraceMode; // 0x2b
        char bTraceComplex; // 0x2c
        char bOnlyBlockingHits; // 0x2c
        char bCanTraceOnNavMesh; // 0x2c
        char bCanTraceOnGeometry; // 0x2c
        char bCanDisableTrace; // 0x2c
        char bCanProjectDown; // 0x2c

    };

    struct FEnvDirection //ScriptStruct AIModule.EnvDirection
    {
    //Children Prop Count (Fields): 4
    public:

        class UEnvQueryContext* LineFrom; // 0x0
        class UEnvQueryContext* LineTo; // 0x8
        class UEnvQueryContext* Rotation; // 0x10
        enum class EEnvDirection DirMode; // 0x18

    };

    struct FEnvNamedValue //ScriptStruct AIModule.EnvNamedValue
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName ParamName; // 0x0
        enum class EAIParamType ParamType; // 0x8
        float Value; // 0xc

    };

    struct FGenericTeamId //ScriptStruct AIModule.GenericTeamId
    {
    //Children Prop Count (Fields): 1
    public:

        char TeamID; // 0x0

    };

    struct FPawnActionStack //ScriptStruct AIModule.PawnActionStack
    {
    //Children Prop Count (Fields): 1
    public:

        class UPawnAction* TopAction; // 0x0

    };

    struct FPawnActionEvent //ScriptStruct AIModule.PawnActionEvent
    {
    //Children Prop Count (Fields): 1
    public:

        class UPawnAction* Action; // 0x0

    };

    struct FPropertyCollector //ScriptStruct UnLua.PropertyCollector
    {
    //Children Prop Count (Fields): 14
    public:

        struct FSGGridOccupyInfo None; // 0x0
        struct FSlateColor None; // 0x0
        class AActor* None; // 0x0
        struct FQuestReplicateData None; // 0x0
        struct FMFMissionFlowReplicateData None; // 0x0
        struct FTeamPlayerOrderInfo None; // 0x0
        class ASGInventory* None; // 0x0
        struct FTraceableActorInfo None; // 0x0
        int32_t None; // 0x0
        struct FSGAvatarData None; // 0x0
        struct FInputAxisKeyMapping None; // 0x0
        struct FInputActionKeyMapping None; // 0x0
        class USGPlayerItemInfoBase* None; // 0x0
        struct FString None; // 0x0

    };

    struct FDefault__UserDefinedStruct //UserDefinedStruct Engine.Default__UserDefinedStruct
    {
    public:


    };

    struct FDefault__AISenseBlueprintListener //AISenseBlueprintListener AIModule.Default__AISenseBlueprintListener
    {
    public:


    };

    struct FF_UamStartPointGroup //UserDefinedStruct F_UamStartPointGroup.F_UamStartPointGroup
    {
    //Children Prop Count (Fields): 5
    public:

        int32_t GroupIndex_2_4A247C68466A262137E1BAB2BD1335E5; // 0x0
        enum class E_UamPlayerStartPointType PointType_18_3624764741E45EDCC2DA14A6D3B50969; // 0x4
        struct TArray<class ASGPlayerStart*> StartPoints_7_7C7B2003454C45E4AF15AABAB95972AC; // 0x8
        int32_t TeamIndex_11_EB40A2F64C209585ADF55E84A31CD456; // 0x18
        struct TArray<class ASGPlayerStart*> UsedStartPoints_15_F54A4A8E4B2AB6AF938EC79C22B99066; // 0x20

    };

    struct FSelfSoundVisualItem //UserDefinedStruct SelfSoundVisualItem.SelfSoundVisualItem
    {
    //Children Prop Count (Fields): 2
    public:

        float SoundLevel_24_E767C84742E319FF3821BF9A627DE069; // 0x0
        float Duration_27_A2A9DF1E4E494C1D446EFF9F1075D8E1; // 0x4

    };

    struct FStruct_GroupQuestInfo //UserDefinedStruct Struct_GroupQuestInfo.Struct_GroupQuestInfo
    {
    //Children Prop Count (Fields): 7
    public:

        class AActor* Initiator_2_41DB8F7E4FD1A91E19C9168B06F35897; // 0x0
        class AActor* Subordinate_21_8A8E0C4A444071CB3FCE7991B58AC758; // 0x8
        class AActor* Victim_8_0DB5E8694F7CD9678FBFE5AEC35CB96D; // 0x10
        enum class ENPCAIDecision QuestDecision_5_E0256A2F45B4C645BD0C07954B0CD7EC; // 0x18
        float StaringTime_11_6087422B4F607F8DFC10309B7FC38F3C; // 0x1c
        float EffectiveTime_13_97FD75244F2F7B786499279C0FBE8AD5; // 0x20
        class UWildCardArgs_C* Args_19_EA676FE1419D305EFD20308B7F626BB8; // 0x28

    };

    struct FStruct_BattleTestEquipmentRow //UserDefinedStruct Struct_BattleTestEquipmentRow.Struct_BattleTestEquipmentRow
    {
    //Children Prop Count (Fields): 1
    public:

        struct TMap<int64_t, int32_t> Equipment_112_3C501EFD40DA59D338E494AAF4BFA4E5; // 0x0

    };

    struct FAreaRecInfo //UserDefinedStruct AreaRecInfo.AreaRecInfo
    {
    //Children Prop Count (Fields): 6
    public:

        int32_t UID_21_A20EEC7D46489C0A7F7123A9694FAA96; // 0x0
        struct FVector4 RecPos_2_E1F74EDC4D1D515E6FDB7195606BD8F8; // 0x10
        enum class AreaRecType AreaRecType_18_FBEAAF434CF98292DAE5AB97AE4F28C8; // 0x20
        int32_t MaxPlayer_11_DBA6E03741D10124C95220B63C95F48F; // 0x24
        int32_t CurrentPlayer_12_FCD231854F33C65CC82F6B93C046EBA5; // 0x28
        struct TArray<struct TSoftObjectPtr<AActor>> SpawnPoint_22_9BD64EA543C7C62236720584D660642A; // 0x30

    };

    struct FStruct_AISoundEventTable //UserDefinedStruct Struct_AISoundEventTable.Struct_AISoundEventTable
    {
    //Children Prop Count (Fields): 1
    public:

        class UAkAudioEvent* AkEvent_14_B7AFC9E844F0AFD023C725B282F31265; // 0x0

    };

    struct FPathNodeGroupInfo //UserDefinedStruct PathNodeGroupInfo.PathNodeGroupInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct TArray<class ASGAIPathNode*> PathNodes_3_275C6F4B42E73196DD112D8BF96D23C6; // 0x0
        struct TArray<class ASGAISpawnPoint*> ScavSpawnPoints_12_29A3F5934E8611A563126E98A79DF9EF; // 0x10
        class AVolume* BattleVolumes_22_4C6FBE334CE6C1928C10D9A231F0EFE1; // 0x20

    };

    struct FScavInfoForPathNodeGroup //UserDefinedStruct ScavInfoForPathNodeGroup.ScavInfoForPathNodeGroup
    {
    //Children Prop Count (Fields): 3
    public:

        class ASGAICharacter* ScavPawn_20_275C6F4B42E73196DD112D8BF96D23C6; // 0x0
        struct FString AreaName_22_29A3F5934E8611A563126E98A79DF9EF; // 0x8
        class ASGAIPathNode* CurrentPathNode_19_341896C544AADBEB66ABE491F009DB37; // 0x18

    };

    struct FStruc_BossFreePathPointArray //UserDefinedStruct Struc_BossFreePathPointArray.Struc_BossFreePathPointArray
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class ASGAIPathNode*> FreePathPoints_3_E22F81E3403AF1641725BAB371729F24; // 0x0

    };

    struct FStruct_ActorSet //UserDefinedStruct Struct_ActorSet.Struct_ActorSet
    {
    //Children Prop Count (Fields): 1
    public:

        struct TSet<class AActor*> Actors_109_3C501EFD40DA59D338E494AAF4BFA4E5; // 0x0

    };

    struct FStruct_AIPositionEndurance //UserDefinedStruct Struct_AIPositionEndurance.Struct_AIPositionEndurance
    {
    //Children Prop Count (Fields): 7
    public:

        float HeadEndurance_8_2749B20C44A1C7928BC09DAEC8840CAD; // 0x0
        float ChestEndurance_16_D304A1FC4B19A05C924DEAA72223F3C6; // 0x4
        float StomachEndurance_10_806533094F78141150A5288BF52C1142; // 0x8
        float LeftArmEndurance_11_A218B57B4063735773A41BA7923B3A4B; // 0xc
        float RightArmEndurance_12_117D15A64C4EE6C0E416888B06FED4F1; // 0x10
        float LeftLegEndurance_14_C69360D44EFBCDFD730731B79526EFFC; // 0x14
        float RightLegEndurance_15_AE97FC234119305186C5AA9713648207; // 0x18

    };

    struct FStruct_AISoundEventRep //UserDefinedStruct Struct_AISoundEventRep.Struct_AISoundEventRep
    {
    //Children Prop Count (Fields): 2
    public:

        struct TSoftObjectPtr<UAkAudioEvent> AkEvent_18_B7AFC9E844F0AFD023C725B282F31265; // 0x0
        int32_t EventCounter_17_5BF762134B56F8F5717A3BBCF6423FED; // 0x28

    };

    struct FBP_WeatherDesc //UserDefinedStruct BP_WeatherDesc.BP_WeatherDesc
    {
    //Children Prop Count (Fields): 2
    public:

        struct FName Name_2_9C2A4904451FE070437A37B35271EA0B; // 0x0
        struct TArray<float> Weights_6_42B8456749EEB0336B692599E8726515; // 0x8

    };

    struct FF_DenyListItem //UserDefinedStruct F_DenyListItem.F_DenyListItem
    {
    //Children Prop Count (Fields): 2
    public:

        float TimeCode_4_A1BBDC5048E2D289D85483928F7F77EC; // 0x0
        class UNPCAIGroupBaseRequest* Item_7_13599879468C198FCE1177877D8356F7; // 0x8

    };

    struct FStruct_AIGroupInfo //UserDefinedStruct Struct_AIGroupInfo.Struct_AIGroupInfo
    {
    //Children Prop Count (Fields): 3
    public:

        struct FName AIID_117_CA148A774D8CB2CD9E91F19B91628E10; // 0x0
        int32_t EquipID_115_EE844A274219CA778D5EE5BBA15DA1E9; // 0x8
        int32_t Count_116_FA75E2B04D7C03F59F63369972E04A17; // 0xc

    };

    struct FStruct_ScavWaveInfo //UserDefinedStruct Struct_ScavWaveInfo.Struct_ScavWaveInfo
    {
    //Children Prop Count (Fields): 5
    public:

        float Probability_3_4B3F2F464A5114756A68108B0A47A4F2; // 0x0
        int32_t MinCount_5_E29E885348F33010AC3BA1BA7E78DF74; // 0x4
        int32_t MaxCount_7_54081B3B4E63DB5F160DBDB6CC348BD4; // 0x8
        float MinInterval_12_CEC6030747B9C530B14194BEE05553A6; // 0xc
        float MaxInterval_13_B5DCF60E45E0E46633AD78BF1A2919BA; // 0x10

    };

    struct FStruct_HighOutput_GroupActorInfo //UserDefinedStruct Struct_HighOutput_GroupActorInfo.Struct_HighOutput_GroupActorInfo
    {
    //Children Prop Count (Fields): 4
    public:

        class ACharacter* DefaultTarget_8_06C4268E4113139CF6326C8807C757A7; // 0x0
        struct TSet<int32_t> Warzone_7_CA8F881B422EE140117152A4E24BFDD6; // 0x8
        class ASGInventory* DeathBox_11_CFCC572045FAC3BD08103BA9FC77D215; // 0x58
        float DeathTime_15_CEE2BF5540FBF97749F5CF8E36382584; // 0x60

    };

    struct FStruct_AIGroupType //UserDefinedStruct Struct_AIGroupType.Struct_AIGroupType
    {
    //Children Prop Count (Fields): 9
    public:

        float Offset_Tendency_155_8B541991470B9AF8E91B80A62BA97B71; // 0x0
        float Offset_Perceive_156_08A9D7CE48C77AC65CC3FA8A1F134FD2; // 0x4
        float Lock_Tendency_143_7D388CE44F3E5E131405C9991BC15A11; // 0x8
        float Lock_Perceive_144_CF59817148D48D4D4588A4A1EAD1954A; // 0xc
        struct TSet<enum class ENPCAIDecision> HighValue_Actions_152_D2EF1CC849E01CBC6FD356B0E0A68E41; // 0x10
        enum class ENPCAIDecision MustDo_Action_154_11E0DBA94E0844E1C1D410B7DF589BD1; // 0x60
        float AllyDead_ChangeTendency_127_EE844A274219CA778D5EE5BBA15DA1E9; // 0x64
        float AllyDead_ChangePerceive_128_FA75E2B04D7C03F59F63369972E04A17; // 0x68
        enum class ENPCAIDecision AllyDead_ChangeDecision_125_6FE001284D5ED6944A59389B52B169FC; // 0x6c

    };

    struct FStruct_Pressure_Relation //UserDefinedStruct Struct_Pressure_Relation.Struct_Pressure_Relation
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<bool> Member_3_BE4070C8408A80179D5E72BFACDF67CC; // 0x0

    };

    struct FStruct_Pressure_TeamMember_Info //UserDefinedStruct Struct_Pressure_TeamMember_Info.Struct_Pressure_TeamMember_Info
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<class ASGCharacter*> Member_10_128AD410478B97484635208B5D517833; // 0x0

    };

    struct FStruct_Pressure_TeamMemberRelation //UserDefinedStruct Struct_Pressure_TeamMemberRelation.Struct_Pressure_TeamMemberRelation
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FStruct_Pressure_Relation> Member_3_B5E49BC4485B4F477E2D76B17021D27C; // 0x0

    };

    struct FStruct_SquadRnfNRtrtInfo //UserDefinedStruct Struct_SquadRnfNRtrtInfo.Struct_SquadRnfNRtrtInfo
    {
    //Children Prop Count (Fields): 2
    public:

        int32_t Count_3_EBF2577948628CFA7F2D3E9241C774C0; // 0x0
        float Weight_6_B19EC68C4190A5F08D02B994965C571F; // 0x4

    };

    struct FStruct_SquadRnfNRtrtInfoArray //UserDefinedStruct Struct_SquadRnfNRtrtInfoArray.Struct_SquadRnfNRtrtInfoArray
    {
    //Children Prop Count (Fields): 1
    public:

        struct TArray<struct FStruct_SquadRnfNRtrtInfo> SquadRnfNRtrtInfos_11_B19EC68C4190A5F08D02B994965C571F; // 0x0

    };

    struct FStruct_CustomColorSetting //UserDefinedStruct Struct_CustomColorSetting.Struct_CustomColorSetting
    {
    //Children Prop Count (Fields): 3
    public:

        float MinValue_2_E4C12DA24A26EF5F8C306B8494F11C7C; // 0x0
        float MaxValue_4_70C1EDAD411805DAF65742ABCA0158C9; // 0x4
        struct FLinearColor CustomColor_7_0712698E4EF289856ADAF9AB47BDE9A8; // 0x8

    };

    struct FStruct_ThrownInidcatorData //UserDefinedStruct Struct_ThrownInidcatorData.Struct_ThrownInidcatorData
    {
    //Children Prop Count (Fields): 10
    public:

        struct FString ThrowableWeaponName_31_029F49424B2D9D1D797745AEBAE89CA4; // 0x0
        float ShowUIDistance_2_367E23EC425CB0CC48BAA28BE02615DD; // 0x10
        float WarningDistance_4_6723783F4776CD632D1A5F8CBD039E72; // 0x14
        class UPaperSprite* IconNormal_9_652404FC4E846DB9AF7FE0B0F61616CD; // 0x18
        class UPaperSprite* IconWarning_20_ACBD8771455E6621FF6D0E907390BD49; // 0x20
        bool NeedShowUI_12_EE7EC6BA4D12DF7924C761A21453BE31; // 0x28
        bool NeedWarning_21_D823D93B4E38B6C5BE8DDEA0B3B27F4F; // 0x29
        struct FLinearColor ArrowWaringColor_22_717DED7C4264441657607CA57F015CDB; // 0x2c
        class UCurveFloat* ShinningCurve_26_E5E5B04343C07F2911BCC19EB632C1EF; // 0x40
        bool NeedShinning_28_F78AC2F549E65484F85FD1933483ED9F; // 0x48

    };


}